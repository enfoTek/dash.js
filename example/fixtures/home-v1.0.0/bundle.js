// source: node_modules/daisho-sdk/lib/index.js
require.define('daisho-sdk/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Page: require('daisho-sdk/lib/page'),
    Module: require('daisho-sdk/lib/module')
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-sdk/lib/page.js
require.define('daisho-sdk/lib/page', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Page;
  module.exports = Page = function () {
    Page.prototype.el = null;
    Page.prototype.module = null;
    function Page(el, module1) {
      this.el = el;
      this.module = module1
    }
    Page.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    Page.prototype.render = function () {
    };
    Page.prototype.unload = function () {
    };
    Page.prototype.annotations = function () {
    };
    return Page
  }()  //# sourceMappingURL=page.js.map
});
// source: node_modules/daisho-sdk/lib/module.js
require.define('daisho-sdk/lib/module', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Module;
  module.exports = Module = function () {
    Module.prototype.json = null;
    function Module() {
    }
    Module.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    Module.prototype.unload = function () {
    };
    return Module
  }()  //# sourceMappingURL=module.js.map
});
// source: node_modules/daisho-riot/lib/index.js
require.define('daisho-riot/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Controls;
  Controls = require('daisho-riot/lib/controls');
  module.exports = {
    RiotPage: require('daisho-riot/lib/page'),
    Events: require('daisho-riot/lib/events'),
    Controls: require('daisho-riot/lib/controls'),
    Forms: require('daisho-riot/lib/forms'),
    Widgets: require('daisho-riot/lib/widgets'),
    register: function () {
      this.Controls.register();
      this.Forms.register();
      return this.Widgets.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/controls/index.js
require.define('daisho-riot/lib/controls', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Control: require('daisho-riot/lib/controls/control'),
    Text: require('daisho-riot/lib/controls/text'),
    register: function (m) {
      return this.Text.register(m)
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/controls/control.js
require.define('daisho-riot/lib/controls/control', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, CrowdControl, Events, riot, scrolling, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  Events = require('daisho-riot/lib/events');
  riot = require('riot/riot');
  scrolling = false;
  module.exports = Control = function (superClass) {
    extend(Control, superClass);
    function Control() {
      return Control.__super__.constructor.apply(this, arguments)
    }
    Control.prototype.init = function () {
      if (this.input == null && this.inputs != null) {
        this.input = this.inputs[this.lookup]
      }
      if (this.input != null) {
        return Control.__super__.init.apply(this, arguments)
      }
    };
    Control.prototype.getValue = function (event) {
      var ref;
      return (ref = $(event.target).val()) != null ? ref.trim() : void 0
    };
    Control.prototype.error = function (err) {
      var ref;
      if (err instanceof DOMException) {
        console.log('WARNING: Error in riot dom manipulation ignored.', err);
        return
      }
      Control.__super__.error.apply(this, arguments);
      if (!scrolling) {
        scrolling = true;
        $('html, body').animate({ scrollTop: $(this.root).offset().top - $(window).height() / 2 }, {
          complete: function () {
            return scrolling = false
          },
          duration: 500
        })
      }
      return (ref = this.m) != null ? ref.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name)) : void 0
    };
    Control.prototype.change = function () {
      var ref;
      Control.__super__.change.apply(this, arguments);
      return (ref = this.m) != null ? ref.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name)) : void 0
    };
    Control.prototype.changed = function (value) {
      var ref;
      if ((ref = this.m) != null) {
        ref.trigger(Events.ChangeSuccess, this.input.name, value)
      }
      return riot.update()
    };
    Control.register = function (m) {
      var v;
      v = Control.__super__.constructor.register.call(this);
      return v.m = m
    };
    return Control
  }(CrowdControl.Views.Input)  //# sourceMappingURL=control.js.map
});
// source: node_modules/crowdcontrol/lib/index.js
require.define('crowdcontrol/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, r, riot;
  r = require('crowdcontrol/lib/riot');
  riot = r();
  CrowdControl = {
    Views: require('crowdcontrol/lib/views'),
    tags: [],
    start: function (opts) {
      return this.tags = riot.mount('*', opts)
    },
    update: function () {
      var i, len, ref, results, tag;
      ref = this.tags;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        results.push(tag.update())
      }
      return results
    },
    riot: r
  };
  if (module.exports != null) {
    module.exports = CrowdControl
  }
  if (typeof window !== 'undefined' && window !== null) {
    if (window.Crowdstart != null) {
      window.Crowdstart.Crowdcontrol = CrowdControl
    } else {
      window.Crowdstart = { CrowdControl: CrowdControl }
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/crowdcontrol/lib/riot.js
require.define('crowdcontrol/lib/riot', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var r;
  r = function () {
    return this.riot
  };
  r.set = function (riot) {
    this.riot = riot
  };
  r.riot = typeof window !== 'undefined' && window !== null ? window.riot : void 0;
  module.exports = r  //# sourceMappingURL=riot.js.map
});
// source: node_modules/crowdcontrol/lib/views/index.js
require.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Form: require('crowdcontrol/lib/views/form'),
    Input: require('crowdcontrol/lib/views/input'),
    View: require('crowdcontrol/lib/views/view')
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/crowdcontrol/lib/views/form.js
require.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib/views/view');
  inputify = require('crowdcontrol/lib/views/inputify');
  observable = require('crowdcontrol/lib/riot')().observable;
  Promise = require('broken/lib');
  settle = require('promise-settle');
  Form = function (superClass) {
    extend(Form, superClass);
    function Form() {
      return Form.__super__.constructor.apply(this, arguments)
    }
    Form.prototype.configs = null;
    Form.prototype.inputs = null;
    Form.prototype.data = null;
    Form.prototype.initInputs = function () {
      var input, name, ref, results1;
      this.inputs = {};
      if (this.configs != null) {
        this.inputs = inputify(this.data, this.configs);
        ref = this.inputs;
        results1 = [];
        for (name in ref) {
          input = ref[name];
          results1.push(observable(input))
        }
        return results1
      }
    };
    Form.prototype.init = function () {
      return this.initInputs()
    };
    Form.prototype.submit = function () {
      var input, name, pRef, ps, ref;
      ps = [];
      ref = this.inputs;
      for (name in ref) {
        input = ref[name];
        pRef = {};
        input.trigger('validate', pRef);
        ps.push(pRef.p)
      }
      return settle(ps).then(function (_this) {
        return function (results) {
          var i, len, result;
          for (i = 0, len = results.length; i < len; i++) {
            result = results[i];
            if (!result.isFulfilled()) {
              return
            }
          }
          return _this._submit.apply(_this, arguments)
        }
      }(this))
    };
    Form.prototype._submit = function () {
    };
    return Form
  }(View);
  module.exports = Form  //# sourceMappingURL=form.js.map
});
// source: node_modules/crowdcontrol/lib/views/view.js
require.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
  riot = require('crowdcontrol/lib/riot')();
  objectAssign = require('object-assign');
  setPrototypeOf = function () {
    var mixinProperties, setProtoOf;
    setProtoOf = function (obj, proto) {
      return obj.__proto__ = proto
    };
    mixinProperties = function (obj, proto) {
      var prop, results;
      results = [];
      for (prop in proto) {
        if (obj[prop] == null) {
          results.push(obj[prop] = proto[prop])
        } else {
          results.push(void 0)
        }
      }
      return results
    };
    if (Object.setPrototypeOf || { __proto__: [] } instanceof Array) {
      return setProtoOf
    } else {
      return mixinProperties
    }
  }();
  isFunction = require('is-function');
  collapsePrototype = function (collapse, proto) {
    var parentProto;
    if (proto === View.prototype) {
      return
    }
    parentProto = Object.getPrototypeOf(proto);
    collapsePrototype(collapse, parentProto);
    return objectAssign(collapse, parentProto)
  };
  View = function () {
    View.register = function () {
      return new this
    };
    View.prototype.tag = '';
    View.prototype.html = '';
    View.prototype.css = '';
    View.prototype.attrs = '';
    View.prototype.events = null;
    function View() {
      var newProto;
      newProto = collapsePrototype({}, this);
      this.beforeInit();
      riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
        var fn, handler, k, name, parent, proto, ref, self, v;
        if (newProto != null) {
          for (k in newProto) {
            v = newProto[k];
            if (isFunction(v)) {
              (function (_this) {
                return function (v) {
                  var oldFn;
                  if (_this[k] != null) {
                    oldFn = _this[k];
                    return _this[k] = function () {
                      oldFn.apply(_this, arguments);
                      return v.apply(_this, arguments)
                    }
                  } else {
                    return _this[k] = function () {
                      return v.apply(_this, arguments)
                    }
                  }
                }
              }(this)(v))
            } else {
              this[k] = v
            }
          }
        }
        self = this;
        parent = self.parent;
        proto = Object.getPrototypeOf(self);
        while (parent != null && parent !== proto) {
          setPrototypeOf(self, parent);
          self = parent;
          parent = self.parent;
          proto = Object.getPrototypeOf(self)
        }
        if (opts != null) {
          for (k in opts) {
            v = opts[k];
            this[k] = v
          }
        }
        if (this.events != null) {
          ref = this.events;
          fn = function (_this) {
            return function (name, handler) {
              if (typeof handler === 'string') {
                return _this.on(name, function () {
                  return _this[handler].apply(_this, arguments)
                })
              } else {
                return _this.on(name, function () {
                  return handler.apply(_this, arguments)
                })
              }
            }
          }(this);
          for (name in ref) {
            handler = ref[name];
            fn(name, handler)
          }
        }
        return this.init(opts)
      })
    }
    View.prototype.beforeInit = function () {
    };
    View.prototype.init = function () {
    };
    return View
  }();
  module.exports = View  //# sourceMappingURL=view.js.map
});
// source: node_modules/object-assign/index.js
require.define('object-assign', function (module, exports, __dirname, __filename, process) {
  /* eslint-disable no-unused-vars */
  'use strict';
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined')
    }
    return Object(val)
  }
  module.exports = Object.assign || function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key]
        }
      }
      if (Object.getOwnPropertySymbols) {
        symbols = Object.getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]]
          }
        }
      }
    }
    return to
  }
});
// source: node_modules/is-function/index.js
require.define('is-function', function (module, exports, __dirname, __filename, process) {
  module.exports = isFunction;
  var toString = Object.prototype.toString;
  function isFunction(fn) {
    var string = toString.call(fn);
    return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
  }
  ;
});
// source: node_modules/crowdcontrol/lib/views/inputify.js
require.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Promise, inputify, isFunction, isRef, refer;
  Promise = require('broken/lib');
  isFunction = require('is-function');
  refer = require('referential/lib');
  isRef = function (o) {
    return o != null && isFunction(o.ref)
  };
  inputify = function (data, configs) {
    var config, fn, inputs, name, ref;
    ref = data;
    if (!isRef(ref)) {
      ref = refer(data)
    }
    inputs = {};
    fn = function (name, config) {
      var fn1, i, input, len, middleware, middlewareFn, validate;
      middleware = [];
      if (config && config.length > 0) {
        fn1 = function (name, middlewareFn) {
          return middleware.push(function (pair) {
            ref = pair[0], name = pair[1];
            return Promise.resolve(pair).then(function (pair) {
              return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
            }).then(function (v) {
              ref.set(name, v);
              return pair
            })
          })
        };
        for (i = 0, len = config.length; i < len; i++) {
          middlewareFn = config[i];
          fn1(name, middlewareFn)
        }
      }
      middleware.push(function (pair) {
        ref = pair[0], name = pair[1];
        return Promise.resolve(ref.get(name))
      });
      validate = function (ref, name) {
        var j, len1, p;
        p = Promise.resolve([
          ref,
          name
        ]);
        for (j = 0, len1 = middleware.length; j < len1; j++) {
          middlewareFn = middleware[j];
          p = p.then(middlewareFn)
        }
        return p
      };
      input = {
        name: name,
        ref: ref,
        config: config,
        validate: validate
      };
      return inputs[name] = input
    };
    for (name in configs) {
      config = configs[name];
      fn(name, config)
    }
    return inputs
  };
  module.exports = inputify  //# sourceMappingURL=inputify.js.map
});
// source: node_modules/broken/lib/index.js
require.define('broken/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Promise, PromiseInspection;
  Promise = require('zousan/zousan-min');
  Promise.suppressUncaughtRejectionError = false;
  PromiseInspection = function () {
    function PromiseInspection(arg) {
      this.state = arg.state, this.value = arg.value, this.reason = arg.reason
    }
    PromiseInspection.prototype.isFulfilled = function () {
      return this.state === 'fulfilled'
    };
    PromiseInspection.prototype.isRejected = function () {
      return this.state === 'rejected'
    };
    return PromiseInspection
  }();
  Promise.reflect = function (promise) {
    return new Promise(function (resolve, reject) {
      return promise.then(function (value) {
        return resolve(new PromiseInspection({
          state: 'fulfilled',
          value: value
        }))
      })['catch'](function (err) {
        return resolve(new PromiseInspection({
          state: 'rejected',
          reason: err
        }))
      })
    })
  };
  Promise.settle = function (promises) {
    return Promise.all(promises.map(Promise.reflect))
  };
  Promise.prototype.callback = function (cb) {
    if (typeof cb === 'function') {
      this.then(function (value) {
        return cb(null, value)
      });
      this['catch'](function (error) {
        return cb(error, null)
      })
    }
    return this
  };
  module.exports = Promise  //# sourceMappingURL=index.js.map
});
// source: node_modules/zousan/zousan-min.js
require.define('zousan/zousan-min', function (module, exports, __dirname, __filename, process) {
  !function (t) {
    'use strict';
    function e(t) {
      if (t) {
        var e = this;
        t(function (t) {
          e.resolve(t)
        }, function (t) {
          e.reject(t)
        })
      }
    }
    function n(t, e) {
      if ('function' == typeof t.y)
        try {
          var n = t.y.call(i, e);
          t.p.resolve(n)
        } catch (o) {
          t.p.reject(o)
        }
      else
        t.p.resolve(e)
    }
    function o(t, e) {
      if ('function' == typeof t.n)
        try {
          var n = t.n.call(i, e);
          t.p.resolve(n)
        } catch (o) {
          t.p.reject(o)
        }
      else
        t.p.reject(e)
    }
    var r, i, c = 'fulfilled', u = 'rejected', s = 'undefined', f = function () {
        function t() {
          for (; e.length - n;)
            e[n](), e[n++] = i, n == o && (e.splice(0, o), n = 0)
        }
        var e = [], n = 0, o = 1024, r = function () {
            if (typeof MutationObserver !== s) {
              var e = document.createElement('div'), n = new MutationObserver(t);
              return n.observe(e, { attributes: !0 }), function () {
                e.setAttribute('a', 0)
              }
            }
            return typeof setImmediate !== s ? function () {
              setImmediate(t)
            } : function () {
              setTimeout(t, 0)
            }
          }();
        return function (t) {
          e.push(t), e.length - n == 1 && r()
        }
      }();
    e.prototype = {
      resolve: function (t) {
        if (this.state === r) {
          if (t === this)
            return this.reject(new TypeError('Attempt to resolve promise with self'));
          var e = this;
          if (t && ('function' == typeof t || 'object' == typeof t))
            try {
              var o = !0, i = t.then;
              if ('function' == typeof i)
                return void i.call(t, function (t) {
                  o && (o = !1, e.resolve(t))
                }, function (t) {
                  o && (o = !1, e.reject(t))
                })
            } catch (u) {
              return void (o && this.reject(u))
            }
          this.state = c, this.v = t, e.c && f(function () {
            for (var o = 0, r = e.c.length; r > o; o++)
              n(e.c[o], t)
          })
        }
      },
      reject: function (t) {
        if (this.state === r) {
          this.state = u, this.v = t;
          var n = this.c;
          n ? f(function () {
            for (var e = 0, r = n.length; r > e; e++)
              o(n[e], t)
          }) : e.suppressUncaughtRejectionError || console.log('You upset Zousan. Please catch rejections: ', t, t.stack)
        }
      },
      then: function (t, i) {
        var u = new e, s = {
            y: t,
            n: i,
            p: u
          };
        if (this.state === r)
          this.c ? this.c.push(s) : this.c = [s];
        else {
          var l = this.state, a = this.v;
          f(function () {
            l === c ? n(s, a) : o(s, a)
          })
        }
        return u
      },
      'catch': function (t) {
        return this.then(null, t)
      },
      'finally': function (t) {
        return this.then(t, t)
      },
      timeout: function (t, n) {
        n = n || 'Timeout';
        var o = this;
        return new e(function (e, r) {
          setTimeout(function () {
            r(Error(n))
          }, t), o.then(function (t) {
            e(t)
          }, function (t) {
            r(t)
          })
        })
      }
    }, e.resolve = function (t) {
      var n = new e;
      return n.resolve(t), n
    }, e.reject = function (t) {
      var n = new e;
      return n.reject(t), n
    }, e.all = function (t) {
      function n(n, c) {
        'function' != typeof n.then && (n = e.resolve(n)), n.then(function (e) {
          o[c] = e, r++, r == t.length && i.resolve(o)
        }, function (t) {
          i.reject(t)
        })
      }
      for (var o = [], r = 0, i = new e, c = 0; c < t.length; c++)
        n(t[c], c);
      return t.length || i.resolve(o), i
    }, typeof module != s && module.exports && (module.exports = e), t.Zousan = e, e.soon = f
  }('undefined' != typeof global ? global : this)
});
// source: node_modules/referential/lib/index.js
require.define('referential/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var refer;
  refer = require('referential/lib/refer');
  refer.Ref = require('referential/lib/ref');
  module.exports = refer  //# sourceMappingURL=index.js.map
});
// source: node_modules/referential/lib/refer.js
require.define('referential/lib/refer', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Ref, refer;
  Ref = require('referential/lib/ref');
  module.exports = refer = function (state, ref) {
    var fn, i, len, method, ref1, wrapper;
    if (ref == null) {
      ref = null
    }
    if (ref == null) {
      ref = new Ref(state)
    }
    wrapper = function (key) {
      return ref.get(key)
    };
    ref1 = [
      'value',
      'get',
      'set',
      'extend',
      'index',
      'ref'
    ];
    fn = function (method) {
      return wrapper[method] = function () {
        return ref[method].apply(ref, arguments)
      }
    };
    for (i = 0, len = ref1.length; i < len; i++) {
      method = ref1[i];
      fn(method)
    }
    wrapper.refer = function (key) {
      return refer(null, ref.ref(key))
    };
    wrapper.clone = function (key) {
      return refer(null, ref.clone(key))
    };
    return wrapper
  }  //# sourceMappingURL=refer.js.map
});
// source: node_modules/referential/lib/ref.js
require.define('referential/lib/ref', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Ref, extend, isArray, isNumber, isObject, isString;
  extend = require('node.extend');
  isArray = require('is-array');
  isNumber = require('is-number');
  isObject = require('is-object');
  isString = require('is-string');
  module.exports = Ref = function () {
    function Ref(_value, parent, key1) {
      this._value = _value;
      this.parent = parent;
      this.key = key1;
      this._cache = {}
    }
    Ref.prototype._mutate = function () {
      return this._cache = {}
    };
    Ref.prototype.value = function (state) {
      if (!this.parent) {
        if (state != null) {
          this._value = state
        }
        return this._value
      }
      if (state != null) {
        return this.parent.set(this.key, state)
      } else {
        return this.parent.get(this.key)
      }
    };
    Ref.prototype.ref = function (key) {
      if (!key) {
        return this
      }
      return new Ref(null, this, key)
    };
    Ref.prototype.get = function (key) {
      if (!key) {
        return this.value()
      } else {
        if (this._cache[key]) {
          return this._cache[key]
        }
        return this._cache[key] = this.index(key)
      }
    };
    Ref.prototype.set = function (key, value) {
      this._mutate();
      if (value == null) {
        this.value(extend(this.value(), key))
      } else {
        this.index(key, value)
      }
      return this
    };
    Ref.prototype.extend = function (key, value) {
      var clone;
      this._mutate();
      if (value == null) {
        this.value(extend(true, this.value(), key))
      } else {
        if (isObject(value)) {
          this.value(extend(true, this.ref(key).get(), value))
        } else {
          clone = this.clone();
          this.set(key, value);
          this.value(extend(true, clone.get(), this.value()))
        }
      }
      return this
    };
    Ref.prototype.clone = function (key) {
      return new Ref(extend(true, {}, this.get(key)))
    };
    Ref.prototype.index = function (key, value, obj, prev) {
      var next, prop, props;
      if (obj == null) {
        obj = this.value()
      }
      if (this.parent) {
        return this.parent.index(this.key + '.' + key, value)
      }
      if (isNumber(key)) {
        key = String(key)
      }
      props = key.split('.');
      if (value == null) {
        while (prop = props.shift()) {
          if (!props.length) {
            return obj != null ? obj[prop] : void 0
          }
          obj = obj != null ? obj[prop] : void 0
        }
        return
      }
      while (prop = props.shift()) {
        if (!props.length) {
          return obj[prop] = value
        } else {
          next = props[0];
          if (obj[next] == null) {
            if (isNumber(next)) {
              if (obj[prop] == null) {
                obj[prop] = []
              }
            } else {
              if (obj[prop] == null) {
                obj[prop] = {}
              }
            }
          }
        }
        obj = obj[prop]
      }
    };
    return Ref
  }()  //# sourceMappingURL=ref.js.map
});
// source: node_modules/node.extend/index.js
require.define('node.extend', function (module, exports, __dirname, __filename, process) {
  module.exports = require('node.extend/lib/extend')
});
// source: node_modules/node.extend/lib/extend.js
require.define('node.extend/lib/extend', function (module, exports, __dirname, __filename, process) {
  /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
  var is = require('is');
  function extend() {
    var target = arguments[0] || {};
    var i = 1;
    var length = arguments.length;
    var deep = false;
    var options, name, src, copy, copy_is_array, clone;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !is.fn(target)) {
      target = {}
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      options = arguments[i];
      if (options != null) {
        if (typeof options === 'string') {
          options = options.split('')
        }
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];
          // Prevent never-ending loop
          if (target === copy) {
            continue
          }
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
            if (copy_is_array) {
              copy_is_array = false;
              clone = src && is.array(src) ? src : []
            } else {
              clone = src && is.hash(src) ? src : {}
            }
            // Never move original objects, clone them
            target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
          } else if (typeof copy !== 'undefined') {
            target[name] = copy
          }
        }
      }
    }
    // Return the modified object
    return target
  }
  ;
  /**
 * @public
 */
  extend.version = '1.1.3';
  /**
 * Exports module.
 */
  module.exports = extend
});
// source: node_modules/is/index.js
require.define('is', function (module, exports, __dirname, __filename, process) {
  /* globals window, HTMLElement */
  /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
  var objProto = Object.prototype;
  var owns = objProto.hasOwnProperty;
  var toStr = objProto.toString;
  var symbolValueOf;
  if (typeof Symbol === 'function') {
    symbolValueOf = Symbol.prototype.valueOf
  }
  var isActualNaN = function (value) {
    return value !== value
  };
  var NON_HOST_TYPES = {
    'boolean': 1,
    number: 1,
    string: 1,
    undefined: 1
  };
  var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
  var hexRegex = /^[A-Fa-f0-9]+$/;
  /**
 * Expose `is`
 */
  var is = module.exports = {};
  /**
 * Test general.
 */
  /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
  is.a = is.type = function (value, type) {
    return typeof value === type
  };
  /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
  is.defined = function (value) {
    return typeof value !== 'undefined'
  };
  /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
  is.empty = function (value) {
    var type = toStr.call(value);
    var key;
    if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
      return value.length === 0
    }
    if (type === '[object Object]') {
      for (key in value) {
        if (owns.call(value, key)) {
          return false
        }
      }
      return true
    }
    return !value
  };
  /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
  is.equal = function equal(value, other) {
    if (value === other) {
      return true
    }
    var type = toStr.call(value);
    var key;
    if (type !== toStr.call(other)) {
      return false
    }
    if (type === '[object Object]') {
      for (key in value) {
        if (!is.equal(value[key], other[key]) || !(key in other)) {
          return false
        }
      }
      for (key in other) {
        if (!is.equal(value[key], other[key]) || !(key in value)) {
          return false
        }
      }
      return true
    }
    if (type === '[object Array]') {
      key = value.length;
      if (key !== other.length) {
        return false
      }
      while (--key) {
        if (!is.equal(value[key], other[key])) {
          return false
        }
      }
      return true
    }
    if (type === '[object Function]') {
      return value.prototype === other.prototype
    }
    if (type === '[object Date]') {
      return value.getTime() === other.getTime()
    }
    return false
  };
  /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
  is.hosted = function (value, host) {
    var type = typeof host[value];
    return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
  };
  /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
  is.instance = is['instanceof'] = function (value, constructor) {
    return value instanceof constructor
  };
  /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
  is.nil = is['null'] = function (value) {
    return value === null
  };
  /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
  is.undef = is.undefined = function (value) {
    return typeof value === 'undefined'
  };
  /**
 * Test arguments.
 */
  /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
  is.args = is.arguments = function (value) {
    var isStandardArguments = toStr.call(value) === '[object Arguments]';
    var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
    return isStandardArguments || isOldArguments
  };
  /**
 * Test array.
 */
  /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
  is.array = Array.isArray || function (value) {
    return toStr.call(value) === '[object Array]'
  };
  /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
  is.args.empty = function (value) {
    return is.args(value) && value.length === 0
  };
  /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
  is.array.empty = function (value) {
    return is.array(value) && value.length === 0
  };
  /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
  is.arraylike = function (value) {
    return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
  };
  /**
 * Test boolean.
 */
  /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
  is.bool = is['boolean'] = function (value) {
    return toStr.call(value) === '[object Boolean]'
  };
  /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
  is['false'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === false
  };
  /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
  is['true'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === true
  };
  /**
 * Test date.
 */
  /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
  is.date = function (value) {
    return toStr.call(value) === '[object Date]'
  };
  /**
 * Test element.
 */
  /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
  is.element = function (value) {
    return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
  };
  /**
 * Test error.
 */
  /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
  is.error = function (value) {
    return toStr.call(value) === '[object Error]'
  };
  /**
 * Test function.
 */
  /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
  is.fn = is['function'] = function (value) {
    var isAlert = typeof window !== 'undefined' && value === window.alert;
    return isAlert || toStr.call(value) === '[object Function]'
  };
  /**
 * Test number.
 */
  /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
  is.number = function (value) {
    return toStr.call(value) === '[object Number]'
  };
  /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
  is.infinite = function (value) {
    return value === Infinity || value === -Infinity
  };
  /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
  is.decimal = function (value) {
    return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
  };
  /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
  is.divisibleBy = function (value, n) {
    var isDividendInfinite = is.infinite(value);
    var isDivisorInfinite = is.infinite(n);
    var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
    return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
  };
  /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
  is.integer = is['int'] = function (value) {
    return is.number(value) && !isActualNaN(value) && value % 1 === 0
  };
  /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
  is.maximum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like')
    }
    var len = others.length;
    while (--len >= 0) {
      if (value < others[len]) {
        return false
      }
    }
    return true
  };
  /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
  is.minimum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like')
    }
    var len = others.length;
    while (--len >= 0) {
      if (value > others[len]) {
        return false
      }
    }
    return true
  };
  /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
  is.nan = function (value) {
    return !is.number(value) || value !== value
  };
  /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
  is.even = function (value) {
    return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
  };
  /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
  is.odd = function (value) {
    return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
  };
  /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
  is.ge = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value >= other
  };
  /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
  is.gt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value > other
  };
  /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
  is.le = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value <= other
  };
  /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
  is.lt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value < other
  };
  /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
  is.within = function (value, start, finish) {
    if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
      throw new TypeError('all arguments must be numbers')
    }
    var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
    return isAnyInfinite || value >= start && value <= finish
  };
  /**
 * Test object.
 */
  /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
  is.object = function (value) {
    return toStr.call(value) === '[object Object]'
  };
  /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
  is.hash = function (value) {
    return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
  };
  /**
 * Test regexp.
 */
  /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
  is.regexp = function (value) {
    return toStr.call(value) === '[object RegExp]'
  };
  /**
 * Test string.
 */
  /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
  is.string = function (value) {
    return toStr.call(value) === '[object String]'
  };
  /**
 * Test base64 string.
 */
  /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
  is.base64 = function (value) {
    return is.string(value) && (!value.length || base64Regex.test(value))
  };
  /**
 * Test base64 string.
 */
  /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
  is.hex = function (value) {
    return is.string(value) && (!value.length || hexRegex.test(value))
  };
  /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
  is.symbol = function (value) {
    return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
  }
});
// source: node_modules/is-array/index.js
require.define('is-array', function (module, exports, __dirname, __filename, process) {
  /**
 * isArray
 */
  var isArray = Array.isArray;
  /**
 * toString
 */
  var str = Object.prototype.toString;
  /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
  module.exports = isArray || function (val) {
    return !!val && '[object Array]' == str.call(val)
  }
});
// source: node_modules/is-number/index.js
require.define('is-number', function (module, exports, __dirname, __filename, process) {
  /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
  'use strict';
  var typeOf = require('kind-of');
  module.exports = function isNumber(num) {
    var type = typeOf(num);
    if (type !== 'number' && type !== 'string') {
      return false
    }
    var n = +num;
    return n - n + 1 >= 0 && num !== ''
  }
});
// source: node_modules/kind-of/index.js
require.define('kind-of', function (module, exports, __dirname, __filename, process) {
  var isBuffer = require('is-buffer');
  var toString = Object.prototype.toString;
  /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
  module.exports = function kindOf(val) {
    // primitivies
    if (typeof val === 'undefined') {
      return 'undefined'
    }
    if (val === null) {
      return 'null'
    }
    if (val === true || val === false || val instanceof Boolean) {
      return 'boolean'
    }
    if (typeof val === 'string' || val instanceof String) {
      return 'string'
    }
    if (typeof val === 'number' || val instanceof Number) {
      return 'number'
    }
    // functions
    if (typeof val === 'function' || val instanceof Function) {
      return 'function'
    }
    // array
    if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
      return 'array'
    }
    // check for instances of RegExp and Date before calling `toString`
    if (val instanceof RegExp) {
      return 'regexp'
    }
    if (val instanceof Date) {
      return 'date'
    }
    // other objects
    var type = toString.call(val);
    if (type === '[object RegExp]') {
      return 'regexp'
    }
    if (type === '[object Date]') {
      return 'date'
    }
    if (type === '[object Arguments]') {
      return 'arguments'
    }
    // buffer
    if (typeof Buffer !== 'undefined' && isBuffer(val)) {
      return 'buffer'
    }
    // es6: Map, WeakMap, Set, WeakSet
    if (type === '[object Set]') {
      return 'set'
    }
    if (type === '[object WeakSet]') {
      return 'weakset'
    }
    if (type === '[object Map]') {
      return 'map'
    }
    if (type === '[object WeakMap]') {
      return 'weakmap'
    }
    if (type === '[object Symbol]') {
      return 'symbol'
    }
    // typed arrays
    if (type === '[object Int8Array]') {
      return 'int8array'
    }
    if (type === '[object Uint8Array]') {
      return 'uint8array'
    }
    if (type === '[object Uint8ClampedArray]') {
      return 'uint8clampedarray'
    }
    if (type === '[object Int16Array]') {
      return 'int16array'
    }
    if (type === '[object Uint16Array]') {
      return 'uint16array'
    }
    if (type === '[object Int32Array]') {
      return 'int32array'
    }
    if (type === '[object Uint32Array]') {
      return 'uint32array'
    }
    if (type === '[object Float32Array]') {
      return 'float32array'
    }
    if (type === '[object Float64Array]') {
      return 'float64array'
    }
    // must be a plain object
    return 'object'
  }
});
// source: node_modules/is-buffer/index.js
require.define('is-buffer', function (module, exports, __dirname, __filename, process) {
  /**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */
  module.exports = function (obj) {
    return !!(obj != null && (obj._isBuffer || obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)))
  }
});
// source: node_modules/is-object/index.js
require.define('is-object', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = function isObject(x) {
    return typeof x === 'object' && x !== null
  }
});
// source: node_modules/is-string/index.js
require.define('is-string', function (module, exports, __dirname, __filename, process) {
  'use strict';
  var strValue = String.prototype.valueOf;
  var tryStringObject = function tryStringObject(value) {
    try {
      strValue.call(value);
      return true
    } catch (e) {
      return false
    }
  };
  var toStr = Object.prototype.toString;
  var strClass = '[object String]';
  var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
  module.exports = function isString(value) {
    if (typeof value === 'string') {
      return true
    }
    if (typeof value !== 'object') {
      return false
    }
    return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
  }
});
// source: node_modules/promise-settle/index.js
require.define('promise-settle', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = require('promise-settle/lib/promise-settle')
});
// source: node_modules/promise-settle/lib/promise-settle.js
require.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = settle;
  function settle(promises) {
    return Promise.resolve().then(function () {
      return promises
    }).then(function (promises) {
      if (!Array.isArray(promises))
        throw new TypeError('Expected an array of Promises');
      var promiseResults = promises.map(function (promise) {
        return Promise.resolve().then(function () {
          return promise
        }).then(function (result) {
          return promiseResult(result)
        }).catch(function (err) {
          return promiseResult(null, err)
        })
      });
      return Promise.all(promiseResults)
    })
  }
  function promiseResult(result, err) {
    var isFulfilled = typeof err === 'undefined';
    var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
    var isRejected = !isFulfilled;
    var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
    return {
      isFulfilled: returns.bind(isFulfilled),
      isRejected: returns.bind(isRejected),
      value: value,
      reason: reason
    }
  }
  function returns() {
    return this
  }
  function throws() {
    throw this
  }
});
// source: node_modules/crowdcontrol/lib/views/input.js
require.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Input, View, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib/views/view');
  Input = function (superClass) {
    extend(Input, superClass);
    function Input() {
      return Input.__super__.constructor.apply(this, arguments)
    }
    Input.prototype.input = null;
    Input.prototype.errorMessage = '';
    Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
    Input.prototype.beforeInit = function () {
      return this.html += this.errorHtml
    };
    Input.prototype.init = function () {
      return this.input.on('validate', function (_this) {
        return function (pRef) {
          return _this.validate(pRef)
        }
      }(this))
    };
    Input.prototype.getValue = function (event) {
      return event.target.value
    };
    Input.prototype.change = function (event) {
      var name, ref, ref1, value;
      ref1 = this.input, ref = ref1.ref, name = ref1.name;
      value = this.getValue(event);
      if (value === ref.get(name)) {
        return
      }
      this.input.ref.set(name, value);
      this.clearError();
      return this.validate()
    };
    Input.prototype.error = function (err) {
      var ref1;
      return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
    };
    Input.prototype.changed = function () {
    };
    Input.prototype.clearError = function () {
      return this.errorMessage = ''
    };
    Input.prototype.validate = function (pRef) {
      var p;
      p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
        return function (value) {
          _this.changed(value);
          return _this.update()
        }
      }(this))['catch'](function (_this) {
        return function (err) {
          _this.error(err);
          _this.update();
          throw err
        }
      }(this));
      if (pRef != null) {
        pRef.p = p
      }
      return p
    };
    return Input
  }(View);
  module.exports = Input  //# sourceMappingURL=input.js.map
});
// source: node_modules/daisho-riot/lib/events.js
require.define('daisho-riot/lib/events', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Change: 'change',
    ChangeSuccess: 'change-success',
    ChangeFailed: 'change-failed'
  }  //# sourceMappingURL=events.js.map
});
// source: node_modules/riot/riot.js
require.define('riot/riot', function (module, exports, __dirname, __filename, process) {
  /* Riot v2.3.17, @license MIT */
  ;
  (function (window, undefined) {
    'use strict';
    var riot = {
        version: 'v2.3.17',
        settings: {}
      },
      // be aware, internal usage
      // ATTENTION: prefix the global dynamic variables with `__`
      // counter to give a unique id to all the Tag instances
      __uid = 0,
      // tags instances cache
      __virtualDom = [],
      // tags implementation cache
      __tagImpl = {},
      /**
   * Const
   */
      GLOBAL_MIXIN = '__global_mixin',
      // riot specific prefixes
      RIOT_PREFIX = 'riot-', RIOT_TAG = RIOT_PREFIX + 'tag', RIOT_TAG_IS = 'data-is',
      // for typeof == '' comparisons
      T_STRING = 'string', T_OBJECT = 'object', T_UNDEF = 'undefined', T_BOOL = 'boolean', T_FUNCTION = 'function',
      // special native tags that cannot be treated like the others
      SPECIAL_TAGS_REGEX = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/, RESERVED_WORDS_BLACKLIST = [
        '_item',
        '_id',
        '_parent',
        'update',
        'root',
        'mount',
        'unmount',
        'mixin',
        'isMounted',
        'isLoop',
        'tags',
        'parent',
        'opts',
        'trigger',
        'on',
        'off',
        'one'
      ],
      // version# for IE 8-11, 0 for others
      IE_VERSION = (window && window.document || {}).documentMode | 0;
    /* istanbul ignore next */
    riot.observable = function (el) {
      /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
      el = el || {};
      /**
   * Private variables and methods
   */
      var callbacks = {}, slice = Array.prototype.slice, onEachEvent = function (e, fn) {
          e.replace(/\S+/g, fn)
        };
      // extend the object adding the observable methods
      Object.defineProperties(el, {
        /**
     * Listen to the given space separated list of `events` and execute the `callback` each time an event is triggered.
     * @param  { String } events - events ids
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
        on: {
          value: function (events, fn) {
            if (typeof fn != 'function')
              return el;
            onEachEvent(events, function (name, pos) {
              (callbacks[name] = callbacks[name] || []).push(fn);
              fn.typed = pos > 0
            });
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Removes the given space separated list of `events` listeners
     * @param   { String } events - events ids
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
        off: {
          value: function (events, fn) {
            if (events == '*' && !fn)
              callbacks = {};
            else {
              onEachEvent(events, function (name) {
                if (fn) {
                  var arr = callbacks[name];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn)
                      arr.splice(i--, 1)
                  }
                } else
                  delete callbacks[name]
              })
            }
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Listen to the given space separated list of `events` and execute the `callback` at most once
     * @param   { String } events - events ids
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
        one: {
          value: function (events, fn) {
            function on() {
              el.off(events, on);
              fn.apply(el, arguments)
            }
            return el.on(events, on)
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Execute all callback functions that listen to the given space separated list of `events`
     * @param   { String } events - events ids
     * @returns { Object } el
     */
        trigger: {
          value: function (events) {
            // getting the arguments
            var arglen = arguments.length - 1, args = new Array(arglen), fns;
            for (var i = 0; i < arglen; i++) {
              args[i] = arguments[i + 1]  // skip first argument
            }
            onEachEvent(events, function (name) {
              fns = slice.call(callbacks[name] || [], 0);
              for (var i = 0, fn; fn = fns[i]; ++i) {
                if (fn.busy)
                  return;
                fn.busy = 1;
                fn.apply(el, fn.typed ? [name].concat(args) : args);
                if (fns[i] !== fn) {
                  i--
                }
                fn.busy = 0
              }
              if (callbacks['*'] && name != '*')
                el.trigger.apply(el, [
                  '*',
                  name
                ].concat(args))
            });
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        }
      });
      return el
    }  /* istanbul ignore next */;
    (function (riot) {
      /**
 * Simple client-side router
 * @module riot-route
 */
      var RE_ORIGIN = /^.+?\/+[^\/]+/, EVENT_LISTENER = 'EventListener', REMOVE_EVENT_LISTENER = 'remove' + EVENT_LISTENER, ADD_EVENT_LISTENER = 'add' + EVENT_LISTENER, HAS_ATTRIBUTE = 'hasAttribute', REPLACE = 'replace', POPSTATE = 'popstate', HASHCHANGE = 'hashchange', TRIGGER = 'trigger', MAX_EMIT_STACK_LEVEL = 3, win = typeof window != 'undefined' && window, doc = typeof document != 'undefined' && document, hist = win && history, loc = win && (hist.location || win.location),
        // see html5-history-api
        prot = Router.prototype,
        // to minify more
        clickEvent = doc && doc.ontouchstart ? 'touchstart' : 'click', started = false, central = riot.observable(), routeFound = false, debouncedEmit, base, current, parser, secondParser, emitStack = [], emitStackLevel = 0;
      /**
 * Default parser. You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @returns {array} array
 */
      function DEFAULT_PARSER(path) {
        return path.split(/[\/?#]/)
      }
      /**
 * Default parser (second). You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @param {string} filter - filter string (normalized)
 * @returns {array} array
 */
      function DEFAULT_SECOND_PARSER(path, filter) {
        var re = new RegExp('^' + filter[REPLACE](/\*/g, '([^/?#]+?)')[REPLACE](/\.\./, '.*') + '$'), args = path.match(re);
        if (args)
          return args.slice(1)
      }
      /**
 * Simple/cheap debounce implementation
 * @param   {function} fn - callback
 * @param   {number} delay - delay in seconds
 * @returns {function} debounced function
 */
      function debounce(fn, delay) {
        var t;
        return function () {
          clearTimeout(t);
          t = setTimeout(fn, delay)
        }
      }
      /**
 * Set the window listeners to trigger the routes
 * @param {boolean} autoExec - see route.start
 */
      function start(autoExec) {
        debouncedEmit = debounce(emit, 1);
        win[ADD_EVENT_LISTENER](POPSTATE, debouncedEmit);
        win[ADD_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
        doc[ADD_EVENT_LISTENER](clickEvent, click);
        if (autoExec)
          emit(true)
      }
      /**
 * Router class
 */
      function Router() {
        this.$ = [];
        riot.observable(this);
        // make it observable
        central.on('stop', this.s.bind(this));
        central.on('emit', this.e.bind(this))
      }
      function normalize(path) {
        return path[REPLACE](/^\/|\/$/, '')
      }
      function isString(str) {
        return typeof str == 'string'
      }
      /**
 * Get the part after domain name
 * @param {string} href - fullpath
 * @returns {string} path from root
 */
      function getPathFromRoot(href) {
        return (href || loc.href || '')[REPLACE](RE_ORIGIN, '')
      }
      /**
 * Get the part after base
 * @param {string} href - fullpath
 * @returns {string} path from base
 */
      function getPathFromBase(href) {
        return base[0] == '#' ? (href || loc.href || '').split(base)[1] || '' : getPathFromRoot(href)[REPLACE](base, '')
      }
      function emit(force) {
        // the stack is needed for redirections
        var isRoot = emitStackLevel == 0;
        if (MAX_EMIT_STACK_LEVEL <= emitStackLevel)
          return;
        emitStackLevel++;
        emitStack.push(function () {
          var path = getPathFromBase();
          if (force || path != current) {
            central[TRIGGER]('emit', path);
            current = path
          }
        });
        if (isRoot) {
          while (emitStack.length) {
            emitStack[0]();
            emitStack.shift()
          }
          emitStackLevel = 0
        }
      }
      function click(e) {
        if (e.which != 1  // not left click
|| e.metaKey || e.ctrlKey || e.shiftKey || e.defaultPrevented)
          return;
        var el = e.target;
        while (el && el.nodeName != 'A')
          el = el.parentNode;
        if (!el || el.nodeName != 'A'  // not A tag
|| el[HAS_ATTRIBUTE]('download')  // has download attr
|| !el[HAS_ATTRIBUTE]('href')  // has no href attr
|| el.target && el.target != '_self'  // another window or frame
|| el.href.indexOf(loc.href.match(RE_ORIGIN)[0]) == -1  // cross origin
)
          return;
        if (el.href != loc.href) {
          if (el.href.split('#')[0] == loc.href.split('#')[0]  // internal jump
|| base != '#' && getPathFromRoot(el.href).indexOf(base) !== 0  // outside of base
|| !go(getPathFromBase(el.href), el.title || doc.title)  // route not found
)
            return
        }
        e.preventDefault()
      }
      /**
 * Go to the path
 * @param {string} path - destination path
 * @param {string} title - page title
 * @param {boolean} shouldReplace - use replaceState or pushState
 * @returns {boolean} - route not found flag
 */
      function go(path, title, shouldReplace) {
        if (hist) {
          // if a browser
          path = base + normalize(path);
          title = title || doc.title;
          // browsers ignores the second parameter `title`
          shouldReplace ? hist.replaceState(null, title, path) : hist.pushState(null, title, path);
          // so we need to set it manually
          doc.title = title;
          routeFound = false;
          emit();
          return routeFound
        }
        // Server-side usage: directly execute handlers for the path
        return central[TRIGGER]('emit', getPathFromBase(path))
      }
      /**
 * Go to path or set action
 * a single string:                go there
 * two strings:                    go there with setting a title
 * two strings and boolean:        replace history with setting a title
 * a single function:              set an action on the default route
 * a string/RegExp and a function: set an action on the route
 * @param {(string|function)} first - path / action / filter
 * @param {(string|RegExp|function)} second - title / action
 * @param {boolean} third - replace flag
 */
      prot.m = function (first, second, third) {
        if (isString(first) && (!second || isString(second)))
          go(first, second, third || false);
        else if (second)
          this.r(first, second);
        else
          this.r('@', first)
      };
      /**
 * Stop routing
 */
      prot.s = function () {
        this.off('*');
        this.$ = []
      };
      /**
 * Emit
 * @param {string} path - path
 */
      prot.e = function (path) {
        this.$.concat('@').some(function (filter) {
          var args = (filter == '@' ? parser : secondParser)(normalize(path), normalize(filter));
          if (typeof args != 'undefined') {
            this[TRIGGER].apply(null, [filter].concat(args));
            return routeFound = true  // exit from loop
          }
        }, this)
      };
      /**
 * Register route
 * @param {string} filter - filter for matching to url
 * @param {function} action - action to register
 */
      prot.r = function (filter, action) {
        if (filter != '@') {
          filter = '/' + normalize(filter);
          this.$.push(filter)
        }
        this.on(filter, action)
      };
      var mainRouter = new Router;
      var route = mainRouter.m.bind(mainRouter);
      /**
 * Create a sub router
 * @returns {function} the method of a new Router object
 */
      route.create = function () {
        var newSubRouter = new Router;
        // stop only this sub-router
        newSubRouter.m.stop = newSubRouter.s.bind(newSubRouter);
        // return sub-router's main method
        return newSubRouter.m.bind(newSubRouter)
      };
      /**
 * Set the base of url
 * @param {(str|RegExp)} arg - a new base or '#' or '#!'
 */
      route.base = function (arg) {
        base = arg || '#';
        current = getPathFromBase()  // recalculate current path
      };
      /** Exec routing right now **/
      route.exec = function () {
        emit(true)
      };
      /**
 * Replace the default router to yours
 * @param {function} fn - your parser function
 * @param {function} fn2 - your secondParser function
 */
      route.parser = function (fn, fn2) {
        if (!fn && !fn2) {
          // reset parser for testing...
          parser = DEFAULT_PARSER;
          secondParser = DEFAULT_SECOND_PARSER
        }
        if (fn)
          parser = fn;
        if (fn2)
          secondParser = fn2
      };
      /**
 * Helper function to get url query as an object
 * @returns {object} parsed query
 */
      route.query = function () {
        var q = {};
        var href = loc.href || current;
        href[REPLACE](/[?&](.+?)=([^&]*)/g, function (_, k, v) {
          q[k] = v
        });
        return q
      };
      /** Stop routing **/
      route.stop = function () {
        if (started) {
          if (win) {
            win[REMOVE_EVENT_LISTENER](POPSTATE, debouncedEmit);
            win[REMOVE_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
            doc[REMOVE_EVENT_LISTENER](clickEvent, click)
          }
          central[TRIGGER]('stop');
          started = false
        }
      };
      /**
 * Start routing
 * @param {boolean} autoExec - automatically exec after starting if true
 */
      route.start = function (autoExec) {
        if (!started) {
          if (win) {
            if (document.readyState == 'complete')
              start(autoExec)  // the timeout is needed to solve
                               // a weird safari bug https://github.com/riot/route/issues/33
;
            else
              win[ADD_EVENT_LISTENER]('load', function () {
                setTimeout(function () {
                  start(autoExec)
                }, 1)
              })
          }
          started = true
        }
      };
      /** Prepare the router **/
      route.base();
      route.parser();
      riot.route = route
    }(riot));
    /* istanbul ignore next */
    /**
 * The riot template engine
 * @version v2.3.21
 */
    /**
 * riot.util.brackets
 *
 * - `brackets    ` - Returns a string or regex based on its parameter
 * - `brackets.set` - Change the current riot brackets
 *
 * @module
 */
    var brackets = function (UNDEF) {
      var REGLOB = 'g', R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g, R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, S_QBLOCKS = R_STRINGS.source + '|' + /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' + /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source, FINDBRACES = {
          '(': RegExp('([()])|' + S_QBLOCKS, REGLOB),
          '[': RegExp('([[\\]])|' + S_QBLOCKS, REGLOB),
          '{': RegExp('([{}])|' + S_QBLOCKS, REGLOB)
        }, DEFAULT = '{ }';
      var _pairs = [
        '{',
        '}',
        '{',
        '}',
        /{[^}]*}/,
        /\\([{}])/g,
        /\\({)|{/g,
        RegExp('\\\\(})|([[({])|(})|' + S_QBLOCKS, REGLOB),
        DEFAULT,
        /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
        /(^|[^\\]){=[\S\s]*?}/
      ];
      var cachedBrackets = UNDEF, _regex, _cache = [], _settings;
      function _loopback(re) {
        return re
      }
      function _rewrite(re, bp) {
        if (!bp)
          bp = _cache;
        return new RegExp(re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : '')
      }
      function _create(pair) {
        if (pair === DEFAULT)
          return _pairs;
        var arr = pair.split(' ');
        if (arr.length !== 2 || /[\x00-\x1F<>a-zA-Z0-9'",;\\]/.test(pair)) {
          throw new Error('Unsupported brackets "' + pair + '"')
        }
        arr = arr.concat(pair.replace(/(?=[[\]()*+?.^$|])/g, '\\').split(' '));
        arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
        arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
        arr[6] = _rewrite(_pairs[6], arr);
        arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCKS, REGLOB);
        arr[8] = pair;
        return arr
      }
      function _brackets(reOrIdx) {
        return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
      }
      _brackets.split = function split(str, tmpl, _bp) {
        // istanbul ignore next: _bp is for the compiler
        if (!_bp)
          _bp = _cache;
        var parts = [], match, isexpr, start, pos, re = _bp[6];
        isexpr = start = re.lastIndex = 0;
        while (match = re.exec(str)) {
          pos = match.index;
          if (isexpr) {
            if (match[2]) {
              re.lastIndex = skipBraces(str, match[2], re.lastIndex);
              continue
            }
            if (!match[3])
              continue
          }
          if (!match[1]) {
            unescapeStr(str.slice(start, pos));
            start = re.lastIndex;
            re = _bp[6 + (isexpr ^= 1)];
            re.lastIndex = start
          }
        }
        if (str && start < str.length) {
          unescapeStr(str.slice(start))
        }
        return parts;
        function unescapeStr(s) {
          if (tmpl || isexpr)
            parts.push(s && s.replace(_bp[5], '$1'));
          else
            parts.push(s)
        }
        function skipBraces(s, ch, ix) {
          var match, recch = FINDBRACES[ch];
          recch.lastIndex = ix;
          ix = 1;
          while (match = recch.exec(s)) {
            if (match[1] && !(match[1] === ch ? ++ix : --ix))
              break
          }
          return ix ? s.length : recch.lastIndex
        }
      };
      _brackets.hasExpr = function hasExpr(str) {
        return _cache[4].test(str)
      };
      _brackets.loopKeys = function loopKeys(expr) {
        var m = expr.match(_cache[9]);
        return m ? {
          key: m[1],
          pos: m[2],
          val: _cache[0] + m[3].trim() + _cache[1]
        } : { val: expr.trim() }
      };
      _brackets.hasRaw = function (src) {
        return _cache[10].test(src)
      };
      _brackets.array = function array(pair) {
        return pair ? _create(pair) : _cache
      };
      function _reset(pair) {
        if ((pair || (pair = DEFAULT)) !== _cache[8]) {
          _cache = _create(pair);
          _regex = pair === DEFAULT ? _loopback : _rewrite;
          _cache[9] = _regex(_pairs[9]);
          _cache[10] = _regex(_pairs[10])
        }
        cachedBrackets = pair
      }
      function _setSettings(o) {
        var b;
        o = o || {};
        b = o.brackets;
        Object.defineProperty(o, 'brackets', {
          set: _reset,
          get: function () {
            return cachedBrackets
          },
          enumerable: true
        });
        _settings = o;
        _reset(b)
      }
      Object.defineProperty(_brackets, 'settings', {
        set: _setSettings,
        get: function () {
          return _settings
        }
      });
      /* istanbul ignore next: in the browser riot is always in the scope */
      _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
      _brackets.set = _reset;
      _brackets.R_STRINGS = R_STRINGS;
      _brackets.R_MLCOMMS = R_MLCOMMS;
      _brackets.S_QBLOCKS = S_QBLOCKS;
      return _brackets
    }();
    /**
 * @module tmpl
 *
 * tmpl          - Root function, returns the template value, render with data
 * tmpl.hasExpr  - Test the existence of a expression inside a string
 * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
 */
    var tmpl = function () {
      var _cache = {};
      function _tmpl(str, data) {
        if (!str)
          return str;
        return (_cache[str] || (_cache[str] = _create(str))).call(data, _logErr)
      }
      _tmpl.haveRaw = brackets.hasRaw;
      _tmpl.hasExpr = brackets.hasExpr;
      _tmpl.loopKeys = brackets.loopKeys;
      _tmpl.errorHandler = null;
      function _logErr(err, ctx) {
        if (_tmpl.errorHandler) {
          err.riotData = {
            tagName: ctx && ctx.root && ctx.root.tagName,
            _riot_id: ctx && ctx._riot_id
          };
          _tmpl.errorHandler(err)
        }
      }
      function _create(str) {
        var expr = _getTmpl(str);
        if (expr.slice(0, 11) !== 'try{return ')
          expr = 'return ' + expr;
        return new Function('E', expr + ';')
      }
      var RE_QBLOCK = RegExp(brackets.S_QBLOCKS, 'g'), RE_QBMARK = /\x01(\d+)~/g;
      function _getTmpl(str) {
        var qstr = [], expr, parts = brackets.split(str.replace(/\u2057/g, '"'), 1);
        if (parts.length > 2 || parts[0]) {
          var i, j, list = [];
          for (i = j = 0; i < parts.length; ++i) {
            expr = parts[i];
            if (expr && (expr = i & 1 ? _parseExpr(expr, 1, qstr) : '"' + expr.replace(/\\/g, '\\\\').replace(/\r\n?|\n/g, '\\n').replace(/"/g, '\\"') + '"'))
              list[j++] = expr
          }
          expr = j < 2 ? list[0] : '[' + list.join(',') + '].join("")'
        } else {
          expr = _parseExpr(parts[1], 0, qstr)
        }
        if (qstr[0])
          expr = expr.replace(RE_QBMARK, function (_, pos) {
            return qstr[pos].replace(/\r/g, '\\r').replace(/\n/g, '\\n')
          });
        return expr
      }
      var RE_BREND = {
          '(': /[()]/g,
          '[': /[[\]]/g,
          '{': /[{}]/g
        }, CS_IDENT = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\x01(\d+)~):/;
      function _parseExpr(expr, asText, qstr) {
        if (expr[0] === '=')
          expr = expr.slice(1);
        expr = expr.replace(RE_QBLOCK, function (s, div) {
          return s.length > 2 && !div ? '' + (qstr.push(s) - 1) + '~' : s
        }).replace(/\s+/g, ' ').trim().replace(/\ ?([[\({},?\.:])\ ?/g, '$1');
        if (expr) {
          var list = [], cnt = 0, match;
          while (expr && (match = expr.match(CS_IDENT)) && !match.index) {
            var key, jsb, re = /,|([[{(])|$/g;
            expr = RegExp.rightContext;
            key = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];
            while (jsb = (match = re.exec(expr))[1])
              skipBraces(jsb, re);
            jsb = expr.slice(0, match.index);
            expr = RegExp.rightContext;
            list[cnt++] = _wrapExpr(jsb, 1, key)
          }
          expr = !cnt ? _wrapExpr(expr, asText) : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0]
        }
        return expr;
        function skipBraces(ch, re) {
          var mm, lv = 1, ir = RE_BREND[ch];
          ir.lastIndex = re.lastIndex;
          while (mm = ir.exec(expr)) {
            if (mm[0] === ch)
              ++lv;
            else if (!--lv)
              break
          }
          re.lastIndex = lv ? expr.length : ir.lastIndex
        }
      }
      // istanbul ignore next: not both
      var JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').', JS_VARNAME = /[,{][$\w]+:|(^ *|[^$\w\.])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g, JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;
      function _wrapExpr(expr, asText, key) {
        var tb;
        expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
          if (mvar) {
            pos = tb ? 0 : pos + match.length;
            if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
              match = p + '("' + mvar + JS_CONTEXT + mvar;
              if (pos)
                tb = (s = s[pos]) === '.' || s === '(' || s === '['
            } else if (pos) {
              tb = !JS_NOPROPS.test(s.slice(pos))
            }
          }
          return match
        });
        if (tb) {
          expr = 'try{return ' + expr + '}catch(e){E(e,this)}'
        }
        if (key) {
          expr = (tb ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')') + '?"' + key + '":""'
        } else if (asText) {
          expr = 'function(v){' + (tb ? expr.replace('return ', 'v=') : 'v=(' + expr + ')') + ';return v||v===0?v:""}.call(this)'
        }
        return expr
      }
      // istanbul ignore next: compatibility fix for beta versions
      _tmpl.parse = function (s) {
        return s
      };
      _tmpl.version = brackets.version = 'v2.3.21';
      return _tmpl
    }();
    /*
  lib/browser/tag/mkdom.js

  Includes hacks needed for the Internet Explorer version 9 and below
  See: http://kangax.github.io/compat-table/es5/#ie8
       http://codeplanet.io/dropping-ie8/
*/
    var mkdom = function _mkdom() {
      var reHasYield = /<yield\b/i, reYieldAll = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi, reYieldSrc = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi, reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi;
      var rootEls = {
          tr: 'tbody',
          th: 'tr',
          td: 'tr',
          col: 'colgroup'
        }, tblTags = IE_VERSION && IE_VERSION < 10 ? SPECIAL_TAGS_REGEX : /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;
      /**
   * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
   * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
   *
   * @param   {string} templ  - The template coming from the custom tag definition
   * @param   {string} [html] - HTML content that comes from the DOM element where you
   *           will mount the tag, mostly the original tag in the page
   * @returns {HTMLElement} DOM element with _templ_ merged through `YIELD` with the _html_.
   */
      function _mkdom(templ, html) {
        var match = templ && templ.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), el = mkEl('div');
        // replace all the yield tags with the tag inner html
        templ = replaceYield(templ, html);
        /* istanbul ignore next */
        if (tblTags.test(tagName))
          el = specialTags(el, templ, tagName);
        else
          el.innerHTML = templ;
        el.stub = true;
        return el
      }
      /*
    Creates the root element for table or select child elements:
    tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
  */
      function specialTags(el, templ, tagName) {
        var select = tagName[0] === 'o', parent = select ? 'select>' : 'table>';
        // trim() is important here, this ensures we don't have artifacts,
        // so we can check if we have only one element inside the parent
        el.innerHTML = '<' + parent + templ.trim() + '</' + parent;
        parent = el.firstChild;
        // returns the immediate parent if tr/th/td/col is the only element, if not
        // returns the whole tree, as this can include additional elements
        if (select) {
          parent.selectedIndex = -1  // for IE9, compatible w/current riot behavior
        } else {
          // avoids insertion of cointainer inside container (ex: tbody inside tbody)
          var tname = rootEls[tagName];
          if (tname && parent.childElementCount === 1)
            parent = $(tname, parent)
        }
        return parent
      }
      /*
    Replace the yield tag from any tag template with the innerHTML of the
    original tag in the page
  */
      function replaceYield(templ, html) {
        // do nothing if no yield
        if (!reHasYield.test(templ))
          return templ;
        // be careful with #1343 - string on the source having `$1`
        var src = {};
        html = html && html.replace(reYieldSrc, function (_, ref, text) {
          src[ref] = src[ref] || text;
          // preserve first definition
          return ''
        }).trim();
        return templ.replace(reYieldDest, function (_, ref, def) {
          // yield with from - to attrs
          return src[ref] || def || ''
        }).replace(reYieldAll, function (_, def) {
          // yield without any "from"
          return html || def || ''
        })
      }
      return _mkdom
    }();
    /**
 * Convert the item looped into an object used to extend the child tag properties
 * @param   { Object } expr - object containing the keys used to extend the children tags
 * @param   { * } key - value to assign to the new object returned
 * @param   { * } val - value containing the position of the item in the array
 * @returns { Object } - new object containing the values of the original item
 *
 * The variables 'key' and 'val' are arbitrary.
 * They depend on the collection type looped (Array, Object)
 * and on the expression used on the each tag
 *
 */
    function mkitem(expr, key, val) {
      var item = {};
      item[expr.key] = key;
      if (expr.pos)
        item[expr.pos] = val;
      return item
    }
    /**
 * Unmount the redundant tags
 * @param   { Array } items - array containing the current items to loop
 * @param   { Array } tags - array containing all the children tags
 */
    function unmountRedundant(items, tags) {
      var i = tags.length, j = items.length, t;
      while (i > j) {
        t = tags[--i];
        tags.splice(i, 1);
        t.unmount()
      }
    }
    /**
 * Move the nested custom tags in non custom loop tags
 * @param   { Object } child - non custom loop tag
 * @param   { Number } i - current position of the loop tag
 */
    function moveNestedTags(child, i) {
      Object.keys(child.tags).forEach(function (tagName) {
        var tag = child.tags[tagName];
        if (isArray(tag))
          each(tag, function (t) {
            moveChildTag(t, tagName, i)
          });
        else
          moveChildTag(tag, tagName, i)
      })
    }
    /**
 * Adds the elements for a virtual tag
 * @param { Tag } tag - the tag whose root's children will be inserted or appended
 * @param { Node } src - the node that will do the inserting or appending
 * @param { Tag } target - only if inserting, insert before this tag's first child
 */
    function addVirtual(tag, src, target) {
      var el = tag._root, sib;
      tag._virts = [];
      while (el) {
        sib = el.nextSibling;
        if (target)
          src.insertBefore(el, target._root);
        else
          src.appendChild(el);
        tag._virts.push(el);
        // hold for unmounting
        el = sib
      }
    }
    /**
 * Move virtual tag and all child nodes
 * @param { Tag } tag - first child reference used to start move
 * @param { Node } src  - the node that will do the inserting
 * @param { Tag } target - insert before this tag's first child
 * @param { Number } len - how many child nodes to move
 */
    function moveVirtual(tag, src, target, len) {
      var el = tag._root, sib, i = 0;
      for (; i < len; i++) {
        sib = el.nextSibling;
        src.insertBefore(el, target._root);
        el = sib
      }
    }
    /**
 * Manage tags having the 'each'
 * @param   { Object } dom - DOM node we need to loop
 * @param   { Tag } parent - parent tag instance where the dom node is contained
 * @param   { String } expr - string contained in the 'each' attribute
 */
    function _each(dom, parent, expr) {
      // remove the each property from the original tag
      remAttr(dom, 'each');
      var mustReorder = typeof getAttr(dom, 'no-reorder') !== T_STRING || remAttr(dom, 'no-reorder'), tagName = getTagName(dom), impl = __tagImpl[tagName] || { tmpl: dom.outerHTML }, useRoot = SPECIAL_TAGS_REGEX.test(tagName), root = dom.parentNode, ref = document.createTextNode(''), child = getTag(dom), isOption = tagName.toLowerCase() === 'option',
        // the option tags must be treated differently
        tags = [], oldItems = [], hasKeys, isVirtual = dom.tagName == 'VIRTUAL';
      // parse the each expression
      expr = tmpl.loopKeys(expr);
      // insert a marked where the loop tags will be injected
      root.insertBefore(ref, dom);
      // clean template code
      parent.one('before-mount', function () {
        // remove the original DOM node
        dom.parentNode.removeChild(dom);
        if (root.stub)
          root = parent.root
      }).on('update', function () {
        // get the new items collection
        var items = tmpl(expr.val, parent),
          // create a fragment to hold the new DOM nodes to inject in the parent tag
          frag = document.createDocumentFragment();
        // object loop. any changes cause full redraw
        if (!isArray(items)) {
          hasKeys = items || false;
          items = hasKeys ? Object.keys(items).map(function (key) {
            return mkitem(expr, key, items[key])
          }) : []
        }
        // loop all the new items
        var i = 0, itemsLength = items.length;
        for (; i < itemsLength; i++) {
          // reorder only if the items are objects
          var item = items[i], _mustReorder = mustReorder && item instanceof Object && !hasKeys, oldPos = oldItems.indexOf(item), pos = ~oldPos && _mustReorder ? oldPos : i,
            // does a tag exist in this position?
            tag = tags[pos];
          item = !hasKeys && expr.key ? mkitem(expr, item, i) : item;
          // new tag
          if (!_mustReorder && !tag  // with no-reorder we just update the old tags
|| _mustReorder && !~oldPos || !tag  // by default we always try to reorder the DOM elements
) {
            tag = new Tag(impl, {
              parent: parent,
              isLoop: true,
              hasImpl: !!__tagImpl[tagName],
              root: useRoot ? root : dom.cloneNode(),
              item: item
            }, dom.innerHTML);
            tag.mount();
            if (isVirtual)
              tag._root = tag.root.firstChild;
            // save reference for further moves or inserts
            // this tag must be appended
            if (i == tags.length || !tags[i]) {
              // fix 1581
              if (isVirtual)
                addVirtual(tag, frag);
              else
                frag.appendChild(tag.root)
            }  // this tag must be insert
            else {
              if (isVirtual)
                addVirtual(tag, root, tags[i]);
              else
                root.insertBefore(tag.root, tags[i].root);
              // #1374 some browsers reset selected here
              oldItems.splice(i, 0, item)
            }
            tags.splice(i, 0, tag);
            pos = i  // handled here so no move
          } else
            tag.update(item, true);
          // reorder the tag if it's not located in its previous position
          if (pos !== i && _mustReorder && tags[i]  // fix 1581 unable to reproduce it in a test!
) {
            // update the DOM
            if (isVirtual)
              moveVirtual(tag, root, tags[i], dom.childNodes.length);
            else
              root.insertBefore(tag.root, tags[i].root);
            // update the position attribute if it exists
            if (expr.pos)
              tag[expr.pos] = i;
            // move the old tag instance
            tags.splice(i, 0, tags.splice(pos, 1)[0]);
            // move the old item
            oldItems.splice(i, 0, oldItems.splice(pos, 1)[0]);
            // if the loop tags are not custom
            // we need to move all their custom tags into the right position
            if (!child && tag.tags)
              moveNestedTags(tag, i)
          }
          // cache the original item to use it in the events bound to this node
          // and its children
          tag._item = item;
          // cache the real parent tag internally
          defineProperty(tag, '_parent', parent)
        }
        // remove the redundant tags
        unmountRedundant(items, tags);
        // insert the new nodes
        if (isOption) {
          root.appendChild(frag);
          // #1374 <select> <option selected={true}> </select>
          if (root.length) {
            var si, op = root.options;
            root.selectedIndex = si = -1;
            for (i = 0; i < op.length; i++) {
              if (op[i].selected = op[i].__selected) {
                if (si < 0)
                  root.selectedIndex = si = i
              }
            }
          }
        } else
          root.insertBefore(frag, ref);
        // set the 'tags' property of the parent tag
        // if child is 'undefined' it means that we don't need to set this property
        // for example:
        // we don't need store the `myTag.tags['div']` property if we are looping a div tag
        // but we need to track the `myTag.tags['child']` property looping a custom child node named `child`
        if (child)
          parent.tags[tagName] = tags;
        // clone the items array
        oldItems = items.slice()
      })
    }
    /**
 * Object that will be used to inject and manage the css of every tag instance
 */
    var styleManager = function (_riot) {
      if (!window)
        return {
          // skip injection on the server
          add: function () {
          },
          inject: function () {
          }
        };
      var styleNode = function () {
        // create a new style element with the correct type
        var newNode = mkEl('style');
        setAttr(newNode, 'type', 'text/css');
        // replace any user node or insert the new one into the head
        var userNode = $('style[type=riot]');
        if (userNode) {
          if (userNode.id)
            newNode.id = userNode.id;
          userNode.parentNode.replaceChild(newNode, userNode)
        } else
          document.getElementsByTagName('head')[0].appendChild(newNode);
        return newNode
      }();
      // Create cache and shortcut to the correct property
      var cssTextProp = styleNode.styleSheet, stylesToInject = '';
      // Expose the style node in a non-modificable property
      Object.defineProperty(_riot, 'styleNode', {
        value: styleNode,
        writable: true
      });
      /**
   * Public api
   */
      return {
        /**
     * Save a tag style to be later injected into DOM
     * @param   { String } css [description]
     */
        add: function (css) {
          stylesToInject += css
        },
        /**
     * Inject all previously saved tag styles into DOM
     * innerHTML seems slow: http://jsperf.com/riot-insert-style
     */
        inject: function () {
          if (stylesToInject) {
            if (cssTextProp)
              cssTextProp.cssText += stylesToInject;
            else
              styleNode.innerHTML += stylesToInject;
            stylesToInject = ''
          }
        }
      }
    }(riot);
    function parseNamedElements(root, tag, childTags, forceParsingNamed) {
      walk(root, function (dom) {
        if (dom.nodeType == 1) {
          dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || getAttr(dom, 'each')) ? 1 : 0;
          // custom child tag
          if (childTags) {
            var child = getTag(dom);
            if (child && !dom.isLoop)
              childTags.push(initChildTag(child, {
                root: dom,
                parent: tag
              }, dom.innerHTML, tag))
          }
          if (!dom.isLoop || forceParsingNamed)
            setNamed(dom, tag, [])
        }
      })
    }
    function parseExpressions(root, tag, expressions) {
      function addExpr(dom, val, extra) {
        if (tmpl.hasExpr(val)) {
          expressions.push(extend({
            dom: dom,
            expr: val
          }, extra))
        }
      }
      walk(root, function (dom) {
        var type = dom.nodeType, attr;
        // text node
        if (type == 3 && dom.parentNode.tagName != 'STYLE')
          addExpr(dom, dom.nodeValue);
        if (type != 1)
          return;
        /* element */
        // loop
        attr = getAttr(dom, 'each');
        if (attr) {
          _each(dom, tag, attr);
          return false
        }
        // attribute expressions
        each(dom.attributes, function (attr) {
          var name = attr.name, bool = name.split('__')[1];
          addExpr(dom, attr.value, {
            attr: bool || name,
            bool: bool
          });
          if (bool) {
            remAttr(dom, name);
            return false
          }
        });
        // skip custom tags
        if (getTag(dom))
          return false
      })
    }
    function Tag(impl, conf, innerHTML) {
      var self = riot.observable(this), opts = inherit(conf.opts) || {}, parent = conf.parent, isLoop = conf.isLoop, hasImpl = conf.hasImpl, item = cleanUpData(conf.item), expressions = [], childTags = [], root = conf.root, tagName = root.tagName.toLowerCase(), attr = {}, implAttr = {}, propsInSyncWithParent = [], dom;
      // only call unmount if we have a valid __tagImpl (has name property)
      if (impl.name && root._tag)
        root._tag.unmount(true);
      // not yet mounted
      this.isMounted = false;
      root.isLoop = isLoop;
      // keep a reference to the tag just created
      // so we will be able to mount this tag multiple times
      root._tag = this;
      // create a unique id to this tag
      // it could be handy to use it also to improve the virtual dom rendering speed
      defineProperty(this, '_riot_id', ++__uid);
      // base 1 allows test !t._riot_id
      extend(this, {
        parent: parent,
        root: root,
        opts: opts,
        tags: {}
      }, item);
      // grab attributes
      each(root.attributes, function (el) {
        var val = el.value;
        // remember attributes with expressions only
        if (tmpl.hasExpr(val))
          attr[el.name] = val
      });
      dom = mkdom(impl.tmpl, innerHTML);
      // options
      function updateOpts() {
        var ctx = hasImpl && isLoop ? self : parent || self;
        // update opts from current DOM attributes
        each(root.attributes, function (el) {
          var val = el.value;
          opts[toCamel(el.name)] = tmpl.hasExpr(val) ? tmpl(val, ctx) : val
        });
        // recover those with expressions
        each(Object.keys(attr), function (name) {
          opts[toCamel(name)] = tmpl(attr[name], ctx)
        })
      }
      function normalizeData(data) {
        for (var key in item) {
          if (typeof self[key] !== T_UNDEF && isWritable(self, key))
            self[key] = data[key]
        }
      }
      function inheritFromParent() {
        if (!self.parent || !isLoop)
          return;
        each(Object.keys(self.parent), function (k) {
          // some properties must be always in sync with the parent tag
          var mustSync = !contains(RESERVED_WORDS_BLACKLIST, k) && contains(propsInSyncWithParent, k);
          if (typeof self[k] === T_UNDEF || mustSync) {
            // track the property to keep in sync
            // so we can keep it updated
            if (!mustSync)
              propsInSyncWithParent.push(k);
            self[k] = self.parent[k]
          }
        })
      }
      /**
   * Update the tag expressions and options
   * @param   { * }  data - data we want to use to extend the tag properties
   * @param   { Boolean } isInherited - is this update coming from a parent tag?
   * @returns { self }
   */
      defineProperty(this, 'update', function (data, isInherited) {
        // make sure the data passed will not override
        // the component core methods
        data = cleanUpData(data);
        // inherit properties from the parent
        inheritFromParent();
        // normalize the tag properties in case an item object was initially passed
        if (data && isObject(item)) {
          normalizeData(data);
          item = data
        }
        extend(self, data);
        updateOpts();
        self.trigger('update', data);
        update(expressions, self);
        // the updated event will be triggered
        // once the DOM will be ready and all the re-flows are completed
        // this is useful if you want to get the "real" root properties
        // 4 ex: root.offsetWidth ...
        if (isInherited && self.parent)
          // closes #1599
          self.parent.one('updated', function () {
            self.trigger('updated')
          });
        else
          rAF(function () {
            self.trigger('updated')
          });
        return this
      });
      defineProperty(this, 'mixin', function () {
        each(arguments, function (mix) {
          var instance;
          mix = typeof mix === T_STRING ? riot.mixin(mix) : mix;
          // check if the mixin is a function
          if (isFunction(mix)) {
            // create the new mixin instance
            instance = new mix;
            // save the prototype to loop it afterwards
            mix = mix.prototype
          } else
            instance = mix;
          // loop the keys in the function prototype or the all object keys
          each(Object.getOwnPropertyNames(mix), function (key) {
            // bind methods to self
            if (key != 'init')
              self[key] = isFunction(instance[key]) ? instance[key].bind(self) : instance[key]
          });
          // init method will be called automatically
          if (instance.init)
            instance.init.bind(self)()
        });
        return this
      });
      defineProperty(this, 'mount', function () {
        updateOpts();
        // add global mixin
        var globalMixin = riot.mixin(GLOBAL_MIXIN);
        if (globalMixin)
          self.mixin(globalMixin);
        // initialiation
        if (impl.fn)
          impl.fn.call(self, opts);
        // parse layout after init. fn may calculate args for nested custom tags
        parseExpressions(dom, self, expressions);
        // mount the child tags
        toggle(true);
        // update the root adding custom attributes coming from the compiler
        // it fixes also #1087
        if (impl.attrs)
          walkAttributes(impl.attrs, function (k, v) {
            setAttr(root, k, v)
          });
        if (impl.attrs || hasImpl)
          parseExpressions(self.root, self, expressions);
        if (!self.parent || isLoop)
          self.update(item);
        // internal use only, fixes #403
        self.trigger('before-mount');
        if (isLoop && !hasImpl) {
          // update the root attribute for the looped elements
          root = dom.firstChild
        } else {
          while (dom.firstChild)
            root.appendChild(dom.firstChild);
          if (root.stub)
            root = parent.root
        }
        defineProperty(self, 'root', root);
        // parse the named dom nodes in the looped child
        // adding them to the parent as well
        if (isLoop)
          parseNamedElements(self.root, self.parent, null, true);
        // if it's not a child tag we can trigger its mount event
        if (!self.parent || self.parent.isMounted) {
          self.isMounted = true;
          self.trigger('mount')
        }  // otherwise we need to wait that the parent event gets triggered
        else
          self.parent.one('mount', function () {
            // avoid to trigger the `mount` event for the tags
            // not visible included in an if statement
            if (!isInStub(self.root)) {
              self.parent.isMounted = self.isMounted = true;
              self.trigger('mount')
            }
          })
      });
      defineProperty(this, 'unmount', function (keepRootTag) {
        var el = root, p = el.parentNode, ptag, tagIndex = __virtualDom.indexOf(self);
        self.trigger('before-unmount');
        // remove this tag instance from the global virtualDom variable
        if (~tagIndex)
          __virtualDom.splice(tagIndex, 1);
        if (this._virts) {
          each(this._virts, function (v) {
            if (v.parentNode)
              v.parentNode.removeChild(v)
          })
        }
        if (p) {
          if (parent) {
            ptag = getImmediateCustomParentTag(parent);
            // remove this tag from the parent tags object
            // if there are multiple nested tags with same name..
            // remove this element form the array
            if (isArray(ptag.tags[tagName]))
              each(ptag.tags[tagName], function (tag, i) {
                if (tag._riot_id == self._riot_id)
                  ptag.tags[tagName].splice(i, 1)
              });
            else
              // otherwise just delete the tag instance
              ptag.tags[tagName] = undefined
          } else
            while (el.firstChild)
              el.removeChild(el.firstChild);
          if (!keepRootTag)
            p.removeChild(el);
          else
            // the riot-tag attribute isn't needed anymore, remove it
            remAttr(p, 'riot-tag')
        }
        self.trigger('unmount');
        toggle();
        self.off('*');
        self.isMounted = false;
        delete root._tag
      });
      // proxy function to bind updates
      // dispatched from a parent tag
      function onChildUpdate(data) {
        self.update(data, true)
      }
      function toggle(isMount) {
        // mount/unmount children
        each(childTags, function (child) {
          child[isMount ? 'mount' : 'unmount']()
        });
        // listen/unlisten parent (events flow one way from parent to children)
        if (!parent)
          return;
        var evt = isMount ? 'on' : 'off';
        // the loop tags will be always in sync with the parent automatically
        if (isLoop)
          parent[evt]('unmount', self.unmount);
        else {
          parent[evt]('update', onChildUpdate)[evt]('unmount', self.unmount)
        }
      }
      // named elements available for fn
      parseNamedElements(dom, this, childTags)
    }
    /**
 * Attach an event to a DOM node
 * @param { String } name - event name
 * @param { Function } handler - event callback
 * @param { Object } dom - dom node
 * @param { Tag } tag - tag instance
 */
    function setEventHandler(name, handler, dom, tag) {
      dom[name] = function (e) {
        var ptag = tag._parent, item = tag._item, el;
        if (!item)
          while (ptag && !item) {
            item = ptag._item;
            ptag = ptag._parent
          }
        // cross browser event fix
        e = e || window.event;
        // override the event properties
        if (isWritable(e, 'currentTarget'))
          e.currentTarget = dom;
        if (isWritable(e, 'target'))
          e.target = e.srcElement;
        if (isWritable(e, 'which'))
          e.which = e.charCode || e.keyCode;
        e.item = item;
        // prevent default behaviour (by default)
        if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {
          if (e.preventDefault)
            e.preventDefault();
          e.returnValue = false
        }
        if (!e.preventUpdate) {
          el = item ? getImmediateCustomParentTag(ptag) : tag;
          el.update()
        }
      }
    }
    /**
 * Insert a DOM node replacing another one (used by if- attribute)
 * @param   { Object } root - parent node
 * @param   { Object } node - node replaced
 * @param   { Object } before - node added
 */
    function insertTo(root, node, before) {
      if (!root)
        return;
      root.insertBefore(before, node);
      root.removeChild(node)
    }
    /**
 * Update the expressions in a Tag instance
 * @param   { Array } expressions - expression that must be re evaluated
 * @param   { Tag } tag - tag instance
 */
    function update(expressions, tag) {
      each(expressions, function (expr, i) {
        var dom = expr.dom, attrName = expr.attr, value = tmpl(expr.expr, tag), parent = expr.dom.parentNode;
        if (expr.bool) {
          value = !!value;
          if (attrName === 'selected')
            dom.__selected = value  // #1374
        } else if (value == null)
          value = '';
        // #1638: regression of #1612, update the dom only if the value of the
        // expression was changed
        if (expr.value === value) {
          return
        }
        expr.value = value;
        // textarea and text nodes has no attribute name
        if (!attrName) {
          // about #815 w/o replace: the browser converts the value to a string,
          // the comparison by "==" does too, but not in the server
          value += '';
          // test for parent avoids error with invalid assignment to nodeValue
          if (parent) {
            if (parent.tagName === 'TEXTAREA') {
              parent.value = value;
              // #1113
              if (!IE_VERSION)
                dom.nodeValue = value  // #1625 IE throws here, nodeValue
            }  // will be available on 'updated'
            else
              dom.nodeValue = value
          }
          return
        }
        // ~~#1612: look for changes in dom.value when updating the value~~
        if (attrName === 'value') {
          dom.value = value;
          return
        }
        // remove original attribute
        remAttr(dom, attrName);
        // event handler
        if (isFunction(value)) {
          setEventHandler(attrName, value, dom, tag)  // if- conditional
        } else if (attrName == 'if') {
          var stub = expr.stub, add = function () {
              insertTo(stub.parentNode, stub, dom)
            }, remove = function () {
              insertTo(dom.parentNode, dom, stub)
            };
          // add to DOM
          if (value) {
            if (stub) {
              add();
              dom.inStub = false;
              // avoid to trigger the mount event if the tags is not visible yet
              // maybe we can optimize this avoiding to mount the tag at all
              if (!isInStub(dom)) {
                walk(dom, function (el) {
                  if (el._tag && !el._tag.isMounted)
                    el._tag.isMounted = !!el._tag.trigger('mount')
                })
              }
            }  // remove from DOM
          } else {
            stub = expr.stub = stub || document.createTextNode('');
            // if the parentNode is defined we can easily replace the tag
            if (dom.parentNode)
              remove()  // otherwise we need to wait the updated event
;
            else
              (tag.parent || tag).one('updated', remove);
            dom.inStub = true
          }  // show / hide
        } else if (attrName === 'show') {
          dom.style.display = value ? '' : 'none'
        } else if (attrName === 'hide') {
          dom.style.display = value ? 'none' : ''
        } else if (expr.bool) {
          dom[attrName] = value;
          if (value)
            setAttr(dom, attrName, attrName)
        } else if (value === 0 || value && typeof value !== T_OBJECT) {
          // <img src="{ expr }">
          if (startsWith(attrName, RIOT_PREFIX) && attrName != RIOT_TAG) {
            attrName = attrName.slice(RIOT_PREFIX.length)
          }
          setAttr(dom, attrName, value)
        }
      })
    }
    /**
 * Specialized function for looping an array-like collection with `each={}`
 * @param   { Array } els - collection of items
 * @param   {Function} fn - callback function
 * @returns { Array } the array looped
 */
    function each(els, fn) {
      var len = els ? els.length : 0;
      for (var i = 0, el; i < len; i++) {
        el = els[i];
        // return false -> current item was removed by fn during the loop
        if (el != null && fn(el, i) === false)
          i--
      }
      return els
    }
    /**
 * Detect if the argument passed is a function
 * @param   { * } v - whatever you want to pass to this function
 * @returns { Boolean } -
 */
    function isFunction(v) {
      return typeof v === T_FUNCTION || false  // avoid IE problems
    }
    /**
 * Detect if the argument passed is an object, exclude null.
 * NOTE: Use isObject(x) && !isArray(x) to excludes arrays.
 * @param   { * } v - whatever you want to pass to this function
 * @returns { Boolean } -
 */
    function isObject(v) {
      return v && typeof v === T_OBJECT  // typeof null is 'object'
    }
    /**
 * Remove any DOM attribute from a node
 * @param   { Object } dom - DOM node we want to update
 * @param   { String } name - name of the property we want to remove
 */
    function remAttr(dom, name) {
      dom.removeAttribute(name)
    }
    /**
 * Convert a string containing dashes to camel case
 * @param   { String } string - input string
 * @returns { String } my-string -> myString
 */
    function toCamel(string) {
      return string.replace(/-(\w)/g, function (_, c) {
        return c.toUpperCase()
      })
    }
    /**
 * Get the value of any DOM attribute on a node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { String } name - name of the attribute we want to get
 * @returns { String | undefined } name of the node attribute whether it exists
 */
    function getAttr(dom, name) {
      return dom.getAttribute(name)
    }
    /**
 * Set any DOM attribute
 * @param { Object } dom - DOM node we want to update
 * @param { String } name - name of the property we want to set
 * @param { String } val - value of the property we want to set
 */
    function setAttr(dom, name, val) {
      dom.setAttribute(name, val)
    }
    /**
 * Detect the tag implementation by a DOM node
 * @param   { Object } dom - DOM node we need to parse to get its tag implementation
 * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
 */
    function getTag(dom) {
      return dom.tagName && __tagImpl[getAttr(dom, RIOT_TAG_IS) || getAttr(dom, RIOT_TAG) || dom.tagName.toLowerCase()]
    }
    /**
 * Add a child tag to its parent into the `tags` object
 * @param   { Object } tag - child tag instance
 * @param   { String } tagName - key where the new tag will be stored
 * @param   { Object } parent - tag instance where the new child tag will be included
 */
    function addChildTag(tag, tagName, parent) {
      var cachedTag = parent.tags[tagName];
      // if there are multiple children tags having the same name
      if (cachedTag) {
        // if the parent tags property is not yet an array
        // create it adding the first cached tag
        if (!isArray(cachedTag))
          // don't add the same tag twice
          if (cachedTag !== tag)
            parent.tags[tagName] = [cachedTag];
        // add the new nested tag to the array
        if (!contains(parent.tags[tagName], tag))
          parent.tags[tagName].push(tag)
      } else {
        parent.tags[tagName] = tag
      }
    }
    /**
 * Move the position of a custom tag in its parent tag
 * @param   { Object } tag - child tag instance
 * @param   { String } tagName - key where the tag was stored
 * @param   { Number } newPos - index where the new tag will be stored
 */
    function moveChildTag(tag, tagName, newPos) {
      var parent = tag.parent, tags;
      // no parent no move
      if (!parent)
        return;
      tags = parent.tags[tagName];
      if (isArray(tags))
        tags.splice(newPos, 0, tags.splice(tags.indexOf(tag), 1)[0]);
      else
        addChildTag(tag, tagName, parent)
    }
    /**
 * Create a new child tag including it correctly into its parent
 * @param   { Object } child - child tag implementation
 * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
 * @param   { String } innerHTML - inner html of the child node
 * @param   { Object } parent - instance of the parent tag including the child custom tag
 * @returns { Object } instance of the new child tag just created
 */
    function initChildTag(child, opts, innerHTML, parent) {
      var tag = new Tag(child, opts, innerHTML), tagName = getTagName(opts.root), ptag = getImmediateCustomParentTag(parent);
      // fix for the parent attribute in the looped elements
      tag.parent = ptag;
      // store the real parent tag
      // in some cases this could be different from the custom parent tag
      // for example in nested loops
      tag._parent = parent;
      // add this tag to the custom parent tag
      addChildTag(tag, tagName, ptag);
      // and also to the real parent tag
      if (ptag !== parent)
        addChildTag(tag, tagName, parent);
      // empty the child node once we got its template
      // to avoid that its children get compiled multiple times
      opts.root.innerHTML = '';
      return tag
    }
    /**
 * Loop backward all the parents tree to detect the first custom parent tag
 * @param   { Object } tag - a Tag instance
 * @returns { Object } the instance of the first custom parent tag found
 */
    function getImmediateCustomParentTag(tag) {
      var ptag = tag;
      while (!getTag(ptag.root)) {
        if (!ptag.parent)
          break;
        ptag = ptag.parent
      }
      return ptag
    }
    /**
 * Helper function to set an immutable property
 * @param   { Object } el - object where the new property will be set
 * @param   { String } key - object key where the new property will be stored
 * @param   { * } value - value of the new property
* @param   { Object } options - set the propery overriding the default options
 * @returns { Object } - the initial object
 */
    function defineProperty(el, key, value, options) {
      Object.defineProperty(el, key, extend({
        value: value,
        enumerable: false,
        writable: false,
        configurable: false
      }, options));
      return el
    }
    /**
 * Get the tag name of any DOM node
 * @param   { Object } dom - DOM node we want to parse
 * @returns { String } name to identify this dom node in riot
 */
    function getTagName(dom) {
      var child = getTag(dom), namedTag = getAttr(dom, 'name'), tagName = namedTag && !tmpl.hasExpr(namedTag) ? namedTag : child ? child.name : dom.tagName.toLowerCase();
      return tagName
    }
    /**
 * Extend any object with other properties
 * @param   { Object } src - source object
 * @returns { Object } the resulting extended object
 *
 * var obj = { foo: 'baz' }
 * extend(obj, {bar: 'bar', foo: 'bar'})
 * console.log(obj) => {bar: 'bar', foo: 'bar'}
 *
 */
    function extend(src) {
      var obj, args = arguments;
      for (var i = 1; i < args.length; ++i) {
        if (obj = args[i]) {
          for (var key in obj) {
            // check if this property of the source object could be overridden
            if (isWritable(src, key))
              src[key] = obj[key]
          }
        }
      }
      return src
    }
    /**
 * Check whether an array contains an item
 * @param   { Array } arr - target array
 * @param   { * } item - item to test
 * @returns { Boolean } Does 'arr' contain 'item'?
 */
    function contains(arr, item) {
      return ~arr.indexOf(item)
    }
    /**
 * Check whether an object is a kind of array
 * @param   { * } a - anything
 * @returns {Boolean} is 'a' an array?
 */
    function isArray(a) {
      return Array.isArray(a) || a instanceof Array
    }
    /**
 * Detect whether a property of an object could be overridden
 * @param   { Object }  obj - source object
 * @param   { String }  key - object property
 * @returns { Boolean } is this property writable?
 */
    function isWritable(obj, key) {
      var props = Object.getOwnPropertyDescriptor(obj, key);
      return typeof obj[key] === T_UNDEF || props && props.writable
    }
    /**
 * With this function we avoid that the internal Tag methods get overridden
 * @param   { Object } data - options we want to use to extend the tag instance
 * @returns { Object } clean object without containing the riot internal reserved words
 */
    function cleanUpData(data) {
      if (!(data instanceof Tag) && !(data && typeof data.trigger == T_FUNCTION))
        return data;
      var o = {};
      for (var key in data) {
        if (!contains(RESERVED_WORDS_BLACKLIST, key))
          o[key] = data[key]
      }
      return o
    }
    /**
 * Walk down recursively all the children tags starting dom node
 * @param   { Object }   dom - starting node where we will start the recursion
 * @param   { Function } fn - callback to transform the child node just found
 */
    function walk(dom, fn) {
      if (dom) {
        // stop the recursion
        if (fn(dom) === false)
          return;
        else {
          dom = dom.firstChild;
          while (dom) {
            walk(dom, fn);
            dom = dom.nextSibling
          }
        }
      }
    }
    /**
 * Minimize risk: only zero or one _space_ between attr & value
 * @param   { String }   html - html string we want to parse
 * @param   { Function } fn - callback function to apply on any attribute found
 */
    function walkAttributes(html, fn) {
      var m, re = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
      while (m = re.exec(html)) {
        fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
      }
    }
    /**
 * Check whether a DOM node is in stub mode, useful for the riot 'if' directive
 * @param   { Object }  dom - DOM node we want to parse
 * @returns { Boolean } -
 */
    function isInStub(dom) {
      while (dom) {
        if (dom.inStub)
          return true;
        dom = dom.parentNode
      }
      return false
    }
    /**
 * Create a generic DOM node
 * @param   { String } name - name of the DOM node we want to create
 * @returns { Object } DOM node just created
 */
    function mkEl(name) {
      return document.createElement(name)
    }
    /**
 * Shorter and fast way to select multiple nodes in the DOM
 * @param   { String } selector - DOM selector
 * @param   { Object } ctx - DOM node where the targets of our search will is located
 * @returns { Object } dom nodes found
 */
    function $$(selector, ctx) {
      return (ctx || document).querySelectorAll(selector)
    }
    /**
 * Shorter and fast way to select a single node in the DOM
 * @param   { String } selector - unique dom selector
 * @param   { Object } ctx - DOM node where the target of our search will is located
 * @returns { Object } dom node found
 */
    function $(selector, ctx) {
      return (ctx || document).querySelector(selector)
    }
    /**
 * Simple object prototypal inheritance
 * @param   { Object } parent - parent object
 * @returns { Object } child instance
 */
    function inherit(parent) {
      function Child() {
      }
      Child.prototype = parent;
      return new Child
    }
    /**
 * Get the name property needed to identify a DOM node in riot
 * @param   { Object } dom - DOM node we need to parse
 * @returns { String | undefined } give us back a string to identify this dom node
 */
    function getNamedKey(dom) {
      return getAttr(dom, 'id') || getAttr(dom, 'name')
    }
    /**
 * Set the named properties of a tag element
 * @param { Object } dom - DOM node we need to parse
 * @param { Object } parent - tag instance where the named dom element will be eventually added
 * @param { Array } keys - list of all the tag instance properties
 */
    function setNamed(dom, parent, keys) {
      // get the key value we want to add to the tag instance
      var key = getNamedKey(dom), isArr,
        // add the node detected to a tag instance using the named property
        add = function (value) {
          // avoid to override the tag properties already set
          if (contains(keys, key))
            return;
          // check whether this value is an array
          isArr = isArray(value);
          // if the key was never set
          if (!value)
            // set it once on the tag instance
            parent[key] = dom  // if it was an array and not yet set
;
          else if (!isArr || isArr && !contains(value, dom)) {
            // add the dom node into the array
            if (isArr)
              value.push(dom);
            else
              parent[key] = [
                value,
                dom
              ]
          }
        };
      // skip the elements with no named properties
      if (!key)
        return;
      // check whether this key has been already evaluated
      if (tmpl.hasExpr(key))
        // wait the first updated event only once
        parent.one('mount', function () {
          key = getNamedKey(dom);
          add(parent[key])
        });
      else
        add(parent[key])
    }
    /**
 * Faster String startsWith alternative
 * @param   { String } src - source string
 * @param   { String } str - test string
 * @returns { Boolean } -
 */
    function startsWith(src, str) {
      return src.slice(0, str.length) === str
    }
    /**
 * requestAnimationFrame function
 * Adapted from https://gist.github.com/paulirish/1579671, license MIT
 */
    var rAF = function (w) {
      var raf = w.requestAnimationFrame || w.mozRequestAnimationFrame || w.webkitRequestAnimationFrame;
      if (!raf || /iP(ad|hone|od).*OS 6/.test(w.navigator.userAgent)) {
        // buggy iOS6
        var lastTime = 0;
        raf = function (cb) {
          var nowtime = Date.now(), timeout = Math.max(16 - (nowtime - lastTime), 0);
          setTimeout(function () {
            cb(lastTime = nowtime + timeout)
          }, timeout)
        }
      }
      return raf
    }(window || {});
    /**
 * Mount a tag creating new Tag instance
 * @param   { Object } root - dom node where the tag will be mounted
 * @param   { String } tagName - name of the riot tag we want to mount
 * @param   { Object } opts - options to pass to the Tag instance
 * @returns { Tag } a new Tag instance
 */
    function mountTo(root, tagName, opts) {
      var tag = __tagImpl[tagName],
        // cache the inner HTML to fix #855
        innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
      // clear the inner html
      root.innerHTML = '';
      if (tag && root)
        tag = new Tag(tag, {
          root: root,
          opts: opts
        }, innerHTML);
      if (tag && tag.mount) {
        tag.mount();
        // add this tag to the virtualDom variable
        if (!contains(__virtualDom, tag))
          __virtualDom.push(tag)
      }
      return tag
    }
    /**
 * Riot public api
 */
    // share methods for other riot parts, e.g. compiler
    riot.util = {
      brackets: brackets,
      tmpl: tmpl
    };
    /**
 * Create a mixin that could be globally shared across all the tags
 */
    riot.mixin = function () {
      var mixins = {};
      /**
   * Create/Return a mixin by its name
   * @param   { String } name - mixin name (global mixin if missing)
   * @param   { Object } mixin - mixin logic
   * @returns { Object } the mixin logic
   */
      return function (name, mixin) {
        if (isObject(name)) {
          mixin = name;
          mixins[GLOBAL_MIXIN] = extend(mixins[GLOBAL_MIXIN] || {}, mixin);
          return
        }
        if (!mixin)
          return mixins[name];
        mixins[name] = mixin
      }
    }();
    /**
 * Create a new riot tag implementation
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   html - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
    riot.tag = function (name, html, css, attrs, fn) {
      if (isFunction(attrs)) {
        fn = attrs;
        if (/^[\w\-]+\s?=/.test(css)) {
          attrs = css;
          css = ''
        } else
          attrs = ''
      }
      if (css) {
        if (isFunction(css))
          fn = css;
        else
          styleManager.add(css)
      }
      name = name.toLowerCase();
      __tagImpl[name] = {
        name: name,
        tmpl: html,
        attrs: attrs,
        fn: fn
      };
      return name
    };
    /**
 * Create a new riot tag implementation (for use by the compiler)
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   html - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
    riot.tag2 = function (name, html, css, attrs, fn) {
      if (css)
        styleManager.add(css);
      //if (bpair) riot.settings.brackets = bpair
      __tagImpl[name] = {
        name: name,
        tmpl: html,
        attrs: attrs,
        fn: fn
      };
      return name
    };
    /**
 * Mount a tag using a specific tag implementation
 * @param   { String } selector - tag DOM selector
 * @param   { String } tagName - tag implementation name
 * @param   { Object } opts - tag logic
 * @returns { Array } new tags instances
 */
    riot.mount = function (selector, tagName, opts) {
      var els, allTags, tags = [];
      // helper functions
      function addRiotTags(arr) {
        var list = '';
        each(arr, function (e) {
          if (!/[^-\w]/.test(e)) {
            e = e.trim().toLowerCase();
            list += ',[' + RIOT_TAG_IS + '="' + e + '"],[' + RIOT_TAG + '="' + e + '"]'
          }
        });
        return list
      }
      function selectAllTags() {
        var keys = Object.keys(__tagImpl);
        return keys + addRiotTags(keys)
      }
      function pushTags(root) {
        if (root.tagName) {
          var riotTag = getAttr(root, RIOT_TAG_IS) || getAttr(root, RIOT_TAG);
          // have tagName? force riot-tag to be the same
          if (tagName && riotTag !== tagName) {
            riotTag = tagName;
            setAttr(root, RIOT_TAG_IS, tagName)
          }
          var tag = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);
          if (tag)
            tags.push(tag)
        } else if (root.length) {
          each(root, pushTags)  // assume nodeList
        }
      }
      // ----- mount code -----
      // inject styles into DOM
      styleManager.inject();
      if (isObject(tagName)) {
        opts = tagName;
        tagName = 0
      }
      // crawl the DOM to find the tag
      if (typeof selector === T_STRING) {
        if (selector === '*')
          // select all the tags registered
          // and also the tags found with the riot-tag attribute set
          selector = allTags = selectAllTags();
        else
          // or just the ones named like the selector
          selector += addRiotTags(selector.split(/, */));
        // make sure to pass always a selector
        // to the querySelectorAll function
        els = selector ? $$(selector) : []
      } else
        // probably you have passed already a tag or a NodeList
        els = selector;
      // select all the registered and mount them inside their root elements
      if (tagName === '*') {
        // get all custom tags
        tagName = allTags || selectAllTags();
        // if the root els it's just a single tag
        if (els.tagName)
          els = $$(tagName, els);
        else {
          // select all the children for all the different root elements
          var nodeList = [];
          each(els, function (_el) {
            nodeList.push($$(tagName, _el))
          });
          els = nodeList
        }
        // get rid of the tagName
        tagName = 0
      }
      pushTags(els);
      return tags
    };
    /**
 * Update all the tags instances created
 * @returns { Array } all the tags instances
 */
    riot.update = function () {
      return each(__virtualDom, function (tag) {
        tag.update()
      })
    };
    /**
 * Export the Tag constructor
 */
    riot.Tag = Tag;
    // support CommonJS, AMD & browser
    /* istanbul ignore next */
    if (typeof exports === T_OBJECT)
      module.exports = riot;
    else if (typeof define === T_FUNCTION && typeof define.amd !== T_UNDEF)
      define(function () {
        return riot
      });
    else
      window.riot = riot
  }(typeof window != 'undefined' ? window : void 0))
});
// source: node_modules/daisho-riot/lib/controls/text.js
require.define('daisho-riot/lib/controls/text', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, Text, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  module.exports = Text = function (superClass) {
    extend(Text, superClass);
    function Text() {
      return Text.__super__.constructor.apply(this, arguments)
    }
    Text.prototype.tag = 'text-control';
    Text.prototype.type = 'text';
    Text.prototype.html = require('daisho-riot/templates/text');
    Text.prototype.formElement = 'input';
    Text.prototype.init = function () {
      Text.__super__.init.apply(this, arguments);
      console.log('text intiialized');
      return this.on('updated', function (_this) {
        return function () {
          var el;
          return el = _this.root.getElementsByTagName(_this.formElement)[0]
        }
      }(this))
    };
    return Text
  }(Control)  //# sourceMappingURL=text.js.map
});
// source: node_modules/daisho-riot/templates/text.html
require.define('daisho-riot/templates/text', function (module, exports, __dirname, __filename, process) {
  module.exports = '<input id="{ input.name }" name="{ name || input.name }" type="{ type }" class="{ filled: input.ref(input.name) }" onchange="{ change }" onblur="{ change }" value="{ input.ref(input.name) }">\n<label for="{ input.name }">{ placeholder }</label>\n'
});
// source: node_modules/daisho-riot/lib/page.js
require.define('daisho-riot/lib/page', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Page, RiotPage, riot, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Page = require('daisho-sdk/lib').Page;
  riot = require('riot/riot');
  module.exports = RiotPage = function (superClass) {
    extend(RiotPage, superClass);
    function RiotPage() {
      return RiotPage.__super__.constructor.apply(this, arguments)
    }
    RiotPage.prototype.tagEl = 'tag';
    RiotPage.prototype.opts = null;
    RiotPage.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    RiotPage.prototype.render = function () {
      var el;
      el = document.createElement(this.tag);
      this.el.appendChild(el);
      return this.tagEl = riot.mount(this.tag, this.opts)[0]
    };
    RiotPage.prototype.unload = function () {
      return this.tagEl.unmount()
    };
    return RiotPage
  }(Page)  //# sourceMappingURL=page.js.map
});
// source: node_modules/daisho-riot/lib/forms/index.js
require.define('daisho-riot/lib/forms', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    TableRow: require('daisho-riot/lib/forms/table-row'),
    register: function () {
      return this.TableRow.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/forms/table-row.js
require.define('daisho-riot/lib/forms/table-row', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, TableRow, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  module.exports = TableRow = function (superClass) {
    extend(TableRow, superClass);
    function TableRow() {
      return TableRow.__super__.constructor.apply(this, arguments)
    }
    TableRow.prototype.tag = 'table-row';
    TableRow.prototype.configs = null;
    TableRow.prototype.data = null;
    TableRow.prototype.columns = null;
    TableRow.prototype.html = require('daisho-riot/templates/table-row');
    return TableRow
  }(CrowdControl.Views.Form)  //# sourceMappingURL=table-row.js.map
});
// source: node_modules/daisho-riot/templates/table-row.html
require.define('daisho-riot/templates/table-row', function (module, exports, __dirname, __filename, process) {
  module.exports = ''
});
// source: node_modules/daisho-riot/lib/widgets/index.js
require.define('daisho-riot/lib/widgets', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    TableWidget: require('daisho-riot/lib/widgets/table-widget'),
    register: function () {
      return this.TableWidget.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/widgets/table-widget.js
require.define('daisho-riot/lib/widgets/table-widget', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, TableWidget, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  module.exports = TableWidget = function (superClass) {
    extend(TableWidget, superClass);
    function TableWidget() {
      return TableWidget.__super__.constructor.apply(this, arguments)
    }
    TableWidget.prototype.tag = 'table-widget';
    TableWidget.prototype.configs = [];
    TableWidget.prototype.columns = [];
    TableWidget.prototype.data = null;
    TableWidget.prototype.html = require('daisho-riot/templates/table-widget');
    return TableWidget
  }(CrowdControl.Views.View)  //# sourceMappingURL=table-widget.js.map
});
// source: node_modules/daisho-riot/templates/table-widget.html
require.define('daisho-riot/templates/table-widget', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div class="table-head">\n  <div class="table-row table-head">\n    <div each="{ column, i in columns }">{ column.id }</div>\n  </div>\n</div>\n<div class="table-body">\n  <table-row class="table-row" each="{ item, i in data.get(\'items\') }" data="{ data.ref(\'items.\' + i) }" config="{ config }" columns="{ columns }"></table-row>\n</div>\n\n'
});
// source: example/fixtures/home-v1.0.0/grid.coffee
require.define('./grid', function (module, exports, __dirname, __filename, process) {
  var Grid, View, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib').Views.View;
  module.exports = Grid = function (superClass) {
    extend(Grid, superClass);
    function Grid() {
      return Grid.__super__.constructor.apply(this, arguments)
    }
    Grid.prototype.tag = 'grid';
    Grid.prototype.html = require('./templates/grid');
    Grid.prototype.route = function () {
    };
    Grid.prototype.init = function () {
      return this.on('updated', function () {
        var $grid;
        $grid = $(this.root).find('.grid');
        if ($grid[0].$grid == null) {
          $grid.packery({
            itemSelector: '.grid-item',
            gutter: 0,
            columnWidth: 360
          });
          $grid[0].$grid = $grid
        }
        return $grid.find('.grid-item').each(function (i, gridItem) {
          var draggie;
          if (gridItem.draggie != null) {
            return
          }
          draggie = new Draggabilly(gridItem);
          gridItem.draggie = draggie;
          return $grid.packery('bindDraggabillyEvents', draggie)
        })
      })
    };
    return Grid
  }(View)
});
// source: example/fixtures/home-v1.0.0/templates/grid.html
require.define('./templates/grid', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div class="grid">\n  <div class="grid-item narrow middle">\n    <div>\n      GRID ELEMENT 1\n    </div>\n  </div>\n  <div class="grid-item medium short">\n    <div>\n      GRID ELEMENT 2\n    </div>\n  </div>\n  <div class="grid-item narrow short">\n    <div>\n      GRID ELEMENT 3\n    </div>\n  </div>\n  <div class="grid-item narrow short">\n    <div>\n      GRID ELEMENT 4\n    </div>\n  </div>\n  <div class="grid-item wide short">\n    <div>\n      GRID ELEMENT 5\n    </div>\n  </div>\n</div>\n\n'
});
// source: example/fixtures/home-v1.0.0/main.coffee
require.async('home-v1.0.0/bundle.js', function (module, exports, __dirname, __filename, process) {
  var Grid, Home, Module, RiotPage, Widgets, riot, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Module = require('daisho-sdk/lib').Module;
  RiotPage = require('daisho-riot/lib').RiotPage;
  riot = require('riot/riot');
  Grid = require('./grid');
  Grid.register();
  Widgets = function (superClass) {
    extend(Widgets, superClass);
    function Widgets() {
      return Widgets.__super__.constructor.apply(this, arguments)
    }
    Widgets.prototype.tag = 'grid';
    return Widgets
  }(RiotPage);
  module.exports = Home = function (superClass) {
    extend(Home, superClass);
    function Home() {
      return Home.__super__.constructor.apply(this, arguments)
    }
    Home.name = 'Home';
    Home.prototype.routes = { '/': Widgets };
    return Home
  }(Module)
})//# sourceMappingURL=data:application/json;base64,