// source: node_modules/daisho-sdk/lib/index.js
require.define('daisho-sdk/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Page: require('daisho-sdk/lib/page'),
    Module: require('daisho-sdk/lib/module')
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-sdk/lib/page.js
require.define('daisho-sdk/lib/page', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Page;
  module.exports = Page = function () {
    Page.prototype.el = null;
    Page.prototype.module = null;
    function Page(el, module1) {
      this.el = el;
      this.module = module1
    }
    Page.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    Page.prototype.render = function () {
    };
    Page.prototype.unload = function () {
    };
    Page.prototype.annotations = function () {
    };
    return Page
  }()  //# sourceMappingURL=page.js.map
});
// source: node_modules/daisho-sdk/lib/module.js
require.define('daisho-sdk/lib/module', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Module;
  module.exports = Module = function () {
    Module.prototype.json = null;
    function Module() {
    }
    Module.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    Module.prototype.unload = function () {
    };
    return Module
  }()  //# sourceMappingURL=module.js.map
});
// source: node_modules/daisho-riot/lib/index.js
require.define('daisho-riot/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Controls;
  Controls = require('daisho-riot/lib/controls');
  module.exports = {
    RiotPage: require('daisho-riot/lib/page'),
    Events: require('daisho-riot/lib/events'),
    Controls: require('daisho-riot/lib/controls'),
    Forms: require('daisho-riot/lib/forms'),
    Widgets: require('daisho-riot/lib/widgets'),
    register: function (m) {
      this.Controls.register(m);
      this.Forms.register();
      return this.Widgets.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/controls/index.js
require.define('daisho-riot/lib/controls', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  require('daisho-riot/lib/controls/poly');
  module.exports = {
    Control: require('daisho-riot/lib/controls/control'),
    Text: require('daisho-riot/lib/controls/text'),
    InlineText: require('daisho-riot/lib/controls/inline-text'),
    StaticText: require('daisho-riot/lib/controls/static-text'),
    StaticDate: require('daisho-riot/lib/controls/static-date'),
    StaticAgo: require('daisho-riot/lib/controls/static-ago'),
    register: function (m) {
      this.Text.register(m);
      this.InlineText.register(m);
      this.StaticText.register(m);
      this.StaticDate.register(m);
      return this.StaticAgo.register(m)
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/controls/poly.js
require.define('daisho-riot/lib/controls/poly', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var riot;
  riot = require('crowdcontrol/lib').riot.riot;
  module.exports = riot.tag('daisho-poly-control', '', function (opts) {
    var el, tag, tagEl;
    if (opts.tag != null) {
      tag = opts.tag;
      delete opts.tag;
      el = document.createElement(tag);
      this.root.appendChild(el);
      opts.parent = this.parent;
      tagEl = riot.mount(el, tag, opts)[0];
      return tagEl.update()
    }
  })  //# sourceMappingURL=poly.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/index.js
require.define('crowdcontrol/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, r, riot;
  r = require('crowdcontrol/lib/riot');
  riot = r();
  CrowdControl = {
    Views: require('crowdcontrol/lib/views'),
    tags: [],
    start: function (opts) {
      return this.tags = riot.mount('*', opts)
    },
    update: function () {
      var i, len, ref, results, tag;
      ref = this.tags;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        results.push(tag.update())
      }
      return results
    },
    riot: r
  };
  if (module.exports != null) {
    module.exports = CrowdControl
  }
  if (typeof window !== 'undefined' && window !== null) {
    if (window.Crowdstart != null) {
      window.Crowdstart.Crowdcontrol = CrowdControl
    } else {
      window.Crowdstart = { CrowdControl: CrowdControl }
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/riot.js
require.define('crowdcontrol/lib/riot', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var r;
  r = function () {
    return this.riot
  };
  r.set = function (riot) {
    this.riot = riot
  };
  r.riot = typeof window !== 'undefined' && window !== null ? window.riot : void 0;
  module.exports = r  //# sourceMappingURL=riot.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/index.js
require.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Form: require('crowdcontrol/lib/views/form'),
    Input: require('crowdcontrol/lib/views/input'),
    View: require('crowdcontrol/lib/views/view')
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/form.js
require.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib/views/view');
  inputify = require('crowdcontrol/lib/views/inputify');
  observable = require('crowdcontrol/lib/riot')().observable;
  Promise = require('broken/lib');
  settle = require('promise-settle');
  Form = function (superClass) {
    extend(Form, superClass);
    function Form() {
      return Form.__super__.constructor.apply(this, arguments)
    }
    Form.prototype.configs = null;
    Form.prototype.inputs = null;
    Form.prototype.data = null;
    Form.prototype.initInputs = function () {
      var input, name, ref, results1;
      this.inputs = {};
      if (this.configs != null) {
        this.inputs = inputify(this.data, this.configs);
        ref = this.inputs;
        results1 = [];
        for (name in ref) {
          input = ref[name];
          results1.push(observable(input))
        }
        return results1
      }
    };
    Form.prototype.init = function () {
      return this.initInputs()
    };
    Form.prototype.submit = function () {
      var input, name, pRef, ps, ref;
      ps = [];
      ref = this.inputs;
      for (name in ref) {
        input = ref[name];
        pRef = {};
        input.trigger('validate', pRef);
        ps.push(pRef.p)
      }
      return settle(ps).then(function (_this) {
        return function (results) {
          var i, len, result;
          for (i = 0, len = results.length; i < len; i++) {
            result = results[i];
            if (!result.isFulfilled()) {
              return
            }
          }
          return _this._submit.apply(_this, arguments)
        }
      }(this))
    };
    Form.prototype._submit = function () {
    };
    return Form
  }(View);
  module.exports = Form  //# sourceMappingURL=form.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/view.js
require.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
  riot = require('crowdcontrol/lib/riot')();
  objectAssign = require('object-assign');
  setPrototypeOf = function () {
    var mixinProperties, setProtoOf;
    setProtoOf = function (obj, proto) {
      return obj.__proto__ = proto
    };
    mixinProperties = function (obj, proto) {
      var prop, results;
      results = [];
      for (prop in proto) {
        if (obj[prop] == null) {
          results.push(obj[prop] = proto[prop])
        } else {
          results.push(void 0)
        }
      }
      return results
    };
    if (Object.setPrototypeOf || { __proto__: [] } instanceof Array) {
      return setProtoOf
    } else {
      return mixinProperties
    }
  }();
  isFunction = require('is-function');
  collapsePrototype = function (collapse, proto) {
    var parentProto;
    if (proto === View.prototype) {
      return
    }
    parentProto = Object.getPrototypeOf(proto);
    collapsePrototype(collapse, parentProto);
    return objectAssign(collapse, parentProto)
  };
  View = function () {
    View.register = function () {
      return new this
    };
    View.prototype.tag = '';
    View.prototype.html = '';
    View.prototype.css = '';
    View.prototype.attrs = '';
    View.prototype.events = null;
    function View() {
      var newProto;
      newProto = collapsePrototype({}, this);
      this.beforeInit();
      riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
        var fn, handler, k, name, parent, proto, ref, ref1, self, v;
        if (newProto != null) {
          for (k in newProto) {
            v = newProto[k];
            if (isFunction(v)) {
              (function (_this) {
                return function (v) {
                  var oldFn;
                  if (_this[k] != null) {
                    oldFn = _this[k];
                    return _this[k] = function () {
                      oldFn.apply(_this, arguments);
                      return v.apply(_this, arguments)
                    }
                  } else {
                    return _this[k] = function () {
                      return v.apply(_this, arguments)
                    }
                  }
                }
              }(this)(v))
            } else {
              this[k] = v
            }
          }
        }
        self = this;
        parent = (ref = self.parent) != null ? ref : opts.parent;
        proto = Object.getPrototypeOf(self);
        while (parent != null && parent !== proto) {
          setPrototypeOf(self, parent);
          self = parent;
          parent = self.parent;
          proto = Object.getPrototypeOf(self)
        }
        if (opts != null) {
          for (k in opts) {
            v = opts[k];
            this[k] = v
          }
        }
        if (this.events != null) {
          ref1 = this.events;
          fn = function (_this) {
            return function (name, handler) {
              if (typeof handler === 'string') {
                return _this.on(name, function () {
                  return _this[handler].apply(_this, arguments)
                })
              } else {
                return _this.on(name, function () {
                  return handler.apply(_this, arguments)
                })
              }
            }
          }(this);
          for (name in ref1) {
            handler = ref1[name];
            fn(name, handler)
          }
        }
        return this.init(opts)
      })
    }
    View.prototype.beforeInit = function () {
    };
    View.prototype.init = function () {
    };
    return View
  }();
  module.exports = View  //# sourceMappingURL=view.js.map
});
// source: node_modules/daisho-riot/node_modules/object-assign/index.js
require.define('object-assign', function (module, exports, __dirname, __filename, process) {
  /* eslint-disable no-unused-vars */
  'use strict';
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined')
    }
    return Object(val)
  }
  module.exports = Object.assign || function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key]
        }
      }
      if (Object.getOwnPropertySymbols) {
        symbols = Object.getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]]
          }
        }
      }
    }
    return to
  }
});
// source: node_modules/daisho-riot/node_modules/is-function/index.js
require.define('is-function', function (module, exports, __dirname, __filename, process) {
  module.exports = isFunction;
  var toString = Object.prototype.toString;
  function isFunction(fn) {
    var string = toString.call(fn);
    return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
  }
  ;
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/inputify.js
require.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Promise, inputify, isFunction, isRef, refer;
  Promise = require('broken/lib');
  isFunction = require('is-function');
  refer = require('referential/lib');
  isRef = function (o) {
    return o != null && isFunction(o.ref)
  };
  inputify = function (data, configs) {
    var config, fn, inputs, name, ref;
    ref = data;
    if (!isRef(ref)) {
      ref = refer(data)
    }
    inputs = {};
    fn = function (name, config) {
      var fn1, i, input, len, middleware, middlewareFn, validate;
      middleware = [];
      if (config && config.length > 0) {
        fn1 = function (name, middlewareFn) {
          return middleware.push(function (pair) {
            ref = pair[0], name = pair[1];
            return Promise.resolve(pair).then(function (pair) {
              return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
            }).then(function (v) {
              ref.set(name, v);
              return pair
            })
          })
        };
        for (i = 0, len = config.length; i < len; i++) {
          middlewareFn = config[i];
          fn1(name, middlewareFn)
        }
      }
      middleware.push(function (pair) {
        ref = pair[0], name = pair[1];
        return Promise.resolve(ref.get(name))
      });
      validate = function (ref, name) {
        var j, len1, p;
        p = Promise.resolve([
          ref,
          name
        ]);
        for (j = 0, len1 = middleware.length; j < len1; j++) {
          middlewareFn = middleware[j];
          p = p.then(middlewareFn)
        }
        return p
      };
      input = {
        name: name,
        ref: ref,
        config: config,
        validate: validate
      };
      return inputs[name] = input
    };
    for (name in configs) {
      config = configs[name];
      fn(name, config)
    }
    return inputs
  };
  module.exports = inputify  //# sourceMappingURL=inputify.js.map
});
// source: node_modules/daisho-riot/node_modules/broken/lib/index.js
require.define('broken/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Promise, PromiseInspection;
  Promise = require('zousan/zousan-min');
  Promise.suppressUncaughtRejectionError = false;
  PromiseInspection = function () {
    function PromiseInspection(arg) {
      this.state = arg.state, this.value = arg.value, this.reason = arg.reason
    }
    PromiseInspection.prototype.isFulfilled = function () {
      return this.state === 'fulfilled'
    };
    PromiseInspection.prototype.isRejected = function () {
      return this.state === 'rejected'
    };
    return PromiseInspection
  }();
  Promise.reflect = function (promise) {
    return new Promise(function (resolve, reject) {
      return promise.then(function (value) {
        return resolve(new PromiseInspection({
          state: 'fulfilled',
          value: value
        }))
      })['catch'](function (err) {
        return resolve(new PromiseInspection({
          state: 'rejected',
          reason: err
        }))
      })
    })
  };
  Promise.settle = function (promises) {
    return Promise.all(promises.map(Promise.reflect))
  };
  Promise.prototype.callback = function (cb) {
    if (typeof cb === 'function') {
      this.then(function (value) {
        return cb(null, value)
      });
      this['catch'](function (error) {
        return cb(error, null)
      })
    }
    return this
  };
  module.exports = Promise  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/zousan/zousan-min.js
require.define('zousan/zousan-min', function (module, exports, __dirname, __filename, process) {
  !function (t) {
    'use strict';
    function e(t) {
      if (t) {
        var e = this;
        t(function (t) {
          e.resolve(t)
        }, function (t) {
          e.reject(t)
        })
      }
    }
    function n(t, e) {
      if ('function' == typeof t.y)
        try {
          var n = t.y.call(i, e);
          t.p.resolve(n)
        } catch (o) {
          t.p.reject(o)
        }
      else
        t.p.resolve(e)
    }
    function o(t, e) {
      if ('function' == typeof t.n)
        try {
          var n = t.n.call(i, e);
          t.p.resolve(n)
        } catch (o) {
          t.p.reject(o)
        }
      else
        t.p.reject(e)
    }
    var r, i, c = 'fulfilled', u = 'rejected', s = 'undefined', f = function () {
        function t() {
          for (; e.length - n;)
            e[n](), e[n++] = i, n == o && (e.splice(0, o), n = 0)
        }
        var e = [], n = 0, o = 1024, r = function () {
            if (typeof MutationObserver !== s) {
              var e = document.createElement('div'), n = new MutationObserver(t);
              return n.observe(e, { attributes: !0 }), function () {
                e.setAttribute('a', 0)
              }
            }
            return typeof setImmediate !== s ? function () {
              setImmediate(t)
            } : function () {
              setTimeout(t, 0)
            }
          }();
        return function (t) {
          e.push(t), e.length - n == 1 && r()
        }
      }();
    e.prototype = {
      resolve: function (t) {
        if (this.state === r) {
          if (t === this)
            return this.reject(new TypeError('Attempt to resolve promise with self'));
          var e = this;
          if (t && ('function' == typeof t || 'object' == typeof t))
            try {
              var o = !0, i = t.then;
              if ('function' == typeof i)
                return void i.call(t, function (t) {
                  o && (o = !1, e.resolve(t))
                }, function (t) {
                  o && (o = !1, e.reject(t))
                })
            } catch (u) {
              return void (o && this.reject(u))
            }
          this.state = c, this.v = t, e.c && f(function () {
            for (var o = 0, r = e.c.length; r > o; o++)
              n(e.c[o], t)
          })
        }
      },
      reject: function (t) {
        if (this.state === r) {
          this.state = u, this.v = t;
          var n = this.c;
          n ? f(function () {
            for (var e = 0, r = n.length; r > e; e++)
              o(n[e], t)
          }) : e.suppressUncaughtRejectionError || console.log('You upset Zousan. Please catch rejections: ', t, t.stack)
        }
      },
      then: function (t, i) {
        var u = new e, s = {
            y: t,
            n: i,
            p: u
          };
        if (this.state === r)
          this.c ? this.c.push(s) : this.c = [s];
        else {
          var l = this.state, a = this.v;
          f(function () {
            l === c ? n(s, a) : o(s, a)
          })
        }
        return u
      },
      'catch': function (t) {
        return this.then(null, t)
      },
      'finally': function (t) {
        return this.then(t, t)
      },
      timeout: function (t, n) {
        n = n || 'Timeout';
        var o = this;
        return new e(function (e, r) {
          setTimeout(function () {
            r(Error(n))
          }, t), o.then(function (t) {
            e(t)
          }, function (t) {
            r(t)
          })
        })
      }
    }, e.resolve = function (t) {
      var n = new e;
      return n.resolve(t), n
    }, e.reject = function (t) {
      var n = new e;
      return n.reject(t), n
    }, e.all = function (t) {
      function n(n, c) {
        'function' != typeof n.then && (n = e.resolve(n)), n.then(function (e) {
          o[c] = e, r++, r == t.length && i.resolve(o)
        }, function (t) {
          i.reject(t)
        })
      }
      for (var o = [], r = 0, i = new e, c = 0; c < t.length; c++)
        n(t[c], c);
      return t.length || i.resolve(o), i
    }, typeof module != s && module.exports && (module.exports = e), t.Zousan = e, e.soon = f
  }('undefined' != typeof global ? global : this)
});
// source: node_modules/daisho-riot/node_modules/referential/lib/index.js
require.define('referential/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var refer;
  refer = require('referential/lib/refer');
  refer.Ref = require('referential/lib/ref');
  module.exports = refer  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/referential/lib/refer.js
require.define('referential/lib/refer', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Ref, refer;
  Ref = require('referential/lib/ref');
  module.exports = refer = function (state, ref) {
    var fn, i, len, method, ref1, wrapper;
    if (ref == null) {
      ref = null
    }
    if (ref == null) {
      ref = new Ref(state)
    }
    wrapper = function (key) {
      return ref.get(key)
    };
    ref1 = [
      'value',
      'get',
      'set',
      'extend',
      'index',
      'ref'
    ];
    fn = function (method) {
      return wrapper[method] = function () {
        return ref[method].apply(ref, arguments)
      }
    };
    for (i = 0, len = ref1.length; i < len; i++) {
      method = ref1[i];
      fn(method)
    }
    wrapper.refer = function (key) {
      return refer(null, ref.ref(key))
    };
    wrapper.clone = function (key) {
      return refer(null, ref.clone(key))
    };
    return wrapper
  }  //# sourceMappingURL=refer.js.map
});
// source: node_modules/daisho-riot/node_modules/referential/lib/ref.js
require.define('referential/lib/ref', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Ref, extend, isArray, isNumber, isObject, isString;
  extend = require('node.extend');
  isArray = require('is-array');
  isNumber = require('is-number');
  isObject = require('is-object');
  isString = require('is-string');
  module.exports = Ref = function () {
    function Ref(_value, parent, key1) {
      this._value = _value;
      this.parent = parent;
      this.key = key1;
      this._cache = {}
    }
    Ref.prototype._mutate = function () {
      return this._cache = {}
    };
    Ref.prototype.value = function (state) {
      if (!this.parent) {
        if (state != null) {
          this._value = state
        }
        return this._value
      }
      if (state != null) {
        return this.parent.set(this.key, state)
      } else {
        return this.parent.get(this.key)
      }
    };
    Ref.prototype.ref = function (key) {
      if (!key) {
        return this
      }
      return new Ref(null, this, key)
    };
    Ref.prototype.get = function (key) {
      if (!key) {
        return this.value()
      } else {
        if (this._cache[key]) {
          return this._cache[key]
        }
        return this._cache[key] = this.index(key)
      }
    };
    Ref.prototype.set = function (key, value) {
      this._mutate();
      if (value == null) {
        this.value(extend(this.value(), key))
      } else {
        this.index(key, value)
      }
      return this
    };
    Ref.prototype.extend = function (key, value) {
      var clone;
      this._mutate();
      if (value == null) {
        this.value(extend(true, this.value(), key))
      } else {
        if (isObject(value)) {
          this.value(extend(true, this.ref(key).get(), value))
        } else {
          clone = this.clone();
          this.set(key, value);
          this.value(extend(true, clone.get(), this.value()))
        }
      }
      return this
    };
    Ref.prototype.clone = function (key) {
      return new Ref(extend(true, {}, this.get(key)))
    };
    Ref.prototype.index = function (key, value, obj, prev) {
      var next, prop, props;
      if (obj == null) {
        obj = this.value()
      }
      if (this.parent) {
        return this.parent.index(this.key + '.' + key, value)
      }
      if (isNumber(key)) {
        key = String(key)
      }
      props = key.split('.');
      if (value == null) {
        while (prop = props.shift()) {
          if (!props.length) {
            return obj != null ? obj[prop] : void 0
          }
          obj = obj != null ? obj[prop] : void 0
        }
        return
      }
      while (prop = props.shift()) {
        if (!props.length) {
          return obj[prop] = value
        } else {
          next = props[0];
          if (obj[next] == null) {
            if (isNumber(next)) {
              if (obj[prop] == null) {
                obj[prop] = []
              }
            } else {
              if (obj[prop] == null) {
                obj[prop] = {}
              }
            }
          }
        }
        obj = obj[prop]
      }
    };
    return Ref
  }()  //# sourceMappingURL=ref.js.map
});
// source: node_modules/daisho-riot/node_modules/node.extend/index.js
require.define('node.extend', function (module, exports, __dirname, __filename, process) {
  module.exports = require('node.extend/lib/extend')
});
// source: node_modules/daisho-riot/node_modules/node.extend/lib/extend.js
require.define('node.extend/lib/extend', function (module, exports, __dirname, __filename, process) {
  /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
  var is = require('is');
  function extend() {
    var target = arguments[0] || {};
    var i = 1;
    var length = arguments.length;
    var deep = false;
    var options, name, src, copy, copy_is_array, clone;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !is.fn(target)) {
      target = {}
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      options = arguments[i];
      if (options != null) {
        if (typeof options === 'string') {
          options = options.split('')
        }
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];
          // Prevent never-ending loop
          if (target === copy) {
            continue
          }
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
            if (copy_is_array) {
              copy_is_array = false;
              clone = src && is.array(src) ? src : []
            } else {
              clone = src && is.hash(src) ? src : {}
            }
            // Never move original objects, clone them
            target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
          } else if (typeof copy !== 'undefined') {
            target[name] = copy
          }
        }
      }
    }
    // Return the modified object
    return target
  }
  ;
  /**
 * @public
 */
  extend.version = '1.1.3';
  /**
 * Exports module.
 */
  module.exports = extend
});
// source: node_modules/daisho-riot/node_modules/is/index.js
require.define('is', function (module, exports, __dirname, __filename, process) {
  /* globals window, HTMLElement */
  /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
  var objProto = Object.prototype;
  var owns = objProto.hasOwnProperty;
  var toStr = objProto.toString;
  var symbolValueOf;
  if (typeof Symbol === 'function') {
    symbolValueOf = Symbol.prototype.valueOf
  }
  var isActualNaN = function (value) {
    return value !== value
  };
  var NON_HOST_TYPES = {
    'boolean': 1,
    number: 1,
    string: 1,
    undefined: 1
  };
  var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
  var hexRegex = /^[A-Fa-f0-9]+$/;
  /**
 * Expose `is`
 */
  var is = module.exports = {};
  /**
 * Test general.
 */
  /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
  is.a = is.type = function (value, type) {
    return typeof value === type
  };
  /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
  is.defined = function (value) {
    return typeof value !== 'undefined'
  };
  /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
  is.empty = function (value) {
    var type = toStr.call(value);
    var key;
    if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
      return value.length === 0
    }
    if (type === '[object Object]') {
      for (key in value) {
        if (owns.call(value, key)) {
          return false
        }
      }
      return true
    }
    return !value
  };
  /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
  is.equal = function equal(value, other) {
    if (value === other) {
      return true
    }
    var type = toStr.call(value);
    var key;
    if (type !== toStr.call(other)) {
      return false
    }
    if (type === '[object Object]') {
      for (key in value) {
        if (!is.equal(value[key], other[key]) || !(key in other)) {
          return false
        }
      }
      for (key in other) {
        if (!is.equal(value[key], other[key]) || !(key in value)) {
          return false
        }
      }
      return true
    }
    if (type === '[object Array]') {
      key = value.length;
      if (key !== other.length) {
        return false
      }
      while (--key) {
        if (!is.equal(value[key], other[key])) {
          return false
        }
      }
      return true
    }
    if (type === '[object Function]') {
      return value.prototype === other.prototype
    }
    if (type === '[object Date]') {
      return value.getTime() === other.getTime()
    }
    return false
  };
  /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
  is.hosted = function (value, host) {
    var type = typeof host[value];
    return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
  };
  /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
  is.instance = is['instanceof'] = function (value, constructor) {
    return value instanceof constructor
  };
  /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
  is.nil = is['null'] = function (value) {
    return value === null
  };
  /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
  is.undef = is.undefined = function (value) {
    return typeof value === 'undefined'
  };
  /**
 * Test arguments.
 */
  /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
  is.args = is.arguments = function (value) {
    var isStandardArguments = toStr.call(value) === '[object Arguments]';
    var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
    return isStandardArguments || isOldArguments
  };
  /**
 * Test array.
 */
  /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
  is.array = Array.isArray || function (value) {
    return toStr.call(value) === '[object Array]'
  };
  /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
  is.args.empty = function (value) {
    return is.args(value) && value.length === 0
  };
  /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
  is.array.empty = function (value) {
    return is.array(value) && value.length === 0
  };
  /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
  is.arraylike = function (value) {
    return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
  };
  /**
 * Test boolean.
 */
  /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
  is.bool = is['boolean'] = function (value) {
    return toStr.call(value) === '[object Boolean]'
  };
  /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
  is['false'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === false
  };
  /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
  is['true'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === true
  };
  /**
 * Test date.
 */
  /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
  is.date = function (value) {
    return toStr.call(value) === '[object Date]'
  };
  /**
 * Test element.
 */
  /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
  is.element = function (value) {
    return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
  };
  /**
 * Test error.
 */
  /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
  is.error = function (value) {
    return toStr.call(value) === '[object Error]'
  };
  /**
 * Test function.
 */
  /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
  is.fn = is['function'] = function (value) {
    var isAlert = typeof window !== 'undefined' && value === window.alert;
    return isAlert || toStr.call(value) === '[object Function]'
  };
  /**
 * Test number.
 */
  /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
  is.number = function (value) {
    return toStr.call(value) === '[object Number]'
  };
  /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
  is.infinite = function (value) {
    return value === Infinity || value === -Infinity
  };
  /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
  is.decimal = function (value) {
    return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
  };
  /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
  is.divisibleBy = function (value, n) {
    var isDividendInfinite = is.infinite(value);
    var isDivisorInfinite = is.infinite(n);
    var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
    return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
  };
  /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
  is.integer = is['int'] = function (value) {
    return is.number(value) && !isActualNaN(value) && value % 1 === 0
  };
  /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
  is.maximum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like')
    }
    var len = others.length;
    while (--len >= 0) {
      if (value < others[len]) {
        return false
      }
    }
    return true
  };
  /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
  is.minimum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like')
    }
    var len = others.length;
    while (--len >= 0) {
      if (value > others[len]) {
        return false
      }
    }
    return true
  };
  /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
  is.nan = function (value) {
    return !is.number(value) || value !== value
  };
  /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
  is.even = function (value) {
    return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
  };
  /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
  is.odd = function (value) {
    return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
  };
  /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
  is.ge = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value >= other
  };
  /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
  is.gt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value > other
  };
  /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
  is.le = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value <= other
  };
  /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
  is.lt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value < other
  };
  /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
  is.within = function (value, start, finish) {
    if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
      throw new TypeError('all arguments must be numbers')
    }
    var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
    return isAnyInfinite || value >= start && value <= finish
  };
  /**
 * Test object.
 */
  /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
  is.object = function (value) {
    return toStr.call(value) === '[object Object]'
  };
  /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
  is.hash = function (value) {
    return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
  };
  /**
 * Test regexp.
 */
  /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
  is.regexp = function (value) {
    return toStr.call(value) === '[object RegExp]'
  };
  /**
 * Test string.
 */
  /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
  is.string = function (value) {
    return toStr.call(value) === '[object String]'
  };
  /**
 * Test base64 string.
 */
  /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
  is.base64 = function (value) {
    return is.string(value) && (!value.length || base64Regex.test(value))
  };
  /**
 * Test base64 string.
 */
  /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
  is.hex = function (value) {
    return is.string(value) && (!value.length || hexRegex.test(value))
  };
  /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
  is.symbol = function (value) {
    return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
  }
});
// source: node_modules/daisho-riot/node_modules/is-array/index.js
require.define('is-array', function (module, exports, __dirname, __filename, process) {
  /**
 * isArray
 */
  var isArray = Array.isArray;
  /**
 * toString
 */
  var str = Object.prototype.toString;
  /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
  module.exports = isArray || function (val) {
    return !!val && '[object Array]' == str.call(val)
  }
});
// source: node_modules/daisho-riot/node_modules/is-number/index.js
require.define('is-number', function (module, exports, __dirname, __filename, process) {
  /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
  'use strict';
  var typeOf = require('kind-of');
  module.exports = function isNumber(num) {
    var type = typeOf(num);
    if (type !== 'number' && type !== 'string') {
      return false
    }
    var n = +num;
    return n - n + 1 >= 0 && num !== ''
  }
});
// source: node_modules/daisho-riot/node_modules/kind-of/index.js
require.define('kind-of', function (module, exports, __dirname, __filename, process) {
  var isBuffer = require('is-buffer');
  var toString = Object.prototype.toString;
  /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
  module.exports = function kindOf(val) {
    // primitivies
    if (typeof val === 'undefined') {
      return 'undefined'
    }
    if (val === null) {
      return 'null'
    }
    if (val === true || val === false || val instanceof Boolean) {
      return 'boolean'
    }
    if (typeof val === 'string' || val instanceof String) {
      return 'string'
    }
    if (typeof val === 'number' || val instanceof Number) {
      return 'number'
    }
    // functions
    if (typeof val === 'function' || val instanceof Function) {
      return 'function'
    }
    // array
    if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
      return 'array'
    }
    // check for instances of RegExp and Date before calling `toString`
    if (val instanceof RegExp) {
      return 'regexp'
    }
    if (val instanceof Date) {
      return 'date'
    }
    // other objects
    var type = toString.call(val);
    if (type === '[object RegExp]') {
      return 'regexp'
    }
    if (type === '[object Date]') {
      return 'date'
    }
    if (type === '[object Arguments]') {
      return 'arguments'
    }
    // buffer
    if (typeof Buffer !== 'undefined' && isBuffer(val)) {
      return 'buffer'
    }
    // es6: Map, WeakMap, Set, WeakSet
    if (type === '[object Set]') {
      return 'set'
    }
    if (type === '[object WeakSet]') {
      return 'weakset'
    }
    if (type === '[object Map]') {
      return 'map'
    }
    if (type === '[object WeakMap]') {
      return 'weakmap'
    }
    if (type === '[object Symbol]') {
      return 'symbol'
    }
    // typed arrays
    if (type === '[object Int8Array]') {
      return 'int8array'
    }
    if (type === '[object Uint8Array]') {
      return 'uint8array'
    }
    if (type === '[object Uint8ClampedArray]') {
      return 'uint8clampedarray'
    }
    if (type === '[object Int16Array]') {
      return 'int16array'
    }
    if (type === '[object Uint16Array]') {
      return 'uint16array'
    }
    if (type === '[object Int32Array]') {
      return 'int32array'
    }
    if (type === '[object Uint32Array]') {
      return 'uint32array'
    }
    if (type === '[object Float32Array]') {
      return 'float32array'
    }
    if (type === '[object Float64Array]') {
      return 'float64array'
    }
    // must be a plain object
    return 'object'
  }
});
// source: node_modules/daisho-riot/node_modules/is-buffer/index.js
require.define('is-buffer', function (module, exports, __dirname, __filename, process) {
  /**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */
  module.exports = function (obj) {
    return !!(obj != null && (obj._isBuffer || obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)))
  }
});
// source: node_modules/daisho-riot/node_modules/is-object/index.js
require.define('is-object', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = function isObject(x) {
    return typeof x === 'object' && x !== null
  }
});
// source: node_modules/daisho-riot/node_modules/is-string/index.js
require.define('is-string', function (module, exports, __dirname, __filename, process) {
  'use strict';
  var strValue = String.prototype.valueOf;
  var tryStringObject = function tryStringObject(value) {
    try {
      strValue.call(value);
      return true
    } catch (e) {
      return false
    }
  };
  var toStr = Object.prototype.toString;
  var strClass = '[object String]';
  var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
  module.exports = function isString(value) {
    if (typeof value === 'string') {
      return true
    }
    if (typeof value !== 'object') {
      return false
    }
    return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
  }
});
// source: node_modules/daisho-riot/node_modules/promise-settle/index.js
require.define('promise-settle', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = require('promise-settle/lib/promise-settle')
});
// source: node_modules/daisho-riot/node_modules/promise-settle/lib/promise-settle.js
require.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = settle;
  function settle(promises) {
    return Promise.resolve().then(function () {
      return promises
    }).then(function (promises) {
      if (!Array.isArray(promises))
        throw new TypeError('Expected an array of Promises');
      var promiseResults = promises.map(function (promise) {
        return Promise.resolve().then(function () {
          return promise
        }).then(function (result) {
          return promiseResult(result)
        }).catch(function (err) {
          return promiseResult(null, err)
        })
      });
      return Promise.all(promiseResults)
    })
  }
  function promiseResult(result, err) {
    var isFulfilled = typeof err === 'undefined';
    var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
    var isRejected = !isFulfilled;
    var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
    return {
      isFulfilled: returns.bind(isFulfilled),
      isRejected: returns.bind(isRejected),
      value: value,
      reason: reason
    }
  }
  function returns() {
    return this
  }
  function throws() {
    throw this
  }
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/input.js
require.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Input, View, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib/views/view');
  Input = function (superClass) {
    extend(Input, superClass);
    function Input() {
      return Input.__super__.constructor.apply(this, arguments)
    }
    Input.prototype.input = null;
    Input.prototype.errorMessage = '';
    Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
    Input.prototype.beforeInit = function () {
      return this.html += this.errorHtml
    };
    Input.prototype.init = function () {
      return this.input.on('validate', function (_this) {
        return function (pRef) {
          return _this.validate(pRef)
        }
      }(this))
    };
    Input.prototype.getValue = function (event) {
      return event.target.value
    };
    Input.prototype.change = function (event) {
      var name, ref, ref1, value;
      ref1 = this.input, ref = ref1.ref, name = ref1.name;
      value = this.getValue(event);
      if (value === ref.get(name)) {
        return
      }
      this.input.ref.set(name, value);
      this.clearError();
      return this.validate()
    };
    Input.prototype.error = function (err) {
      var ref1;
      return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
    };
    Input.prototype.changed = function () {
    };
    Input.prototype.clearError = function () {
      return this.errorMessage = ''
    };
    Input.prototype.validate = function (pRef) {
      var p;
      p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
        return function (value) {
          _this.changed(value);
          return _this.update()
        }
      }(this))['catch'](function (_this) {
        return function (err) {
          _this.error(err);
          _this.update();
          throw err
        }
      }(this));
      if (pRef != null) {
        pRef.p = p
      }
      return p
    };
    return Input
  }(View);
  module.exports = Input  //# sourceMappingURL=input.js.map
});
// source: node_modules/daisho-riot/lib/controls/control.js
require.define('daisho-riot/lib/controls/control', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var $, Control, CrowdControl, Events, riot, scrolling, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  Events = require('daisho-riot/lib/events');
  riot = require('riot/riot');
  $ = require('jquery/dist/jquery');
  scrolling = false;
  module.exports = Control = function (superClass) {
    extend(Control, superClass);
    function Control() {
      return Control.__super__.constructor.apply(this, arguments)
    }
    Control.prototype.init = function () {
      if (this.input == null && this.inputs != null) {
        this.input = this.inputs[this.lookup]
      }
      if (this.input != null) {
        return Control.__super__.init.apply(this, arguments)
      }
    };
    Control.prototype.getValue = function (event) {
      var ref;
      return (ref = $(event.target).val()) != null ? ref.trim() : void 0
    };
    Control.prototype.error = function (err) {
      var ref;
      if (err instanceof DOMException) {
        console.log('WARNING: Error in riot dom manipulation ignored.', err);
        return
      }
      Control.__super__.error.apply(this, arguments);
      if (!scrolling) {
        scrolling = true;
        $('html, body').animate({ scrollTop: $(this.root).offset().top - $(window).height() / 2 }, {
          complete: function () {
            return scrolling = false
          },
          duration: 500
        })
      }
      if ((ref = this.m) != null) {
        ref.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name))
      }
      return this.input.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name))
    };
    Control.prototype.change = function () {
      var ref;
      Control.__super__.change.apply(this, arguments);
      if ((ref = this.m) != null) {
        ref.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name))
      }
      return this.input.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name))
    };
    Control.prototype.changed = function (value) {
      var ref;
      if ((ref = this.m) != null) {
        ref.trigger(Events.ChangeSuccess, this.input.name, value)
      }
      this.input.trigger(Events.ChangeSuccess, this.input.name, value);
      return riot.update()
    };
    Control.register = function (m) {
      var v;
      v = Control.__super__.constructor.register.call(this);
      return v.m = m
    };
    return Control
  }(CrowdControl.Views.Input)  //# sourceMappingURL=control.js.map
});
// source: node_modules/daisho-riot/lib/events.js
require.define('daisho-riot/lib/events', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Change: 'change',
    ChangeSuccess: 'change-success',
    ChangeFailed: 'change-failed',
    FilterChange: 'filter-change'
  }  //# sourceMappingURL=events.js.map
});
// source: node_modules/daisho-riot/node_modules/riot/riot.js
require.define('riot/riot', function (module, exports, __dirname, __filename, process) {
  /* Riot v2.3.17, @license MIT */
  ;
  (function (window, undefined) {
    'use strict';
    var riot = {
        version: 'v2.3.17',
        settings: {}
      },
      // be aware, internal usage
      // ATTENTION: prefix the global dynamic variables with `__`
      // counter to give a unique id to all the Tag instances
      __uid = 0,
      // tags instances cache
      __virtualDom = [],
      // tags implementation cache
      __tagImpl = {},
      /**
   * Const
   */
      GLOBAL_MIXIN = '__global_mixin',
      // riot specific prefixes
      RIOT_PREFIX = 'riot-', RIOT_TAG = RIOT_PREFIX + 'tag', RIOT_TAG_IS = 'data-is',
      // for typeof == '' comparisons
      T_STRING = 'string', T_OBJECT = 'object', T_UNDEF = 'undefined', T_BOOL = 'boolean', T_FUNCTION = 'function',
      // special native tags that cannot be treated like the others
      SPECIAL_TAGS_REGEX = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/, RESERVED_WORDS_BLACKLIST = [
        '_item',
        '_id',
        '_parent',
        'update',
        'root',
        'mount',
        'unmount',
        'mixin',
        'isMounted',
        'isLoop',
        'tags',
        'parent',
        'opts',
        'trigger',
        'on',
        'off',
        'one'
      ],
      // version# for IE 8-11, 0 for others
      IE_VERSION = (window && window.document || {}).documentMode | 0;
    /* istanbul ignore next */
    riot.observable = function (el) {
      /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
      el = el || {};
      /**
   * Private variables and methods
   */
      var callbacks = {}, slice = Array.prototype.slice, onEachEvent = function (e, fn) {
          e.replace(/\S+/g, fn)
        };
      // extend the object adding the observable methods
      Object.defineProperties(el, {
        /**
     * Listen to the given space separated list of `events` and execute the `callback` each time an event is triggered.
     * @param  { String } events - events ids
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
        on: {
          value: function (events, fn) {
            if (typeof fn != 'function')
              return el;
            onEachEvent(events, function (name, pos) {
              (callbacks[name] = callbacks[name] || []).push(fn);
              fn.typed = pos > 0
            });
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Removes the given space separated list of `events` listeners
     * @param   { String } events - events ids
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
        off: {
          value: function (events, fn) {
            if (events == '*' && !fn)
              callbacks = {};
            else {
              onEachEvent(events, function (name) {
                if (fn) {
                  var arr = callbacks[name];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn)
                      arr.splice(i--, 1)
                  }
                } else
                  delete callbacks[name]
              })
            }
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Listen to the given space separated list of `events` and execute the `callback` at most once
     * @param   { String } events - events ids
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
        one: {
          value: function (events, fn) {
            function on() {
              el.off(events, on);
              fn.apply(el, arguments)
            }
            return el.on(events, on)
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Execute all callback functions that listen to the given space separated list of `events`
     * @param   { String } events - events ids
     * @returns { Object } el
     */
        trigger: {
          value: function (events) {
            // getting the arguments
            var arglen = arguments.length - 1, args = new Array(arglen), fns;
            for (var i = 0; i < arglen; i++) {
              args[i] = arguments[i + 1]  // skip first argument
            }
            onEachEvent(events, function (name) {
              fns = slice.call(callbacks[name] || [], 0);
              for (var i = 0, fn; fn = fns[i]; ++i) {
                if (fn.busy)
                  return;
                fn.busy = 1;
                fn.apply(el, fn.typed ? [name].concat(args) : args);
                if (fns[i] !== fn) {
                  i--
                }
                fn.busy = 0
              }
              if (callbacks['*'] && name != '*')
                el.trigger.apply(el, [
                  '*',
                  name
                ].concat(args))
            });
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        }
      });
      return el
    }  /* istanbul ignore next */;
    (function (riot) {
      /**
 * Simple client-side router
 * @module riot-route
 */
      var RE_ORIGIN = /^.+?\/+[^\/]+/, EVENT_LISTENER = 'EventListener', REMOVE_EVENT_LISTENER = 'remove' + EVENT_LISTENER, ADD_EVENT_LISTENER = 'add' + EVENT_LISTENER, HAS_ATTRIBUTE = 'hasAttribute', REPLACE = 'replace', POPSTATE = 'popstate', HASHCHANGE = 'hashchange', TRIGGER = 'trigger', MAX_EMIT_STACK_LEVEL = 3, win = typeof window != 'undefined' && window, doc = typeof document != 'undefined' && document, hist = win && history, loc = win && (hist.location || win.location),
        // see html5-history-api
        prot = Router.prototype,
        // to minify more
        clickEvent = doc && doc.ontouchstart ? 'touchstart' : 'click', started = false, central = riot.observable(), routeFound = false, debouncedEmit, base, current, parser, secondParser, emitStack = [], emitStackLevel = 0;
      /**
 * Default parser. You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @returns {array} array
 */
      function DEFAULT_PARSER(path) {
        return path.split(/[\/?#]/)
      }
      /**
 * Default parser (second). You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @param {string} filter - filter string (normalized)
 * @returns {array} array
 */
      function DEFAULT_SECOND_PARSER(path, filter) {
        var re = new RegExp('^' + filter[REPLACE](/\*/g, '([^/?#]+?)')[REPLACE](/\.\./, '.*') + '$'), args = path.match(re);
        if (args)
          return args.slice(1)
      }
      /**
 * Simple/cheap debounce implementation
 * @param   {function} fn - callback
 * @param   {number} delay - delay in seconds
 * @returns {function} debounced function
 */
      function debounce(fn, delay) {
        var t;
        return function () {
          clearTimeout(t);
          t = setTimeout(fn, delay)
        }
      }
      /**
 * Set the window listeners to trigger the routes
 * @param {boolean} autoExec - see route.start
 */
      function start(autoExec) {
        debouncedEmit = debounce(emit, 1);
        win[ADD_EVENT_LISTENER](POPSTATE, debouncedEmit);
        win[ADD_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
        doc[ADD_EVENT_LISTENER](clickEvent, click);
        if (autoExec)
          emit(true)
      }
      /**
 * Router class
 */
      function Router() {
        this.$ = [];
        riot.observable(this);
        // make it observable
        central.on('stop', this.s.bind(this));
        central.on('emit', this.e.bind(this))
      }
      function normalize(path) {
        return path[REPLACE](/^\/|\/$/, '')
      }
      function isString(str) {
        return typeof str == 'string'
      }
      /**
 * Get the part after domain name
 * @param {string} href - fullpath
 * @returns {string} path from root
 */
      function getPathFromRoot(href) {
        return (href || loc.href || '')[REPLACE](RE_ORIGIN, '')
      }
      /**
 * Get the part after base
 * @param {string} href - fullpath
 * @returns {string} path from base
 */
      function getPathFromBase(href) {
        return base[0] == '#' ? (href || loc.href || '').split(base)[1] || '' : getPathFromRoot(href)[REPLACE](base, '')
      }
      function emit(force) {
        // the stack is needed for redirections
        var isRoot = emitStackLevel == 0;
        if (MAX_EMIT_STACK_LEVEL <= emitStackLevel)
          return;
        emitStackLevel++;
        emitStack.push(function () {
          var path = getPathFromBase();
          if (force || path != current) {
            central[TRIGGER]('emit', path);
            current = path
          }
        });
        if (isRoot) {
          while (emitStack.length) {
            emitStack[0]();
            emitStack.shift()
          }
          emitStackLevel = 0
        }
      }
      function click(e) {
        if (e.which != 1  // not left click
|| e.metaKey || e.ctrlKey || e.shiftKey || e.defaultPrevented)
          return;
        var el = e.target;
        while (el && el.nodeName != 'A')
          el = el.parentNode;
        if (!el || el.nodeName != 'A'  // not A tag
|| el[HAS_ATTRIBUTE]('download')  // has download attr
|| !el[HAS_ATTRIBUTE]('href')  // has no href attr
|| el.target && el.target != '_self'  // another window or frame
|| el.href.indexOf(loc.href.match(RE_ORIGIN)[0]) == -1  // cross origin
)
          return;
        if (el.href != loc.href) {
          if (el.href.split('#')[0] == loc.href.split('#')[0]  // internal jump
|| base != '#' && getPathFromRoot(el.href).indexOf(base) !== 0  // outside of base
|| !go(getPathFromBase(el.href), el.title || doc.title)  // route not found
)
            return
        }
        e.preventDefault()
      }
      /**
 * Go to the path
 * @param {string} path - destination path
 * @param {string} title - page title
 * @param {boolean} shouldReplace - use replaceState or pushState
 * @returns {boolean} - route not found flag
 */
      function go(path, title, shouldReplace) {
        if (hist) {
          // if a browser
          path = base + normalize(path);
          title = title || doc.title;
          // browsers ignores the second parameter `title`
          shouldReplace ? hist.replaceState(null, title, path) : hist.pushState(null, title, path);
          // so we need to set it manually
          doc.title = title;
          routeFound = false;
          emit();
          return routeFound
        }
        // Server-side usage: directly execute handlers for the path
        return central[TRIGGER]('emit', getPathFromBase(path))
      }
      /**
 * Go to path or set action
 * a single string:                go there
 * two strings:                    go there with setting a title
 * two strings and boolean:        replace history with setting a title
 * a single function:              set an action on the default route
 * a string/RegExp and a function: set an action on the route
 * @param {(string|function)} first - path / action / filter
 * @param {(string|RegExp|function)} second - title / action
 * @param {boolean} third - replace flag
 */
      prot.m = function (first, second, third) {
        if (isString(first) && (!second || isString(second)))
          go(first, second, third || false);
        else if (second)
          this.r(first, second);
        else
          this.r('@', first)
      };
      /**
 * Stop routing
 */
      prot.s = function () {
        this.off('*');
        this.$ = []
      };
      /**
 * Emit
 * @param {string} path - path
 */
      prot.e = function (path) {
        this.$.concat('@').some(function (filter) {
          var args = (filter == '@' ? parser : secondParser)(normalize(path), normalize(filter));
          if (typeof args != 'undefined') {
            this[TRIGGER].apply(null, [filter].concat(args));
            return routeFound = true  // exit from loop
          }
        }, this)
      };
      /**
 * Register route
 * @param {string} filter - filter for matching to url
 * @param {function} action - action to register
 */
      prot.r = function (filter, action) {
        if (filter != '@') {
          filter = '/' + normalize(filter);
          this.$.push(filter)
        }
        this.on(filter, action)
      };
      var mainRouter = new Router;
      var route = mainRouter.m.bind(mainRouter);
      /**
 * Create a sub router
 * @returns {function} the method of a new Router object
 */
      route.create = function () {
        var newSubRouter = new Router;
        // stop only this sub-router
        newSubRouter.m.stop = newSubRouter.s.bind(newSubRouter);
        // return sub-router's main method
        return newSubRouter.m.bind(newSubRouter)
      };
      /**
 * Set the base of url
 * @param {(str|RegExp)} arg - a new base or '#' or '#!'
 */
      route.base = function (arg) {
        base = arg || '#';
        current = getPathFromBase()  // recalculate current path
      };
      /** Exec routing right now **/
      route.exec = function () {
        emit(true)
      };
      /**
 * Replace the default router to yours
 * @param {function} fn - your parser function
 * @param {function} fn2 - your secondParser function
 */
      route.parser = function (fn, fn2) {
        if (!fn && !fn2) {
          // reset parser for testing...
          parser = DEFAULT_PARSER;
          secondParser = DEFAULT_SECOND_PARSER
        }
        if (fn)
          parser = fn;
        if (fn2)
          secondParser = fn2
      };
      /**
 * Helper function to get url query as an object
 * @returns {object} parsed query
 */
      route.query = function () {
        var q = {};
        var href = loc.href || current;
        href[REPLACE](/[?&](.+?)=([^&]*)/g, function (_, k, v) {
          q[k] = v
        });
        return q
      };
      /** Stop routing **/
      route.stop = function () {
        if (started) {
          if (win) {
            win[REMOVE_EVENT_LISTENER](POPSTATE, debouncedEmit);
            win[REMOVE_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
            doc[REMOVE_EVENT_LISTENER](clickEvent, click)
          }
          central[TRIGGER]('stop');
          started = false
        }
      };
      /**
 * Start routing
 * @param {boolean} autoExec - automatically exec after starting if true
 */
      route.start = function (autoExec) {
        if (!started) {
          if (win) {
            if (document.readyState == 'complete')
              start(autoExec)  // the timeout is needed to solve
                               // a weird safari bug https://github.com/riot/route/issues/33
;
            else
              win[ADD_EVENT_LISTENER]('load', function () {
                setTimeout(function () {
                  start(autoExec)
                }, 1)
              })
          }
          started = true
        }
      };
      /** Prepare the router **/
      route.base();
      route.parser();
      riot.route = route
    }(riot));
    /* istanbul ignore next */
    /**
 * The riot template engine
 * @version v2.3.21
 */
    /**
 * riot.util.brackets
 *
 * - `brackets    ` - Returns a string or regex based on its parameter
 * - `brackets.set` - Change the current riot brackets
 *
 * @module
 */
    var brackets = function (UNDEF) {
      var REGLOB = 'g', R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g, R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, S_QBLOCKS = R_STRINGS.source + '|' + /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' + /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source, FINDBRACES = {
          '(': RegExp('([()])|' + S_QBLOCKS, REGLOB),
          '[': RegExp('([[\\]])|' + S_QBLOCKS, REGLOB),
          '{': RegExp('([{}])|' + S_QBLOCKS, REGLOB)
        }, DEFAULT = '{ }';
      var _pairs = [
        '{',
        '}',
        '{',
        '}',
        /{[^}]*}/,
        /\\([{}])/g,
        /\\({)|{/g,
        RegExp('\\\\(})|([[({])|(})|' + S_QBLOCKS, REGLOB),
        DEFAULT,
        /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
        /(^|[^\\]){=[\S\s]*?}/
      ];
      var cachedBrackets = UNDEF, _regex, _cache = [], _settings;
      function _loopback(re) {
        return re
      }
      function _rewrite(re, bp) {
        if (!bp)
          bp = _cache;
        return new RegExp(re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : '')
      }
      function _create(pair) {
        if (pair === DEFAULT)
          return _pairs;
        var arr = pair.split(' ');
        if (arr.length !== 2 || /[\x00-\x1F<>a-zA-Z0-9'",;\\]/.test(pair)) {
          throw new Error('Unsupported brackets "' + pair + '"')
        }
        arr = arr.concat(pair.replace(/(?=[[\]()*+?.^$|])/g, '\\').split(' '));
        arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
        arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
        arr[6] = _rewrite(_pairs[6], arr);
        arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCKS, REGLOB);
        arr[8] = pair;
        return arr
      }
      function _brackets(reOrIdx) {
        return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
      }
      _brackets.split = function split(str, tmpl, _bp) {
        // istanbul ignore next: _bp is for the compiler
        if (!_bp)
          _bp = _cache;
        var parts = [], match, isexpr, start, pos, re = _bp[6];
        isexpr = start = re.lastIndex = 0;
        while (match = re.exec(str)) {
          pos = match.index;
          if (isexpr) {
            if (match[2]) {
              re.lastIndex = skipBraces(str, match[2], re.lastIndex);
              continue
            }
            if (!match[3])
              continue
          }
          if (!match[1]) {
            unescapeStr(str.slice(start, pos));
            start = re.lastIndex;
            re = _bp[6 + (isexpr ^= 1)];
            re.lastIndex = start
          }
        }
        if (str && start < str.length) {
          unescapeStr(str.slice(start))
        }
        return parts;
        function unescapeStr(s) {
          if (tmpl || isexpr)
            parts.push(s && s.replace(_bp[5], '$1'));
          else
            parts.push(s)
        }
        function skipBraces(s, ch, ix) {
          var match, recch = FINDBRACES[ch];
          recch.lastIndex = ix;
          ix = 1;
          while (match = recch.exec(s)) {
            if (match[1] && !(match[1] === ch ? ++ix : --ix))
              break
          }
          return ix ? s.length : recch.lastIndex
        }
      };
      _brackets.hasExpr = function hasExpr(str) {
        return _cache[4].test(str)
      };
      _brackets.loopKeys = function loopKeys(expr) {
        var m = expr.match(_cache[9]);
        return m ? {
          key: m[1],
          pos: m[2],
          val: _cache[0] + m[3].trim() + _cache[1]
        } : { val: expr.trim() }
      };
      _brackets.hasRaw = function (src) {
        return _cache[10].test(src)
      };
      _brackets.array = function array(pair) {
        return pair ? _create(pair) : _cache
      };
      function _reset(pair) {
        if ((pair || (pair = DEFAULT)) !== _cache[8]) {
          _cache = _create(pair);
          _regex = pair === DEFAULT ? _loopback : _rewrite;
          _cache[9] = _regex(_pairs[9]);
          _cache[10] = _regex(_pairs[10])
        }
        cachedBrackets = pair
      }
      function _setSettings(o) {
        var b;
        o = o || {};
        b = o.brackets;
        Object.defineProperty(o, 'brackets', {
          set: _reset,
          get: function () {
            return cachedBrackets
          },
          enumerable: true
        });
        _settings = o;
        _reset(b)
      }
      Object.defineProperty(_brackets, 'settings', {
        set: _setSettings,
        get: function () {
          return _settings
        }
      });
      /* istanbul ignore next: in the browser riot is always in the scope */
      _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
      _brackets.set = _reset;
      _brackets.R_STRINGS = R_STRINGS;
      _brackets.R_MLCOMMS = R_MLCOMMS;
      _brackets.S_QBLOCKS = S_QBLOCKS;
      return _brackets
    }();
    /**
 * @module tmpl
 *
 * tmpl          - Root function, returns the template value, render with data
 * tmpl.hasExpr  - Test the existence of a expression inside a string
 * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
 */
    var tmpl = function () {
      var _cache = {};
      function _tmpl(str, data) {
        if (!str)
          return str;
        return (_cache[str] || (_cache[str] = _create(str))).call(data, _logErr)
      }
      _tmpl.haveRaw = brackets.hasRaw;
      _tmpl.hasExpr = brackets.hasExpr;
      _tmpl.loopKeys = brackets.loopKeys;
      _tmpl.errorHandler = null;
      function _logErr(err, ctx) {
        if (_tmpl.errorHandler) {
          err.riotData = {
            tagName: ctx && ctx.root && ctx.root.tagName,
            _riot_id: ctx && ctx._riot_id
          };
          _tmpl.errorHandler(err)
        }
      }
      function _create(str) {
        var expr = _getTmpl(str);
        if (expr.slice(0, 11) !== 'try{return ')
          expr = 'return ' + expr;
        return new Function('E', expr + ';')
      }
      var RE_QBLOCK = RegExp(brackets.S_QBLOCKS, 'g'), RE_QBMARK = /\x01(\d+)~/g;
      function _getTmpl(str) {
        var qstr = [], expr, parts = brackets.split(str.replace(/\u2057/g, '"'), 1);
        if (parts.length > 2 || parts[0]) {
          var i, j, list = [];
          for (i = j = 0; i < parts.length; ++i) {
            expr = parts[i];
            if (expr && (expr = i & 1 ? _parseExpr(expr, 1, qstr) : '"' + expr.replace(/\\/g, '\\\\').replace(/\r\n?|\n/g, '\\n').replace(/"/g, '\\"') + '"'))
              list[j++] = expr
          }
          expr = j < 2 ? list[0] : '[' + list.join(',') + '].join("")'
        } else {
          expr = _parseExpr(parts[1], 0, qstr)
        }
        if (qstr[0])
          expr = expr.replace(RE_QBMARK, function (_, pos) {
            return qstr[pos].replace(/\r/g, '\\r').replace(/\n/g, '\\n')
          });
        return expr
      }
      var RE_BREND = {
          '(': /[()]/g,
          '[': /[[\]]/g,
          '{': /[{}]/g
        }, CS_IDENT = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\x01(\d+)~):/;
      function _parseExpr(expr, asText, qstr) {
        if (expr[0] === '=')
          expr = expr.slice(1);
        expr = expr.replace(RE_QBLOCK, function (s, div) {
          return s.length > 2 && !div ? '' + (qstr.push(s) - 1) + '~' : s
        }).replace(/\s+/g, ' ').trim().replace(/\ ?([[\({},?\.:])\ ?/g, '$1');
        if (expr) {
          var list = [], cnt = 0, match;
          while (expr && (match = expr.match(CS_IDENT)) && !match.index) {
            var key, jsb, re = /,|([[{(])|$/g;
            expr = RegExp.rightContext;
            key = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];
            while (jsb = (match = re.exec(expr))[1])
              skipBraces(jsb, re);
            jsb = expr.slice(0, match.index);
            expr = RegExp.rightContext;
            list[cnt++] = _wrapExpr(jsb, 1, key)
          }
          expr = !cnt ? _wrapExpr(expr, asText) : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0]
        }
        return expr;
        function skipBraces(ch, re) {
          var mm, lv = 1, ir = RE_BREND[ch];
          ir.lastIndex = re.lastIndex;
          while (mm = ir.exec(expr)) {
            if (mm[0] === ch)
              ++lv;
            else if (!--lv)
              break
          }
          re.lastIndex = lv ? expr.length : ir.lastIndex
        }
      }
      // istanbul ignore next: not both
      var JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').', JS_VARNAME = /[,{][$\w]+:|(^ *|[^$\w\.])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g, JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;
      function _wrapExpr(expr, asText, key) {
        var tb;
        expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
          if (mvar) {
            pos = tb ? 0 : pos + match.length;
            if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
              match = p + '("' + mvar + JS_CONTEXT + mvar;
              if (pos)
                tb = (s = s[pos]) === '.' || s === '(' || s === '['
            } else if (pos) {
              tb = !JS_NOPROPS.test(s.slice(pos))
            }
          }
          return match
        });
        if (tb) {
          expr = 'try{return ' + expr + '}catch(e){E(e,this)}'
        }
        if (key) {
          expr = (tb ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')') + '?"' + key + '":""'
        } else if (asText) {
          expr = 'function(v){' + (tb ? expr.replace('return ', 'v=') : 'v=(' + expr + ')') + ';return v||v===0?v:""}.call(this)'
        }
        return expr
      }
      // istanbul ignore next: compatibility fix for beta versions
      _tmpl.parse = function (s) {
        return s
      };
      _tmpl.version = brackets.version = 'v2.3.21';
      return _tmpl
    }();
    /*
  lib/browser/tag/mkdom.js

  Includes hacks needed for the Internet Explorer version 9 and below
  See: http://kangax.github.io/compat-table/es5/#ie8
       http://codeplanet.io/dropping-ie8/
*/
    var mkdom = function _mkdom() {
      var reHasYield = /<yield\b/i, reYieldAll = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi, reYieldSrc = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi, reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi;
      var rootEls = {
          tr: 'tbody',
          th: 'tr',
          td: 'tr',
          col: 'colgroup'
        }, tblTags = IE_VERSION && IE_VERSION < 10 ? SPECIAL_TAGS_REGEX : /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;
      /**
   * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
   * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
   *
   * @param   {string} templ  - The template coming from the custom tag definition
   * @param   {string} [html] - HTML content that comes from the DOM element where you
   *           will mount the tag, mostly the original tag in the page
   * @returns {HTMLElement} DOM element with _templ_ merged through `YIELD` with the _html_.
   */
      function _mkdom(templ, html) {
        var match = templ && templ.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), el = mkEl('div');
        // replace all the yield tags with the tag inner html
        templ = replaceYield(templ, html);
        /* istanbul ignore next */
        if (tblTags.test(tagName))
          el = specialTags(el, templ, tagName);
        else
          el.innerHTML = templ;
        el.stub = true;
        return el
      }
      /*
    Creates the root element for table or select child elements:
    tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
  */
      function specialTags(el, templ, tagName) {
        var select = tagName[0] === 'o', parent = select ? 'select>' : 'table>';
        // trim() is important here, this ensures we don't have artifacts,
        // so we can check if we have only one element inside the parent
        el.innerHTML = '<' + parent + templ.trim() + '</' + parent;
        parent = el.firstChild;
        // returns the immediate parent if tr/th/td/col is the only element, if not
        // returns the whole tree, as this can include additional elements
        if (select) {
          parent.selectedIndex = -1  // for IE9, compatible w/current riot behavior
        } else {
          // avoids insertion of cointainer inside container (ex: tbody inside tbody)
          var tname = rootEls[tagName];
          if (tname && parent.childElementCount === 1)
            parent = $(tname, parent)
        }
        return parent
      }
      /*
    Replace the yield tag from any tag template with the innerHTML of the
    original tag in the page
  */
      function replaceYield(templ, html) {
        // do nothing if no yield
        if (!reHasYield.test(templ))
          return templ;
        // be careful with #1343 - string on the source having `$1`
        var src = {};
        html = html && html.replace(reYieldSrc, function (_, ref, text) {
          src[ref] = src[ref] || text;
          // preserve first definition
          return ''
        }).trim();
        return templ.replace(reYieldDest, function (_, ref, def) {
          // yield with from - to attrs
          return src[ref] || def || ''
        }).replace(reYieldAll, function (_, def) {
          // yield without any "from"
          return html || def || ''
        })
      }
      return _mkdom
    }();
    /**
 * Convert the item looped into an object used to extend the child tag properties
 * @param   { Object } expr - object containing the keys used to extend the children tags
 * @param   { * } key - value to assign to the new object returned
 * @param   { * } val - value containing the position of the item in the array
 * @returns { Object } - new object containing the values of the original item
 *
 * The variables 'key' and 'val' are arbitrary.
 * They depend on the collection type looped (Array, Object)
 * and on the expression used on the each tag
 *
 */
    function mkitem(expr, key, val) {
      var item = {};
      item[expr.key] = key;
      if (expr.pos)
        item[expr.pos] = val;
      return item
    }
    /**
 * Unmount the redundant tags
 * @param   { Array } items - array containing the current items to loop
 * @param   { Array } tags - array containing all the children tags
 */
    function unmountRedundant(items, tags) {
      var i = tags.length, j = items.length, t;
      while (i > j) {
        t = tags[--i];
        tags.splice(i, 1);
        t.unmount()
      }
    }
    /**
 * Move the nested custom tags in non custom loop tags
 * @param   { Object } child - non custom loop tag
 * @param   { Number } i - current position of the loop tag
 */
    function moveNestedTags(child, i) {
      Object.keys(child.tags).forEach(function (tagName) {
        var tag = child.tags[tagName];
        if (isArray(tag))
          each(tag, function (t) {
            moveChildTag(t, tagName, i)
          });
        else
          moveChildTag(tag, tagName, i)
      })
    }
    /**
 * Adds the elements for a virtual tag
 * @param { Tag } tag - the tag whose root's children will be inserted or appended
 * @param { Node } src - the node that will do the inserting or appending
 * @param { Tag } target - only if inserting, insert before this tag's first child
 */
    function addVirtual(tag, src, target) {
      var el = tag._root, sib;
      tag._virts = [];
      while (el) {
        sib = el.nextSibling;
        if (target)
          src.insertBefore(el, target._root);
        else
          src.appendChild(el);
        tag._virts.push(el);
        // hold for unmounting
        el = sib
      }
    }
    /**
 * Move virtual tag and all child nodes
 * @param { Tag } tag - first child reference used to start move
 * @param { Node } src  - the node that will do the inserting
 * @param { Tag } target - insert before this tag's first child
 * @param { Number } len - how many child nodes to move
 */
    function moveVirtual(tag, src, target, len) {
      var el = tag._root, sib, i = 0;
      for (; i < len; i++) {
        sib = el.nextSibling;
        src.insertBefore(el, target._root);
        el = sib
      }
    }
    /**
 * Manage tags having the 'each'
 * @param   { Object } dom - DOM node we need to loop
 * @param   { Tag } parent - parent tag instance where the dom node is contained
 * @param   { String } expr - string contained in the 'each' attribute
 */
    function _each(dom, parent, expr) {
      // remove the each property from the original tag
      remAttr(dom, 'each');
      var mustReorder = typeof getAttr(dom, 'no-reorder') !== T_STRING || remAttr(dom, 'no-reorder'), tagName = getTagName(dom), impl = __tagImpl[tagName] || { tmpl: dom.outerHTML }, useRoot = SPECIAL_TAGS_REGEX.test(tagName), root = dom.parentNode, ref = document.createTextNode(''), child = getTag(dom), isOption = tagName.toLowerCase() === 'option',
        // the option tags must be treated differently
        tags = [], oldItems = [], hasKeys, isVirtual = dom.tagName == 'VIRTUAL';
      // parse the each expression
      expr = tmpl.loopKeys(expr);
      // insert a marked where the loop tags will be injected
      root.insertBefore(ref, dom);
      // clean template code
      parent.one('before-mount', function () {
        // remove the original DOM node
        dom.parentNode.removeChild(dom);
        if (root.stub)
          root = parent.root
      }).on('update', function () {
        // get the new items collection
        var items = tmpl(expr.val, parent),
          // create a fragment to hold the new DOM nodes to inject in the parent tag
          frag = document.createDocumentFragment();
        // object loop. any changes cause full redraw
        if (!isArray(items)) {
          hasKeys = items || false;
          items = hasKeys ? Object.keys(items).map(function (key) {
            return mkitem(expr, key, items[key])
          }) : []
        }
        // loop all the new items
        var i = 0, itemsLength = items.length;
        for (; i < itemsLength; i++) {
          // reorder only if the items are objects
          var item = items[i], _mustReorder = mustReorder && item instanceof Object && !hasKeys, oldPos = oldItems.indexOf(item), pos = ~oldPos && _mustReorder ? oldPos : i,
            // does a tag exist in this position?
            tag = tags[pos];
          item = !hasKeys && expr.key ? mkitem(expr, item, i) : item;
          // new tag
          if (!_mustReorder && !tag  // with no-reorder we just update the old tags
|| _mustReorder && !~oldPos || !tag  // by default we always try to reorder the DOM elements
) {
            tag = new Tag(impl, {
              parent: parent,
              isLoop: true,
              hasImpl: !!__tagImpl[tagName],
              root: useRoot ? root : dom.cloneNode(),
              item: item
            }, dom.innerHTML);
            tag.mount();
            if (isVirtual)
              tag._root = tag.root.firstChild;
            // save reference for further moves or inserts
            // this tag must be appended
            if (i == tags.length || !tags[i]) {
              // fix 1581
              if (isVirtual)
                addVirtual(tag, frag);
              else
                frag.appendChild(tag.root)
            }  // this tag must be insert
            else {
              if (isVirtual)
                addVirtual(tag, root, tags[i]);
              else
                root.insertBefore(tag.root, tags[i].root);
              // #1374 some browsers reset selected here
              oldItems.splice(i, 0, item)
            }
            tags.splice(i, 0, tag);
            pos = i  // handled here so no move
          } else
            tag.update(item, true);
          // reorder the tag if it's not located in its previous position
          if (pos !== i && _mustReorder && tags[i]  // fix 1581 unable to reproduce it in a test!
) {
            // update the DOM
            if (isVirtual)
              moveVirtual(tag, root, tags[i], dom.childNodes.length);
            else
              root.insertBefore(tag.root, tags[i].root);
            // update the position attribute if it exists
            if (expr.pos)
              tag[expr.pos] = i;
            // move the old tag instance
            tags.splice(i, 0, tags.splice(pos, 1)[0]);
            // move the old item
            oldItems.splice(i, 0, oldItems.splice(pos, 1)[0]);
            // if the loop tags are not custom
            // we need to move all their custom tags into the right position
            if (!child && tag.tags)
              moveNestedTags(tag, i)
          }
          // cache the original item to use it in the events bound to this node
          // and its children
          tag._item = item;
          // cache the real parent tag internally
          defineProperty(tag, '_parent', parent)
        }
        // remove the redundant tags
        unmountRedundant(items, tags);
        // insert the new nodes
        if (isOption) {
          root.appendChild(frag);
          // #1374 <select> <option selected={true}> </select>
          if (root.length) {
            var si, op = root.options;
            root.selectedIndex = si = -1;
            for (i = 0; i < op.length; i++) {
              if (op[i].selected = op[i].__selected) {
                if (si < 0)
                  root.selectedIndex = si = i
              }
            }
          }
        } else
          root.insertBefore(frag, ref);
        // set the 'tags' property of the parent tag
        // if child is 'undefined' it means that we don't need to set this property
        // for example:
        // we don't need store the `myTag.tags['div']` property if we are looping a div tag
        // but we need to track the `myTag.tags['child']` property looping a custom child node named `child`
        if (child)
          parent.tags[tagName] = tags;
        // clone the items array
        oldItems = items.slice()
      })
    }
    /**
 * Object that will be used to inject and manage the css of every tag instance
 */
    var styleManager = function (_riot) {
      if (!window)
        return {
          // skip injection on the server
          add: function () {
          },
          inject: function () {
          }
        };
      var styleNode = function () {
        // create a new style element with the correct type
        var newNode = mkEl('style');
        setAttr(newNode, 'type', 'text/css');
        // replace any user node or insert the new one into the head
        var userNode = $('style[type=riot]');
        if (userNode) {
          if (userNode.id)
            newNode.id = userNode.id;
          userNode.parentNode.replaceChild(newNode, userNode)
        } else
          document.getElementsByTagName('head')[0].appendChild(newNode);
        return newNode
      }();
      // Create cache and shortcut to the correct property
      var cssTextProp = styleNode.styleSheet, stylesToInject = '';
      // Expose the style node in a non-modificable property
      Object.defineProperty(_riot, 'styleNode', {
        value: styleNode,
        writable: true
      });
      /**
   * Public api
   */
      return {
        /**
     * Save a tag style to be later injected into DOM
     * @param   { String } css [description]
     */
        add: function (css) {
          stylesToInject += css
        },
        /**
     * Inject all previously saved tag styles into DOM
     * innerHTML seems slow: http://jsperf.com/riot-insert-style
     */
        inject: function () {
          if (stylesToInject) {
            if (cssTextProp)
              cssTextProp.cssText += stylesToInject;
            else
              styleNode.innerHTML += stylesToInject;
            stylesToInject = ''
          }
        }
      }
    }(riot);
    function parseNamedElements(root, tag, childTags, forceParsingNamed) {
      walk(root, function (dom) {
        if (dom.nodeType == 1) {
          dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || getAttr(dom, 'each')) ? 1 : 0;
          // custom child tag
          if (childTags) {
            var child = getTag(dom);
            if (child && !dom.isLoop)
              childTags.push(initChildTag(child, {
                root: dom,
                parent: tag
              }, dom.innerHTML, tag))
          }
          if (!dom.isLoop || forceParsingNamed)
            setNamed(dom, tag, [])
        }
      })
    }
    function parseExpressions(root, tag, expressions) {
      function addExpr(dom, val, extra) {
        if (tmpl.hasExpr(val)) {
          expressions.push(extend({
            dom: dom,
            expr: val
          }, extra))
        }
      }
      walk(root, function (dom) {
        var type = dom.nodeType, attr;
        // text node
        if (type == 3 && dom.parentNode.tagName != 'STYLE')
          addExpr(dom, dom.nodeValue);
        if (type != 1)
          return;
        /* element */
        // loop
        attr = getAttr(dom, 'each');
        if (attr) {
          _each(dom, tag, attr);
          return false
        }
        // attribute expressions
        each(dom.attributes, function (attr) {
          var name = attr.name, bool = name.split('__')[1];
          addExpr(dom, attr.value, {
            attr: bool || name,
            bool: bool
          });
          if (bool) {
            remAttr(dom, name);
            return false
          }
        });
        // skip custom tags
        if (getTag(dom))
          return false
      })
    }
    function Tag(impl, conf, innerHTML) {
      var self = riot.observable(this), opts = inherit(conf.opts) || {}, parent = conf.parent, isLoop = conf.isLoop, hasImpl = conf.hasImpl, item = cleanUpData(conf.item), expressions = [], childTags = [], root = conf.root, tagName = root.tagName.toLowerCase(), attr = {}, implAttr = {}, propsInSyncWithParent = [], dom;
      // only call unmount if we have a valid __tagImpl (has name property)
      if (impl.name && root._tag)
        root._tag.unmount(true);
      // not yet mounted
      this.isMounted = false;
      root.isLoop = isLoop;
      // keep a reference to the tag just created
      // so we will be able to mount this tag multiple times
      root._tag = this;
      // create a unique id to this tag
      // it could be handy to use it also to improve the virtual dom rendering speed
      defineProperty(this, '_riot_id', ++__uid);
      // base 1 allows test !t._riot_id
      extend(this, {
        parent: parent,
        root: root,
        opts: opts,
        tags: {}
      }, item);
      // grab attributes
      each(root.attributes, function (el) {
        var val = el.value;
        // remember attributes with expressions only
        if (tmpl.hasExpr(val))
          attr[el.name] = val
      });
      dom = mkdom(impl.tmpl, innerHTML);
      // options
      function updateOpts() {
        var ctx = hasImpl && isLoop ? self : parent || self;
        // update opts from current DOM attributes
        each(root.attributes, function (el) {
          var val = el.value;
          opts[toCamel(el.name)] = tmpl.hasExpr(val) ? tmpl(val, ctx) : val
        });
        // recover those with expressions
        each(Object.keys(attr), function (name) {
          opts[toCamel(name)] = tmpl(attr[name], ctx)
        })
      }
      function normalizeData(data) {
        for (var key in item) {
          if (typeof self[key] !== T_UNDEF && isWritable(self, key))
            self[key] = data[key]
        }
      }
      function inheritFromParent() {
        if (!self.parent || !isLoop)
          return;
        each(Object.keys(self.parent), function (k) {
          // some properties must be always in sync with the parent tag
          var mustSync = !contains(RESERVED_WORDS_BLACKLIST, k) && contains(propsInSyncWithParent, k);
          if (typeof self[k] === T_UNDEF || mustSync) {
            // track the property to keep in sync
            // so we can keep it updated
            if (!mustSync)
              propsInSyncWithParent.push(k);
            self[k] = self.parent[k]
          }
        })
      }
      /**
   * Update the tag expressions and options
   * @param   { * }  data - data we want to use to extend the tag properties
   * @param   { Boolean } isInherited - is this update coming from a parent tag?
   * @returns { self }
   */
      defineProperty(this, 'update', function (data, isInherited) {
        // make sure the data passed will not override
        // the component core methods
        data = cleanUpData(data);
        // inherit properties from the parent
        inheritFromParent();
        // normalize the tag properties in case an item object was initially passed
        if (data && isObject(item)) {
          normalizeData(data);
          item = data
        }
        extend(self, data);
        updateOpts();
        self.trigger('update', data);
        update(expressions, self);
        // the updated event will be triggered
        // once the DOM will be ready and all the re-flows are completed
        // this is useful if you want to get the "real" root properties
        // 4 ex: root.offsetWidth ...
        if (isInherited && self.parent)
          // closes #1599
          self.parent.one('updated', function () {
            self.trigger('updated')
          });
        else
          rAF(function () {
            self.trigger('updated')
          });
        return this
      });
      defineProperty(this, 'mixin', function () {
        each(arguments, function (mix) {
          var instance;
          mix = typeof mix === T_STRING ? riot.mixin(mix) : mix;
          // check if the mixin is a function
          if (isFunction(mix)) {
            // create the new mixin instance
            instance = new mix;
            // save the prototype to loop it afterwards
            mix = mix.prototype
          } else
            instance = mix;
          // loop the keys in the function prototype or the all object keys
          each(Object.getOwnPropertyNames(mix), function (key) {
            // bind methods to self
            if (key != 'init')
              self[key] = isFunction(instance[key]) ? instance[key].bind(self) : instance[key]
          });
          // init method will be called automatically
          if (instance.init)
            instance.init.bind(self)()
        });
        return this
      });
      defineProperty(this, 'mount', function () {
        updateOpts();
        // add global mixin
        var globalMixin = riot.mixin(GLOBAL_MIXIN);
        if (globalMixin)
          self.mixin(globalMixin);
        // initialiation
        if (impl.fn)
          impl.fn.call(self, opts);
        // parse layout after init. fn may calculate args for nested custom tags
        parseExpressions(dom, self, expressions);
        // mount the child tags
        toggle(true);
        // update the root adding custom attributes coming from the compiler
        // it fixes also #1087
        if (impl.attrs)
          walkAttributes(impl.attrs, function (k, v) {
            setAttr(root, k, v)
          });
        if (impl.attrs || hasImpl)
          parseExpressions(self.root, self, expressions);
        if (!self.parent || isLoop)
          self.update(item);
        // internal use only, fixes #403
        self.trigger('before-mount');
        if (isLoop && !hasImpl) {
          // update the root attribute for the looped elements
          root = dom.firstChild
        } else {
          while (dom.firstChild)
            root.appendChild(dom.firstChild);
          if (root.stub)
            root = parent.root
        }
        defineProperty(self, 'root', root);
        // parse the named dom nodes in the looped child
        // adding them to the parent as well
        if (isLoop)
          parseNamedElements(self.root, self.parent, null, true);
        // if it's not a child tag we can trigger its mount event
        if (!self.parent || self.parent.isMounted) {
          self.isMounted = true;
          self.trigger('mount')
        }  // otherwise we need to wait that the parent event gets triggered
        else
          self.parent.one('mount', function () {
            // avoid to trigger the `mount` event for the tags
            // not visible included in an if statement
            if (!isInStub(self.root)) {
              self.parent.isMounted = self.isMounted = true;
              self.trigger('mount')
            }
          })
      });
      defineProperty(this, 'unmount', function (keepRootTag) {
        var el = root, p = el.parentNode, ptag, tagIndex = __virtualDom.indexOf(self);
        self.trigger('before-unmount');
        // remove this tag instance from the global virtualDom variable
        if (~tagIndex)
          __virtualDom.splice(tagIndex, 1);
        if (this._virts) {
          each(this._virts, function (v) {
            if (v.parentNode)
              v.parentNode.removeChild(v)
          })
        }
        if (p) {
          if (parent) {
            ptag = getImmediateCustomParentTag(parent);
            // remove this tag from the parent tags object
            // if there are multiple nested tags with same name..
            // remove this element form the array
            if (isArray(ptag.tags[tagName]))
              each(ptag.tags[tagName], function (tag, i) {
                if (tag._riot_id == self._riot_id)
                  ptag.tags[tagName].splice(i, 1)
              });
            else
              // otherwise just delete the tag instance
              ptag.tags[tagName] = undefined
          } else
            while (el.firstChild)
              el.removeChild(el.firstChild);
          if (!keepRootTag)
            p.removeChild(el);
          else
            // the riot-tag attribute isn't needed anymore, remove it
            remAttr(p, 'riot-tag')
        }
        self.trigger('unmount');
        toggle();
        self.off('*');
        self.isMounted = false;
        delete root._tag
      });
      // proxy function to bind updates
      // dispatched from a parent tag
      function onChildUpdate(data) {
        self.update(data, true)
      }
      function toggle(isMount) {
        // mount/unmount children
        each(childTags, function (child) {
          child[isMount ? 'mount' : 'unmount']()
        });
        // listen/unlisten parent (events flow one way from parent to children)
        if (!parent)
          return;
        var evt = isMount ? 'on' : 'off';
        // the loop tags will be always in sync with the parent automatically
        if (isLoop)
          parent[evt]('unmount', self.unmount);
        else {
          parent[evt]('update', onChildUpdate)[evt]('unmount', self.unmount)
        }
      }
      // named elements available for fn
      parseNamedElements(dom, this, childTags)
    }
    /**
 * Attach an event to a DOM node
 * @param { String } name - event name
 * @param { Function } handler - event callback
 * @param { Object } dom - dom node
 * @param { Tag } tag - tag instance
 */
    function setEventHandler(name, handler, dom, tag) {
      dom[name] = function (e) {
        var ptag = tag._parent, item = tag._item, el;
        if (!item)
          while (ptag && !item) {
            item = ptag._item;
            ptag = ptag._parent
          }
        // cross browser event fix
        e = e || window.event;
        // override the event properties
        if (isWritable(e, 'currentTarget'))
          e.currentTarget = dom;
        if (isWritable(e, 'target'))
          e.target = e.srcElement;
        if (isWritable(e, 'which'))
          e.which = e.charCode || e.keyCode;
        e.item = item;
        // prevent default behaviour (by default)
        if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {
          if (e.preventDefault)
            e.preventDefault();
          e.returnValue = false
        }
        if (!e.preventUpdate) {
          el = item ? getImmediateCustomParentTag(ptag) : tag;
          el.update()
        }
      }
    }
    /**
 * Insert a DOM node replacing another one (used by if- attribute)
 * @param   { Object } root - parent node
 * @param   { Object } node - node replaced
 * @param   { Object } before - node added
 */
    function insertTo(root, node, before) {
      if (!root)
        return;
      root.insertBefore(before, node);
      root.removeChild(node)
    }
    /**
 * Update the expressions in a Tag instance
 * @param   { Array } expressions - expression that must be re evaluated
 * @param   { Tag } tag - tag instance
 */
    function update(expressions, tag) {
      each(expressions, function (expr, i) {
        var dom = expr.dom, attrName = expr.attr, value = tmpl(expr.expr, tag), parent = expr.dom.parentNode;
        if (expr.bool) {
          value = !!value;
          if (attrName === 'selected')
            dom.__selected = value  // #1374
        } else if (value == null)
          value = '';
        // #1638: regression of #1612, update the dom only if the value of the
        // expression was changed
        if (expr.value === value) {
          return
        }
        expr.value = value;
        // textarea and text nodes has no attribute name
        if (!attrName) {
          // about #815 w/o replace: the browser converts the value to a string,
          // the comparison by "==" does too, but not in the server
          value += '';
          // test for parent avoids error with invalid assignment to nodeValue
          if (parent) {
            if (parent.tagName === 'TEXTAREA') {
              parent.value = value;
              // #1113
              if (!IE_VERSION)
                dom.nodeValue = value  // #1625 IE throws here, nodeValue
            }  // will be available on 'updated'
            else
              dom.nodeValue = value
          }
          return
        }
        // ~~#1612: look for changes in dom.value when updating the value~~
        if (attrName === 'value') {
          dom.value = value;
          return
        }
        // remove original attribute
        remAttr(dom, attrName);
        // event handler
        if (isFunction(value)) {
          setEventHandler(attrName, value, dom, tag)  // if- conditional
        } else if (attrName == 'if') {
          var stub = expr.stub, add = function () {
              insertTo(stub.parentNode, stub, dom)
            }, remove = function () {
              insertTo(dom.parentNode, dom, stub)
            };
          // add to DOM
          if (value) {
            if (stub) {
              add();
              dom.inStub = false;
              // avoid to trigger the mount event if the tags is not visible yet
              // maybe we can optimize this avoiding to mount the tag at all
              if (!isInStub(dom)) {
                walk(dom, function (el) {
                  if (el._tag && !el._tag.isMounted)
                    el._tag.isMounted = !!el._tag.trigger('mount')
                })
              }
            }  // remove from DOM
          } else {
            stub = expr.stub = stub || document.createTextNode('');
            // if the parentNode is defined we can easily replace the tag
            if (dom.parentNode)
              remove()  // otherwise we need to wait the updated event
;
            else
              (tag.parent || tag).one('updated', remove);
            dom.inStub = true
          }  // show / hide
        } else if (attrName === 'show') {
          dom.style.display = value ? '' : 'none'
        } else if (attrName === 'hide') {
          dom.style.display = value ? 'none' : ''
        } else if (expr.bool) {
          dom[attrName] = value;
          if (value)
            setAttr(dom, attrName, attrName)
        } else if (value === 0 || value && typeof value !== T_OBJECT) {
          // <img src="{ expr }">
          if (startsWith(attrName, RIOT_PREFIX) && attrName != RIOT_TAG) {
            attrName = attrName.slice(RIOT_PREFIX.length)
          }
          setAttr(dom, attrName, value)
        }
      })
    }
    /**
 * Specialized function for looping an array-like collection with `each={}`
 * @param   { Array } els - collection of items
 * @param   {Function} fn - callback function
 * @returns { Array } the array looped
 */
    function each(els, fn) {
      var len = els ? els.length : 0;
      for (var i = 0, el; i < len; i++) {
        el = els[i];
        // return false -> current item was removed by fn during the loop
        if (el != null && fn(el, i) === false)
          i--
      }
      return els
    }
    /**
 * Detect if the argument passed is a function
 * @param   { * } v - whatever you want to pass to this function
 * @returns { Boolean } -
 */
    function isFunction(v) {
      return typeof v === T_FUNCTION || false  // avoid IE problems
    }
    /**
 * Detect if the argument passed is an object, exclude null.
 * NOTE: Use isObject(x) && !isArray(x) to excludes arrays.
 * @param   { * } v - whatever you want to pass to this function
 * @returns { Boolean } -
 */
    function isObject(v) {
      return v && typeof v === T_OBJECT  // typeof null is 'object'
    }
    /**
 * Remove any DOM attribute from a node
 * @param   { Object } dom - DOM node we want to update
 * @param   { String } name - name of the property we want to remove
 */
    function remAttr(dom, name) {
      dom.removeAttribute(name)
    }
    /**
 * Convert a string containing dashes to camel case
 * @param   { String } string - input string
 * @returns { String } my-string -> myString
 */
    function toCamel(string) {
      return string.replace(/-(\w)/g, function (_, c) {
        return c.toUpperCase()
      })
    }
    /**
 * Get the value of any DOM attribute on a node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { String } name - name of the attribute we want to get
 * @returns { String | undefined } name of the node attribute whether it exists
 */
    function getAttr(dom, name) {
      return dom.getAttribute(name)
    }
    /**
 * Set any DOM attribute
 * @param { Object } dom - DOM node we want to update
 * @param { String } name - name of the property we want to set
 * @param { String } val - value of the property we want to set
 */
    function setAttr(dom, name, val) {
      dom.setAttribute(name, val)
    }
    /**
 * Detect the tag implementation by a DOM node
 * @param   { Object } dom - DOM node we need to parse to get its tag implementation
 * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
 */
    function getTag(dom) {
      return dom.tagName && __tagImpl[getAttr(dom, RIOT_TAG_IS) || getAttr(dom, RIOT_TAG) || dom.tagName.toLowerCase()]
    }
    /**
 * Add a child tag to its parent into the `tags` object
 * @param   { Object } tag - child tag instance
 * @param   { String } tagName - key where the new tag will be stored
 * @param   { Object } parent - tag instance where the new child tag will be included
 */
    function addChildTag(tag, tagName, parent) {
      var cachedTag = parent.tags[tagName];
      // if there are multiple children tags having the same name
      if (cachedTag) {
        // if the parent tags property is not yet an array
        // create it adding the first cached tag
        if (!isArray(cachedTag))
          // don't add the same tag twice
          if (cachedTag !== tag)
            parent.tags[tagName] = [cachedTag];
        // add the new nested tag to the array
        if (!contains(parent.tags[tagName], tag))
          parent.tags[tagName].push(tag)
      } else {
        parent.tags[tagName] = tag
      }
    }
    /**
 * Move the position of a custom tag in its parent tag
 * @param   { Object } tag - child tag instance
 * @param   { String } tagName - key where the tag was stored
 * @param   { Number } newPos - index where the new tag will be stored
 */
    function moveChildTag(tag, tagName, newPos) {
      var parent = tag.parent, tags;
      // no parent no move
      if (!parent)
        return;
      tags = parent.tags[tagName];
      if (isArray(tags))
        tags.splice(newPos, 0, tags.splice(tags.indexOf(tag), 1)[0]);
      else
        addChildTag(tag, tagName, parent)
    }
    /**
 * Create a new child tag including it correctly into its parent
 * @param   { Object } child - child tag implementation
 * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
 * @param   { String } innerHTML - inner html of the child node
 * @param   { Object } parent - instance of the parent tag including the child custom tag
 * @returns { Object } instance of the new child tag just created
 */
    function initChildTag(child, opts, innerHTML, parent) {
      var tag = new Tag(child, opts, innerHTML), tagName = getTagName(opts.root), ptag = getImmediateCustomParentTag(parent);
      // fix for the parent attribute in the looped elements
      tag.parent = ptag;
      // store the real parent tag
      // in some cases this could be different from the custom parent tag
      // for example in nested loops
      tag._parent = parent;
      // add this tag to the custom parent tag
      addChildTag(tag, tagName, ptag);
      // and also to the real parent tag
      if (ptag !== parent)
        addChildTag(tag, tagName, parent);
      // empty the child node once we got its template
      // to avoid that its children get compiled multiple times
      opts.root.innerHTML = '';
      return tag
    }
    /**
 * Loop backward all the parents tree to detect the first custom parent tag
 * @param   { Object } tag - a Tag instance
 * @returns { Object } the instance of the first custom parent tag found
 */
    function getImmediateCustomParentTag(tag) {
      var ptag = tag;
      while (!getTag(ptag.root)) {
        if (!ptag.parent)
          break;
        ptag = ptag.parent
      }
      return ptag
    }
    /**
 * Helper function to set an immutable property
 * @param   { Object } el - object where the new property will be set
 * @param   { String } key - object key where the new property will be stored
 * @param   { * } value - value of the new property
* @param   { Object } options - set the propery overriding the default options
 * @returns { Object } - the initial object
 */
    function defineProperty(el, key, value, options) {
      Object.defineProperty(el, key, extend({
        value: value,
        enumerable: false,
        writable: false,
        configurable: false
      }, options));
      return el
    }
    /**
 * Get the tag name of any DOM node
 * @param   { Object } dom - DOM node we want to parse
 * @returns { String } name to identify this dom node in riot
 */
    function getTagName(dom) {
      var child = getTag(dom), namedTag = getAttr(dom, 'name'), tagName = namedTag && !tmpl.hasExpr(namedTag) ? namedTag : child ? child.name : dom.tagName.toLowerCase();
      return tagName
    }
    /**
 * Extend any object with other properties
 * @param   { Object } src - source object
 * @returns { Object } the resulting extended object
 *
 * var obj = { foo: 'baz' }
 * extend(obj, {bar: 'bar', foo: 'bar'})
 * console.log(obj) => {bar: 'bar', foo: 'bar'}
 *
 */
    function extend(src) {
      var obj, args = arguments;
      for (var i = 1; i < args.length; ++i) {
        if (obj = args[i]) {
          for (var key in obj) {
            // check if this property of the source object could be overridden
            if (isWritable(src, key))
              src[key] = obj[key]
          }
        }
      }
      return src
    }
    /**
 * Check whether an array contains an item
 * @param   { Array } arr - target array
 * @param   { * } item - item to test
 * @returns { Boolean } Does 'arr' contain 'item'?
 */
    function contains(arr, item) {
      return ~arr.indexOf(item)
    }
    /**
 * Check whether an object is a kind of array
 * @param   { * } a - anything
 * @returns {Boolean} is 'a' an array?
 */
    function isArray(a) {
      return Array.isArray(a) || a instanceof Array
    }
    /**
 * Detect whether a property of an object could be overridden
 * @param   { Object }  obj - source object
 * @param   { String }  key - object property
 * @returns { Boolean } is this property writable?
 */
    function isWritable(obj, key) {
      var props = Object.getOwnPropertyDescriptor(obj, key);
      return typeof obj[key] === T_UNDEF || props && props.writable
    }
    /**
 * With this function we avoid that the internal Tag methods get overridden
 * @param   { Object } data - options we want to use to extend the tag instance
 * @returns { Object } clean object without containing the riot internal reserved words
 */
    function cleanUpData(data) {
      if (!(data instanceof Tag) && !(data && typeof data.trigger == T_FUNCTION))
        return data;
      var o = {};
      for (var key in data) {
        if (!contains(RESERVED_WORDS_BLACKLIST, key))
          o[key] = data[key]
      }
      return o
    }
    /**
 * Walk down recursively all the children tags starting dom node
 * @param   { Object }   dom - starting node where we will start the recursion
 * @param   { Function } fn - callback to transform the child node just found
 */
    function walk(dom, fn) {
      if (dom) {
        // stop the recursion
        if (fn(dom) === false)
          return;
        else {
          dom = dom.firstChild;
          while (dom) {
            walk(dom, fn);
            dom = dom.nextSibling
          }
        }
      }
    }
    /**
 * Minimize risk: only zero or one _space_ between attr & value
 * @param   { String }   html - html string we want to parse
 * @param   { Function } fn - callback function to apply on any attribute found
 */
    function walkAttributes(html, fn) {
      var m, re = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
      while (m = re.exec(html)) {
        fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
      }
    }
    /**
 * Check whether a DOM node is in stub mode, useful for the riot 'if' directive
 * @param   { Object }  dom - DOM node we want to parse
 * @returns { Boolean } -
 */
    function isInStub(dom) {
      while (dom) {
        if (dom.inStub)
          return true;
        dom = dom.parentNode
      }
      return false
    }
    /**
 * Create a generic DOM node
 * @param   { String } name - name of the DOM node we want to create
 * @returns { Object } DOM node just created
 */
    function mkEl(name) {
      return document.createElement(name)
    }
    /**
 * Shorter and fast way to select multiple nodes in the DOM
 * @param   { String } selector - DOM selector
 * @param   { Object } ctx - DOM node where the targets of our search will is located
 * @returns { Object } dom nodes found
 */
    function $$(selector, ctx) {
      return (ctx || document).querySelectorAll(selector)
    }
    /**
 * Shorter and fast way to select a single node in the DOM
 * @param   { String } selector - unique dom selector
 * @param   { Object } ctx - DOM node where the target of our search will is located
 * @returns { Object } dom node found
 */
    function $(selector, ctx) {
      return (ctx || document).querySelector(selector)
    }
    /**
 * Simple object prototypal inheritance
 * @param   { Object } parent - parent object
 * @returns { Object } child instance
 */
    function inherit(parent) {
      function Child() {
      }
      Child.prototype = parent;
      return new Child
    }
    /**
 * Get the name property needed to identify a DOM node in riot
 * @param   { Object } dom - DOM node we need to parse
 * @returns { String | undefined } give us back a string to identify this dom node
 */
    function getNamedKey(dom) {
      return getAttr(dom, 'id') || getAttr(dom, 'name')
    }
    /**
 * Set the named properties of a tag element
 * @param { Object } dom - DOM node we need to parse
 * @param { Object } parent - tag instance where the named dom element will be eventually added
 * @param { Array } keys - list of all the tag instance properties
 */
    function setNamed(dom, parent, keys) {
      // get the key value we want to add to the tag instance
      var key = getNamedKey(dom), isArr,
        // add the node detected to a tag instance using the named property
        add = function (value) {
          // avoid to override the tag properties already set
          if (contains(keys, key))
            return;
          // check whether this value is an array
          isArr = isArray(value);
          // if the key was never set
          if (!value)
            // set it once on the tag instance
            parent[key] = dom  // if it was an array and not yet set
;
          else if (!isArr || isArr && !contains(value, dom)) {
            // add the dom node into the array
            if (isArr)
              value.push(dom);
            else
              parent[key] = [
                value,
                dom
              ]
          }
        };
      // skip the elements with no named properties
      if (!key)
        return;
      // check whether this key has been already evaluated
      if (tmpl.hasExpr(key))
        // wait the first updated event only once
        parent.one('mount', function () {
          key = getNamedKey(dom);
          add(parent[key])
        });
      else
        add(parent[key])
    }
    /**
 * Faster String startsWith alternative
 * @param   { String } src - source string
 * @param   { String } str - test string
 * @returns { Boolean } -
 */
    function startsWith(src, str) {
      return src.slice(0, str.length) === str
    }
    /**
 * requestAnimationFrame function
 * Adapted from https://gist.github.com/paulirish/1579671, license MIT
 */
    var rAF = function (w) {
      var raf = w.requestAnimationFrame || w.mozRequestAnimationFrame || w.webkitRequestAnimationFrame;
      if (!raf || /iP(ad|hone|od).*OS 6/.test(w.navigator.userAgent)) {
        // buggy iOS6
        var lastTime = 0;
        raf = function (cb) {
          var nowtime = Date.now(), timeout = Math.max(16 - (nowtime - lastTime), 0);
          setTimeout(function () {
            cb(lastTime = nowtime + timeout)
          }, timeout)
        }
      }
      return raf
    }(window || {});
    /**
 * Mount a tag creating new Tag instance
 * @param   { Object } root - dom node where the tag will be mounted
 * @param   { String } tagName - name of the riot tag we want to mount
 * @param   { Object } opts - options to pass to the Tag instance
 * @returns { Tag } a new Tag instance
 */
    function mountTo(root, tagName, opts) {
      var tag = __tagImpl[tagName],
        // cache the inner HTML to fix #855
        innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
      // clear the inner html
      root.innerHTML = '';
      if (tag && root)
        tag = new Tag(tag, {
          root: root,
          opts: opts
        }, innerHTML);
      if (tag && tag.mount) {
        tag.mount();
        // add this tag to the virtualDom variable
        if (!contains(__virtualDom, tag))
          __virtualDom.push(tag)
      }
      return tag
    }
    /**
 * Riot public api
 */
    // share methods for other riot parts, e.g. compiler
    riot.util = {
      brackets: brackets,
      tmpl: tmpl
    };
    /**
 * Create a mixin that could be globally shared across all the tags
 */
    riot.mixin = function () {
      var mixins = {};
      /**
   * Create/Return a mixin by its name
   * @param   { String } name - mixin name (global mixin if missing)
   * @param   { Object } mixin - mixin logic
   * @returns { Object } the mixin logic
   */
      return function (name, mixin) {
        if (isObject(name)) {
          mixin = name;
          mixins[GLOBAL_MIXIN] = extend(mixins[GLOBAL_MIXIN] || {}, mixin);
          return
        }
        if (!mixin)
          return mixins[name];
        mixins[name] = mixin
      }
    }();
    /**
 * Create a new riot tag implementation
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   html - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
    riot.tag = function (name, html, css, attrs, fn) {
      if (isFunction(attrs)) {
        fn = attrs;
        if (/^[\w\-]+\s?=/.test(css)) {
          attrs = css;
          css = ''
        } else
          attrs = ''
      }
      if (css) {
        if (isFunction(css))
          fn = css;
        else
          styleManager.add(css)
      }
      name = name.toLowerCase();
      __tagImpl[name] = {
        name: name,
        tmpl: html,
        attrs: attrs,
        fn: fn
      };
      return name
    };
    /**
 * Create a new riot tag implementation (for use by the compiler)
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   html - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
    riot.tag2 = function (name, html, css, attrs, fn) {
      if (css)
        styleManager.add(css);
      //if (bpair) riot.settings.brackets = bpair
      __tagImpl[name] = {
        name: name,
        tmpl: html,
        attrs: attrs,
        fn: fn
      };
      return name
    };
    /**
 * Mount a tag using a specific tag implementation
 * @param   { String } selector - tag DOM selector
 * @param   { String } tagName - tag implementation name
 * @param   { Object } opts - tag logic
 * @returns { Array } new tags instances
 */
    riot.mount = function (selector, tagName, opts) {
      var els, allTags, tags = [];
      // helper functions
      function addRiotTags(arr) {
        var list = '';
        each(arr, function (e) {
          if (!/[^-\w]/.test(e)) {
            e = e.trim().toLowerCase();
            list += ',[' + RIOT_TAG_IS + '="' + e + '"],[' + RIOT_TAG + '="' + e + '"]'
          }
        });
        return list
      }
      function selectAllTags() {
        var keys = Object.keys(__tagImpl);
        return keys + addRiotTags(keys)
      }
      function pushTags(root) {
        if (root.tagName) {
          var riotTag = getAttr(root, RIOT_TAG_IS) || getAttr(root, RIOT_TAG);
          // have tagName? force riot-tag to be the same
          if (tagName && riotTag !== tagName) {
            riotTag = tagName;
            setAttr(root, RIOT_TAG_IS, tagName)
          }
          var tag = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);
          if (tag)
            tags.push(tag)
        } else if (root.length) {
          each(root, pushTags)  // assume nodeList
        }
      }
      // ----- mount code -----
      // inject styles into DOM
      styleManager.inject();
      if (isObject(tagName)) {
        opts = tagName;
        tagName = 0
      }
      // crawl the DOM to find the tag
      if (typeof selector === T_STRING) {
        if (selector === '*')
          // select all the tags registered
          // and also the tags found with the riot-tag attribute set
          selector = allTags = selectAllTags();
        else
          // or just the ones named like the selector
          selector += addRiotTags(selector.split(/, */));
        // make sure to pass always a selector
        // to the querySelectorAll function
        els = selector ? $$(selector) : []
      } else
        // probably you have passed already a tag or a NodeList
        els = selector;
      // select all the registered and mount them inside their root elements
      if (tagName === '*') {
        // get all custom tags
        tagName = allTags || selectAllTags();
        // if the root els it's just a single tag
        if (els.tagName)
          els = $$(tagName, els);
        else {
          // select all the children for all the different root elements
          var nodeList = [];
          each(els, function (_el) {
            nodeList.push($$(tagName, _el))
          });
          els = nodeList
        }
        // get rid of the tagName
        tagName = 0
      }
      pushTags(els);
      return tags
    };
    /**
 * Update all the tags instances created
 * @returns { Array } all the tags instances
 */
    riot.update = function () {
      return each(__virtualDom, function (tag) {
        tag.update()
      })
    };
    /**
 * Export the Tag constructor
 */
    riot.Tag = Tag;
    // support CommonJS, AMD & browser
    /* istanbul ignore next */
    if (typeof exports === T_OBJECT)
      module.exports = riot;
    else if (typeof define === T_FUNCTION && typeof define.amd !== T_UNDEF)
      define(function () {
        return riot
      });
    else
      window.riot = riot
  }(typeof window != 'undefined' ? window : void 0))
});
// source: node_modules/daisho-riot/node_modules/jquery/dist/jquery.js
require.define('jquery/dist/jquery', function (module, exports, __dirname, __filename, process) {
  /*!
 * jQuery JavaScript Library v2.2.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-03-17T17:51Z
 */
  (function (global, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
      // For CommonJS and CommonJS-like environments where a proper `window`
      // is present, execute the factory and get jQuery.
      // For environments that do not have a `window` with a `document`
      // (such as Node.js), expose a factory as module.exports.
      // This accentuates the need for the creation of a real `window`.
      // e.g. var jQuery = require("jquery")(window);
      // See ticket #14549 for more info.
      module.exports = global.document ? factory(global, true) : function (w) {
        if (!w.document) {
          throw new Error('jQuery requires a window with a document')
        }
        return factory(w)
      }
    } else {
      factory(global)
    }  // Pass this if window is not defined yet
  }(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
    // Support: Firefox 18+
    // Can't be in strict mode, several libs including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    //"use strict";
    var arr = [];
    var document = window.document;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var support = {};
    var version = '2.2.2',
      // Define a local copy of jQuery
      jQuery = function (selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init(selector, context)
      },
      // Support: Android<4.1
      // Make sure we trim BOM and NBSP
      rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      // Matches dashed string for camelizing
      rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi,
      // Used by jQuery.camelCase as callback to replace()
      fcamelCase = function (all, letter) {
        return letter.toUpperCase()
      };
    jQuery.fn = jQuery.prototype = {
      // The current version of jQuery being used
      jquery: version,
      constructor: jQuery,
      // Start with an empty selector
      selector: '',
      // The default length of a jQuery object is 0
      length: 0,
      toArray: function () {
        return slice.call(this)
      },
      // Get the Nth element in the matched element set OR
      // Get the whole matched element set as a clean array
      get: function (num) {
        return num != null ? num < 0 ? this[num + this.length] : this[num] : // Return all the elements in a clean array
        slice.call(this)
      },
      // Take an array of elements and push it onto the stack
      // (returning the new matched element set)
      pushStack: function (elems) {
        // Build a new jQuery matched element set
        var ret = jQuery.merge(this.constructor(), elems);
        // Add the old object onto the stack (as a reference)
        ret.prevObject = this;
        ret.context = this.context;
        // Return the newly-formed element set
        return ret
      },
      // Execute a callback for every element in the matched set.
      each: function (callback) {
        return jQuery.each(this, callback)
      },
      map: function (callback) {
        return this.pushStack(jQuery.map(this, function (elem, i) {
          return callback.call(elem, i, elem)
        }))
      },
      slice: function () {
        return this.pushStack(slice.apply(this, arguments))
      },
      first: function () {
        return this.eq(0)
      },
      last: function () {
        return this.eq(-1)
      },
      eq: function (i) {
        var len = this.length, j = +i + (i < 0 ? len : 0);
        return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
      },
      end: function () {
        return this.prevObject || this.constructor()
      },
      // For internal use only.
      // Behaves like an Array's method, not like a jQuery method.
      push: push,
      sort: arr.sort,
      splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function () {
      var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        // Skip the boolean and the target
        target = arguments[i] || {};
        i++
      }
      // Handle case when target is a string or something (possible in deep copy)
      if (typeof target !== 'object' && !jQuery.isFunction(target)) {
        target = {}
      }
      // Extend jQuery itself if only one argument is passed
      if (i === length) {
        target = this;
        i--
      }
      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && jQuery.isArray(src) ? src : []
              } else {
                clone = src && jQuery.isPlainObject(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = jQuery.extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (copy !== undefined) {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    };
    jQuery.extend({
      // Unique for each copy of jQuery on the page
      expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
      // Assume jQuery is ready without the ready module
      isReady: true,
      error: function (msg) {
        throw new Error(msg)
      },
      noop: function () {
      },
      isFunction: function (obj) {
        return jQuery.type(obj) === 'function'
      },
      isArray: Array.isArray,
      isWindow: function (obj) {
        return obj != null && obj === obj.window
      },
      isNumeric: function (obj) {
        // parseFloat NaNs numeric-cast false positives (null|true|false|"")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        // adding 1 corrects loss of precision from parseFloat (#15100)
        var realStringObj = obj && obj.toString();
        return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0
      },
      isPlainObject: function (obj) {
        var key;
        // Not plain objects:
        // - Any object or value whose internal [[Class]] property is not "[object Object]"
        // - DOM nodes
        // - window
        if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
          return false
        }
        // Not own constructor property must be Object
        if (obj.constructor && !hasOwn.call(obj, 'constructor') && !hasOwn.call(obj.constructor.prototype || {}, 'isPrototypeOf')) {
          return false
        }
        // Own properties are enumerated firstly, so to speed up,
        // if last one is own, then all properties are own
        for (key in obj) {
        }
        return key === undefined || hasOwn.call(obj, key)
      },
      isEmptyObject: function (obj) {
        var name;
        for (name in obj) {
          return false
        }
        return true
      },
      type: function (obj) {
        if (obj == null) {
          return obj + ''
        }
        // Support: Android<4.0, iOS<6 (functionish RegExp)
        return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj
      },
      // Evaluates a script in a global context
      globalEval: function (code) {
        var script, indirect = eval;
        code = jQuery.trim(code);
        if (code) {
          // If the code includes a valid, prologue position
          // strict mode pragma, execute code by injecting a
          // script tag into the document.
          if (code.indexOf('use strict') === 1) {
            script = document.createElement('script');
            script.text = code;
            document.head.appendChild(script).parentNode.removeChild(script)
          } else {
            // Otherwise, avoid the DOM node creation, insertion
            // and removal by using an indirect global eval
            indirect(code)
          }
        }
      },
      // Convert dashed to camelCase; used by the css and data modules
      // Support: IE9-11+
      // Microsoft forgot to hump their vendor prefix (#9572)
      camelCase: function (string) {
        return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase)
      },
      nodeName: function (elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
      },
      each: function (obj, callback) {
        var length, i = 0;
        if (isArrayLike(obj)) {
          length = obj.length;
          for (; i < length; i++) {
            if (callback.call(obj[i], i, obj[i]) === false) {
              break
            }
          }
        } else {
          for (i in obj) {
            if (callback.call(obj[i], i, obj[i]) === false) {
              break
            }
          }
        }
        return obj
      },
      // Support: Android<4.1
      trim: function (text) {
        return text == null ? '' : (text + '').replace(rtrim, '')
      },
      // results is for internal usage only
      makeArray: function (arr, results) {
        var ret = results || [];
        if (arr != null) {
          if (isArrayLike(Object(arr))) {
            jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr)
          } else {
            push.call(ret, arr)
          }
        }
        return ret
      },
      inArray: function (elem, arr, i) {
        return arr == null ? -1 : indexOf.call(arr, elem, i)
      },
      merge: function (first, second) {
        var len = +second.length, j = 0, i = first.length;
        for (; j < len; j++) {
          first[i++] = second[j]
        }
        first.length = i;
        return first
      },
      grep: function (elems, callback, invert) {
        var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
        // Go through the array, only saving the items
        // that pass the validator function
        for (; i < length; i++) {
          callbackInverse = !callback(elems[i], i);
          if (callbackInverse !== callbackExpect) {
            matches.push(elems[i])
          }
        }
        return matches
      },
      // arg is for internal usage only
      map: function (elems, callback, arg) {
        var length, value, i = 0, ret = [];
        // Go through the array, translating each of the items to their new values
        if (isArrayLike(elems)) {
          length = elems.length;
          for (; i < length; i++) {
            value = callback(elems[i], i, arg);
            if (value != null) {
              ret.push(value)
            }
          }  // Go through every key on the object,
        } else {
          for (i in elems) {
            value = callback(elems[i], i, arg);
            if (value != null) {
              ret.push(value)
            }
          }
        }
        // Flatten any nested arrays
        return concat.apply([], ret)
      },
      // A global GUID counter for objects
      guid: 1,
      // Bind a function to a context, optionally partially applying any
      // arguments.
      proxy: function (fn, context) {
        var tmp, args, proxy;
        if (typeof context === 'string') {
          tmp = fn[context];
          context = fn;
          fn = tmp
        }
        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if (!jQuery.isFunction(fn)) {
          return undefined
        }
        // Simulated bind
        args = slice.call(arguments, 2);
        proxy = function () {
          return fn.apply(context || this, args.concat(slice.call(arguments)))
        };
        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy
      },
      now: Date.now,
      // jQuery.support is not used in Core but other projects attach their
      // properties to it so it needs to exist.
      support: support
    });
    // JSHint would error on this code due to the Symbol not being defined in ES5.
    // Defining this global in .jshintrc would create a danger of using the global
    // unguarded in another place, it seems safer to just disable JSHint for these
    // three lines.
    /* jshint ignore: start */
    if (typeof Symbol === 'function') {
      jQuery.fn[Symbol.iterator] = arr[Symbol.iterator]
    }
    /* jshint ignore: end */
    // Populate the class2type map
    jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
      class2type['[object ' + name + ']'] = name.toLowerCase()
    });
    function isArrayLike(obj) {
      // Support: iOS 8.2 (not reproducible in simulator)
      // `in` check used to prevent JIT error (gh-2145)
      // hasOwn isn't used here due to false negatives
      // regarding Nodelist length in IE
      var length = !!obj && 'length' in obj && obj.length, type = jQuery.type(obj);
      if (type === 'function' || jQuery.isWindow(obj)) {
        return false
      }
      return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj
    }
    var Sizzle = /*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
    function (window) {
      var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate,
        // Local document vars
        setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
        // Instance-specific data
        expando = 'sizzle' + 1 * new Date, preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
          if (a === b) {
            hasDuplicate = true
          }
          return 0
        },
        // General-purpose constants
        MAX_NEGATIVE = 1 << 31,
        // Instance methods
        hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // http://jsperf.com/thor-indexof-vs-for/5
        indexOf = function (list, elem) {
          var i = 0, len = list.length;
          for (; i < len; i++) {
            if (list[i] === elem) {
              return i
            }
          }
          return -1
        }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
        // Regular expressions
        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = '[\\x20\\t\\r\\n\\f]',
        // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+',
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + // Operator (capture 2)
        '*([*^$|!~]?=)' + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
        '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + // 2. simple (capture 6)
        '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + // 3. anything else (capture 2)
        '.*' + ')\\)|)',
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
          'ID': new RegExp('^#(' + identifier + ')'),
          'CLASS': new RegExp('^\\.(' + identifier + ')'),
          'TAG': new RegExp('^(' + identifier + '|[*])'),
          'ATTR': new RegExp('^' + attributes),
          'PSEUDO': new RegExp('^' + pseudos),
          'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
          'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g,
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
          var high = '0x' + escaped - 65536;
          // NaN means non-codepoint
          // Support: Firefox<24
          // Workaround erroneous numeric interpretation of +"0x"
          return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
          String.fromCharCode(high + 65536) : // Supplemental Plane codepoint (surrogate pair)
          String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
        },
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function () {
          setDocument()
        };
      // Optimize for push.apply( _, NodeList )
      try {
        push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
        // Support: Android<4.0
        // Detect silently failing push.apply
        arr[preferredDoc.childNodes.length].nodeType
      } catch (e) {
        push = {
          apply: arr.length ? // Leverage slice if possible
          function (target, els) {
            push_native.apply(target, slice.call(els))
          } : // Support: IE<9
          // Otherwise append directly
          function (target, els) {
            var j = target.length, i = 0;
            // Can't trust NodeList.length
            while (target[j++] = els[i++]) {
            }
            target.length = j - 1
          }
        }
      }
      function Sizzle(selector, context, results, seed) {
        var m, i, elem, nid, nidselect, match, groups, newSelector, newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
          nodeType = context ? context.nodeType : 9;
        results = results || [];
        // Return early from calls with invalid selector or context
        if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
          return results
        }
        // Try to shortcut find operations (as opposed to filters) in HTML documents
        if (!seed) {
          if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
            setDocument(context)
          }
          context = context || document;
          if (documentIsHTML) {
            // If the selector is sufficiently simple, try using a "get*By*" DOM method
            // (excepting DocumentFragment context, where the methods don't exist)
            if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
              // ID selector
              if (m = match[1]) {
                // Document context
                if (nodeType === 9) {
                  if (elem = context.getElementById(m)) {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (elem.id === m) {
                      results.push(elem);
                      return results
                    }
                  } else {
                    return results
                  }  // Element context
                } else {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                    results.push(elem);
                    return results
                  }
                }  // Type selector
              } else if (match[2]) {
                push.apply(results, context.getElementsByTagName(selector));
                return results  // Class selector
              } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                push.apply(results, context.getElementsByClassName(m));
                return results
              }
            }
            // Take advantage of querySelectorAll
            if (support.qsa && !compilerCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
              if (nodeType !== 1) {
                newContext = context;
                newSelector = selector  // qSA looks outside Element context, which is not what we want
                                        // Thanks to Andrew Dupont for this workaround technique
                                        // Support: IE <=8
                                        // Exclude object elements
              } else if (context.nodeName.toLowerCase() !== 'object') {
                // Capture the context ID, setting it first if necessary
                if (nid = context.getAttribute('id')) {
                  nid = nid.replace(rescape, '\\$&')
                } else {
                  context.setAttribute('id', nid = expando)
                }
                // Prefix every selector in the list
                groups = tokenize(selector);
                i = groups.length;
                nidselect = ridentifier.test(nid) ? '#' + nid : "[id='" + nid + "']";
                while (i--) {
                  groups[i] = nidselect + ' ' + toSelector(groups[i])
                }
                newSelector = groups.join(',');
                // Expand context for sibling selectors
                newContext = rsibling.test(selector) && testContext(context.parentNode) || context
              }
              if (newSelector) {
                try {
                  push.apply(results, newContext.querySelectorAll(newSelector));
                  return results
                } catch (qsaError) {
                } finally {
                  if (nid === expando) {
                    context.removeAttribute('id')
                  }
                }
              }
            }
          }
        }
        // All others
        return select(selector.replace(rtrim, '$1'), context, results, seed)
      }
      /**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
      function createCache() {
        var keys = [];
        function cache(key, value) {
          // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
          if (keys.push(key + ' ') > Expr.cacheLength) {
            // Only keep the most recent entries
            delete cache[keys.shift()]
          }
          return cache[key + ' '] = value
        }
        return cache
      }
      /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
      function markFunction(fn) {
        fn[expando] = true;
        return fn
      }
      /**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
      function assert(fn) {
        var div = document.createElement('div');
        try {
          return !!fn(div)
        } catch (e) {
          return false
        } finally {
          // Remove from its parent by default
          if (div.parentNode) {
            div.parentNode.removeChild(div)
          }
          // release memory in IE
          div = null
        }
      }
      /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
      function addHandle(attrs, handler) {
        var arr = attrs.split('|'), i = arr.length;
        while (i--) {
          Expr.attrHandle[arr[i]] = handler
        }
      }
      /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
      function siblingCheck(a, b) {
        var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
        // Use IE sourceIndex if available on both nodes
        if (diff) {
          return diff
        }
        // Check if b follows a
        if (cur) {
          while (cur = cur.nextSibling) {
            if (cur === b) {
              return -1
            }
          }
        }
        return a ? 1 : -1
      }
      /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
      function createInputPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === 'input' && elem.type === type
        }
      }
      /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
      function createButtonPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return (name === 'input' || name === 'button') && elem.type === type
        }
      }
      /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
      function createPositionalPseudo(fn) {
        return markFunction(function (argument) {
          argument = +argument;
          return markFunction(function (seed, matches) {
            var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
            // Match elements found at the specified indexes
            while (i--) {
              if (seed[j = matchIndexes[i]]) {
                seed[j] = !(matches[j] = seed[j])
              }
            }
          })
        })
      }
      /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
      function testContext(context) {
        return context && typeof context.getElementsByTagName !== 'undefined' && context
      }
      // Expose support vars for convenience
      support = Sizzle.support = {};
      /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
      isXML = Sizzle.isXML = function (elem) {
        // documentElement is verified for cases where it doesn't yet exist
        // (such as loading iframes in IE - #4833)
        var documentElement = elem && (elem.ownerDocument || elem).documentElement;
        return documentElement ? documentElement.nodeName !== 'HTML' : false
      };
      /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
      setDocument = Sizzle.setDocument = function (node) {
        var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
        // Return early if doc is invalid or already selected
        if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
          return document
        }
        // Update global variables
        document = doc;
        docElem = document.documentElement;
        documentIsHTML = !isXML(document);
        // Support: IE 9-11, Edge
        // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
        if ((parent = document.defaultView) && parent.top !== parent) {
          // Support: IE 11
          if (parent.addEventListener) {
            parent.addEventListener('unload', unloadHandler, false)  // Support: IE 9 - 10 only
          } else if (parent.attachEvent) {
            parent.attachEvent('onunload', unloadHandler)
          }
        }
        /* Attributes
	---------------------------------------------------------------------- */
        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties
        // (excepting IE8 booleans)
        support.attributes = assert(function (div) {
          div.className = 'i';
          return !div.getAttribute('className')
        });
        /* getElement(s)By*
	---------------------------------------------------------------------- */
        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function (div) {
          div.appendChild(document.createComment(''));
          return !div.getElementsByTagName('*').length
        });
        // Support: IE<9
        support.getElementsByClassName = rnative.test(document.getElementsByClassName);
        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function (div) {
          docElem.appendChild(div).id = expando;
          return !document.getElementsByName || !document.getElementsByName(expando).length
        });
        // ID find and filter
        if (support.getById) {
          Expr.find['ID'] = function (id, context) {
            if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
              var m = context.getElementById(id);
              return m ? [m] : []
            }
          };
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              return elem.getAttribute('id') === attrId
            }
          }
        } else {
          // Support: IE6/7
          // getElementById is not reliable as a find shortcut
          delete Expr.find['ID'];
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
              return node && node.value === attrId
            }
          }
        }
        // Tag
        Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
          if (typeof context.getElementsByTagName !== 'undefined') {
            return context.getElementsByTagName(tag)  // DocumentFragment nodes don't have gEBTN
          } else if (support.qsa) {
            return context.querySelectorAll(tag)
          }
        } : function (tag, context) {
          var elem, tmp = [], i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
            results = context.getElementsByTagName(tag);
          // Filter out possible comments
          if (tag === '*') {
            while (elem = results[i++]) {
              if (elem.nodeType === 1) {
                tmp.push(elem)
              }
            }
            return tmp
          }
          return results
        };
        // Class
        Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
          if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
            return context.getElementsByClassName(className)
          }
        };
        /* QSA/matchesSelector
	---------------------------------------------------------------------- */
        // QSA and matchesSelector support
        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];
        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See http://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];
        if (support.qsa = rnative.test(document.querySelectorAll)) {
          // Build QSA regex
          // Regex strategy adopted from Diego Perini
          assert(function (div) {
            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // http://bugs.jquery.com/ticket/12359
            docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if (div.querySelectorAll("[msallowcapture^='']").length) {
              rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")')
            }
            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if (!div.querySelectorAll('[selected]').length) {
              rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')')
            }
            // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
            if (!div.querySelectorAll('[id~=' + expando + '-]').length) {
              rbuggyQSA.push('~=')
            }
            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if (!div.querySelectorAll(':checked').length) {
              rbuggyQSA.push(':checked')
            }
            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibing-combinator selector` fails
            if (!div.querySelectorAll('a#' + expando + '+*').length) {
              rbuggyQSA.push('.#.+[+~]')
            }
          });
          assert(function (div) {
            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = document.createElement('input');
            input.setAttribute('type', 'hidden');
            div.appendChild(input).setAttribute('name', 'D');
            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if (div.querySelectorAll('[name=d]').length) {
              rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=')
            }
            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if (!div.querySelectorAll(':enabled').length) {
              rbuggyQSA.push(':enabled', ':disabled')
            }
            // Opera 10-11 does not throw on post-comma invalid pseudos
            div.querySelectorAll('*,:x');
            rbuggyQSA.push(',.*:')
          })
        }
        if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
          assert(function (div) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call(div, 'div');
            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call(div, "[s!='']:x");
            rbuggyMatches.push('!=', pseudos)
          })
        }
        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
        rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
        /* Contains
	---------------------------------------------------------------------- */
        hasCompare = rnative.test(docElem.compareDocumentPosition);
        // Element contains another
        // Purposefully self-exclusive
        // As in, an element does not contain itself
        contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
          var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
          return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
        } : function (a, b) {
          if (b) {
            while (b = b.parentNode) {
              if (b === a) {
                return true
              }
            }
          }
          return false
        };
        /* Sorting
	---------------------------------------------------------------------- */
        // Document order sorting
        sortOrder = hasCompare ? function (a, b) {
          // Flag for duplicate removal
          if (a === b) {
            hasDuplicate = true;
            return 0
          }
          // Sort on method existence if only one input has compareDocumentPosition
          var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
          if (compare) {
            return compare
          }
          // Calculate position if both inputs belong to the same document
          compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
          1;
          // Disconnected nodes
          if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
            // Choose the first element that is related to our preferred document
            if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
              return -1
            }
            if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
              return 1
            }
            // Maintain original order
            return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
          }
          return compare & 4 ? -1 : 1
        } : function (a, b) {
          // Exit early if the nodes are identical
          if (a === b) {
            hasDuplicate = true;
            return 0
          }
          var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
          // Parentless nodes are either documents or disconnected
          if (!aup || !bup) {
            return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0  // If the nodes are siblings, we can do a quick check
          } else if (aup === bup) {
            return siblingCheck(a, b)
          }
          // Otherwise we need full lists of their ancestors for comparison
          cur = a;
          while (cur = cur.parentNode) {
            ap.unshift(cur)
          }
          cur = b;
          while (cur = cur.parentNode) {
            bp.unshift(cur)
          }
          // Walk down the tree looking for a discrepancy
          while (ap[i] === bp[i]) {
            i++
          }
          return i ? // Do a sibling check if the nodes have a common ancestor
          siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
          ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
        };
        return document
      };
      Sizzle.matches = function (expr, elements) {
        return Sizzle(expr, null, null, elements)
      };
      Sizzle.matchesSelector = function (elem, expr) {
        // Set document vars if needed
        if ((elem.ownerDocument || elem) !== document) {
          setDocument(elem)
        }
        // Make sure that attribute selectors are quoted
        expr = expr.replace(rattributeQuotes, "='$1']");
        if (support.matchesSelector && documentIsHTML && !compilerCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
          try {
            var ret = matches.call(elem, expr);
            // IE 9's matchesSelector returns false on disconnected nodes
            if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              elem.document && elem.document.nodeType !== 11) {
              return ret
            }
          } catch (e) {
          }
        }
        return Sizzle(expr, document, null, [elem]).length > 0
      };
      Sizzle.contains = function (context, elem) {
        // Set document vars if needed
        if ((context.ownerDocument || context) !== document) {
          setDocument(context)
        }
        return contains(context, elem)
      };
      Sizzle.attr = function (elem, name) {
        // Set document vars if needed
        if ((elem.ownerDocument || elem) !== document) {
          setDocument(elem)
        }
        var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
          val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
        return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
      };
      Sizzle.error = function (msg) {
        throw new Error('Syntax error, unrecognized expression: ' + msg)
      };
      /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
      Sizzle.uniqueSort = function (results) {
        var elem, duplicates = [], j = 0, i = 0;
        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);
        if (hasDuplicate) {
          while (elem = results[i++]) {
            if (elem === results[i]) {
              j = duplicates.push(i)
            }
          }
          while (j--) {
            results.splice(duplicates[j], 1)
          }
        }
        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;
        return results
      };
      /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
      getText = Sizzle.getText = function (elem) {
        var node, ret = '', i = 0, nodeType = elem.nodeType;
        if (!nodeType) {
          // If no nodeType, this is expected to be an array
          while (node = elem[i++]) {
            // Do not traverse comment nodes
            ret += getText(node)
          }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (jQuery #11153)
          if (typeof elem.textContent === 'string') {
            return elem.textContent
          } else {
            // Traverse its children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              ret += getText(elem)
            }
          }
        } else if (nodeType === 3 || nodeType === 4) {
          return elem.nodeValue
        }
        // Do not include comment or processing instruction nodes
        return ret
      };
      Expr = Sizzle.selectors = {
        // Can be adjusted by the user
        cacheLength: 50,
        createPseudo: markFunction,
        match: matchExpr,
        attrHandle: {},
        find: {},
        relative: {
          '>': {
            dir: 'parentNode',
            first: true
          },
          ' ': { dir: 'parentNode' },
          '+': {
            dir: 'previousSibling',
            first: true
          },
          '~': { dir: 'previousSibling' }
        },
        preFilter: {
          'ATTR': function (match) {
            match[1] = match[1].replace(runescape, funescape);
            // Move the given value to match[3] whether quoted or unquoted
            match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
            if (match[2] === '~=') {
              match[3] = ' ' + match[3] + ' '
            }
            return match.slice(0, 4)
          },
          'CHILD': function (match) {
            /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
            match[1] = match[1].toLowerCase();
            if (match[1].slice(0, 3) === 'nth') {
              // nth-* requires argument
              if (!match[3]) {
                Sizzle.error(match[0])
              }
              // numeric x and y parameters for Expr.filter.CHILD
              // remember that false/true cast respectively to 0/1
              match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
              match[5] = +(match[7] + match[8] || match[3] === 'odd')  // other types prohibit arguments
            } else if (match[3]) {
              Sizzle.error(match[0])
            }
            return match
          },
          'PSEUDO': function (match) {
            var excess, unquoted = !match[6] && match[2];
            if (matchExpr['CHILD'].test(match[0])) {
              return null
            }
            // Accept quoted arguments as-is
            if (match[3]) {
              match[2] = match[4] || match[5] || ''  // Strip excess characters from unquoted arguments
            } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
              // excess is a negative index
              match[0] = match[0].slice(0, excess);
              match[2] = unquoted.slice(0, excess)
            }
            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice(0, 3)
          }
        },
        filter: {
          'TAG': function (nodeNameSelector) {
            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
            return nodeNameSelector === '*' ? function () {
              return true
            } : function (elem) {
              return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
            }
          },
          'CLASS': function (className) {
            var pattern = classCache[className + ' '];
            return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
              return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '')
            })
          },
          'ATTR': function (name, operator, check) {
            return function (elem) {
              var result = Sizzle.attr(elem, name);
              if (result == null) {
                return operator === '!='
              }
              if (!operator) {
                return true
              }
              result += '';
              return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false
            }
          },
          'CHILD': function (type, what, argument, first, last) {
            var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
            return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
            function (elem) {
              return !!elem.parentNode
            } : function (elem, context, xml) {
              var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
              if (parent) {
                // :(first|last|only)-(child|of-type)
                if (simple) {
                  while (dir) {
                    node = elem;
                    while (node = node[dir]) {
                      if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                        return false
                      }
                    }
                    // Reverse direction for :only-* (if we haven't yet done so)
                    start = dir = type === 'only' && !start && 'nextSibling'
                  }
                  return true
                }
                start = [forward ? parent.firstChild : parent.lastChild];
                // non-xml :nth-child(...) stores cache data on `parent`
                if (forward && useCache) {
                  // Seek `elem` from a previously-cached index
                  // ...in a gzip-friendly way
                  node = parent;
                  outerCache = node[expando] || (node[expando] = {});
                  // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)
                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex && cache[2];
                  node = nodeIndex && parent.childNodes[nodeIndex];
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    // When found, cache indexes on `parent` and break
                    if (node.nodeType === 1 && ++diff && node === elem) {
                      uniqueCache[type] = [
                        dirruns,
                        nodeIndex,
                        diff
                      ];
                      break
                    }
                  }
                } else {
                  // Use previously-cached element index if available
                  if (useCache) {
                    // ...in a gzip-friendly way
                    node = elem;
                    outerCache = node[expando] || (node[expando] = {});
                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex
                  }
                  // xml :nth-child(...)
                  // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                  if (diff === false) {
                    // Use the same loop as above to seek `elem` from the start
                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                      if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                        // Cache the index of each encountered element
                        if (useCache) {
                          outerCache = node[expando] || (node[expando] = {});
                          // Support: IE <9 only
                          // Defend against cloned attroperties (jQuery gh-1709)
                          uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                          uniqueCache[type] = [
                            dirruns,
                            diff
                          ]
                        }
                        if (node === elem) {
                          break
                        }
                      }
                    }
                  }
                }
                // Incorporate the offset, then check against cycle size
                diff -= last;
                return diff === first || diff % first === 0 && diff / first >= 0
              }
            }
          },
          'PSEUDO': function (pseudo, argument) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if (fn[expando]) {
              return fn(argument)
            }
            // But maintain support for old signatures
            if (fn.length > 1) {
              args = [
                pseudo,
                pseudo,
                '',
                argument
              ];
              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                var idx, matched = fn(seed, argument), i = matched.length;
                while (i--) {
                  idx = indexOf(seed, matched[i]);
                  seed[idx] = !(matches[idx] = matched[i])
                }
              }) : function (elem) {
                return fn(elem, 0, args)
              }
            }
            return fn
          }
        },
        pseudos: {
          // Potentially complex pseudos
          'not': markFunction(function (selector) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
            return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
              var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
              // Match elements unmatched by `matcher`
              while (i--) {
                if (elem = unmatched[i]) {
                  seed[i] = !(matches[i] = elem)
                }
              }
            }) : function (elem, context, xml) {
              input[0] = elem;
              matcher(input, null, xml, results);
              // Don't keep the element (issue #299)
              input[0] = null;
              return !results.pop()
            }
          }),
          'has': markFunction(function (selector) {
            return function (elem) {
              return Sizzle(selector, elem).length > 0
            }
          }),
          'contains': markFunction(function (text) {
            text = text.replace(runescape, funescape);
            return function (elem) {
              return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
            }
          }),
          // "Whether an element is represented by a :lang() selector
          // is based solely on the element's language value
          // being equal to the identifier C,
          // or beginning with the identifier C immediately followed by "-".
          // The matching of C against the element's language value is performed case-insensitively.
          // The identifier C does not have to be a valid language name."
          // http://www.w3.org/TR/selectors/#lang-pseudo
          'lang': markFunction(function (lang) {
            // lang value must be a valid identifier
            if (!ridentifier.test(lang || '')) {
              Sizzle.error('unsupported lang: ' + lang)
            }
            lang = lang.replace(runescape, funescape).toLowerCase();
            return function (elem) {
              var elemLang;
              do {
                if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                  elemLang = elemLang.toLowerCase();
                  return elemLang === lang || elemLang.indexOf(lang + '-') === 0
                }
              } while ((elem = elem.parentNode) && elem.nodeType === 1);
              return false
            }
          }),
          // Miscellaneous
          'target': function (elem) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice(1) === elem.id
          },
          'root': function (elem) {
            return elem === docElem
          },
          'focus': function (elem) {
            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
          },
          // Boolean properties
          'enabled': function (elem) {
            return elem.disabled === false
          },
          'disabled': function (elem) {
            return elem.disabled === true
          },
          'checked': function (elem) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected
          },
          'selected': function (elem) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if (elem.parentNode) {
              elem.parentNode.selectedIndex
            }
            return elem.selected === true
          },
          // Contents
          'empty': function (elem) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              if (elem.nodeType < 6) {
                return false
              }
            }
            return true
          },
          'parent': function (elem) {
            return !Expr.pseudos['empty'](elem)
          },
          // Element/input types
          'header': function (elem) {
            return rheader.test(elem.nodeName)
          },
          'input': function (elem) {
            return rinputs.test(elem.nodeName)
          },
          'button': function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === 'input' && elem.type === 'button' || name === 'button'
          },
          'text': function (elem) {
            var attr;
            return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text')
          },
          // Position-in-collection
          'first': createPositionalPseudo(function () {
            return [0]
          }),
          'last': createPositionalPseudo(function (matchIndexes, length) {
            return [length - 1]
          }),
          'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
            return [argument < 0 ? argument + length : argument]
          }),
          'even': createPositionalPseudo(function (matchIndexes, length) {
            var i = 0;
            for (; i < length; i += 2) {
              matchIndexes.push(i)
            }
            return matchIndexes
          }),
          'odd': createPositionalPseudo(function (matchIndexes, length) {
            var i = 1;
            for (; i < length; i += 2) {
              matchIndexes.push(i)
            }
            return matchIndexes
          }),
          'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; --i >= 0;) {
              matchIndexes.push(i)
            }
            return matchIndexes
          }),
          'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; ++i < length;) {
              matchIndexes.push(i)
            }
            return matchIndexes
          })
        }
      };
      Expr.pseudos['nth'] = Expr.pseudos['eq'];
      // Add button/input type pseudos
      for (i in {
          radio: true,
          checkbox: true,
          file: true,
          password: true,
          image: true
        }) {
        Expr.pseudos[i] = createInputPseudo(i)
      }
      for (i in {
          submit: true,
          reset: true
        }) {
        Expr.pseudos[i] = createButtonPseudo(i)
      }
      // Easy API for creating new setFilters
      function setFilters() {
      }
      setFilters.prototype = Expr.filters = Expr.pseudos;
      Expr.setFilters = new setFilters;
      tokenize = Sizzle.tokenize = function (selector, parseOnly) {
        var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
        if (cached) {
          return parseOnly ? 0 : cached.slice(0)
        }
        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;
        while (soFar) {
          // Comma and first run
          if (!matched || (match = rcomma.exec(soFar))) {
            if (match) {
              // Don't consume trailing commas as valid
              soFar = soFar.slice(match[0].length) || soFar
            }
            groups.push(tokens = [])
          }
          matched = false;
          // Combinators
          if (match = rcombinators.exec(soFar)) {
            matched = match.shift();
            tokens.push({
              value: matched,
              // Cast descendant combinators to space
              type: match[0].replace(rtrim, ' ')
            });
            soFar = soFar.slice(matched.length)
          }
          // Filters
          for (type in Expr.filter) {
            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: type,
                matches: match
              });
              soFar = soFar.slice(matched.length)
            }
          }
          if (!matched) {
            break
          }
        }
        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
        tokenCache(selector, groups).slice(0)
      };
      function toSelector(tokens) {
        var i = 0, len = tokens.length, selector = '';
        for (; i < len; i++) {
          selector += tokens[i].value
        }
        return selector
      }
      function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
        return combinator.first ? // Check against closest ancestor/preceding element
        function (elem, context, xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              return matcher(elem, context, xml)
            }
          }
        } : // Check against all ancestor/preceding elements
        function (elem, context, xml) {
          var oldCache, uniqueCache, outerCache, newCache = [
              dirruns,
              doneName
            ];
          // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
          if (xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                if (matcher(elem, context, xml)) {
                  return true
                }
              }
            }
          } else {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                outerCache = elem[expando] || (elem[expando] = {});
                // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)
                uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                  // Assign to newCache so results back-propagate to previous elements
                  return newCache[2] = oldCache[2]
                } else {
                  // Reuse newcache so results back-propagate to previous elements
                  uniqueCache[dir] = newCache;
                  // A match means we're done; a fail means we have to keep checking
                  if (newCache[2] = matcher(elem, context, xml)) {
                    return true
                  }
                }
              }
            }
          }
        }
      }
      function elementMatcher(matchers) {
        return matchers.length > 1 ? function (elem, context, xml) {
          var i = matchers.length;
          while (i--) {
            if (!matchers[i](elem, context, xml)) {
              return false
            }
          }
          return true
        } : matchers[0]
      }
      function multipleContexts(selector, contexts, results) {
        var i = 0, len = contexts.length;
        for (; i < len; i++) {
          Sizzle(selector, contexts[i], results)
        }
        return results
      }
      function condense(unmatched, map, filter, context, xml) {
        var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
        for (; i < len; i++) {
          if (elem = unmatched[i]) {
            if (!filter || filter(elem, context, xml)) {
              newUnmatched.push(elem);
              if (mapped) {
                map.push(i)
              }
            }
          }
        }
        return newUnmatched
      }
      function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
        if (postFilter && !postFilter[expando]) {
          postFilter = setMatcher(postFilter)
        }
        if (postFinder && !postFinder[expando]) {
          postFinder = setMatcher(postFinder, postSelector)
        }
        return markFunction(function (seed, results, context, xml) {
          var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
            // Get initial elements from seed or context
            elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
            postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
            [] : // ...otherwise use results directly
            results : matcherIn;
          // Find primary matches
          if (matcher) {
            matcher(matcherIn, matcherOut, context, xml)
          }
          // Apply postFilter
          if (postFilter) {
            temp = condense(matcherOut, postMap);
            postFilter(temp, [], context, xml);
            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while (i--) {
              if (elem = temp[i]) {
                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
              }
            }
          }
          if (seed) {
            if (postFinder || preFilter) {
              if (postFinder) {
                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                temp = [];
                i = matcherOut.length;
                while (i--) {
                  if (elem = matcherOut[i]) {
                    // Restore matcherIn since elem is not yet a final match
                    temp.push(matcherIn[i] = elem)
                  }
                }
                postFinder(null, matcherOut = [], temp, xml)
              }
              // Move matched elements from seed to results to keep them synchronized
              i = matcherOut.length;
              while (i--) {
                if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                  seed[temp] = !(results[temp] = elem)
                }
              }
            }  // Add elements to results, through postFinder if defined
          } else {
            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
            if (postFinder) {
              postFinder(null, results, matcherOut, xml)
            } else {
              push.apply(results, matcherOut)
            }
          }
        })
      }
      function matcherFromTokens(tokens) {
        var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(function (elem) {
            return elem === checkContext
          }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
            return indexOf(checkContext, elem) > -1
          }, implicitRelative, true), matchers = [function (elem, context, xml) {
              var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
              // Avoid hanging onto element (issue #299)
              checkContext = null;
              return ret
            }];
        for (; i < len; i++) {
          if (matcher = Expr.relative[tokens[i].type]) {
            matchers = [addCombinator(elementMatcher(matchers), matcher)]
          } else {
            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
            // Return special upon seeing a positional matcher
            if (matcher[expando]) {
              // Find the next relative operator (if any) for proper handling
              j = ++i;
              for (; j < len; j++) {
                if (Expr.relative[tokens[j].type]) {
                  break
                }
              }
              return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
              tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
            }
            matchers.push(matcher)
          }
        }
        return elementMatcher(matchers)
      }
      function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
              elems = seed || byElement && Expr.find['TAG']('*', outermost),
              // Use integer dirruns iff this is the outermost matcher
              dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context === document || context || outermost
            }
            // Add elements passing elementMatchers directly to results
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0;
                if (!context && elem.ownerDocument !== document) {
                  setDocument(elem);
                  xml = !documentIsHTML
                }
                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique
                }
              }
              // Track unmatched elements for set filters
              if (bySet) {
                // They will have gone through all possible matchers
                if (elem = !matcher && elem) {
                  matchedCount--
                }
                // Lengthen the array for every element, matched or not
                if (seed) {
                  unmatched.push(elem)
                }
              }
            }
            // `i` is now the count of elements visited above, and adding it to `matchedCount`
            // makes the latter nonnegative.
            matchedCount += i;
            // Apply set filters to unmatched elements
            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
            // no element matchers and no seed.
            // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
            // case, which will result in a "00" `matchedCount` that differs from `i` but is also
            // numerically zero.
            if (bySet && i !== matchedCount) {
              j = 0;
              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml)
              }
              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results)
                    }
                  }
                }
                // Discard index placeholder values to get only actual matches
                setMatched = condense(setMatched)
              }
              // Add matches to results
              push.apply(results, setMatched);
              // Seedless set matches succeeding multiple successful matchers stipulate sorting
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle.uniqueSort(results)
              }
            }
            // Override manipulation of globals by nested matchers
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup
            }
            return unmatched
          };
        return bySet ? markFunction(superMatcher) : superMatcher
      }
      compile = Sizzle.compile = function (selector, match) {
        var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
        if (!cached) {
          // Generate a function of recursive functions that can be used to check each element
          if (!match) {
            match = tokenize(selector)
          }
          i = match.length;
          while (i--) {
            cached = matcherFromTokens(match[i]);
            if (cached[expando]) {
              setMatchers.push(cached)
            } else {
              elementMatchers.push(cached)
            }
          }
          // Cache the compiled function
          cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
          // Save selector and tokenization
          cached.selector = selector
        }
        return cached
      };
      /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
      select = Sizzle.select = function (selector, context, results, seed) {
        var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
        results = results || [];
        // Try to minimize operations if there is only one selector in the list and no seed
        // (the latter of which guarantees us context)
        if (match.length === 1) {
          // Reduce context if the leading compound selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
            context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
            if (!context) {
              return results  // Precompiled matchers will still verify ancestry, so step up a level
            } else if (compiled) {
              context = context.parentNode
            }
            selector = selector.slice(tokens.shift().value.length)
          }
          // Fetch a seed set for right-to-left matching
          i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];
            // Abort if we hit a combinator
            if (Expr.relative[type = token.type]) {
              break
            }
            if (find = Expr.find[type]) {
              // Search, expanding context for leading sibling combinators
              if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results
                }
                break
              }
            }
          }
        }
        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
        return results
      };
      // One-time assignments
      // Sort stability
      support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
      // Support: Chrome 14-35+
      // Always assume duplicates if they aren't passed to the comparison function
      support.detectDuplicates = !!hasDuplicate;
      // Initialize against the default document
      setDocument();
      // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
      // Detached nodes confoundingly follow *each other*
      support.sortDetached = assert(function (div1) {
        // Should return 1, but returns 4 (following)
        return div1.compareDocumentPosition(document.createElement('div')) & 1
      });
      // Support: IE<8
      // Prevent attribute/property "interpolation"
      // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
      if (!assert(function (div) {
          div.innerHTML = "<a href='#'></a>";
          return div.firstChild.getAttribute('href') === '#'
        })) {
        addHandle('type|href|height|width', function (elem, name, isXML) {
          if (!isXML) {
            return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2)
          }
        })
      }
      // Support: IE<9
      // Use defaultValue in place of getAttribute("value")
      if (!support.attributes || !assert(function (div) {
          div.innerHTML = '<input/>';
          div.firstChild.setAttribute('value', '');
          return div.firstChild.getAttribute('value') === ''
        })) {
        addHandle('value', function (elem, name, isXML) {
          if (!isXML && elem.nodeName.toLowerCase() === 'input') {
            return elem.defaultValue
          }
        })
      }
      // Support: IE<9
      // Use getAttributeNode to fetch booleans when getAttribute lies
      if (!assert(function (div) {
          return div.getAttribute('disabled') == null
        })) {
        addHandle(booleans, function (elem, name, isXML) {
          var val;
          if (!isXML) {
            return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
          }
        })
      }
      return Sizzle
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[':'] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var dir = function (elem, dir, until) {
      var matched = [], truncate = until !== undefined;
      while ((elem = elem[dir]) && elem.nodeType !== 9) {
        if (elem.nodeType === 1) {
          if (truncate && jQuery(elem).is(until)) {
            break
          }
          matched.push(elem)
        }
      }
      return matched
    };
    var siblings = function (n, elem) {
      var matched = [];
      for (; n; n = n.nextSibling) {
        if (n.nodeType === 1 && n !== elem) {
          matched.push(n)
        }
      }
      return matched
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
    var risSimple = /^.[^:#\[\.,]*$/;
    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
      if (jQuery.isFunction(qualifier)) {
        return jQuery.grep(elements, function (elem, i) {
          /* jshint -W018 */
          return !!qualifier.call(elem, i, elem) !== not
        })
      }
      if (qualifier.nodeType) {
        return jQuery.grep(elements, function (elem) {
          return elem === qualifier !== not
        })
      }
      if (typeof qualifier === 'string') {
        if (risSimple.test(qualifier)) {
          return jQuery.filter(qualifier, elements, not)
        }
        qualifier = jQuery.filter(qualifier, elements)
      }
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not
      })
    }
    jQuery.filter = function (expr, elems, not) {
      var elem = elems[0];
      if (not) {
        expr = ':not(' + expr + ')'
      }
      return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
        return elem.nodeType === 1
      }))
    };
    jQuery.fn.extend({
      find: function (selector) {
        var i, len = this.length, ret = [], self = this;
        if (typeof selector !== 'string') {
          return this.pushStack(jQuery(selector).filter(function () {
            for (i = 0; i < len; i++) {
              if (jQuery.contains(self[i], this)) {
                return true
              }
            }
          }))
        }
        for (i = 0; i < len; i++) {
          jQuery.find(selector, self[i], ret)
        }
        // Needed because $( selector, context ) becomes $( context ).find( selector )
        ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
        ret.selector = this.selector ? this.selector + ' ' + selector : selector;
        return ret
      },
      filter: function (selector) {
        return this.pushStack(winnow(this, selector || [], false))
      },
      not: function (selector) {
        return this.pushStack(winnow(this, selector || [], true))
      },
      is: function (selector) {
        return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
      }
    });
    // Initialize a jQuery object
    // A central reference to the root jQuery(document)
    var rootjQuery,
      // A simple way to check for HTML strings
      // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
      // Strict HTML recognition (#11290: must start with <)
      rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context, root) {
        var match, elem;
        // HANDLE: $(""), $(null), $(undefined), $(false)
        if (!selector) {
          return this
        }
        // Method init() accepts an alternate rootjQuery
        // so migrate can support jQuery.sub (gh-2101)
        root = root || rootjQuery;
        // Handle HTML strings
        if (typeof selector === 'string') {
          if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
            // Assume that strings that start and end with <> are HTML and skip the regex check
            match = [
              null,
              selector,
              null
            ]
          } else {
            match = rquickExpr.exec(selector)
          }
          // Match html or make sure no context is specified for #id
          if (match && (match[1] || !context)) {
            // HANDLE: $(html) -> $(array)
            if (match[1]) {
              context = context instanceof jQuery ? context[0] : context;
              // Option to run scripts is true for back-compat
              // Intentionally let the error be thrown if parseHTML is not present
              jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
              // HANDLE: $(html, props)
              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                for (match in context) {
                  // Properties of context are called as methods if possible
                  if (jQuery.isFunction(this[match])) {
                    this[match](context[match])  // ...and otherwise set as attributes
                  } else {
                    this.attr(match, context[match])
                  }
                }
              }
              return this  // HANDLE: $(#id)
            } else {
              elem = document.getElementById(match[2]);
              // Support: Blackberry 4.6
              // gEBID returns nodes no longer in the document (#6963)
              if (elem && elem.parentNode) {
                // Inject the element directly into the jQuery object
                this.length = 1;
                this[0] = elem
              }
              this.context = document;
              this.selector = selector;
              return this
            }  // HANDLE: $(expr, $(...))
          } else if (!context || context.jquery) {
            return (context || root).find(selector)  // HANDLE: $(expr, context)
                                                     // (which is just equivalent to: $(context).find(expr)
          } else {
            return this.constructor(context).find(selector)
          }  // HANDLE: $(DOMElement)
        } else if (selector.nodeType) {
          this.context = this[0] = selector;
          this.length = 1;
          return this  // HANDLE: $(function)
                       // Shortcut for document ready
        } else if (jQuery.isFunction(selector)) {
          return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
          selector(jQuery)
        }
        if (selector.selector !== undefined) {
          this.selector = selector.selector;
          this.context = selector.context
        }
        return jQuery.makeArray(selector, this)
      };
    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;
    // Initialize central reference
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
      guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
    jQuery.fn.extend({
      has: function (target) {
        var targets = jQuery(target, this), l = targets.length;
        return this.filter(function () {
          var i = 0;
          for (; i < l; i++) {
            if (jQuery.contains(this, targets[i])) {
              return true
            }
          }
        })
      },
      closest: function (selectors, context) {
        var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : // Don't pass non-elements to Sizzle
              cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break
            }
          }
        }
        return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched)
      },
      // Determine the position of an element within the set
      index: function (elem) {
        // No argument, return index in parent
        if (!elem) {
          return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        }
        // Index in selector
        if (typeof elem === 'string') {
          return indexOf.call(jQuery(elem), this[0])
        }
        // Locate the position of the desired element
        return indexOf.call(this, // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[0] : elem)
      },
      add: function (selector, context) {
        return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))))
      },
      addBack: function (selector) {
        return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
      }
    });
    function sibling(cur, dir) {
      while ((cur = cur[dir]) && cur.nodeType !== 1) {
      }
      return cur
    }
    jQuery.each({
      parent: function (elem) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null
      },
      parents: function (elem) {
        return dir(elem, 'parentNode')
      },
      parentsUntil: function (elem, i, until) {
        return dir(elem, 'parentNode', until)
      },
      next: function (elem) {
        return sibling(elem, 'nextSibling')
      },
      prev: function (elem) {
        return sibling(elem, 'previousSibling')
      },
      nextAll: function (elem) {
        return dir(elem, 'nextSibling')
      },
      prevAll: function (elem) {
        return dir(elem, 'previousSibling')
      },
      nextUntil: function (elem, i, until) {
        return dir(elem, 'nextSibling', until)
      },
      prevUntil: function (elem, i, until) {
        return dir(elem, 'previousSibling', until)
      },
      siblings: function (elem) {
        return siblings((elem.parentNode || {}).firstChild, elem)
      },
      children: function (elem) {
        return siblings(elem.firstChild)
      },
      contents: function (elem) {
        return elem.contentDocument || jQuery.merge([], elem.childNodes)
      }
    }, function (name, fn) {
      jQuery.fn[name] = function (until, selector) {
        var matched = jQuery.map(this, fn, until);
        if (name.slice(-5) !== 'Until') {
          selector = until
        }
        if (selector && typeof selector === 'string') {
          matched = jQuery.filter(selector, matched)
        }
        if (this.length > 1) {
          // Remove duplicates
          if (!guaranteedUnique[name]) {
            jQuery.uniqueSort(matched)
          }
          // Reverse order for parents* and prev-derivatives
          if (rparentsprev.test(name)) {
            matched.reverse()
          }
        }
        return this.pushStack(matched)
      }
    });
    var rnotwhite = /\S+/g;
    // Convert String-formatted options into Object-formatted ones
    function createOptions(options) {
      var object = {};
      jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
        object[flag] = true
      });
      return object
    }
    /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
    jQuery.Callbacks = function (options) {
      // Convert options from String-formatted to Object-formatted if needed
      // (we check in cache first)
      options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
      var
        // Flag to know if list is currently firing
        firing,
        // Last fire value for non-forgettable lists
        memory,
        // Flag to know if list was already fired
        fired,
        // Flag to prevent firing
        locked,
        // Actual callback list
        list = [],
        // Queue of execution data for repeatable lists
        queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
        firingIndex = -1,
        // Fire callbacks
        fire = function () {
          // Enforce single-firing
          locked = options.once;
          // Execute callbacks for all pending executions,
          // respecting firingIndex overrides and runtime changes
          fired = firing = true;
          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();
            while (++firingIndex < list.length) {
              // Run callback and check for early termination
              if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                // Jump to end and forget the data so .add doesn't re-fire
                firingIndex = list.length;
                memory = false
              }
            }
          }
          // Forget the data if we're done with it
          if (!options.memory) {
            memory = false
          }
          firing = false;
          // Clean up if we're done firing for good
          if (locked) {
            // Keep an empty list if we have data for future add calls
            if (memory) {
              list = []  // Otherwise, this object is spent
            } else {
              list = ''
            }
          }
        },
        // Actual Callbacks object
        self = {
          // Add a callback or a collection of callbacks to the list
          add: function () {
            if (list) {
              // If we have memory from a past run, we should fire after adding
              if (memory && !firing) {
                firingIndex = list.length - 1;
                queue.push(memory)
              }
              (function add(args) {
                jQuery.each(args, function (_, arg) {
                  if (jQuery.isFunction(arg)) {
                    if (!options.unique || !self.has(arg)) {
                      list.push(arg)
                    }
                  } else if (arg && arg.length && jQuery.type(arg) !== 'string') {
                    // Inspect recursively
                    add(arg)
                  }
                })
              }(arguments));
              if (memory && !firing) {
                fire()
              }
            }
            return this
          },
          // Remove a callback from the list
          remove: function () {
            jQuery.each(arguments, function (_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                // Handle firing indexes
                if (index <= firingIndex) {
                  firingIndex--
                }
              }
            });
            return this
          },
          // Check if a given callback is in the list.
          // If no argument is given, return whether or not list has callbacks attached.
          has: function (fn) {
            return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0
          },
          // Remove all callbacks from the list
          empty: function () {
            if (list) {
              list = []
            }
            return this
          },
          // Disable .fire and .add
          // Abort any current/pending executions
          // Clear all callbacks and values
          disable: function () {
            locked = queue = [];
            list = memory = '';
            return this
          },
          disabled: function () {
            return !list
          },
          // Disable .fire
          // Also disable .add unless we have memory (since it would have no effect)
          // Abort any pending executions
          lock: function () {
            locked = queue = [];
            if (!memory) {
              list = memory = ''
            }
            return this
          },
          locked: function () {
            return !!locked
          },
          // Call all callbacks with the given context and arguments
          fireWith: function (context, args) {
            if (!locked) {
              args = args || [];
              args = [
                context,
                args.slice ? args.slice() : args
              ];
              queue.push(args);
              if (!firing) {
                fire()
              }
            }
            return this
          },
          // Call all the callbacks with the given arguments
          fire: function () {
            self.fireWith(this, arguments);
            return this
          },
          // To know if the callbacks have already been called at least once
          fired: function () {
            return !!fired
          }
        };
      return self
    };
    jQuery.extend({
      Deferred: function (func) {
        var tuples = [
            // action, add listener, listener list, final state
            [
              'resolve',
              'done',
              jQuery.Callbacks('once memory'),
              'resolved'
            ],
            [
              'reject',
              'fail',
              jQuery.Callbacks('once memory'),
              'rejected'
            ],
            [
              'notify',
              'progress',
              jQuery.Callbacks('memory')
            ]
          ], state = 'pending', promise = {
            state: function () {
              return state
            },
            always: function () {
              deferred.done(arguments).fail(arguments);
              return this
            },
            then: function () {
              var fns = arguments;
              return jQuery.Deferred(function (newDefer) {
                jQuery.each(tuples, function (i, tuple) {
                  var fn = jQuery.isFunction(fns[i]) && fns[i];
                  // deferred[ done | fail | progress ] for forwarding actions to newDefer
                  deferred[tuple[1]](function () {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && jQuery.isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject)
                    } else {
                      newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments)
                    }
                  })
                });
                fns = null
              }).promise()
            },
            // Get a promise for this deferred
            // If obj is provided, the promise aspect is added to the object
            promise: function (obj) {
              return obj != null ? jQuery.extend(obj, promise) : promise
            }
          }, deferred = {};
        // Keep pipe for back-compat
        promise.pipe = promise.then;
        // Add list-specific methods
        jQuery.each(tuples, function (i, tuple) {
          var list = tuple[2], stateString = tuple[3];
          // promise[ done | fail | progress ] = list.add
          promise[tuple[1]] = list.add;
          // Handle state
          if (stateString) {
            list.add(function () {
              // state = [ resolved | rejected ]
              state = stateString  // [ reject_list | resolve_list ].disable; progress_list.lock
            }, tuples[i ^ 1][2].disable, tuples[2][2].lock)
          }
          // deferred[ resolve | reject | notify ]
          deferred[tuple[0]] = function () {
            deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
            return this
          };
          deferred[tuple[0] + 'With'] = list.fireWith
        });
        // Make the deferred a promise
        promise.promise(deferred);
        // Call given func if any
        if (func) {
          func.call(deferred, deferred)
        }
        // All done!
        return deferred
      },
      // Deferred helper
      when: function (subordinate) {
        var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length,
          // the count of uncompleted subordinates
          remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
          // the master Deferred.
          // If resolveValues consist of only a single Deferred, just use that.
          deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
          // Update function for both resolve and progress values
          updateFunc = function (i, contexts, values) {
            return function (value) {
              contexts[i] = this;
              values[i] = arguments.length > 1 ? slice.call(arguments) : value;
              if (values === progressValues) {
                deferred.notifyWith(contexts, values)
              } else if (!--remaining) {
                deferred.resolveWith(contexts, values)
              }
            }
          }, progressValues, progressContexts, resolveContexts;
        // Add listeners to Deferred subordinates; treat others as resolved
        if (length > 1) {
          progressValues = new Array(length);
          progressContexts = new Array(length);
          resolveContexts = new Array(length);
          for (; i < length; i++) {
            if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
              resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject)
            } else {
              --remaining
            }
          }
        }
        // If we're not waiting on anything, resolve the master
        if (!remaining) {
          deferred.resolveWith(resolveContexts, resolveValues)
        }
        return deferred.promise()
      }
    });
    // The deferred used on DOM ready
    var readyList;
    jQuery.fn.ready = function (fn) {
      // Add the callback
      jQuery.ready.promise().done(fn);
      return this
    };
    jQuery.extend({
      // Is the DOM ready to be used? Set to true once it occurs.
      isReady: false,
      // A counter to track how many items to wait for before
      // the ready event fires. See #6781
      readyWait: 1,
      // Hold (or release) the ready event
      holdReady: function (hold) {
        if (hold) {
          jQuery.readyWait++
        } else {
          jQuery.ready(true)
        }
      },
      // Handle when the DOM is ready
      ready: function (wait) {
        // Abort if there are pending holds or we're already ready
        if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
          return
        }
        // Remember that the DOM is ready
        jQuery.isReady = true;
        // If a normal DOM Ready event fired, decrement, and wait if need be
        if (wait !== true && --jQuery.readyWait > 0) {
          return
        }
        // If there are functions bound, to execute
        readyList.resolveWith(document, [jQuery]);
        // Trigger any bound ready events
        if (jQuery.fn.triggerHandler) {
          jQuery(document).triggerHandler('ready');
          jQuery(document).off('ready')
        }
      }
    });
    /**
 * The ready event handler and self cleanup method
 */
    function completed() {
      document.removeEventListener('DOMContentLoaded', completed);
      window.removeEventListener('load', completed);
      jQuery.ready()
    }
    jQuery.ready.promise = function (obj) {
      if (!readyList) {
        readyList = jQuery.Deferred();
        // Catch cases where $(document).ready() is called
        // after the browser event has already occurred.
        // Support: IE9-10 only
        // Older IE sometimes signals "interactive" too soon
        if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
          // Handle it asynchronously to allow scripts the opportunity to delay ready
          window.setTimeout(jQuery.ready)
        } else {
          // Use the handy event callback
          document.addEventListener('DOMContentLoaded', completed);
          // A fallback to window.onload, that will always work
          window.addEventListener('load', completed)
        }
      }
      return readyList.promise(obj)
    };
    // Kick off the DOM ready check even if the user does not
    jQuery.ready.promise();
    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
      var i = 0, len = elems.length, bulk = key == null;
      // Sets many values
      if (jQuery.type(key) === 'object') {
        chainable = true;
        for (i in key) {
          access(elems, fn, i, key[i], true, emptyGet, raw)
        }  // Sets one value
      } else if (value !== undefined) {
        chainable = true;
        if (!jQuery.isFunction(value)) {
          raw = true
        }
        if (bulk) {
          // Bulk operations run against the entire set
          if (raw) {
            fn.call(elems, value);
            fn = null  // ...except when executing function values
          } else {
            bulk = fn;
            fn = function (elem, key, value) {
              return bulk.call(jQuery(elem), value)
            }
          }
        }
        if (fn) {
          for (; i < len; i++) {
            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
          }
        }
      }
      return chainable ? elems : // Gets
      bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet
    };
    var acceptData = function (owner) {
      // Accepts only:
      //  - Node
      //    - Node.ELEMENT_NODE
      //    - Node.DOCUMENT_NODE
      //  - Object
      //    - Any
      /* jshint -W018 */
      return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
    };
    function Data() {
      this.expando = jQuery.expando + Data.uid++
    }
    Data.uid = 1;
    Data.prototype = {
      register: function (owner, initial) {
        var value = initial || {};
        // If it is a node unlikely to be stringify-ed or looped over
        // use plain assignment
        if (owner.nodeType) {
          owner[this.expando] = value  // Otherwise secure it in a non-enumerable, non-writable property
                                       // configurability must be true to allow the property to be
                                       // deleted with the delete operator
        } else {
          Object.defineProperty(owner, this.expando, {
            value: value,
            writable: true,
            configurable: true
          })
        }
        return owner[this.expando]
      },
      cache: function (owner) {
        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.
        if (!acceptData(owner)) {
          return {}
        }
        // Check if the owner object already has a cache
        var value = owner[this.expando];
        // If not, create one
        if (!value) {
          value = {};
          // We can accept data for non-element nodes in modern browsers,
          // but we should not, see #8335.
          // Always return an empty object.
          if (acceptData(owner)) {
            // If it is a node unlikely to be stringify-ed or looped over
            // use plain assignment
            if (owner.nodeType) {
              owner[this.expando] = value  // Otherwise secure it in a non-enumerable property
                                           // configurable must be true to allow the property to be
                                           // deleted when data is removed
            } else {
              Object.defineProperty(owner, this.expando, {
                value: value,
                configurable: true
              })
            }
          }
        }
        return value
      },
      set: function (owner, data, value) {
        var prop, cache = this.cache(owner);
        // Handle: [ owner, key, value ] args
        if (typeof data === 'string') {
          cache[data] = value  // Handle: [ owner, { properties } ] args
        } else {
          // Copy the properties one-by-one to the cache object
          for (prop in data) {
            cache[prop] = data[prop]
          }
        }
        return cache
      },
      get: function (owner, key) {
        return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][key]
      },
      access: function (owner, key, value) {
        var stored;
        // In cases where either:
        //
        //   1. No key was specified
        //   2. A string key was specified, but no value provided
        //
        // Take the "read" path and allow the get method to determine
        // which value to return, respectively either:
        //
        //   1. The entire cache object
        //   2. The data stored at the key
        //
        if (key === undefined || key && typeof key === 'string' && value === undefined) {
          stored = this.get(owner, key);
          return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key))
        }
        // When the key is not a string, or both a key and value
        // are specified, set or extend (existing objects) with either:
        //
        //   1. An object of properties
        //   2. A key and value
        //
        this.set(owner, key, value);
        // Since the "set" path can have two possible entry points
        // return the expected data based on which path was taken[*]
        return value !== undefined ? value : key
      },
      remove: function (owner, key) {
        var i, name, camel, cache = owner[this.expando];
        if (cache === undefined) {
          return
        }
        if (key === undefined) {
          this.register(owner)
        } else {
          // Support array or space separated string of keys
          if (jQuery.isArray(key)) {
            // If "name" is an array of keys...
            // When data is initially created, via ("key", "val") signature,
            // keys will be converted to camelCase.
            // Since there is no way to tell _how_ a key was added, remove
            // both plain key and camelCase key. #12786
            // This will only penalize the array argument path.
            name = key.concat(key.map(jQuery.camelCase))
          } else {
            camel = jQuery.camelCase(key);
            // Try the string as a key before any manipulation
            if (key in cache) {
              name = [
                key,
                camel
              ]
            } else {
              // If a key with the spaces exists, use it.
              // Otherwise, create an array by matching non-whitespace
              name = camel;
              name = name in cache ? [name] : name.match(rnotwhite) || []
            }
          }
          i = name.length;
          while (i--) {
            delete cache[name[i]]
          }
        }
        // Remove the expando if there's no more data
        if (key === undefined || jQuery.isEmptyObject(cache)) {
          // Support: Chrome <= 35-45+
          // Webkit & Blink performance suffers when deleting properties
          // from DOM nodes, so set to undefined instead
          // https://code.google.com/p/chromium/issues/detail?id=378607
          if (owner.nodeType) {
            owner[this.expando] = undefined
          } else {
            delete owner[this.expando]
          }
        }
      },
      hasData: function (owner) {
        var cache = owner[this.expando];
        return cache !== undefined && !jQuery.isEmptyObject(cache)
      }
    };
    var dataPriv = new Data;
    var dataUser = new Data;
    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function dataAttr(elem, key, data) {
      var name;
      // If nothing was found internally, try to fetch any
      // data from the HTML5 data-* attribute
      if (data === undefined && elem.nodeType === 1) {
        name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
        data = elem.getAttribute(name);
        if (typeof data === 'string') {
          try {
            data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : // Only convert to a number if it doesn't change the string
            +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data
          } catch (e) {
          }
          // Make sure we set the data so it isn't changed later
          dataUser.set(elem, key, data)
        } else {
          data = undefined
        }
      }
      return data
    }
    jQuery.extend({
      hasData: function (elem) {
        return dataUser.hasData(elem) || dataPriv.hasData(elem)
      },
      data: function (elem, name, data) {
        return dataUser.access(elem, name, data)
      },
      removeData: function (elem, name) {
        dataUser.remove(elem, name)
      },
      // TODO: Now that all calls to _data and _removeData have been replaced
      // with direct calls to dataPriv methods, these can be deprecated.
      _data: function (elem, name, data) {
        return dataPriv.access(elem, name, data)
      },
      _removeData: function (elem, name) {
        dataPriv.remove(elem, name)
      }
    });
    jQuery.fn.extend({
      data: function (key, value) {
        var i, name, data, elem = this[0], attrs = elem && elem.attributes;
        // Gets all values
        if (key === undefined) {
          if (this.length) {
            data = dataUser.get(elem);
            if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
              i = attrs.length;
              while (i--) {
                // Support: IE11+
                // The attrs elements can be null (#14894)
                if (attrs[i]) {
                  name = attrs[i].name;
                  if (name.indexOf('data-') === 0) {
                    name = jQuery.camelCase(name.slice(5));
                    dataAttr(elem, name, data[name])
                  }
                }
              }
              dataPriv.set(elem, 'hasDataAttrs', true)
            }
          }
          return data
        }
        // Sets multiple values
        if (typeof key === 'object') {
          return this.each(function () {
            dataUser.set(this, key)
          })
        }
        return access(this, function (value) {
          var data, camelKey;
          // The calling jQuery object (element matches) is not empty
          // (and therefore has an element appears at this[ 0 ]) and the
          // `value` parameter was not undefined. An empty jQuery object
          // will result in `undefined` for elem = this[ 0 ] which will
          // throw an exception if an attempt to read a data cache is made.
          if (elem && value === undefined) {
            // Attempt to get data from the cache
            // with the key as-is
            data = dataUser.get(elem, key) || // Try to find dashed key if it exists (gh-2779)
            // This is for 2.2.x only
            dataUser.get(elem, key.replace(rmultiDash, '-$&').toLowerCase());
            if (data !== undefined) {
              return data
            }
            camelKey = jQuery.camelCase(key);
            // Attempt to get data from the cache
            // with the key camelized
            data = dataUser.get(elem, camelKey);
            if (data !== undefined) {
              return data
            }
            // Attempt to "discover" the data in
            // HTML5 custom data-* attrs
            data = dataAttr(elem, camelKey, undefined);
            if (data !== undefined) {
              return data
            }
            // We tried really hard, but the data doesn't exist.
            return
          }
          // Set the data...
          camelKey = jQuery.camelCase(key);
          this.each(function () {
            // First, attempt to store a copy or reference of any
            // data that might've been store with a camelCased key.
            var data = dataUser.get(this, camelKey);
            // For HTML5 data-* attribute interop, we have to
            // store property names with dashes in a camelCase form.
            // This might not apply to all properties...*
            dataUser.set(this, camelKey, value);
            // *... In the case of properties that might _actually_
            // have dashes, we need to also store a copy of that
            // unchanged property.
            if (key.indexOf('-') > -1 && data !== undefined) {
              dataUser.set(this, key, value)
            }
          })
        }, null, value, arguments.length > 1, null, true)
      },
      removeData: function (key) {
        return this.each(function () {
          dataUser.remove(this, key)
        })
      }
    });
    jQuery.extend({
      queue: function (elem, type, data) {
        var queue;
        if (elem) {
          type = (type || 'fx') + 'queue';
          queue = dataPriv.get(elem, type);
          // Speed up dequeue by getting out quickly if this is just a lookup
          if (data) {
            if (!queue || jQuery.isArray(data)) {
              queue = dataPriv.access(elem, type, jQuery.makeArray(data))
            } else {
              queue.push(data)
            }
          }
          return queue || []
        }
      },
      dequeue: function (elem, type) {
        type = type || 'fx';
        var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
            jQuery.dequeue(elem, type)
          };
        // If the fx queue is dequeued, always remove the progress sentinel
        if (fn === 'inprogress') {
          fn = queue.shift();
          startLength--
        }
        if (fn) {
          // Add a progress sentinel to prevent the fx queue from being
          // automatically dequeued
          if (type === 'fx') {
            queue.unshift('inprogress')
          }
          // Clear up the last queue stop function
          delete hooks.stop;
          fn.call(elem, next, hooks)
        }
        if (!startLength && hooks) {
          hooks.empty.fire()
        }
      },
      // Not public - generate a queueHooks object, or return the current one
      _queueHooks: function (elem, type) {
        var key = type + 'queueHooks';
        return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
          empty: jQuery.Callbacks('once memory').add(function () {
            dataPriv.remove(elem, [
              type + 'queue',
              key
            ])
          })
        })
      }
    });
    jQuery.fn.extend({
      queue: function (type, data) {
        var setter = 2;
        if (typeof type !== 'string') {
          data = type;
          type = 'fx';
          setter--
        }
        if (arguments.length < setter) {
          return jQuery.queue(this[0], type)
        }
        return data === undefined ? this : this.each(function () {
          var queue = jQuery.queue(this, type, data);
          // Ensure a hooks for this queue
          jQuery._queueHooks(this, type);
          if (type === 'fx' && queue[0] !== 'inprogress') {
            jQuery.dequeue(this, type)
          }
        })
      },
      dequeue: function (type) {
        return this.each(function () {
          jQuery.dequeue(this, type)
        })
      },
      clearQueue: function (type) {
        return this.queue(type || 'fx', [])
      },
      // Get a promise resolved when queues of a certain type
      // are emptied (fx is the type by default)
      promise: function (type, obj) {
        var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
            if (!--count) {
              defer.resolveWith(elements, [elements])
            }
          };
        if (typeof type !== 'string') {
          obj = type;
          type = undefined
        }
        type = type || 'fx';
        while (i--) {
          tmp = dataPriv.get(elements[i], type + 'queueHooks');
          if (tmp && tmp.empty) {
            count++;
            tmp.empty.add(resolve)
          }
        }
        resolve();
        return defer.promise(obj)
      }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
    var cssExpand = [
      'Top',
      'Right',
      'Bottom',
      'Left'
    ];
    var isHidden = function (elem, el) {
      // isHidden might be called from jQuery#filter function;
      // in that case, element will be second argument
      elem = el || elem;
      return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem)
    };
    function adjustCSS(elem, prop, valueParts, tween) {
      var adjusted, scale = 1, maxIterations = 20, currentValue = tween ? function () {
          return tween.cur()
        } : function () {
          return jQuery.css(elem, prop, '')
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
        // Starting value computation is required for potential unit mismatches
        initialInUnit = (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
      if (initialInUnit && initialInUnit[3] !== unit) {
        // Trust units reported by jQuery.css
        unit = unit || initialInUnit[3];
        // Make sure we update the tween properties later on
        valueParts = valueParts || [];
        // Iteratively approximate from a nonzero starting point
        initialInUnit = +initial || 1;
        do {
          // If previous iteration zeroed out, double until we get *something*.
          // Use string for doubling so we don't accidentally see scale as unchanged below
          scale = scale || '.5';
          // Adjust and apply
          initialInUnit = initialInUnit / scale;
          jQuery.style(elem, prop, initialInUnit + unit)  // Update scale, tolerating zero or NaN from tween.cur()
                                                          // Break the loop if scale is unchanged or perfect, or if we've just had enough.
        } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations)
      }
      if (valueParts) {
        initialInUnit = +initialInUnit || +initial || 0;
        // Apply relative offset (+=/-=) if specified
        adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
        if (tween) {
          tween.unit = unit;
          tween.start = initialInUnit;
          tween.end = adjusted
        }
      }
      return adjusted
    }
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([\w:-]+)/;
    var rscriptType = /^$|\/(?:java|ecma)script/i;
    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {
      // Support: IE9
      option: [
        1,
        "<select multiple='multiple'>",
        '</select>'
      ],
      // XHTML parsers do not magically insert elements in the
      // same way that tag soup parsers do. So we cannot shorten
      // this by omitting <tbody> or other required elements.
      thead: [
        1,
        '<table>',
        '</table>'
      ],
      col: [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      tr: [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      td: [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      _default: [
        0,
        '',
        ''
      ]
    };
    // Support: IE9
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
      // Support: IE9-11+
      // Use typeof to avoid zero-argument method invocation on host objects (#15151)
      var ret = typeof context.getElementsByTagName !== 'undefined' ? context.getElementsByTagName(tag || '*') : typeof context.querySelectorAll !== 'undefined' ? context.querySelectorAll(tag || '*') : [];
      return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret
    }
    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
      var i = 0, l = elems.length;
      for (; i < l; i++) {
        dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'))
      }
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
      var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
      for (; i < l; i++) {
        elem = elems[i];
        if (elem || elem === 0) {
          // Add nodes directly
          if (jQuery.type(elem) === 'object') {
            // Support: Android<4.1, PhantomJS<2
            // push.apply(_, arraylike) throws on ancient WebKit
            jQuery.merge(nodes, elem.nodeType ? [elem] : elem)  // Convert non-html into a text node
          } else if (!rhtml.test(elem)) {
            nodes.push(context.createTextNode(elem))  // Convert html into DOM nodes
          } else {
            tmp = tmp || fragment.appendChild(context.createElement('div'));
            // Deserialize a standard representation
            tag = (rtagName.exec(elem) || [
              '',
              ''
            ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
            // Descend through wrappers to the right content
            j = wrap[0];
            while (j--) {
              tmp = tmp.lastChild
            }
            // Support: Android<4.1, PhantomJS<2
            // push.apply(_, arraylike) throws on ancient WebKit
            jQuery.merge(nodes, tmp.childNodes);
            // Remember the top-level container
            tmp = fragment.firstChild;
            // Ensure the created nodes are orphaned (#12392)
            tmp.textContent = ''
          }
        }
      }
      // Remove wrapper from fragment
      fragment.textContent = '';
      i = 0;
      while (elem = nodes[i++]) {
        // Skip elements already in the context collection (trac-4087)
        if (selection && jQuery.inArray(elem, selection) > -1) {
          if (ignored) {
            ignored.push(elem)
          }
          continue
        }
        contains = jQuery.contains(elem.ownerDocument, elem);
        // Append to fragment
        tmp = getAll(fragment.appendChild(elem), 'script');
        // Preserve script evaluation history
        if (contains) {
          setGlobalEval(tmp)
        }
        // Capture executables
        if (scripts) {
          j = 0;
          while (elem = tmp[j++]) {
            if (rscriptType.test(elem.type || '')) {
              scripts.push(elem)
            }
          }
        }
      }
      return fragment
    }
    (function () {
      var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
      // Support: Android 4.0-4.3, Safari<=5.1
      // Check state lost if the name is set (#11217)
      // Support: Windows Web Apps (WWA)
      // `name` and `type` must use .setAttribute for WWA (#14901)
      input.setAttribute('type', 'radio');
      input.setAttribute('checked', 'checked');
      input.setAttribute('name', 't');
      div.appendChild(input);
      // Support: Safari<=5.1, Android<4.2
      // Older WebKit doesn't clone checked state correctly in fragments
      support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
      // Support: IE<=11+
      // Make sure textarea (and checkbox) defaultValue is properly cloned
      div.innerHTML = '<textarea>x</textarea>';
      support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
    }());
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
      return true
    }
    function returnFalse() {
      return false
    }
    // Support: IE9
    // See #13393 for more info
    function safeActiveElement() {
      try {
        return document.activeElement
      } catch (err) {
      }
    }
    function on(elem, types, selector, data, fn, one) {
      var origFn, type;
      // Types can be a map of types/handlers
      if (typeof types === 'object') {
        // ( types-Object, selector, data )
        if (typeof selector !== 'string') {
          // ( types-Object, data )
          data = data || selector;
          selector = undefined
        }
        for (type in types) {
          on(elem, type, selector, data, types[type], one)
        }
        return elem
      }
      if (data == null && fn == null) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined
      } else if (fn == null) {
        if (typeof selector === 'string') {
          // ( types, selector, fn )
          fn = data;
          data = undefined
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined
        }
      }
      if (fn === false) {
        fn = returnFalse
      } else if (!fn) {
        return elem
      }
      if (one === 1) {
        origFn = fn;
        fn = function (event) {
          // Can use an empty set, since event contains the info
          jQuery().off(event);
          return origFn.apply(this, arguments)
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
      }
      return elem.each(function () {
        jQuery.event.add(this, types, fn, data, selector)
      })
    }
    /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
    jQuery.event = {
      global: {},
      add: function (elem, types, handler, data, selector) {
        var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
        // Don't attach events to noData or text/comment nodes (but allow plain objects)
        if (!elemData) {
          return
        }
        // Caller can pass in an object of custom data in lieu of the handler
        if (handler.handler) {
          handleObjIn = handler;
          handler = handleObjIn.handler;
          selector = handleObjIn.selector
        }
        // Make sure that the handler has a unique ID, used to find/remove it later
        if (!handler.guid) {
          handler.guid = jQuery.guid++
        }
        // Init the element's event structure and main handler, if this is the first
        if (!(events = elemData.events)) {
          events = elemData.events = {}
        }
        if (!(eventHandle = elemData.handle)) {
          eventHandle = elemData.handle = function (e) {
            // Discard the second event of a jQuery.event.trigger() and
            // when an event is called after a page has unloaded
            return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined
          }
        }
        // Handle multiple events separated by a space
        types = (types || '').match(rnotwhite) || [''];
        t = types.length;
        while (t--) {
          tmp = rtypenamespace.exec(types[t]) || [];
          type = origType = tmp[1];
          namespaces = (tmp[2] || '').split('.').sort();
          // There *must* be a type, no attaching namespace-only handlers
          if (!type) {
            continue
          }
          // If event changes its type, use the special event handlers for the changed type
          special = jQuery.event.special[type] || {};
          // If selector defined, determine special event api type, otherwise given type
          type = (selector ? special.delegateType : special.bindType) || type;
          // Update special based on newly reset type
          special = jQuery.event.special[type] || {};
          // handleObj is passed to all event handlers
          handleObj = jQuery.extend({
            type: type,
            origType: origType,
            data: data,
            handler: handler,
            guid: handler.guid,
            selector: selector,
            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
            namespace: namespaces.join('.')
          }, handleObjIn);
          // Init the event handler queue if we're the first
          if (!(handlers = events[type])) {
            handlers = events[type] = [];
            handlers.delegateCount = 0;
            // Only use addEventListener if the special events handler returns false
            if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
              if (elem.addEventListener) {
                elem.addEventListener(type, eventHandle)
              }
            }
          }
          if (special.add) {
            special.add.call(elem, handleObj);
            if (!handleObj.handler.guid) {
              handleObj.handler.guid = handler.guid
            }
          }
          // Add to the element's handler list, delegates in front
          if (selector) {
            handlers.splice(handlers.delegateCount++, 0, handleObj)
          } else {
            handlers.push(handleObj)
          }
          // Keep track of which events have ever been used, for event optimization
          jQuery.event.global[type] = true
        }
      },
      // Detach an event or set of events from an element
      remove: function (elem, types, handler, selector, mappedTypes) {
        var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
        if (!elemData || !(events = elemData.events)) {
          return
        }
        // Once for each type.namespace in types; type may be omitted
        types = (types || '').match(rnotwhite) || [''];
        t = types.length;
        while (t--) {
          tmp = rtypenamespace.exec(types[t]) || [];
          type = origType = tmp[1];
          namespaces = (tmp[2] || '').split('.').sort();
          // Unbind all events (on this namespace, if provided) for the element
          if (!type) {
            for (type in events) {
              jQuery.event.remove(elem, type + types[t], handler, selector, true)
            }
            continue
          }
          special = jQuery.event.special[type] || {};
          type = (selector ? special.delegateType : special.bindType) || type;
          handlers = events[type] || [];
          tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
          // Remove matching events
          origCount = j = handlers.length;
          while (j--) {
            handleObj = handlers[j];
            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
              handlers.splice(j, 1);
              if (handleObj.selector) {
                handlers.delegateCount--
              }
              if (special.remove) {
                special.remove.call(elem, handleObj)
              }
            }
          }
          // Remove generic event handler if we removed something and no more handlers exist
          // (avoids potential for endless recursion during removal of special event handlers)
          if (origCount && !handlers.length) {
            if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
              jQuery.removeEvent(elem, type, elemData.handle)
            }
            delete events[type]
          }
        }
        // Remove data and the expando if it's no longer used
        if (jQuery.isEmptyObject(events)) {
          dataPriv.remove(elem, 'handle events')
        }
      },
      dispatch: function (event) {
        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix(event);
        var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
        // Use the fix-ed jQuery.Event rather than the (read-only) native event
        args[0] = event;
        event.delegateTarget = this;
        // Call the preDispatch hook for the mapped type, and let it bail if desired
        if (special.preDispatch && special.preDispatch.call(this, event) === false) {
          return
        }
        // Determine handlers
        handlerQueue = jQuery.event.handlers.call(this, event, handlers);
        // Run delegates first; they may want to stop propagation beneath us
        i = 0;
        while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
          event.currentTarget = matched.elem;
          j = 0;
          while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
            // Triggered event must either 1) have no namespace, or 2) have namespace(s)
            // a subset or equal to those in the bound event (both can have no namespace).
            if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
              event.handleObj = handleObj;
              event.data = handleObj.data;
              ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
              if (ret !== undefined) {
                if ((event.result = ret) === false) {
                  event.preventDefault();
                  event.stopPropagation()
                }
              }
            }
          }
        }
        // Call the postDispatch hook for the mapped type
        if (special.postDispatch) {
          special.postDispatch.call(this, event)
        }
        return event.result
      },
      handlers: function (event, handlers) {
        var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
        // Support (at least): Chrome, IE9
        // Find delegate handlers
        // Black-hole SVG <use> instance trees (#13180)
        //
        // Support: Firefox<=42+
        // Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
        if (delegateCount && cur.nodeType && (event.type !== 'click' || isNaN(event.button) || event.button < 1)) {
          for (; cur !== this; cur = cur.parentNode || this) {
            // Don't check non-elements (#13208)
            // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
            if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== 'click')) {
              matches = [];
              for (i = 0; i < delegateCount; i++) {
                handleObj = handlers[i];
                // Don't conflict with Object.prototype properties (#13203)
                sel = handleObj.selector + ' ';
                if (matches[sel] === undefined) {
                  matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length
                }
                if (matches[sel]) {
                  matches.push(handleObj)
                }
              }
              if (matches.length) {
                handlerQueue.push({
                  elem: cur,
                  handlers: matches
                })
              }
            }
          }
        }
        // Add the remaining (directly-bound) handlers
        if (delegateCount < handlers.length) {
          handlerQueue.push({
            elem: this,
            handlers: handlers.slice(delegateCount)
          })
        }
        return handlerQueue
      },
      // Includes some event props shared by KeyEvent and MouseEvent
      props: ('altKey bubbles cancelable ctrlKey currentTarget detail eventPhase ' + 'metaKey relatedTarget shiftKey target timeStamp view which').split(' '),
      fixHooks: {},
      keyHooks: {
        props: 'char charCode key keyCode'.split(' '),
        filter: function (event, original) {
          // Add which for key events
          if (event.which == null) {
            event.which = original.charCode != null ? original.charCode : original.keyCode
          }
          return event
        }
      },
      mouseHooks: {
        props: ('button buttons clientX clientY offsetX offsetY pageX pageY ' + 'screenX screenY toElement').split(' '),
        filter: function (event, original) {
          var eventDoc, doc, body, button = original.button;
          // Calculate pageX/Y if missing and clientX/Y available
          if (event.pageX == null && original.clientX != null) {
            eventDoc = event.target.ownerDocument || document;
            doc = eventDoc.documentElement;
            body = eventDoc.body;
            event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
            event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
          }
          // Add which for click: 1 === left; 2 === middle; 3 === right
          // Note: button is not normalized, so don't use it
          if (!event.which && button !== undefined) {
            event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0
          }
          return event
        }
      },
      fix: function (event) {
        if (event[jQuery.expando]) {
          return event
        }
        // Create a writable copy of the event object and normalize some properties
        var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
        if (!fixHook) {
          this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {}
        }
        copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
        event = new jQuery.Event(originalEvent);
        i = copy.length;
        while (i--) {
          prop = copy[i];
          event[prop] = originalEvent[prop]
        }
        // Support: Cordova 2.5 (WebKit) (#13255)
        // All events should have a target; Cordova deviceready doesn't
        if (!event.target) {
          event.target = document
        }
        // Support: Safari 6.0+, Chrome<28
        // Target should not be a text node (#504, #13143)
        if (event.target.nodeType === 3) {
          event.target = event.target.parentNode
        }
        return fixHook.filter ? fixHook.filter(event, originalEvent) : event
      },
      special: {
        load: {
          // Prevent triggered image.load events from bubbling to window.load
          noBubble: true
        },
        focus: {
          // Fire native event if possible so blur/focus sequence is correct
          trigger: function () {
            if (this !== safeActiveElement() && this.focus) {
              this.focus();
              return false
            }
          },
          delegateType: 'focusin'
        },
        blur: {
          trigger: function () {
            if (this === safeActiveElement() && this.blur) {
              this.blur();
              return false
            }
          },
          delegateType: 'focusout'
        },
        click: {
          // For checkbox, fire native event so checked state will be right
          trigger: function () {
            if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
              this.click();
              return false
            }
          },
          // For cross-browser consistency, don't fire native .click() on links
          _default: function (event) {
            return jQuery.nodeName(event.target, 'a')
          }
        },
        beforeunload: {
          postDispatch: function (event) {
            // Support: Firefox 20+
            // Firefox doesn't alert if the returnValue field is not set.
            if (event.result !== undefined && event.originalEvent) {
              event.originalEvent.returnValue = event.result
            }
          }
        }
      }
    };
    jQuery.removeEvent = function (elem, type, handle) {
      // This "if" is needed for plain objects
      if (elem.removeEventListener) {
        elem.removeEventListener(type, handle)
      }
    };
    jQuery.Event = function (src, props) {
      // Allow instantiation without the 'new' keyword
      if (!(this instanceof jQuery.Event)) {
        return new jQuery.Event(src, props)
      }
      // Event object
      if (src && src.type) {
        this.originalEvent = src;
        this.type = src.type;
        // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.
        this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android<4.0
        src.returnValue === false ? returnTrue : returnFalse  // Event type
      } else {
        this.type = src
      }
      // Put explicitly provided properties onto the event object
      if (props) {
        jQuery.extend(this, props)
      }
      // Create a timestamp if incoming event doesn't have one
      this.timeStamp = src && src.timeStamp || jQuery.now();
      // Mark it as fixed
      this[jQuery.expando] = true
    };
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
      constructor: jQuery.Event,
      isDefaultPrevented: returnFalse,
      isPropagationStopped: returnFalse,
      isImmediatePropagationStopped: returnFalse,
      preventDefault: function () {
        var e = this.originalEvent;
        this.isDefaultPrevented = returnTrue;
        if (e) {
          e.preventDefault()
        }
      },
      stopPropagation: function () {
        var e = this.originalEvent;
        this.isPropagationStopped = returnTrue;
        if (e) {
          e.stopPropagation()
        }
      },
      stopImmediatePropagation: function () {
        var e = this.originalEvent;
        this.isImmediatePropagationStopped = returnTrue;
        if (e) {
          e.stopImmediatePropagation()
        }
        this.stopPropagation()
      }
    };
    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://code.google.com/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each({
      mouseenter: 'mouseover',
      mouseleave: 'mouseout',
      pointerenter: 'pointerover',
      pointerleave: 'pointerout'
    }, function (orig, fix) {
      jQuery.event.special[orig] = {
        delegateType: fix,
        bindType: fix,
        handle: function (event) {
          var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
          // For mouseenter/leave call the handler if related is outside the target.
          // NB: No relatedTarget if the mouse left/entered the browser window
          if (!related || related !== target && !jQuery.contains(target, related)) {
            event.type = handleObj.origType;
            ret = handleObj.handler.apply(this, arguments);
            event.type = fix
          }
          return ret
        }
      }
    });
    jQuery.fn.extend({
      on: function (types, selector, data, fn) {
        return on(this, types, selector, data, fn)
      },
      one: function (types, selector, data, fn) {
        return on(this, types, selector, data, fn, 1)
      },
      off: function (types, selector, fn) {
        var handleObj, type;
        if (types && types.preventDefault && types.handleObj) {
          // ( event )  dispatched jQuery.Event
          handleObj = types.handleObj;
          jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
          return this
        }
        if (typeof types === 'object') {
          // ( types-object [, selector] )
          for (type in types) {
            this.off(type, selector, types[type])
          }
          return this
        }
        if (selector === false || typeof selector === 'function') {
          // ( types [, fn] )
          fn = selector;
          selector = undefined
        }
        if (fn === false) {
          fn = returnFalse
        }
        return this.each(function () {
          jQuery.event.remove(this, types, fn, selector)
        })
      }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
      // Support: IE 10-11, Edge 10240+
      // In IE/Edge using regex groups here causes severe slowdowns.
      // See https://connect.microsoft.com/IE/feedback/details/1736512/
      rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
      rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    // Manipulating tables requires a tbody
    function manipulationTarget(elem, content) {
      return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem
    }
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
      elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
      return elem
    }
    function restoreScript(elem) {
      var match = rscriptTypeMasked.exec(elem.type);
      if (match) {
        elem.type = match[1]
      } else {
        elem.removeAttribute('type')
      }
      return elem
    }
    function cloneCopyEvent(src, dest) {
      var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
      if (dest.nodeType !== 1) {
        return
      }
      // 1. Copy private data: events, handlers, etc.
      if (dataPriv.hasData(src)) {
        pdataOld = dataPriv.access(src);
        pdataCur = dataPriv.set(dest, pdataOld);
        events = pdataOld.events;
        if (events) {
          delete pdataCur.handle;
          pdataCur.events = {};
          for (type in events) {
            for (i = 0, l = events[type].length; i < l; i++) {
              jQuery.event.add(dest, type, events[type][i])
            }
          }
        }
      }
      // 2. Copy user data
      if (dataUser.hasData(src)) {
        udataOld = dataUser.access(src);
        udataCur = jQuery.extend({}, udataOld);
        dataUser.set(dest, udataCur)
      }
    }
    // Fix IE bugs, see support tests
    function fixInput(src, dest) {
      var nodeName = dest.nodeName.toLowerCase();
      // Fails to persist the checked state of a cloned checkbox or radio button.
      if (nodeName === 'input' && rcheckableType.test(src.type)) {
        dest.checked = src.checked  // Fails to return the selected option to the default selected state when cloning options
      } else if (nodeName === 'input' || nodeName === 'textarea') {
        dest.defaultValue = src.defaultValue
      }
    }
    function domManip(collection, args, callback, ignored) {
      // Flatten any nested arrays
      args = concat.apply([], args);
      var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
      // We can't cloneNode fragments that contain checked, in WebKit
      if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
        return collection.each(function (index) {
          var self = collection.eq(index);
          if (isFunction) {
            args[0] = value.call(this, index, self.html())
          }
          domManip(self, args, callback, ignored)
        })
      }
      if (l) {
        fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
        first = fragment.firstChild;
        if (fragment.childNodes.length === 1) {
          fragment = first
        }
        // Require either new content or an interest in ignored elements to invoke the callback
        if (first || ignored) {
          scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
          hasScripts = scripts.length;
          // Use the original fragment for the last item
          // instead of the first because it can end up
          // being emptied incorrectly in certain situations (#8070).
          for (; i < l; i++) {
            node = fragment;
            if (i !== iNoClone) {
              node = jQuery.clone(node, true, true);
              // Keep references to cloned scripts for later restoration
              if (hasScripts) {
                // Support: Android<4.1, PhantomJS<2
                // push.apply(_, arraylike) throws on ancient WebKit
                jQuery.merge(scripts, getAll(node, 'script'))
              }
            }
            callback.call(collection[i], node, i)
          }
          if (hasScripts) {
            doc = scripts[scripts.length - 1].ownerDocument;
            // Reenable scripts
            jQuery.map(scripts, restoreScript);
            // Evaluate executable scripts on first document insertion
            for (i = 0; i < hasScripts; i++) {
              node = scripts[i];
              if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                if (node.src) {
                  // Optional AJAX dependency, but won't run scripts if not present
                  if (jQuery._evalUrl) {
                    jQuery._evalUrl(node.src)
                  }
                } else {
                  jQuery.globalEval(node.textContent.replace(rcleanScript, ''))
                }
              }
            }
          }
        }
      }
      return collection
    }
    function remove(elem, selector, keepData) {
      var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
      for (; (node = nodes[i]) != null; i++) {
        if (!keepData && node.nodeType === 1) {
          jQuery.cleanData(getAll(node))
        }
        if (node.parentNode) {
          if (keepData && jQuery.contains(node.ownerDocument, node)) {
            setGlobalEval(getAll(node, 'script'))
          }
          node.parentNode.removeChild(node)
        }
      }
      return elem
    }
    jQuery.extend({
      htmlPrefilter: function (html) {
        return html.replace(rxhtmlTag, '<$1></$2>')
      },
      clone: function (elem, dataAndEvents, deepDataAndEvents) {
        var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
        // Fix IE cloning issues
        if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
          // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
          destElements = getAll(clone);
          srcElements = getAll(elem);
          for (i = 0, l = srcElements.length; i < l; i++) {
            fixInput(srcElements[i], destElements[i])
          }
        }
        // Copy the events from the original to the clone
        if (dataAndEvents) {
          if (deepDataAndEvents) {
            srcElements = srcElements || getAll(elem);
            destElements = destElements || getAll(clone);
            for (i = 0, l = srcElements.length; i < l; i++) {
              cloneCopyEvent(srcElements[i], destElements[i])
            }
          } else {
            cloneCopyEvent(elem, clone)
          }
        }
        // Preserve script evaluation history
        destElements = getAll(clone, 'script');
        if (destElements.length > 0) {
          setGlobalEval(destElements, !inPage && getAll(elem, 'script'))
        }
        // Return the cloned set
        return clone
      },
      cleanData: function (elems) {
        var data, elem, type, special = jQuery.event.special, i = 0;
        for (; (elem = elems[i]) !== undefined; i++) {
          if (acceptData(elem)) {
            if (data = elem[dataPriv.expando]) {
              if (data.events) {
                for (type in data.events) {
                  if (special[type]) {
                    jQuery.event.remove(elem, type)  // This is a shortcut to avoid jQuery.event.remove's overhead
                  } else {
                    jQuery.removeEvent(elem, type, data.handle)
                  }
                }
              }
              // Support: Chrome <= 35-45+
              // Assign undefined instead of using delete, see Data#remove
              elem[dataPriv.expando] = undefined
            }
            if (elem[dataUser.expando]) {
              // Support: Chrome <= 35-45+
              // Assign undefined instead of using delete, see Data#remove
              elem[dataUser.expando] = undefined
            }
          }
        }
      }
    });
    jQuery.fn.extend({
      // Keep domManip exposed until 3.0 (gh-2225)
      domManip: domManip,
      detach: function (selector) {
        return remove(this, selector, true)
      },
      remove: function (selector) {
        return remove(this, selector)
      },
      text: function (value) {
        return access(this, function (value) {
          return value === undefined ? jQuery.text(this) : this.empty().each(function () {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              this.textContent = value
            }
          })
        }, null, value, arguments.length)
      },
      append: function () {
        return domManip(this, arguments, function (elem) {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            var target = manipulationTarget(this, elem);
            target.appendChild(elem)
          }
        })
      },
      prepend: function () {
        return domManip(this, arguments, function (elem) {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            var target = manipulationTarget(this, elem);
            target.insertBefore(elem, target.firstChild)
          }
        })
      },
      before: function () {
        return domManip(this, arguments, function (elem) {
          if (this.parentNode) {
            this.parentNode.insertBefore(elem, this)
          }
        })
      },
      after: function () {
        return domManip(this, arguments, function (elem) {
          if (this.parentNode) {
            this.parentNode.insertBefore(elem, this.nextSibling)
          }
        })
      },
      empty: function () {
        var elem, i = 0;
        for (; (elem = this[i]) != null; i++) {
          if (elem.nodeType === 1) {
            // Prevent memory leaks
            jQuery.cleanData(getAll(elem, false));
            // Remove any remaining nodes
            elem.textContent = ''
          }
        }
        return this
      },
      clone: function (dataAndEvents, deepDataAndEvents) {
        dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
        deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
        return this.map(function () {
          return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
        })
      },
      html: function (value) {
        return access(this, function (value) {
          var elem = this[0] || {}, i = 0, l = this.length;
          if (value === undefined && elem.nodeType === 1) {
            return elem.innerHTML
          }
          // See if we can take a shortcut and just use innerHTML
          if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
              '',
              ''
            ])[1].toLowerCase()]) {
            value = jQuery.htmlPrefilter(value);
            try {
              for (; i < l; i++) {
                elem = this[i] || {};
                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                  jQuery.cleanData(getAll(elem, false));
                  elem.innerHTML = value
                }
              }
              elem = 0  // If using innerHTML throws an exception, use the fallback method
            } catch (e) {
            }
          }
          if (elem) {
            this.empty().append(value)
          }
        }, null, value, arguments.length)
      },
      replaceWith: function () {
        var ignored = [];
        // Make the changes, replacing each non-ignored context element with the new content
        return domManip(this, arguments, function (elem) {
          var parent = this.parentNode;
          if (jQuery.inArray(this, ignored) < 0) {
            jQuery.cleanData(getAll(this));
            if (parent) {
              parent.replaceChild(elem, this)
            }
          }  // Force callback invocation
        }, ignored)
      }
    });
    jQuery.each({
      appendTo: 'append',
      prependTo: 'prepend',
      insertBefore: 'before',
      insertAfter: 'after',
      replaceAll: 'replaceWith'
    }, function (name, original) {
      jQuery.fn[name] = function (selector) {
        var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
        for (; i <= last; i++) {
          elems = i === last ? this : this.clone(true);
          jQuery(insert[i])[original](elems);
          // Support: QtWebKit
          // .get() because push.apply(_, arraylike) throws
          push.apply(ret, elems.get())
        }
        return this.pushStack(ret)
      }
    });
    var iframe, elemdisplay = {
        // Support: Firefox
        // We have to pre-define these values for FF (#10227)
        HTML: 'block',
        BODY: 'block'
      };
    /**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
    // Called only from within defaultDisplay
    function actualDisplay(name, doc) {
      var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], 'display');
      // We don't have any data stored on the element,
      // so use "detach" method as fast way to get rid of the element
      elem.detach();
      return display
    }
    /**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
    function defaultDisplay(nodeName) {
      var doc = document, display = elemdisplay[nodeName];
      if (!display) {
        display = actualDisplay(nodeName, doc);
        // If the simple way fails, read from inside an iframe
        if (display === 'none' || !display) {
          // Use the already-created iframe if possible
          iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
          // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
          doc = iframe[0].contentDocument;
          // Support: IE
          doc.write();
          doc.close();
          display = actualDisplay(nodeName, doc);
          iframe.detach()
        }
        // Store the correct default display
        elemdisplay[nodeName] = display
      }
      return display
    }
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
    var getStyles = function (elem) {
      // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
      // IE throws on elements created in popups
      // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
      var view = elem.ownerDocument.defaultView;
      if (!view || !view.opener) {
        view = window
      }
      return view.getComputedStyle(elem)
    };
    var swap = function (elem, options, callback, args) {
      var ret, name, old = {};
      // Remember the old values, and insert the new ones
      for (name in options) {
        old[name] = elem.style[name];
        elem.style[name] = options[name]
      }
      ret = callback.apply(elem, args || []);
      // Revert the old values
      for (name in options) {
        elem.style[name] = old[name]
      }
      return ret
    };
    var documentElement = document.documentElement;
    (function () {
      var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
      // Finish early in limited (non-browser) environments
      if (!div.style) {
        return
      }
      // Support: IE9-11+
      // Style of cloned element affects source element cloned (#8908)
      div.style.backgroundClip = 'content-box';
      div.cloneNode(true).style.backgroundClip = '';
      support.clearCloneStyle = div.style.backgroundClip === 'content-box';
      container.style.cssText = 'border:0;width:8px;height:0;top:0;left:-9999px;' + 'padding:0;margin-top:1px;position:absolute';
      container.appendChild(div);
      // Executing both pixelPosition & boxSizingReliable tests require only one layout
      // so they're executed at the same time to save the second computation.
      function computeStyleTests() {
        div.style.cssText = // Support: Firefox<29, Android 2.3
        // Vendor-prefix box-sizing
        '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;' + 'position:relative;display:block;' + 'margin:auto;border:1px;padding:1px;' + 'top:1%;width:50%';
        div.innerHTML = '';
        documentElement.appendChild(container);
        var divStyle = window.getComputedStyle(div);
        pixelPositionVal = divStyle.top !== '1%';
        reliableMarginLeftVal = divStyle.marginLeft === '2px';
        boxSizingReliableVal = divStyle.width === '4px';
        // Support: Android 4.0 - 4.3 only
        // Some styles come back with percentage values, even though they shouldn't
        div.style.marginRight = '50%';
        pixelMarginRightVal = divStyle.marginRight === '4px';
        documentElement.removeChild(container)
      }
      jQuery.extend(support, {
        pixelPosition: function () {
          // This test is executed only once but we still do memoizing
          // since we can use the boxSizingReliable pre-computing.
          // No need to check if the test was already performed, though.
          computeStyleTests();
          return pixelPositionVal
        },
        boxSizingReliable: function () {
          if (boxSizingReliableVal == null) {
            computeStyleTests()
          }
          return boxSizingReliableVal
        },
        pixelMarginRight: function () {
          // Support: Android 4.0-4.3
          // We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
          // since that compresses better and they're computed together anyway.
          if (boxSizingReliableVal == null) {
            computeStyleTests()
          }
          return pixelMarginRightVal
        },
        reliableMarginLeft: function () {
          // Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
          if (boxSizingReliableVal == null) {
            computeStyleTests()
          }
          return reliableMarginLeftVal
        },
        reliableMarginRight: function () {
          // Support: Android 2.3
          // Check if div with explicit width and no margin-right incorrectly
          // gets computed margin-right based on width of container. (#3333)
          // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
          // This support function is only executed once so no memoizing is needed.
          var ret, marginDiv = div.appendChild(document.createElement('div'));
          // Reset CSS: box-sizing; display; margin; border; padding
          marginDiv.style.cssText = div.style.cssText = // Support: Android 2.3
          // Vendor-prefix box-sizing
          '-webkit-box-sizing:content-box;box-sizing:content-box;' + 'display:block;margin:0;border:0;padding:0';
          marginDiv.style.marginRight = marginDiv.style.width = '0';
          div.style.width = '1px';
          documentElement.appendChild(container);
          ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);
          documentElement.removeChild(container);
          div.removeChild(marginDiv);
          return ret
        }
      })
    }());
    function curCSS(elem, name, computed) {
      var width, minWidth, maxWidth, ret, style = elem.style;
      computed = computed || getStyles(elem);
      ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;
      // Support: Opera 12.1x only
      // Fall back to style even without computed
      // computed is undefined for elems on document fragments
      if ((ret === '' || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
        ret = jQuery.style(elem, name)
      }
      // Support: IE9
      // getPropertyValue is only needed for .css('filter') (#12537)
      if (computed) {
        // A tribute to the "awesome hack by Dean Edwards"
        // Android Browser returns percentage for some values,
        // but width seems to be reliably pixels.
        // This is against the CSSOM draft spec:
        // http://dev.w3.org/csswg/cssom/#resolved-values
        if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
          // Remember the original values
          width = style.width;
          minWidth = style.minWidth;
          maxWidth = style.maxWidth;
          // Put in the new values to get a computed value out
          style.minWidth = style.maxWidth = style.width = ret;
          ret = computed.width;
          // Revert the changed values
          style.width = width;
          style.minWidth = minWidth;
          style.maxWidth = maxWidth
        }
      }
      return ret !== undefined ? // Support: IE9-11+
      // IE returns zIndex value as an integer.
      ret + '' : ret
    }
    function addGetHookIf(conditionFn, hookFn) {
      // Define the hook, we'll check on the first run if it's really needed.
      return {
        get: function () {
          if (conditionFn()) {
            // Hook not needed (or it's not possible to use it due
            // to missing dependency), remove it.
            delete this.get;
            return
          }
          // Hook needed; redefine it so that the support test is not executed again.
          return (this.get = hookFn).apply(this, arguments)
        }
      }
    }
    var
      // Swappable if display is none or starts with table
      // except "table", "table-cell", or "table-caption"
      // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
      rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = {
        position: 'absolute',
        visibility: 'hidden',
        display: 'block'
      }, cssNormalTransform = {
        letterSpacing: '0',
        fontWeight: '400'
      }, cssPrefixes = [
        'Webkit',
        'O',
        'Moz',
        'ms'
      ], emptyStyle = document.createElement('div').style;
    // Return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(name) {
      // Shortcut for names that are not vendor prefixed
      if (name in emptyStyle) {
        return name
      }
      // Check for vendor prefixed names
      var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
      while (i--) {
        name = cssPrefixes[i] + capName;
        if (name in emptyStyle) {
          return name
        }
      }
    }
    function setPositiveNumber(elem, value, subtract) {
      // Any relative (+/-) values have already been
      // normalized at this point
      var matches = rcssNum.exec(value);
      return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
      Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
      var i = extra === (isBorderBox ? 'border' : 'content') ? // If we already have the right measurement, avoid augmentation
        4 : // Otherwise initialize for horizontal or vertical properties
        name === 'width' ? 1 : 0, val = 0;
      for (; i < 4; i += 2) {
        // Both box models exclude margin, so add it if we want it
        if (extra === 'margin') {
          val += jQuery.css(elem, extra + cssExpand[i], true, styles)
        }
        if (isBorderBox) {
          // border-box includes padding, so remove it if we want content
          if (extra === 'content') {
            val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles)
          }
          // At this point, extra isn't border nor margin, so remove border
          if (extra !== 'margin') {
            val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
          }
        } else {
          // At this point, extra isn't content, so add padding
          val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
          // At this point, extra isn't content nor padding, so add border
          if (extra !== 'padding') {
            val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
          }
        }
      }
      return val
    }
    function getWidthOrHeight(elem, name, extra) {
      // Start with offset property, which is equivalent to the border-box value
      var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
      // Support: IE11 only
      // In IE 11 fullscreen elements inside of an iframe have
      // 100x too small dimensions (gh-1764).
      if (document.msFullscreenElement && window.top !== window) {
        // Support: IE11 only
        // Running getBoundingClientRect on a disconnected node
        // in IE throws an error.
        if (elem.getClientRects().length) {
          val = Math.round(elem.getBoundingClientRect()[name] * 100)
        }
      }
      // Some non-html elements return undefined for offsetWidth, so check for null/undefined
      // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
      // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
      if (val <= 0 || val == null) {
        // Fall back to computed then uncomputed css if necessary
        val = curCSS(elem, name, styles);
        if (val < 0 || val == null) {
          val = elem.style[name]
        }
        // Computed unit is not pixels. Stop here and return.
        if (rnumnonpx.test(val)) {
          return val
        }
        // Check for style in case a browser which returns unreliable values
        // for getComputedStyle silently falls back to the reliable elem.style
        valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
        // Normalize "", auto, and prepare for extra
        val = parseFloat(val) || 0
      }
      // Use the active box-sizing model to add/subtract irrelevant styles
      return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px'
    }
    function showHide(elements, show) {
      var display, elem, hidden, values = [], index = 0, length = elements.length;
      for (; index < length; index++) {
        elem = elements[index];
        if (!elem.style) {
          continue
        }
        values[index] = dataPriv.get(elem, 'olddisplay');
        display = elem.style.display;
        if (show) {
          // Reset the inline display of this element to learn if it is
          // being hidden by cascaded rules or not
          if (!values[index] && display === 'none') {
            elem.style.display = ''
          }
          // Set elements which have been overridden with display: none
          // in a stylesheet to whatever the default browser style is
          // for such an element
          if (elem.style.display === '' && isHidden(elem)) {
            values[index] = dataPriv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName))
          }
        } else {
          hidden = isHidden(elem);
          if (display !== 'none' || !hidden) {
            dataPriv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'))
          }
        }
      }
      // Set the display of most of the elements in a second loop
      // to avoid the constant reflow
      for (index = 0; index < length; index++) {
        elem = elements[index];
        if (!elem.style) {
          continue
        }
        if (!show || elem.style.display === 'none' || elem.style.display === '') {
          elem.style.display = show ? values[index] || '' : 'none'
        }
      }
      return elements
    }
    jQuery.extend({
      // Add in style property hooks for overriding the default
      // behavior of getting and setting a style property
      cssHooks: {
        opacity: {
          get: function (elem, computed) {
            if (computed) {
              // We should always get a number back from opacity
              var ret = curCSS(elem, 'opacity');
              return ret === '' ? '1' : ret
            }
          }
        }
      },
      // Don't automatically add "px" to these possibly-unitless properties
      cssNumber: {
        'animationIterationCount': true,
        'columnCount': true,
        'fillOpacity': true,
        'flexGrow': true,
        'flexShrink': true,
        'fontWeight': true,
        'lineHeight': true,
        'opacity': true,
        'order': true,
        'orphans': true,
        'widows': true,
        'zIndex': true,
        'zoom': true
      },
      // Add in properties whose names you wish to fix before
      // setting or getting the value
      cssProps: { 'float': 'cssFloat' },
      // Get and set the style property on a DOM Node
      style: function (elem, name, value, extra) {
        // Don't set styles on text and comment nodes
        if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
          return
        }
        // Make sure that we're working with the right name
        var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
        name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
        // Gets hook for the prefixed version, then unprefixed version
        hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
        // Check if we're setting a value
        if (value !== undefined) {
          type = typeof value;
          // Convert "+=" or "-=" to relative numbers (#7345)
          if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
            value = adjustCSS(elem, name, ret);
            // Fixes bug #9237
            type = 'number'
          }
          // Make sure that null and NaN values aren't set (#7116)
          if (value == null || value !== value) {
            return
          }
          // If a number was passed in, add the unit (except for certain CSS properties)
          if (type === 'number') {
            value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px')
          }
          // Support: IE9-11+
          // background-* props affect original clone's values
          if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
            style[name] = 'inherit'
          }
          // If a hook was provided, use that value, otherwise just set the specified value
          if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
            style[name] = value
          }
        } else {
          // If a hook was provided get the non-computed value from there
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
            return ret
          }
          // Otherwise just get the value from the style object
          return style[name]
        }
      },
      css: function (elem, name, extra, styles) {
        var val, num, hooks, origName = jQuery.camelCase(name);
        // Make sure that we're working with the right name
        name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
        // Try prefixed name followed by the unprefixed name
        hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
        // If a hook was provided get the computed value from there
        if (hooks && 'get' in hooks) {
          val = hooks.get(elem, true, extra)
        }
        // Otherwise, if a way to get the computed value exists, use that
        if (val === undefined) {
          val = curCSS(elem, name, styles)
        }
        // Convert "normal" to computed value
        if (val === 'normal' && name in cssNormalTransform) {
          val = cssNormalTransform[name]
        }
        // Make numeric if forced or a qualifier was provided and val looks numeric
        if (extra === '' || extra) {
          num = parseFloat(val);
          return extra === true || isFinite(num) ? num || 0 : val
        }
        return val
      }
    });
    jQuery.each([
      'height',
      'width'
    ], function (i, name) {
      jQuery.cssHooks[name] = {
        get: function (elem, computed, extra) {
          if (computed) {
            // Certain elements can have dimension info if we invisibly show them
            // but it must have a current display style that would benefit
            return rdisplayswap.test(jQuery.css(elem, 'display')) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
              return getWidthOrHeight(elem, name, extra)
            }) : getWidthOrHeight(elem, name, extra)
          }
        },
        set: function (elem, value, extra) {
          var matches, styles = extra && getStyles(elem), subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles);
          // Convert to pixels if value adjustment is needed
          if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
            elem.style[name] = value;
            value = jQuery.css(elem, name)
          }
          return setPositiveNumber(elem, value, subtract)
        }
      }
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
      if (computed) {
        return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
          return elem.getBoundingClientRect().left
        })) + 'px'
      }
    });
    // Support: Android 2.3
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
      if (computed) {
        return swap(elem, { 'display': 'inline-block' }, curCSS, [
          elem,
          'marginRight'
        ])
      }
    });
    // These hooks are used by animate to expand properties
    jQuery.each({
      margin: '',
      padding: '',
      border: 'Width'
    }, function (prefix, suffix) {
      jQuery.cssHooks[prefix + suffix] = {
        expand: function (value) {
          var i = 0, expanded = {},
            // Assumes a single number if not a string
            parts = typeof value === 'string' ? value.split(' ') : [value];
          for (; i < 4; i++) {
            expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
          }
          return expanded
        }
      };
      if (!rmargin.test(prefix)) {
        jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
      }
    });
    jQuery.fn.extend({
      css: function (name, value) {
        return access(this, function (elem, name, value) {
          var styles, len, map = {}, i = 0;
          if (jQuery.isArray(name)) {
            styles = getStyles(elem);
            len = name.length;
            for (; i < len; i++) {
              map[name[i]] = jQuery.css(elem, name[i], false, styles)
            }
            return map
          }
          return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
        }, name, value, arguments.length > 1)
      },
      show: function () {
        return showHide(this, true)
      },
      hide: function () {
        return showHide(this)
      },
      toggle: function (state) {
        if (typeof state === 'boolean') {
          return state ? this.show() : this.hide()
        }
        return this.each(function () {
          if (isHidden(this)) {
            jQuery(this).show()
          } else {
            jQuery(this).hide()
          }
        })
      }
    });
    function Tween(elem, options, prop, end, easing) {
      return new Tween.prototype.init(elem, options, prop, end, easing)
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
      constructor: Tween,
      init: function (elem, options, prop, end, easing, unit) {
        this.elem = elem;
        this.prop = prop;
        this.easing = easing || jQuery.easing._default;
        this.options = options;
        this.start = this.now = this.cur();
        this.end = end;
        this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px')
      },
      cur: function () {
        var hooks = Tween.propHooks[this.prop];
        return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
      },
      run: function (percent) {
        var eased, hooks = Tween.propHooks[this.prop];
        if (this.options.duration) {
          this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
        } else {
          this.pos = eased = percent
        }
        this.now = (this.end - this.start) * eased + this.start;
        if (this.options.step) {
          this.options.step.call(this.elem, this.now, this)
        }
        if (hooks && hooks.set) {
          hooks.set(this)
        } else {
          Tween.propHooks._default.set(this)
        }
        return this
      }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
      _default: {
        get: function (tween) {
          var result;
          // Use a property on the element directly when it is not a DOM element,
          // or when there is no matching style property that exists.
          if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
            return tween.elem[tween.prop]
          }
          // Passing an empty string as a 3rd parameter to .css will automatically
          // attempt a parseFloat and fallback to a string if the parse fails.
          // Simple values such as "10px" are parsed to Float;
          // complex values such as "rotate(1rad)" are returned as-is.
          result = jQuery.css(tween.elem, tween.prop, '');
          // Empty strings, null, undefined and "auto" are converted to 0.
          return !result || result === 'auto' ? 0 : result
        },
        set: function (tween) {
          // Use step hook for back compat.
          // Use cssHook if its there.
          // Use .style if available and use plain properties where available.
          if (jQuery.fx.step[tween.prop]) {
            jQuery.fx.step[tween.prop](tween)
          } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
            jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
          } else {
            tween.elem[tween.prop] = tween.now
          }
        }
      }
    };
    // Support: IE9
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
      set: function (tween) {
        if (tween.elem.nodeType && tween.elem.parentNode) {
          tween.elem[tween.prop] = tween.now
        }
      }
    };
    jQuery.easing = {
      linear: function (p) {
        return p
      },
      swing: function (p) {
        return 0.5 - Math.cos(p * Math.PI) / 2
      },
      _default: 'swing'
    };
    jQuery.fx = Tween.prototype.init;
    // Back Compat <1.8 extension point
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    // Animations created synchronously will run synchronously
    function createFxNow() {
      window.setTimeout(function () {
        fxNow = undefined
      });
      return fxNow = jQuery.now()
    }
    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
      var which, i = 0, attrs = { height: type };
      // If we include width, step value is 1 to do all cssExpand values,
      // otherwise step value is 2 to skip over Left and Right
      includeWidth = includeWidth ? 1 : 0;
      for (; i < 4; i += 2 - includeWidth) {
        which = cssExpand[i];
        attrs['margin' + which] = attrs['padding' + which] = type
      }
      if (includeWidth) {
        attrs.opacity = attrs.width = type
      }
      return attrs
    }
    function createTween(value, prop, animation) {
      var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
      for (; index < length; index++) {
        if (tween = collection[index].call(animation, prop, value)) {
          // We're done with this property
          return tween
        }
      }
    }
    function defaultPrefilter(elem, props, opts) {
      /* jshint validthis: true */
      var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = dataPriv.get(elem, 'fxshow');
      // Handle queue: false promises
      if (!opts.queue) {
        hooks = jQuery._queueHooks(elem, 'fx');
        if (hooks.unqueued == null) {
          hooks.unqueued = 0;
          oldfire = hooks.empty.fire;
          hooks.empty.fire = function () {
            if (!hooks.unqueued) {
              oldfire()
            }
          }
        }
        hooks.unqueued++;
        anim.always(function () {
          // Ensure the complete handler is called before this completes
          anim.always(function () {
            hooks.unqueued--;
            if (!jQuery.queue(elem, 'fx').length) {
              hooks.empty.fire()
            }
          })
        })
      }
      // Height/width overflow pass
      if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
        // Make sure that nothing sneaks out
        // Record all 3 overflow attributes because IE9-10 do not
        // change the overflow attribute when overflowX and
        // overflowY are set to the same value
        opts.overflow = [
          style.overflow,
          style.overflowX,
          style.overflowY
        ];
        // Set display property to inline-block for height/width
        // animations on inline elements that are having width/height animated
        display = jQuery.css(elem, 'display');
        // Test default display if display is currently "none"
        checkDisplay = display === 'none' ? dataPriv.get(elem, 'olddisplay') || defaultDisplay(elem.nodeName) : display;
        if (checkDisplay === 'inline' && jQuery.css(elem, 'float') === 'none') {
          style.display = 'inline-block'
        }
      }
      if (opts.overflow) {
        style.overflow = 'hidden';
        anim.always(function () {
          style.overflow = opts.overflow[0];
          style.overflowX = opts.overflow[1];
          style.overflowY = opts.overflow[2]
        })
      }
      // show/hide pass
      for (prop in props) {
        value = props[prop];
        if (rfxtypes.exec(value)) {
          delete props[prop];
          toggle = toggle || value === 'toggle';
          if (value === (hidden ? 'hide' : 'show')) {
            // If there is dataShow left over from a stopped hide or show
            // and we are going to proceed with show, we should pretend to be hidden
            if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
              hidden = true
            } else {
              continue
            }
          }
          orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)  // Any non-fx value stops us from restoring the original display value
        } else {
          display = undefined
        }
      }
      if (!jQuery.isEmptyObject(orig)) {
        if (dataShow) {
          if ('hidden' in dataShow) {
            hidden = dataShow.hidden
          }
        } else {
          dataShow = dataPriv.access(elem, 'fxshow', {})
        }
        // Store state if its toggle - enables .stop().toggle() to "reverse"
        if (toggle) {
          dataShow.hidden = !hidden
        }
        if (hidden) {
          jQuery(elem).show()
        } else {
          anim.done(function () {
            jQuery(elem).hide()
          })
        }
        anim.done(function () {
          var prop;
          dataPriv.remove(elem, 'fxshow');
          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop])
          }
        });
        for (prop in orig) {
          tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = tween.start;
            if (hidden) {
              tween.end = tween.start;
              tween.start = prop === 'width' || prop === 'height' ? 1 : 0
            }
          }
        }  // If this is a noop like .hide().hide(), restore an overwritten display value
      } else if ((display === 'none' ? defaultDisplay(elem.nodeName) : display) === 'inline') {
        style.display = display
      }
    }
    function propFilter(props, specialEasing) {
      var index, name, easing, value, hooks;
      // camelCase, specialEasing and expand cssHook pass
      for (index in props) {
        name = jQuery.camelCase(index);
        easing = specialEasing[name];
        value = props[index];
        if (jQuery.isArray(value)) {
          easing = value[1];
          value = props[index] = value[0]
        }
        if (index !== name) {
          props[name] = value;
          delete props[index]
        }
        hooks = jQuery.cssHooks[name];
        if (hooks && 'expand' in hooks) {
          value = hooks.expand(value);
          delete props[name];
          // Not quite $.extend, this won't overwrite existing keys.
          // Reusing 'index' because we have the correct "name"
          for (index in value) {
            if (!(index in props)) {
              props[index] = value[index];
              specialEasing[index] = easing
            }
          }
        } else {
          specialEasing[name] = easing
        }
      }
    }
    function Animation(elem, properties, options) {
      var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
          // Don't match elem in the :animated selector
          delete tick.elem
        }), tick = function () {
          if (stopped) {
            return false
          }
          var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
            // Support: Android 2.3
            // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
            temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
          for (; index < length; index++) {
            animation.tweens[index].run(percent)
          }
          deferred.notifyWith(elem, [
            animation,
            percent,
            remaining
          ]);
          if (percent < 1 && length) {
            return remaining
          } else {
            deferred.resolveWith(elem, [animation]);
            return false
          }
        }, animation = deferred.promise({
          elem: elem,
          props: jQuery.extend({}, properties),
          opts: jQuery.extend(true, {
            specialEasing: {},
            easing: jQuery.easing._default
          }, options),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function (prop, end) {
            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
            animation.tweens.push(tween);
            return tween
          },
          stop: function (gotoEnd) {
            var index = 0,
              // If we are going to the end, we want to run all the tweens
              // otherwise we skip this part
              length = gotoEnd ? animation.tweens.length : 0;
            if (stopped) {
              return this
            }
            stopped = true;
            for (; index < length; index++) {
              animation.tweens[index].run(1)
            }
            // Resolve when we played the last frame; otherwise, reject
            if (gotoEnd) {
              deferred.notifyWith(elem, [
                animation,
                1,
                0
              ]);
              deferred.resolveWith(elem, [
                animation,
                gotoEnd
              ])
            } else {
              deferred.rejectWith(elem, [
                animation,
                gotoEnd
              ])
            }
            return this
          }
        }), props = animation.props;
      propFilter(props, animation.opts.specialEasing);
      for (; index < length; index++) {
        result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
        if (result) {
          if (jQuery.isFunction(result.stop)) {
            jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result)
          }
          return result
        }
      }
      jQuery.map(props, createTween, animation);
      if (jQuery.isFunction(animation.opts.start)) {
        animation.opts.start.call(elem, animation)
      }
      jQuery.fx.timer(jQuery.extend(tick, {
        elem: elem,
        anim: animation,
        queue: animation.opts.queue
      }));
      // attach callbacks from options
      return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
    }
    jQuery.Animation = jQuery.extend(Animation, {
      tweeners: {
        '*': [function (prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween
          }]
      },
      tweener: function (props, callback) {
        if (jQuery.isFunction(props)) {
          callback = props;
          props = ['*']
        } else {
          props = props.match(rnotwhite)
        }
        var prop, index = 0, length = props.length;
        for (; index < length; index++) {
          prop = props[index];
          Animation.tweeners[prop] = Animation.tweeners[prop] || [];
          Animation.tweeners[prop].unshift(callback)
        }
      },
      prefilters: [defaultPrefilter],
      prefilter: function (callback, prepend) {
        if (prepend) {
          Animation.prefilters.unshift(callback)
        } else {
          Animation.prefilters.push(callback)
        }
      }
    });
    jQuery.speed = function (speed, easing, fn) {
      var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
        complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
      };
      opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
      // Normalize opt.queue - true/undefined/null -> "fx"
      if (opt.queue == null || opt.queue === true) {
        opt.queue = 'fx'
      }
      // Queueing
      opt.old = opt.complete;
      opt.complete = function () {
        if (jQuery.isFunction(opt.old)) {
          opt.old.call(this)
        }
        if (opt.queue) {
          jQuery.dequeue(this, opt.queue)
        }
      };
      return opt
    };
    jQuery.fn.extend({
      fadeTo: function (speed, to, easing, callback) {
        // Show any hidden elements after setting opacity to 0
        return this.filter(isHidden).css('opacity', 0).show()  // Animate to the value specified
.end().animate({ opacity: to }, speed, easing, callback)
      },
      animate: function (prop, speed, easing, callback) {
        var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
            // Operate on a copy of prop so per-property easing won't be lost
            var anim = Animation(this, jQuery.extend({}, prop), optall);
            // Empty animations, or finishing resolves immediately
            if (empty || dataPriv.get(this, 'finish')) {
              anim.stop(true)
            }
          };
        doAnimation.finish = doAnimation;
        return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
      },
      stop: function (type, clearQueue, gotoEnd) {
        var stopQueue = function (hooks) {
          var stop = hooks.stop;
          delete hooks.stop;
          stop(gotoEnd)
        };
        if (typeof type !== 'string') {
          gotoEnd = clearQueue;
          clearQueue = type;
          type = undefined
        }
        if (clearQueue && type !== false) {
          this.queue(type || 'fx', [])
        }
        return this.each(function () {
          var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
          if (index) {
            if (data[index] && data[index].stop) {
              stopQueue(data[index])
            }
          } else {
            for (index in data) {
              if (data[index] && data[index].stop && rrun.test(index)) {
                stopQueue(data[index])
              }
            }
          }
          for (index = timers.length; index--;) {
            if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
              timers[index].anim.stop(gotoEnd);
              dequeue = false;
              timers.splice(index, 1)
            }
          }
          // Start the next in the queue if the last step wasn't forced.
          // Timers currently will call their complete callbacks, which
          // will dequeue but only if they were gotoEnd.
          if (dequeue || !gotoEnd) {
            jQuery.dequeue(this, type)
          }
        })
      },
      finish: function (type) {
        if (type !== false) {
          type = type || 'fx'
        }
        return this.each(function () {
          var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
          // Enable finishing flag on private data
          data.finish = true;
          // Empty the queue first
          jQuery.queue(this, type, []);
          if (hooks && hooks.stop) {
            hooks.stop.call(this, true)
          }
          // Look for any active animations, and finish them
          for (index = timers.length; index--;) {
            if (timers[index].elem === this && timers[index].queue === type) {
              timers[index].anim.stop(true);
              timers.splice(index, 1)
            }
          }
          // Look for any animations in the old queue and finish them
          for (index = 0; index < length; index++) {
            if (queue[index] && queue[index].finish) {
              queue[index].finish.call(this)
            }
          }
          // Turn off finishing flag
          delete data.finish
        })
      }
    });
    jQuery.each([
      'toggle',
      'show',
      'hide'
    ], function (i, name) {
      var cssFn = jQuery.fn[name];
      jQuery.fn[name] = function (speed, easing, callback) {
        return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
      }
    });
    // Generate shortcuts for custom animations
    jQuery.each({
      slideDown: genFx('show'),
      slideUp: genFx('hide'),
      slideToggle: genFx('toggle'),
      fadeIn: { opacity: 'show' },
      fadeOut: { opacity: 'hide' },
      fadeToggle: { opacity: 'toggle' }
    }, function (name, props) {
      jQuery.fn[name] = function (speed, easing, callback) {
        return this.animate(props, speed, easing, callback)
      }
    });
    jQuery.timers = [];
    jQuery.fx.tick = function () {
      var timer, i = 0, timers = jQuery.timers;
      fxNow = jQuery.now();
      for (; i < timers.length; i++) {
        timer = timers[i];
        // Checks the timer has not already been removed
        if (!timer() && timers[i] === timer) {
          timers.splice(i--, 1)
        }
      }
      if (!timers.length) {
        jQuery.fx.stop()
      }
      fxNow = undefined
    };
    jQuery.fx.timer = function (timer) {
      jQuery.timers.push(timer);
      if (timer()) {
        jQuery.fx.start()
      } else {
        jQuery.timers.pop()
      }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
      if (!timerId) {
        timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval)
      }
    };
    jQuery.fx.stop = function () {
      window.clearInterval(timerId);
      timerId = null
    };
    jQuery.fx.speeds = {
      slow: 600,
      fast: 200,
      // Default speed
      _default: 400
    };
    // Based off of the plugin by Clint Helfers, with permission.
    // http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function (time, type) {
      time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
      type = type || 'fx';
      return this.queue(type, function (next, hooks) {
        var timeout = window.setTimeout(next, time);
        hooks.stop = function () {
          window.clearTimeout(timeout)
        }
      })
    };
    (function () {
      var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
      input.type = 'checkbox';
      // Support: iOS<=5.1, Android<=4.2+
      // Default value for a checkbox should be "on"
      support.checkOn = input.value !== '';
      // Support: IE<=11+
      // Must access selectedIndex to make default options select
      support.optSelected = opt.selected;
      // Support: Android<=2.3
      // Options inside disabled selects are incorrectly marked as disabled
      select.disabled = true;
      support.optDisabled = !opt.disabled;
      // Support: IE<=11+
      // An input loses its value after becoming a radio
      input = document.createElement('input');
      input.value = 't';
      input.type = 'radio';
      support.radioValue = input.value === 't'
    }());
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
      attr: function (name, value) {
        return access(this, jQuery.attr, name, value, arguments.length > 1)
      },
      removeAttr: function (name) {
        return this.each(function () {
          jQuery.removeAttr(this, name)
        })
      }
    });
    jQuery.extend({
      attr: function (elem, name, value) {
        var ret, hooks, nType = elem.nodeType;
        // Don't get/set attributes on text, comment and attribute nodes
        if (nType === 3 || nType === 8 || nType === 2) {
          return
        }
        // Fallback to prop when attributes are not supported
        if (typeof elem.getAttribute === 'undefined') {
          return jQuery.prop(elem, name, value)
        }
        // All attributes are lowercase
        // Grab necessary hook if one is defined
        if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
          name = name.toLowerCase();
          hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined)
        }
        if (value !== undefined) {
          if (value === null) {
            jQuery.removeAttr(elem, name);
            return
          }
          if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
            return ret
          }
          elem.setAttribute(name, value + '');
          return value
        }
        if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
          return ret
        }
        ret = jQuery.find.attr(elem, name);
        // Non-existent attributes return null, we normalize to undefined
        return ret == null ? undefined : ret
      },
      attrHooks: {
        type: {
          set: function (elem, value) {
            if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
              var val = elem.value;
              elem.setAttribute('type', value);
              if (val) {
                elem.value = val
              }
              return value
            }
          }
        }
      },
      removeAttr: function (elem, value) {
        var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
        if (attrNames && elem.nodeType === 1) {
          while (name = attrNames[i++]) {
            propName = jQuery.propFix[name] || name;
            // Boolean attributes get special treatment (#10870)
            if (jQuery.expr.match.bool.test(name)) {
              // Set corresponding property to false
              elem[propName] = false
            }
            elem.removeAttribute(name)
          }
        }
      }
    });
    // Hooks for boolean attributes
    boolHook = {
      set: function (elem, value, name) {
        if (value === false) {
          // Remove boolean attributes when set to false
          jQuery.removeAttr(elem, name)
        } else {
          elem.setAttribute(name, name)
        }
        return name
      }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
      var getter = attrHandle[name] || jQuery.find.attr;
      attrHandle[name] = function (elem, name, isXML) {
        var ret, handle;
        if (!isXML) {
          // Avoid an infinite loop by temporarily removing this function from the getter
          handle = attrHandle[name];
          attrHandle[name] = ret;
          ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
          attrHandle[name] = handle
        }
        return ret
      }
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
      prop: function (name, value) {
        return access(this, jQuery.prop, name, value, arguments.length > 1)
      },
      removeProp: function (name) {
        return this.each(function () {
          delete this[jQuery.propFix[name] || name]
        })
      }
    });
    jQuery.extend({
      prop: function (elem, name, value) {
        var ret, hooks, nType = elem.nodeType;
        // Don't get/set properties on text, comment and attribute nodes
        if (nType === 3 || nType === 8 || nType === 2) {
          return
        }
        if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
          // Fix name and attach hooks
          name = jQuery.propFix[name] || name;
          hooks = jQuery.propHooks[name]
        }
        if (value !== undefined) {
          if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
            return ret
          }
          return elem[name] = value
        }
        if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
          return ret
        }
        return elem[name]
      },
      propHooks: {
        tabIndex: {
          get: function (elem) {
            // elem.tabIndex doesn't always return the
            // correct value when it hasn't been explicitly set
            // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
            // Use proper attribute retrieval(#12072)
            var tabindex = jQuery.find.attr(elem, 'tabindex');
            return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1
          }
        }
      },
      propFix: {
        'for': 'htmlFor',
        'class': 'className'
      }
    });
    // Support: IE <=11 only
    // Accessing the selectedIndex property
    // forces the browser to respect setting selected
    // on the option
    // The getter ensures a default option is selected
    // when in an optgroup
    if (!support.optSelected) {
      jQuery.propHooks.selected = {
        get: function (elem) {
          var parent = elem.parentNode;
          if (parent && parent.parentNode) {
            parent.parentNode.selectedIndex
          }
          return null
        },
        set: function (elem) {
          var parent = elem.parentNode;
          if (parent) {
            parent.selectedIndex;
            if (parent.parentNode) {
              parent.parentNode.selectedIndex
            }
          }
        }
      }
    }
    jQuery.each([
      'tabIndex',
      'readOnly',
      'maxLength',
      'cellSpacing',
      'cellPadding',
      'rowSpan',
      'colSpan',
      'useMap',
      'frameBorder',
      'contentEditable'
    ], function () {
      jQuery.propFix[this.toLowerCase()] = this
    });
    var rclass = /[\t\r\n\f]/g;
    function getClass(elem) {
      return elem.getAttribute && elem.getAttribute('class') || ''
    }
    jQuery.fn.extend({
      addClass: function (value) {
        var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
        if (jQuery.isFunction(value)) {
          return this.each(function (j) {
            jQuery(this).addClass(value.call(this, j, getClass(this)))
          })
        }
        if (typeof value === 'string' && value) {
          classes = value.match(rnotwhite) || [];
          while (elem = this[i++]) {
            curValue = getClass(elem);
            cur = elem.nodeType === 1 && (' ' + curValue + ' ').replace(rclass, ' ');
            if (cur) {
              j = 0;
              while (clazz = classes[j++]) {
                if (cur.indexOf(' ' + clazz + ' ') < 0) {
                  cur += clazz + ' '
                }
              }
              // Only assign if different to avoid unneeded rendering.
              finalValue = jQuery.trim(cur);
              if (curValue !== finalValue) {
                elem.setAttribute('class', finalValue)
              }
            }
          }
        }
        return this
      },
      removeClass: function (value) {
        var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
        if (jQuery.isFunction(value)) {
          return this.each(function (j) {
            jQuery(this).removeClass(value.call(this, j, getClass(this)))
          })
        }
        if (!arguments.length) {
          return this.attr('class', '')
        }
        if (typeof value === 'string' && value) {
          classes = value.match(rnotwhite) || [];
          while (elem = this[i++]) {
            curValue = getClass(elem);
            // This expression is here for better compressibility (see addClass)
            cur = elem.nodeType === 1 && (' ' + curValue + ' ').replace(rclass, ' ');
            if (cur) {
              j = 0;
              while (clazz = classes[j++]) {
                // Remove *all* instances
                while (cur.indexOf(' ' + clazz + ' ') > -1) {
                  cur = cur.replace(' ' + clazz + ' ', ' ')
                }
              }
              // Only assign if different to avoid unneeded rendering.
              finalValue = jQuery.trim(cur);
              if (curValue !== finalValue) {
                elem.setAttribute('class', finalValue)
              }
            }
          }
        }
        return this
      },
      toggleClass: function (value, stateVal) {
        var type = typeof value;
        if (typeof stateVal === 'boolean' && type === 'string') {
          return stateVal ? this.addClass(value) : this.removeClass(value)
        }
        if (jQuery.isFunction(value)) {
          return this.each(function (i) {
            jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal)
          })
        }
        return this.each(function () {
          var className, i, self, classNames;
          if (type === 'string') {
            // Toggle individual class names
            i = 0;
            self = jQuery(this);
            classNames = value.match(rnotwhite) || [];
            while (className = classNames[i++]) {
              // Check each className given, space separated list
              if (self.hasClass(className)) {
                self.removeClass(className)
              } else {
                self.addClass(className)
              }
            }  // Toggle whole class name
          } else if (value === undefined || type === 'boolean') {
            className = getClass(this);
            if (className) {
              // Store className if set
              dataPriv.set(this, '__className__', className)
            }
            // If the element has a class name or if we're passed `false`,
            // then remove the whole classname (if there was one, the above saved it).
            // Otherwise bring back whatever was previously saved (if anything),
            // falling back to the empty string if nothing was stored.
            if (this.setAttribute) {
              this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '')
            }
          }
        })
      },
      hasClass: function (selector) {
        var className, elem, i = 0;
        className = ' ' + selector + ' ';
        while (elem = this[i++]) {
          if (elem.nodeType === 1 && (' ' + getClass(elem) + ' ').replace(rclass, ' ').indexOf(className) > -1) {
            return true
          }
        }
        return false
      }
    });
    var rreturn = /\r/g, rspaces = /[\x20\t\r\n\f]+/g;
    jQuery.fn.extend({
      val: function (value) {
        var hooks, ret, isFunction, elem = this[0];
        if (!arguments.length) {
          if (elem) {
            hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
              return ret
            }
            ret = elem.value;
            return typeof ret === 'string' ? // Handle most common string cases
            ret.replace(rreturn, '') : // Handle cases where value is null/undef or number
            ret == null ? '' : ret
          }
          return
        }
        isFunction = jQuery.isFunction(value);
        return this.each(function (i) {
          var val;
          if (this.nodeType !== 1) {
            return
          }
          if (isFunction) {
            val = value.call(this, i, jQuery(this).val())
          } else {
            val = value
          }
          // Treat null/undefined as ""; convert numbers to string
          if (val == null) {
            val = ''
          } else if (typeof val === 'number') {
            val += ''
          } else if (jQuery.isArray(val)) {
            val = jQuery.map(val, function (value) {
              return value == null ? '' : value + ''
            })
          }
          hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
          // If set returns undefined, fall back to normal setting
          if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
            this.value = val
          }
        })
      }
    });
    jQuery.extend({
      valHooks: {
        option: {
          get: function (elem) {
            var val = jQuery.find.attr(elem, 'value');
            return val != null ? val : // Support: IE10-11+
            // option.text throws exceptions (#14686, #14858)
            // Strip and collapse whitespace
            // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
            jQuery.trim(jQuery.text(elem)).replace(rspaces, ' ')
          }
        },
        select: {
          get: function (elem) {
            var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
            // Loop through all the selected options
            for (; i < max; i++) {
              option = options[i];
              // IE8-9 doesn't update selected after form reset (#2551)
              if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                // Get the specific value for the option
                value = jQuery(option).val();
                // We don't need an array for one selects
                if (one) {
                  return value
                }
                // Multi-Selects return an array
                values.push(value)
              }
            }
            return values
          },
          set: function (elem, value) {
            var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
            while (i--) {
              option = options[i];
              if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                optionSet = true
              }
            }
            // Force browsers to behave consistently when non-matching value is set
            if (!optionSet) {
              elem.selectedIndex = -1
            }
            return values
          }
        }
      }
    });
    // Radios and checkboxes getter/setter
    jQuery.each([
      'radio',
      'checkbox'
    ], function () {
      jQuery.valHooks[this] = {
        set: function (elem, value) {
          if (jQuery.isArray(value)) {
            return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1
          }
        }
      };
      if (!support.checkOn) {
        jQuery.valHooks[this].get = function (elem) {
          return elem.getAttribute('value') === null ? 'on' : elem.value
        }
      }
    });
    // Return jQuery for attributes-only inclusion
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
    jQuery.extend(jQuery.event, {
      trigger: function (event, data, elem, onlyHandlers) {
        var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
        cur = tmp = elem = elem || document;
        // Don't do events on text and comment nodes
        if (elem.nodeType === 3 || elem.nodeType === 8) {
          return
        }
        // focus/blur morphs to focusin/out; ensure we're not firing them right now
        if (rfocusMorph.test(type + jQuery.event.triggered)) {
          return
        }
        if (type.indexOf('.') > -1) {
          // Namespaced trigger; create a regexp to match event type in handle()
          namespaces = type.split('.');
          type = namespaces.shift();
          namespaces.sort()
        }
        ontype = type.indexOf(':') < 0 && 'on' + type;
        // Caller can pass in a jQuery.Event object, Object, or just an event type string
        event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
        // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
        event.isTrigger = onlyHandlers ? 2 : 3;
        event.namespace = namespaces.join('.');
        event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
        // Clean up the event in case it is being reused
        event.result = undefined;
        if (!event.target) {
          event.target = elem
        }
        // Clone any incoming data and prepend the event, creating the handler arg list
        data = data == null ? [event] : jQuery.makeArray(data, [event]);
        // Allow special events to draw outside the lines
        special = jQuery.event.special[type] || {};
        if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
          return
        }
        // Determine event propagation path in advance, per W3C events spec (#9951)
        // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
        if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
          bubbleType = special.delegateType || type;
          if (!rfocusMorph.test(bubbleType + type)) {
            cur = cur.parentNode
          }
          for (; cur; cur = cur.parentNode) {
            eventPath.push(cur);
            tmp = cur
          }
          // Only add window if we got to document (e.g., not plain obj or detached DOM)
          if (tmp === (elem.ownerDocument || document)) {
            eventPath.push(tmp.defaultView || tmp.parentWindow || window)
          }
        }
        // Fire handlers on the event path
        i = 0;
        while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
          event.type = i > 1 ? bubbleType : special.bindType || type;
          // jQuery handler
          handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
          if (handle) {
            handle.apply(cur, data)
          }
          // Native handler
          handle = ontype && cur[ontype];
          if (handle && handle.apply && acceptData(cur)) {
            event.result = handle.apply(cur, data);
            if (event.result === false) {
              event.preventDefault()
            }
          }
        }
        event.type = type;
        // If nobody prevented the default action, do it now
        if (!onlyHandlers && !event.isDefaultPrevented()) {
          if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
            // Call a native DOM method on the target with the same name name as the event.
            // Don't do default actions on window, that's where global variables be (#6170)
            if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
              // Don't re-trigger an onFOO event when we call its FOO() method
              tmp = elem[ontype];
              if (tmp) {
                elem[ontype] = null
              }
              // Prevent re-triggering of the same event, since we already bubbled it above
              jQuery.event.triggered = type;
              elem[type]();
              jQuery.event.triggered = undefined;
              if (tmp) {
                elem[ontype] = tmp
              }
            }
          }
        }
        return event.result
      },
      // Piggyback on a donor event to simulate a different one
      simulate: function (type, elem, event) {
        var e = jQuery.extend(new jQuery.Event, event, {
          type: type,
          isSimulated: true  // Previously, `originalEvent: {}` was set here, so stopPropagation call
                // would not be triggered on donor event, since in our own
                // jQuery.event.stopPropagation function we had a check for existence of
                // originalEvent.stopPropagation method, so, consequently it would be a noop.
                //
                // But now, this "simulate" function is used only for events
                // for which stopPropagation() is noop, so there is no need for that anymore.
                //
                // For the 1.x branch though, guard for "click" and "submit"
                // events is still used, but was moved to jQuery.event.stopPropagation function
                // because `originalEvent` should point to the original event for the constancy
                // with other events and for more focused logic
        });
        jQuery.event.trigger(e, null, elem);
        if (e.isDefaultPrevented()) {
          event.preventDefault()
        }
      }
    });
    jQuery.fn.extend({
      trigger: function (type, data) {
        return this.each(function () {
          jQuery.event.trigger(type, data, this)
        })
      },
      triggerHandler: function (type, data) {
        var elem = this[0];
        if (elem) {
          return jQuery.event.trigger(type, data, elem, true)
        }
      }
    });
    jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
      // Handle event binding
      jQuery.fn[name] = function (data, fn) {
        return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
      }
    });
    jQuery.fn.extend({
      hover: function (fnOver, fnOut) {
        return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
      }
    });
    support.focusin = 'onfocusin' in window;
    // Support: Firefox
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome, Safari
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
    if (!support.focusin) {
      jQuery.each({
        focus: 'focusin',
        blur: 'focusout'
      }, function (orig, fix) {
        // Attach a single capturing handler on the document while someone wants focusin/focusout
        var handler = function (event) {
          jQuery.event.simulate(fix, event.target, jQuery.event.fix(event))
        };
        jQuery.event.special[fix] = {
          setup: function () {
            var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
            if (!attaches) {
              doc.addEventListener(orig, handler, true)
            }
            dataPriv.access(doc, fix, (attaches || 0) + 1)
          },
          teardown: function () {
            var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
            if (!attaches) {
              doc.removeEventListener(orig, handler, true);
              dataPriv.remove(doc, fix)
            } else {
              dataPriv.access(doc, fix, attaches)
            }
          }
        }
      })
    }
    var location = window.location;
    var nonce = jQuery.now();
    var rquery = /\?/;
    // Support: Android 2.3
    // Workaround failure to string-cast null input
    jQuery.parseJSON = function (data) {
      return JSON.parse(data + '')
    };
    // Cross-browser xml parsing
    jQuery.parseXML = function (data) {
      var xml;
      if (!data || typeof data !== 'string') {
        return null
      }
      // Support: IE9
      try {
        xml = new window.DOMParser().parseFromString(data, 'text/xml')
      } catch (e) {
        xml = undefined
      }
      if (!xml || xml.getElementsByTagName('parsererror').length) {
        jQuery.error('Invalid XML: ' + data)
      }
      return xml
    };
    var rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      // #7653, #8125, #8152: local protocol detection
      rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//,
      /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
      prefilters = {},
      /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
      transports = {},
      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
      allTypes = '*/'.concat('*'),
      // Anchor tag for parsing the document origin
      originAnchor = document.createElement('a');
    originAnchor.href = location.href;
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {
      // dataTypeExpression is optional and defaults to "*"
      return function (dataTypeExpression, func) {
        if (typeof dataTypeExpression !== 'string') {
          func = dataTypeExpression;
          dataTypeExpression = '*'
        }
        var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
        if (jQuery.isFunction(func)) {
          // For each dataType in the dataTypeExpression
          while (dataType = dataTypes[i++]) {
            // Prepend if requested
            if (dataType[0] === '+') {
              dataType = dataType.slice(1) || '*';
              (structure[dataType] = structure[dataType] || []).unshift(func)  // Otherwise append
            } else {
              (structure[dataType] = structure[dataType] || []).push(func)
            }
          }
        }
      }
    }
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
      var inspected = {}, seekingTransport = structure === transports;
      function inspect(dataType) {
        var selected;
        inspected[dataType] = true;
        jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
          var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
          if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
            options.dataTypes.unshift(dataTypeOrTransport);
            inspect(dataTypeOrTransport);
            return false
          } else if (seekingTransport) {
            return !(selected = dataTypeOrTransport)
          }
        });
        return selected
      }
      return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*')
    }
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
      var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
      for (key in src) {
        if (src[key] !== undefined) {
          (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
        }
      }
      if (deep) {
        jQuery.extend(true, target, deep)
      }
      return target
    }
    /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
    function ajaxHandleResponses(s, jqXHR, responses) {
      var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
      // Remove auto dataType and get content-type in the process
      while (dataTypes[0] === '*') {
        dataTypes.shift();
        if (ct === undefined) {
          ct = s.mimeType || jqXHR.getResponseHeader('Content-Type')
        }
      }
      // Check if we're dealing with a known content-type
      if (ct) {
        for (type in contents) {
          if (contents[type] && contents[type].test(ct)) {
            dataTypes.unshift(type);
            break
          }
        }
      }
      // Check to see if we have a response for the expected dataType
      if (dataTypes[0] in responses) {
        finalDataType = dataTypes[0]
      } else {
        // Try convertible dataTypes
        for (type in responses) {
          if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
            finalDataType = type;
            break
          }
          if (!firstDataType) {
            firstDataType = type
          }
        }
        // Or just use first one
        finalDataType = finalDataType || firstDataType
      }
      // If we found a dataType
      // We add the dataType to the list if needed
      // and return the corresponding response
      if (finalDataType) {
        if (finalDataType !== dataTypes[0]) {
          dataTypes.unshift(finalDataType)
        }
        return responses[finalDataType]
      }
    }
    /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
      var conv2, current, conv, tmp, prev, converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();
      // Create converters map with lowercased keys
      if (dataTypes[1]) {
        for (conv in s.converters) {
          converters[conv.toLowerCase()] = s.converters[conv]
        }
      }
      current = dataTypes.shift();
      // Convert to each sequential dataType
      while (current) {
        if (s.responseFields[current]) {
          jqXHR[s.responseFields[current]] = response
        }
        // Apply the dataFilter if provided
        if (!prev && isSuccess && s.dataFilter) {
          response = s.dataFilter(response, s.dataType)
        }
        prev = current;
        current = dataTypes.shift();
        if (current) {
          // There's only work to do if current dataType is non-auto
          if (current === '*') {
            current = prev  // Convert response if prev dataType is non-auto and differs from current
          } else if (prev !== '*' && prev !== current) {
            // Seek a direct converter
            conv = converters[prev + ' ' + current] || converters['* ' + current];
            // If none found, seek a pair
            if (!conv) {
              for (conv2 in converters) {
                // If conv2 outputs current
                tmp = conv2.split(' ');
                if (tmp[1] === current) {
                  // If prev can be converted to accepted input
                  conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                  if (conv) {
                    // Condense equivalence converters
                    if (conv === true) {
                      conv = converters[conv2]  // Otherwise, insert the intermediate dataType
                    } else if (converters[conv2] !== true) {
                      current = tmp[0];
                      dataTypes.unshift(tmp[1])
                    }
                    break
                  }
                }
              }
            }
            // Apply converter (if not an equivalence)
            if (conv !== true) {
              // Unless errors are allowed to bubble, catch and return them
              if (conv && s.throws) {
                response = conv(response)
              } else {
                try {
                  response = conv(response)
                } catch (e) {
                  return {
                    state: 'parsererror',
                    error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                  }
                }
              }
            }
          }
        }
      }
      return {
        state: 'success',
        data: response
      }
    }
    jQuery.extend({
      // Counter for holding the number of active queries
      active: 0,
      // Last-Modified header cache for next request
      lastModified: {},
      etag: {},
      ajaxSettings: {
        url: location.href,
        type: 'GET',
        isLocal: rlocalProtocol.test(location.protocol),
        global: true,
        processData: true,
        async: true,
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/
        accepts: {
          '*': allTypes,
          text: 'text/plain',
          html: 'text/html',
          xml: 'application/xml, text/xml',
          json: 'application/json, text/javascript'
        },
        contents: {
          xml: /\bxml\b/,
          html: /\bhtml/,
          json: /\bjson\b/
        },
        responseFields: {
          xml: 'responseXML',
          text: 'responseText',
          json: 'responseJSON'
        },
        // Data converters
        // Keys separate source (or catchall "*") and destination types with a single space
        converters: {
          // Convert anything to text
          '* text': String,
          // Text to html (true = no transformation)
          'text html': true,
          // Evaluate text as a json expression
          'text json': jQuery.parseJSON,
          // Parse text as xml
          'text xml': jQuery.parseXML
        },
        // For options that shouldn't be deep extended:
        // you can add your own custom options here if
        // and when you create one that shouldn't be
        // deep extended (see ajaxExtend)
        flatOptions: {
          url: true,
          context: true
        }
      },
      // Creates a full fledged settings object into target
      // with both ajaxSettings and settings fields.
      // If target is omitted, writes into ajaxSettings.
      ajaxSetup: function (target, settings) {
        return settings ? // Building a settings object
        ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
        ajaxExtend(jQuery.ajaxSettings, target)
      },
      ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
      ajaxTransport: addToPrefiltersOrTransports(transports),
      // Main method
      ajax: function (url, options) {
        // If url is an object, simulate pre-1.5 signature
        if (typeof url === 'object') {
          options = url;
          url = undefined
        }
        // Force options to be an object
        options = options || {};
        var transport,
          // URL without anti-cache param
          cacheURL,
          // Response headers
          responseHeadersString, responseHeaders,
          // timeout handle
          timeoutTimer,
          // Url cleanup var
          urlAnchor,
          // To know if global events are to be dispatched
          fireGlobals,
          // Loop variable
          i,
          // Create the final options object
          s = jQuery.ajaxSetup({}, options),
          // Callbacks context
          callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
          globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
          deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
          // Status-dependent callbacks
          statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
          requestHeaders = {}, requestHeadersNames = {},
          // The jqXHR state
          state = 0,
          // Default abort message
          strAbort = 'canceled',
          // Fake xhr
          jqXHR = {
            readyState: 0,
            // Builds headers hashtable if needed
            getResponseHeader: function (key) {
              var match;
              if (state === 2) {
                if (!responseHeaders) {
                  responseHeaders = {};
                  while (match = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match[1].toLowerCase()] = match[2]
                  }
                }
                match = responseHeaders[key.toLowerCase()]
              }
              return match == null ? null : match
            },
            // Raw string
            getAllResponseHeaders: function () {
              return state === 2 ? responseHeadersString : null
            },
            // Caches the header
            setRequestHeader: function (name, value) {
              var lname = name.toLowerCase();
              if (!state) {
                name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                requestHeaders[name] = value
              }
              return this
            },
            // Overrides response content-type header
            overrideMimeType: function (type) {
              if (!state) {
                s.mimeType = type
              }
              return this
            },
            // Status-dependent callbacks
            statusCode: function (map) {
              var code;
              if (map) {
                if (state < 2) {
                  for (code in map) {
                    // Lazy-add the new callback in a way that preserves old ones
                    statusCode[code] = [
                      statusCode[code],
                      map[code]
                    ]
                  }
                } else {
                  // Execute the appropriate callbacks
                  jqXHR.always(map[jqXHR.status])
                }
              }
              return this
            },
            // Cancel the request
            abort: function (statusText) {
              var finalText = statusText || strAbort;
              if (transport) {
                transport.abort(finalText)
              }
              done(0, finalText);
              return this
            }
          };
        // Attach deferreds
        deferred.promise(jqXHR).complete = completeDeferred.add;
        jqXHR.success = jqXHR.done;
        jqXHR.error = jqXHR.fail;
        // Remove hash character (#7531: and string promotion)
        // Add protocol if not provided (prefilters might expect it)
        // Handle falsy url in the settings object (#10093: consistency with old signature)
        // We also use the url parameter if available
        s.url = ((url || s.url || location.href) + '').replace(rhash, '').replace(rprotocol, location.protocol + '//');
        // Alias method option to type as per ticket #12004
        s.type = options.method || options.type || s.method || s.type;
        // Extract dataTypes list
        s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
        // A cross-domain request is in order when the origin doesn't match the current origin.
        if (s.crossDomain == null) {
          urlAnchor = document.createElement('a');
          // Support: IE8-11+
          // IE throws exception if url is malformed, e.g. http://example.com:80x/
          try {
            urlAnchor.href = s.url;
            // Support: IE8-11+
            // Anchor's host property isn't correctly set when s.url is relative
            urlAnchor.href = urlAnchor.href;
            s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host
          } catch (e) {
            // If there is an error parsing the URL, assume it is crossDomain,
            // it can be rejected by the transport if it is invalid
            s.crossDomain = true
          }
        }
        // Convert data if not already a string
        if (s.data && s.processData && typeof s.data !== 'string') {
          s.data = jQuery.param(s.data, s.traditional)
        }
        // Apply prefilters
        inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
        // If request was aborted inside a prefilter, stop there
        if (state === 2) {
          return jqXHR
        }
        // We can fire global events as of now if asked to
        // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
        fireGlobals = jQuery.event && s.global;
        // Watch for a new set of requests
        if (fireGlobals && jQuery.active++ === 0) {
          jQuery.event.trigger('ajaxStart')
        }
        // Uppercase the type
        s.type = s.type.toUpperCase();
        // Determine if request has content
        s.hasContent = !rnoContent.test(s.type);
        // Save the URL in case we're toying with the If-Modified-Since
        // and/or If-None-Match header later on
        cacheURL = s.url;
        // More options handling for requests with no content
        if (!s.hasContent) {
          // If data is available, append data to url
          if (s.data) {
            cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
            // #9682: remove data so that it's not used in an eventual retry
            delete s.data
          }
          // Add anti-cache in url if needed
          if (s.cache === false) {
            s.url = rts.test(cacheURL) ? // If there is already a '_' parameter, set its value
            cacheURL.replace(rts, '$1_=' + nonce++) : // Otherwise add one to the end
            cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++
          }
        }
        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
        if (s.ifModified) {
          if (jQuery.lastModified[cacheURL]) {
            jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL])
          }
          if (jQuery.etag[cacheURL]) {
            jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL])
          }
        }
        // Set the correct header, if data is being sent
        if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
          jqXHR.setRequestHeader('Content-Type', s.contentType)
        }
        // Set the Accepts header for the server, depending on the dataType
        jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
        // Check for headers option
        for (i in s.headers) {
          jqXHR.setRequestHeader(i, s.headers[i])
        }
        // Allow custom headers/mimetypes and early abort
        if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
          // Abort if not done already and return
          return jqXHR.abort()
        }
        // Aborting is no longer a cancellation
        strAbort = 'abort';
        // Install callbacks on deferreds
        for (i in {
            success: 1,
            error: 1,
            complete: 1
          }) {
          jqXHR[i](s[i])
        }
        // Get transport
        transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
        // If no transport, we auto-abort
        if (!transport) {
          done(-1, 'No Transport')
        } else {
          jqXHR.readyState = 1;
          // Send global event
          if (fireGlobals) {
            globalEventContext.trigger('ajaxSend', [
              jqXHR,
              s
            ])
          }
          // If request was aborted inside ajaxSend, stop there
          if (state === 2) {
            return jqXHR
          }
          // Timeout
          if (s.async && s.timeout > 0) {
            timeoutTimer = window.setTimeout(function () {
              jqXHR.abort('timeout')
            }, s.timeout)
          }
          try {
            state = 1;
            transport.send(requestHeaders, done)
          } catch (e) {
            // Propagate exception as error if not done
            if (state < 2) {
              done(-1, e)  // Simply rethrow otherwise
            } else {
              throw e
            }
          }
        }
        // Callback for when everything is done
        function done(status, nativeStatusText, responses, headers) {
          var isSuccess, success, error, response, modified, statusText = nativeStatusText;
          // Called once
          if (state === 2) {
            return
          }
          // State is "done" now
          state = 2;
          // Clear timeout if it exists
          if (timeoutTimer) {
            window.clearTimeout(timeoutTimer)
          }
          // Dereference transport for early garbage collection
          // (no matter how long the jqXHR object will be used)
          transport = undefined;
          // Cache response headers
          responseHeadersString = headers || '';
          // Set readyState
          jqXHR.readyState = status > 0 ? 4 : 0;
          // Determine if successful
          isSuccess = status >= 200 && status < 300 || status === 304;
          // Get response data
          if (responses) {
            response = ajaxHandleResponses(s, jqXHR, responses)
          }
          // Convert no matter what (that way responseXXX fields are always set)
          response = ajaxConvert(s, response, jqXHR, isSuccess);
          // If successful, handle type chaining
          if (isSuccess) {
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
              modified = jqXHR.getResponseHeader('Last-Modified');
              if (modified) {
                jQuery.lastModified[cacheURL] = modified
              }
              modified = jqXHR.getResponseHeader('etag');
              if (modified) {
                jQuery.etag[cacheURL] = modified
              }
            }
            // if no content
            if (status === 204 || s.type === 'HEAD') {
              statusText = 'nocontent'  // if not modified
            } else if (status === 304) {
              statusText = 'notmodified'  // If we have data, let's convert it
            } else {
              statusText = response.state;
              success = response.data;
              error = response.error;
              isSuccess = !error
            }
          } else {
            // Extract error from statusText and normalize for non-aborts
            error = statusText;
            if (status || !statusText) {
              statusText = 'error';
              if (status < 0) {
                status = 0
              }
            }
          }
          // Set data for the fake xhr object
          jqXHR.status = status;
          jqXHR.statusText = (nativeStatusText || statusText) + '';
          // Success/Error
          if (isSuccess) {
            deferred.resolveWith(callbackContext, [
              success,
              statusText,
              jqXHR
            ])
          } else {
            deferred.rejectWith(callbackContext, [
              jqXHR,
              statusText,
              error
            ])
          }
          // Status-dependent callbacks
          jqXHR.statusCode(statusCode);
          statusCode = undefined;
          if (fireGlobals) {
            globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
              jqXHR,
              s,
              isSuccess ? success : error
            ])
          }
          // Complete
          completeDeferred.fireWith(callbackContext, [
            jqXHR,
            statusText
          ]);
          if (fireGlobals) {
            globalEventContext.trigger('ajaxComplete', [
              jqXHR,
              s
            ]);
            // Handle the global AJAX counter
            if (!--jQuery.active) {
              jQuery.event.trigger('ajaxStop')
            }
          }
        }
        return jqXHR
      },
      getJSON: function (url, data, callback) {
        return jQuery.get(url, data, callback, 'json')
      },
      getScript: function (url, callback) {
        return jQuery.get(url, undefined, callback, 'script')
      }
    });
    jQuery.each([
      'get',
      'post'
    ], function (i, method) {
      jQuery[method] = function (url, data, callback, type) {
        // Shift arguments if data argument was omitted
        if (jQuery.isFunction(data)) {
          type = type || callback;
          callback = data;
          data = undefined
        }
        // The url can be an options object (which then must have .url)
        return jQuery.ajax(jQuery.extend({
          url: url,
          type: method,
          dataType: type,
          data: data,
          success: callback
        }, jQuery.isPlainObject(url) && url))
      }
    });
    jQuery._evalUrl = function (url) {
      return jQuery.ajax({
        url: url,
        // Make this explicit, since user can override this through ajaxSetup (#11264)
        type: 'GET',
        dataType: 'script',
        async: false,
        global: false,
        'throws': true
      })
    };
    jQuery.fn.extend({
      wrapAll: function (html) {
        var wrap;
        if (jQuery.isFunction(html)) {
          return this.each(function (i) {
            jQuery(this).wrapAll(html.call(this, i))
          })
        }
        if (this[0]) {
          // The elements to wrap the target around
          wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
          if (this[0].parentNode) {
            wrap.insertBefore(this[0])
          }
          wrap.map(function () {
            var elem = this;
            while (elem.firstElementChild) {
              elem = elem.firstElementChild
            }
            return elem
          }).append(this)
        }
        return this
      },
      wrapInner: function (html) {
        if (jQuery.isFunction(html)) {
          return this.each(function (i) {
            jQuery(this).wrapInner(html.call(this, i))
          })
        }
        return this.each(function () {
          var self = jQuery(this), contents = self.contents();
          if (contents.length) {
            contents.wrapAll(html)
          } else {
            self.append(html)
          }
        })
      },
      wrap: function (html) {
        var isFunction = jQuery.isFunction(html);
        return this.each(function (i) {
          jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
        })
      },
      unwrap: function () {
        return this.parent().each(function () {
          if (!jQuery.nodeName(this, 'body')) {
            jQuery(this).replaceWith(this.childNodes)
          }
        }).end()
      }
    });
    jQuery.expr.filters.hidden = function (elem) {
      return !jQuery.expr.filters.visible(elem)
    };
    jQuery.expr.filters.visible = function (elem) {
      // Support: Opera <= 12.12
      // Opera reports offsetWidths and offsetHeights less than zero on some elements
      // Use OR instead of AND as the element is not visible if either is true
      // See tickets #10406 and #13132
      return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
      var name;
      if (jQuery.isArray(obj)) {
        // Serialize array item.
        jQuery.each(obj, function (i, v) {
          if (traditional || rbracket.test(prefix)) {
            // Treat each array item as a scalar.
            add(prefix, v)
          } else {
            // Item is non-scalar (array or object), encode its numeric index.
            buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add)
          }
        })
      } else if (!traditional && jQuery.type(obj) === 'object') {
        // Serialize object item.
        for (name in obj) {
          buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
        }
      } else {
        // Serialize scalar item.
        add(prefix, obj)
      }
    }
    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function (a, traditional) {
      var prefix, s = [], add = function (key, value) {
          // If value is a function, invoke it and return its value
          value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
          s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value)
        };
      // Set traditional to true for jQuery <= 1.3.2 behavior.
      if (traditional === undefined) {
        traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional
      }
      // If an array was passed in, assume that it is an array of form elements.
      if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
        // Serialize the form elements
        jQuery.each(a, function () {
          add(this.name, this.value)
        })
      } else {
        // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for (prefix in a) {
          buildParams(prefix, a[prefix], traditional, add)
        }
      }
      // Return the resulting serialization
      return s.join('&').replace(r20, '+')
    };
    jQuery.fn.extend({
      serialize: function () {
        return jQuery.param(this.serializeArray())
      },
      serializeArray: function () {
        return this.map(function () {
          // Can add propHook for "elements" to filter or add form elements
          var elements = jQuery.prop(this, 'elements');
          return elements ? jQuery.makeArray(elements) : this
        }).filter(function () {
          var type = this.type;
          // Use .is( ":disabled" ) so that fieldset[disabled] works
          return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type))
        }).map(function (i, elem) {
          var val = jQuery(this).val();
          return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, '\r\n')
            }
          }) : {
            name: elem.name,
            value: val.replace(rCRLF, '\r\n')
          }
        }).get()
      }
    });
    jQuery.ajaxSettings.xhr = function () {
      try {
        return new window.XMLHttpRequest
      } catch (e) {
      }
    };
    var xhrSuccessStatus = {
        // File protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE9
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
      }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
      var callback, errorCallback;
      // Cross domain only allowed if supported through XMLHttpRequest
      if (support.cors || xhrSupported && !options.crossDomain) {
        return {
          send: function (headers, complete) {
            var i, xhr = options.xhr();
            xhr.open(options.type, options.url, options.async, options.username, options.password);
            // Apply custom fields if provided
            if (options.xhrFields) {
              for (i in options.xhrFields) {
                xhr[i] = options.xhrFields[i]
              }
            }
            // Override mime type if needed
            if (options.mimeType && xhr.overrideMimeType) {
              xhr.overrideMimeType(options.mimeType)
            }
            // X-Requested-With header
            // For cross-domain requests, seeing as conditions for a preflight are
            // akin to a jigsaw puzzle, we simply never set it to be sure.
            // (it can always be set on a per-request basis or even using ajaxSetup)
            // For same-domain requests, won't change header if already provided.
            if (!options.crossDomain && !headers['X-Requested-With']) {
              headers['X-Requested-With'] = 'XMLHttpRequest'
            }
            // Set headers
            for (i in headers) {
              xhr.setRequestHeader(i, headers[i])
            }
            // Callback
            callback = function (type) {
              return function () {
                if (callback) {
                  callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
                  if (type === 'abort') {
                    xhr.abort()
                  } else if (type === 'error') {
                    // Support: IE9
                    // On a manual native abort, IE9 throws
                    // errors on any property access that is not readyState
                    if (typeof xhr.status !== 'number') {
                      complete(0, 'error')
                    } else {
                      complete(// File: protocol always yields status 0; see #8605, #14207
                      xhr.status, xhr.statusText)
                    }
                  } else {
                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE9 only
                    // IE9 has no XHR2 but throws on binary (trac-11426)
                    // For XHR2 non-text, let the caller handle it (gh-2498)
                    (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders())
                  }
                }
              }
            };
            // Listen to events
            xhr.onload = callback();
            errorCallback = xhr.onerror = callback('error');
            // Support: IE9
            // Use onreadystatechange to replace onabort
            // to handle uncaught aborts
            if (xhr.onabort !== undefined) {
              xhr.onabort = errorCallback
            } else {
              xhr.onreadystatechange = function () {
                // Check readyState before timeout as it changes
                if (xhr.readyState === 4) {
                  // Allow onerror to be called first,
                  // but that will not handle a native abort
                  // Also, save errorCallback to a variable
                  // as xhr.onerror cannot be accessed
                  window.setTimeout(function () {
                    if (callback) {
                      errorCallback()
                    }
                  })
                }
              }
            }
            // Create the abort callback
            callback = callback('abort');
            try {
              // Do send the request (this may raise an exception)
              xhr.send(options.hasContent && options.data || null)
            } catch (e) {
              // #14683: Only rethrow if this hasn't been notified as an error yet
              if (callback) {
                throw e
              }
            }
          },
          abort: function () {
            if (callback) {
              callback()
            }
          }
        }
      }
    });
    // Install script dataType
    jQuery.ajaxSetup({
      accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
      contents: { script: /\b(?:java|ecma)script\b/ },
      converters: {
        'text script': function (text) {
          jQuery.globalEval(text);
          return text
        }
      }
    });
    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter('script', function (s) {
      if (s.cache === undefined) {
        s.cache = false
      }
      if (s.crossDomain) {
        s.type = 'GET'
      }
    });
    // Bind script tag hack transport
    jQuery.ajaxTransport('script', function (s) {
      // This transport only deals with cross domain requests
      if (s.crossDomain) {
        var script, callback;
        return {
          send: function (_, complete) {
            script = jQuery('<script>').prop({
              charset: s.scriptCharset,
              src: s.url
            }).on('load error', callback = function (evt) {
              script.remove();
              callback = null;
              if (evt) {
                complete(evt.type === 'error' ? 404 : 200, evt.type)
              }
            });
            // Use native DOM manipulation to avoid our domManip AJAX trickery
            document.head.appendChild(script[0])
          },
          abort: function () {
            if (callback) {
              callback()
            }
          }
        }
      }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    // Default jsonp settings
    jQuery.ajaxSetup({
      jsonp: 'callback',
      jsonpCallback: function () {
        var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
        this[callback] = true;
        return callback
      }
    });
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
      var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
      // Handle iff the expected data type is "jsonp" or we have a parameter to set
      if (jsonProp || s.dataTypes[0] === 'jsonp') {
        // Get callback name, remembering preexisting value associated with it
        callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
        // Insert callback into url or form data
        if (jsonProp) {
          s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName)
        } else if (s.jsonp !== false) {
          s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName
        }
        // Use data converter to retrieve json after script execution
        s.converters['script json'] = function () {
          if (!responseContainer) {
            jQuery.error(callbackName + ' was not called')
          }
          return responseContainer[0]
        };
        // Force json dataType
        s.dataTypes[0] = 'json';
        // Install callback
        overwritten = window[callbackName];
        window[callbackName] = function () {
          responseContainer = arguments
        };
        // Clean-up function (fires after converters)
        jqXHR.always(function () {
          // If previous value didn't exist - remove it
          if (overwritten === undefined) {
            jQuery(window).removeProp(callbackName)  // Otherwise restore preexisting value
          } else {
            window[callbackName] = overwritten
          }
          // Save back as free
          if (s[callbackName]) {
            // Make sure that re-using the options doesn't screw things around
            s.jsonpCallback = originalSettings.jsonpCallback;
            // Save the callback name for future use
            oldCallbacks.push(callbackName)
          }
          // Call if it was a function and we have a response
          if (responseContainer && jQuery.isFunction(overwritten)) {
            overwritten(responseContainer[0])
          }
          responseContainer = overwritten = undefined
        });
        // Delegate to script
        return 'script'
      }
    });
    // Argument "data" should be string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function (data, context, keepScripts) {
      if (!data || typeof data !== 'string') {
        return null
      }
      if (typeof context === 'boolean') {
        keepScripts = context;
        context = false
      }
      context = context || document;
      var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
      // Single tag
      if (parsed) {
        return [context.createElement(parsed[1])]
      }
      parsed = buildFragment([data], context, scripts);
      if (scripts && scripts.length) {
        jQuery(scripts).remove()
      }
      return jQuery.merge([], parsed.childNodes)
    };
    // Keep a copy of the old load method
    var _load = jQuery.fn.load;
    /**
 * Load a url into a page
 */
    jQuery.fn.load = function (url, params, callback) {
      if (typeof url !== 'string' && _load) {
        return _load.apply(this, arguments)
      }
      var selector, type, response, self = this, off = url.indexOf(' ');
      if (off > -1) {
        selector = jQuery.trim(url.slice(off));
        url = url.slice(0, off)
      }
      // If it's a function
      if (jQuery.isFunction(params)) {
        // We assume that it's the callback
        callback = params;
        params = undefined  // Otherwise, build a param string
      } else if (params && typeof params === 'object') {
        type = 'POST'
      }
      // If we have elements to modify, make the request
      if (self.length > 0) {
        jQuery.ajax({
          url: url,
          // If "type" variable is undefined, then "GET" method will be used.
          // Make value of this field explicit since
          // user can override it through ajaxSetup method
          type: type || 'GET',
          dataType: 'html',
          data: params
        }).done(function (responseText) {
          // Save response for use in complete callback
          response = arguments;
          self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
          // Exclude scripts to avoid IE 'Permission Denied' errors
          jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
          responseText)  // If the request succeeds, this function gets "data", "status", "jqXHR"
                         // but they are ignored because response was set above.
                         // If it fails, this function gets "jqXHR", "status", "error"
        }).always(callback && function (jqXHR, status) {
          self.each(function () {
            callback.apply(self, response || [
              jqXHR.responseText,
              status,
              jqXHR
            ])
          })
        })
      }
      return this
    };
    // Attach a bunch of functions for handling common AJAX events
    jQuery.each([
      'ajaxStart',
      'ajaxStop',
      'ajaxComplete',
      'ajaxError',
      'ajaxSuccess',
      'ajaxSend'
    ], function (i, type) {
      jQuery.fn[type] = function (fn) {
        return this.on(type, fn)
      }
    });
    jQuery.expr.filters.animated = function (elem) {
      return jQuery.grep(jQuery.timers, function (fn) {
        return elem === fn.elem
      }).length
    };
    /**
 * Gets a window from an element
 */
    function getWindow(elem) {
      return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
    }
    jQuery.offset = {
      setOffset: function (elem, options, i) {
        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
        // Set position first, in-case top/left are set even on static elem
        if (position === 'static') {
          elem.style.position = 'relative'
        }
        curOffset = curElem.offset();
        curCSSTop = jQuery.css(elem, 'top');
        curCSSLeft = jQuery.css(elem, 'left');
        calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
        // Need to be able to calculate position if either
        // top or left is auto and position is either absolute or fixed
        if (calculatePosition) {
          curPosition = curElem.position();
          curTop = curPosition.top;
          curLeft = curPosition.left
        } else {
          curTop = parseFloat(curCSSTop) || 0;
          curLeft = parseFloat(curCSSLeft) || 0
        }
        if (jQuery.isFunction(options)) {
          // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
          options = options.call(elem, i, jQuery.extend({}, curOffset))
        }
        if (options.top != null) {
          props.top = options.top - curOffset.top + curTop
        }
        if (options.left != null) {
          props.left = options.left - curOffset.left + curLeft
        }
        if ('using' in options) {
          options.using.call(elem, props)
        } else {
          curElem.css(props)
        }
      }
    };
    jQuery.fn.extend({
      offset: function (options) {
        if (arguments.length) {
          return options === undefined ? this : this.each(function (i) {
            jQuery.offset.setOffset(this, options, i)
          })
        }
        var docElem, win, elem = this[0], box = {
            top: 0,
            left: 0
          }, doc = elem && elem.ownerDocument;
        if (!doc) {
          return
        }
        docElem = doc.documentElement;
        // Make sure it's not a disconnected DOM node
        if (!jQuery.contains(docElem, elem)) {
          return box
        }
        box = elem.getBoundingClientRect();
        win = getWindow(doc);
        return {
          top: box.top + win.pageYOffset - docElem.clientTop,
          left: box.left + win.pageXOffset - docElem.clientLeft
        }
      },
      position: function () {
        if (!this[0]) {
          return
        }
        var offsetParent, offset, elem = this[0], parentOffset = {
            top: 0,
            left: 0
          };
        // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
        // because it is its only offset parent
        if (jQuery.css(elem, 'position') === 'fixed') {
          // Assume getBoundingClientRect is there when computed position is fixed
          offset = elem.getBoundingClientRect()
        } else {
          // Get *real* offsetParent
          offsetParent = this.offsetParent();
          // Get correct offsets
          offset = this.offset();
          if (!jQuery.nodeName(offsetParent[0], 'html')) {
            parentOffset = offsetParent.offset()
          }
          // Add offsetParent borders
          parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
          parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true)
        }
        // Subtract parent offsets and element margins
        return {
          top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
          left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
        }
      },
      // This method will return documentElement in the following cases:
      // 1) For the element inside the iframe without offsetParent, this method will return
      //    documentElement of the parent window
      // 2) For the hidden or detached element
      // 3) For body or html element, i.e. in case of the html node - it will return itself
      //
      // but those exceptions were never presented as a real life use-cases
      // and might be considered as more preferable results.
      //
      // This logic, however, is not guaranteed and can change at any point in the future
      offsetParent: function () {
        return this.map(function () {
          var offsetParent = this.offsetParent;
          while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
            offsetParent = offsetParent.offsetParent
          }
          return offsetParent || documentElement
        })
      }
    });
    // Create scrollLeft and scrollTop methods
    jQuery.each({
      scrollLeft: 'pageXOffset',
      scrollTop: 'pageYOffset'
    }, function (method, prop) {
      var top = 'pageYOffset' === prop;
      jQuery.fn[method] = function (val) {
        return access(this, function (elem, method, val) {
          var win = getWindow(elem);
          if (val === undefined) {
            return win ? win[prop] : elem[method]
          }
          if (win) {
            win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset)
          } else {
            elem[method] = val
          }
        }, method, val, arguments.length)
      }
    });
    // Support: Safari<7-8+, Chrome<37-44+
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each([
      'top',
      'left'
    ], function (i, prop) {
      jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
        if (computed) {
          computed = curCSS(elem, prop);
          // If curCSS returns percentage, fallback to offset
          return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed
        }
      })
    });
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
      Height: 'height',
      Width: 'width'
    }, function (name, type) {
      jQuery.each({
        padding: 'inner' + name,
        content: type,
        '': 'outer' + name
      }, function (defaultExtra, funcName) {
        // Margin is only for outerHeight, outerWidth
        jQuery.fn[funcName] = function (margin, value) {
          var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
          return access(this, function (elem, type, value) {
            var doc;
            if (jQuery.isWindow(elem)) {
              // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
              // isn't a whole lot we can do. See pull request at this URL for discussion:
              // https://github.com/jquery/jquery/pull/764
              return elem.document.documentElement['client' + name]
            }
            // Get document width or height
            if (elem.nodeType === 9) {
              doc = elem.documentElement;
              // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
              // whichever is greatest
              return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name])
            }
            return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
            jQuery.css(elem, type, extra) : // Set width or height on the element
            jQuery.style(elem, type, value, extra)
          }, type, chainable ? margin : undefined, chainable, null)
        }
      })
    });
    jQuery.fn.extend({
      bind: function (types, data, fn) {
        return this.on(types, null, data, fn)
      },
      unbind: function (types, fn) {
        return this.off(types, null, fn)
      },
      delegate: function (selector, types, data, fn) {
        return this.on(types, selector, data, fn)
      },
      undelegate: function (selector, types, fn) {
        // ( namespace ) or ( selector, types [, fn] )
        return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn)
      },
      size: function () {
        return this.length
      }
    });
    jQuery.fn.andSelf = jQuery.fn.addBack;
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    if (typeof define === 'function' && define.amd) {
      define('jquery', [], function () {
        return jQuery
      })
    }
    var
      // Map over jQuery in case of overwrite
      _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
      _$ = window.$;
    jQuery.noConflict = function (deep) {
      if (window.$ === jQuery) {
        window.$ = _$
      }
      if (deep && window.jQuery === jQuery) {
        window.jQuery = _jQuery
      }
      return jQuery
    };
    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (!noGlobal) {
      window.jQuery = window.$ = jQuery
    }
    return jQuery
  }))
});
// source: node_modules/daisho-riot/lib/controls/text.js
require.define('daisho-riot/lib/controls/text', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, Text, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  module.exports = Text = function (superClass) {
    extend(Text, superClass);
    function Text() {
      return Text.__super__.constructor.apply(this, arguments)
    }
    Text.prototype.tag = 'daisho-text-control';
    Text.prototype.type = 'text';
    Text.prototype.html = require('daisho-riot/templates/text');
    Text.prototype.realtime = false;
    Text.prototype.init = function () {
      return Text.__super__.init.apply(this, arguments)
    };
    Text.prototype.keyup = function () {
      if (this.realtime) {
        this.change.apply(this, arguments)
      }
      return true
    };
    return Text
  }(Control)  //# sourceMappingURL=text.js.map
});
// source: node_modules/daisho-riot/templates/text.html
require.define('daisho-riot/templates/text', function (module, exports, __dirname, __filename, process) {
  module.exports = '<input id="{ input.name }" name="{ name || input.name }" type="{ type }" class="{ filled: input.ref(input.name) }" onchange="{ change }" onblur="{ change }" onkeyup="{ keyup }" value="{ input.ref(input.name) }">\n<label for="{ input.name }">{ placeholder }</label>\n'
});
// source: node_modules/daisho-riot/lib/controls/inline-text.js
require.define('daisho-riot/lib/controls/inline-text', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var InlineText, Text, placeholder, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Text = require('daisho-riot/lib/controls/text');
  placeholder = require('daisho-riot/lib/utils/placeholder');
  module.exports = InlineText = function (superClass) {
    extend(InlineText, superClass);
    function InlineText() {
      return InlineText.__super__.constructor.apply(this, arguments)
    }
    InlineText.prototype.tag = 'daisho-inline-text-control';
    InlineText.prototype.html = require('daisho-riot/templates/inline-text');
    InlineText.prototype.type = 'text';
    InlineText.prototype.label = '';
    InlineText.prototype.init = function () {
      InlineText.__super__.init.apply(this, arguments);
      return this.on('updated', function (_this) {
        return function () {
          var el;
          el = _this.root.getElementsByTagName(_this.formElement)[0];
          if (_this.type !== 'password') {
            return placeholder(el)
          }
        }
      }(this))
    };
    return InlineText
  }(Text)  //# sourceMappingURL=inline-text.js.map
});
// source: node_modules/daisho-riot/lib/utils/placeholder.js
require.define('daisho-riot/lib/utils/placeholder', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var hidePlaceholderOnFocus, unfocusOnAnElement;
  hidePlaceholderOnFocus = function (event) {
    var target;
    target = event.currentTarget ? event.currentTarget : event.srcElement;
    if (target.value === target.getAttribute('placeholder')) {
      return target.value = ''
    }
  };
  unfocusOnAnElement = function (event) {
    var target;
    target = event.currentTarget ? event.currentTarget : event.srcElement;
    if (target.value === '') {
      return target.value = target.getAttribute('placeholder')
    }
  };
  if (document.createElement('input').placeholder != null) {
    module.exports = function () {
    }
  } else {
    module.exports = function (input) {
      var ref;
      input = (ref = input[0]) != null ? ref : input;
      if (input._placeholdered != null) {
        return
      }
      Object.defineProperty(input, '_placeholdered', {
        value: true,
        writable: true
      });
      if (!input.value) {
        input.value = input.getAttribute('placeholder')
      }
      if (input.addEventListener) {
        input.addEventListener('click', hidePlaceholderOnFocus, false);
        return input.addEventListener('blur', unfocusOnAnElement, false)
      } else if (input.attachEvent) {
        input.attachEvent('onclick', hidePlaceholderOnFocus);
        return input.attachEvent('onblur', unfocusOnAnElement)
      }
    }
  }  //# sourceMappingURL=placeholder.js.map
});
// source: node_modules/daisho-riot/templates/inline-text.html
require.define('daisho-riot/templates/inline-text', function (module, exports, __dirname, __filename, process) {
  module.exports = '<input id="{ input.name }" name="{ name || input.name }" type="{ type }" class="{ filled: input.ref(input.name) }" onchange="{ change }" onblur="{ change }" onkeyup="{ keyup }" value="{ input.ref(input.name) }" placeholder="{ placeholder }">\n<label for="{ input.name }" if="{ label }">{ label }</label>\n\n'
});
// source: node_modules/daisho-riot/lib/controls/static-text.js
require.define('daisho-riot/lib/controls/static-text', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, StaticText, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  module.exports = StaticText = function (superClass) {
    extend(StaticText, superClass);
    function StaticText() {
      return StaticText.__super__.constructor.apply(this, arguments)
    }
    StaticText.prototype.tag = 'daisho-static-text';
    StaticText.prototype.html = '<div>{ input.ref.get(input.name) }</div>';
    StaticText.prototype.init = function () {
      return StaticText.__super__.init.apply(this, arguments)
    };
    return StaticText
  }(Control)  //# sourceMappingURL=static-text.js.map
});
// source: node_modules/daisho-riot/lib/controls/static-date.js
require.define('daisho-riot/lib/controls/static-date', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, StaticDate, moment, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  moment = require('moment/moment');
  module.exports = StaticDate = function (superClass) {
    extend(StaticDate, superClass);
    function StaticDate() {
      return StaticDate.__super__.constructor.apply(this, arguments)
    }
    StaticDate.prototype.tag = 'daisho-static-date';
    StaticDate.prototype.html = '<div>{ format(input.ref.get(input.name)) }</div>';
    StaticDate.prototype.init = function () {
      return StaticDate.__super__.init.apply(this, arguments)
    };
    StaticDate.prototype.format = function (date) {
      return moment(date).format('LLL')
    };
    return StaticDate
  }(Control)  //# sourceMappingURL=static-date.js.map
});
// source: node_modules/daisho-riot/node_modules/moment/moment.js
require.define('moment/moment', function (module, exports, __dirname, __filename, process) {
  //! moment.js
  //! version : 2.12.0
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com
  ;
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory()
  }(this, function () {
    'use strict';
    var hookCallback;
    function utils_hooks__hooks() {
      return hookCallback.apply(null, arguments)
    }
    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
      hookCallback = callback
    }
    function isArray(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]'
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]'
    }
    function map(arr, fn) {
      var res = [], i;
      for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i))
      }
      return res
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b)
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i]
        }
      }
      if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString
      }
      if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf
      }
      return a
    }
    function create_utc__createUTC(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc()
    }
    function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false
      }
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags()
      }
      return m._pf
    }
    function valid__isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m);
        m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
        if (m._strict) {
          m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined
        }
      }
      return m._isValid
    }
    function valid__createInvalid(flags) {
      var m = create_utc__createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags)
      } else {
        getParsingFlags(m).userInvalidated = true
      }
      return m
    }
    function isUndefined(input) {
      return input === void 0
    }
    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = utils_hooks__hooks.momentProperties = [];
    function copyConfig(to, from) {
      var i, prop, val;
      if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject
      }
      if (!isUndefined(from._i)) {
        to._i = from._i
      }
      if (!isUndefined(from._f)) {
        to._f = from._f
      }
      if (!isUndefined(from._l)) {
        to._l = from._l
      }
      if (!isUndefined(from._strict)) {
        to._strict = from._strict
      }
      if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm
      }
      if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC
      }
      if (!isUndefined(from._offset)) {
        to._offset = from._offset
      }
      if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from)
      }
      if (!isUndefined(from._locale)) {
        to._locale = from._locale
      }
      if (momentProperties.length > 0) {
        for (i in momentProperties) {
          prop = momentProperties[i];
          val = from[prop];
          if (!isUndefined(val)) {
            to[prop] = val
          }
        }
      }
      return to
    }
    var updateInProgress = false;
    // Moment prototype object
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
        updateInProgress = true;
        utils_hooks__hooks.updateOffset(this);
        updateInProgress = false
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number)
      } else {
        return Math.floor(number)
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber)
      }
      return value
    }
    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
      for (i = 0; i < len; i++) {
        if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
          diffs++
        }
      }
      return diffs + lengthDiff
    }
    function warn(msg) {
      if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
        console.warn('Deprecation warning: ' + msg)
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function () {
        if (firstTime) {
          warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + new Error().stack);
          firstTime = false
        }
        return fn.apply(this, arguments)
      }, fn)
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true
      }
    }
    utils_hooks__hooks.suppressDeprecationWarnings = false;
    function isFunction(input) {
      return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]'
    }
    function isObject(input) {
      return Object.prototype.toString.call(input) === '[object Object]'
    }
    function locale_set__set(config) {
      var prop, i;
      for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
          this[i] = prop
        } else {
          this['_' + i] = prop
        }
      }
      this._config = config;
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _ordinalParseLenient.
      this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source)
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop])
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop]
          } else {
            delete res[prop]
          }
        }
      }
      return res
    }
    function Locale(config) {
      if (config != null) {
        this.set(config)
      }
    }
    // internal storage for locale config files
    var locales = {};
    var globalLocale;
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key
    }
    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
      var i = 0, j, next, locale, split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
          locale = loadLocale(split.slice(0, j).join('-'));
          if (locale) {
            return locale
          }
          if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
            //the next array item is better than a shallower substring of this one
            break
          }
          j--
        }
        i++
      }
      return null
    }
    function loadLocale(name) {
      var oldLocale = null;
      // TODO: Find a better way to register and load all the locales in Node
      if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
        try {
          oldLocale = globalLocale._abbr;
          require('./locale/' + name);
          // because defineLocale currently also sets the global locale, we
          // want to undo that for lazy loaded locales
          locale_locales__getSetGlobalLocale(oldLocale)
        } catch (e) {
        }
      }
      return locales[name]
    }
    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined(values)) {
          data = locale_locales__getLocale(key)
        } else {
          data = defineLocale(key, values)
        }
        if (data) {
          // moment.duration._locale = moment._locale = data;
          globalLocale = data
        }
      }
      return globalLocale._abbr
    }
    function defineLocale(name, config) {
      if (config !== null) {
        config.abbr = name;
        if (locales[name] != null) {
          deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale');
          config = mergeConfigs(locales[name]._config, config)
        } else if (config.parentLocale != null) {
          if (locales[config.parentLocale] != null) {
            config = mergeConfigs(locales[config.parentLocale]._config, config)
          } else {
            // treat as if there is no base config
            deprecateSimple('parentLocaleUndefined', 'specified parentLocale is not defined yet')
          }
        }
        locales[name] = new Locale(config);
        // backwards compat for now: also set the locale
        locale_locales__getSetGlobalLocale(name);
        return locales[name]
      } else {
        // useful for testing
        delete locales[name];
        return null
      }
    }
    function updateLocale(name, config) {
      if (config != null) {
        var locale;
        if (locales[name] != null) {
          config = mergeConfigs(locales[name]._config, config)
        }
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;
        // backwards compat for now: also set the locale
        locale_locales__getSetGlobalLocale(name)
      } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale
          } else if (locales[name] != null) {
            delete locales[name]
          }
        }
      }
      return locales[name]
    }
    // returns locale data
    function locale_locales__getLocale(key) {
      var locale;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr
      }
      if (!key) {
        return globalLocale
      }
      if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
          return locale
        }
        key = [key]
      }
      return chooseLocale(key)
    }
    function locale_locales__listLocales() {
      return Object.keys(locales)
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit
    }
    function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop]
          }
        }
      }
      return normalizedInput
    }
    function makeGetSet(unit, keepTime) {
      return function (value) {
        if (value != null) {
          get_set__set(this, unit, value);
          utils_hooks__hooks.updateOffset(this, keepTime);
          return this
        } else {
          return get_set__get(this, unit)
        }
      }
    }
    function get_set__get(mom, unit) {
      return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN
    }
    function get_set__set(mom, unit, value) {
      if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value)
      }
    }
    // MOMENTS
    function getSet(units, value) {
      var unit;
      if (typeof units === 'object') {
        for (unit in units) {
          this.set(unit, units[unit])
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units](value)
        }
      }
      return this
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
      return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
        func = function () {
          return this[callback]()
        }
      }
      if (token) {
        formatTokenFunctions[token] = func
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function () {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2])
        }
      }
      if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
          return this.localeData().ordinal(func.apply(this, arguments), token)
        }
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '')
      }
      return input.replace(/\\/g, '')
    }
    function makeFormatFunction(format) {
      var array = format.match(formattingTokens), i, length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]]
        } else {
          array[i] = removeFormattingTokens(array[i])
        }
      }
      return function (mom) {
        var output = '';
        for (i = 0; i < length; i++) {
          output += array[i] instanceof Function ? array[i].call(mom, format) : array[i]
        }
        return output
      }
    }
    // format date using native date object
    function formatMoment(m, format) {
      if (!m.isValid()) {
        return m.localeData().invalidDate()
      }
      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
      return formatFunctions[format](m)
    }
    function expandFormat(format, locale) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1
      }
      return format
    }
    var match1 = /\d/;
    //       0 - 9
    var match2 = /\d\d/;
    //      00 - 99
    var match3 = /\d{3}/;
    //     000 - 999
    var match4 = /\d{4}/;
    //    0000 - 9999
    var match6 = /[+-]?\d{6}/;
    // -999999 - 999999
    var match1to2 = /\d\d?/;
    //       0 - 99
    var match3to4 = /\d\d\d\d?/;
    //     999 - 9999
    var match5to6 = /\d\d\d\d\d\d?/;
    //   99999 - 999999
    var match1to3 = /\d{1,3}/;
    //       0 - 999
    var match1to4 = /\d{1,4}/;
    //       0 - 9999
    var match1to6 = /[+-]?\d{1,6}/;
    // -999999 - 999999
    var matchUnsigned = /\d+/;
    //       0 - inf
    var matchSigned = /[+-]?\d+/;
    //    -inf - inf
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    // +00 -00 +00:00 -00:00 +0000 -0000 or Z
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    // 123456789 123456789.123
    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var regexes = {};
    function addRegexToken(token, regex, strictRegex) {
      regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return isStrict && strictRegex ? strictRegex : regex
      }
    }
    function getParseRegexForToken(token, config) {
      if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token))
      }
      return regexes[token](config._strict, config._locale)
    }
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
      return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4
      }))
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')
    }
    var tokens = {};
    function addParseToken(token, callback) {
      var i, func = callback;
      if (typeof token === 'string') {
        token = [token]
      }
      if (typeof callback === 'number') {
        func = function (input, array) {
          array[callback] = toInt(input)
        }
      }
      for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func
      }
    }
    function addWeekParseToken(token, callback) {
      addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token)
      })
    }
    function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token)
      }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;
    function daysInMonth(year, month) {
      return new Date(Date.UTC(year, month + 1, 0)).getUTCDate()
    }
    // FORMATTING
    addFormatToken('M', [
      'MM',
      2
    ], 'Mo', function () {
      return this.month() + 1
    });
    addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format)
    });
    addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format)
    });
    // ALIASES
    addUnitAlias('month', 'M');
    // PARSING
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
      return locale.monthsShortRegex(isStrict)
    });
    addRegexToken('MMMM', function (isStrict, locale) {
      return locale.monthsRegex(isStrict)
    });
    addParseToken([
      'M',
      'MM'
    ], function (input, array) {
      array[MONTH] = toInt(input) - 1
    });
    addParseToken([
      'MMM',
      'MMMM'
    ], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
        array[MONTH] = month
      } else {
        getParsingFlags(config).invalidMonth = input
      }
    });
    // LOCALES
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
      return isArray(this._months) ? this._months[m.month()] : this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()]
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
      return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()]
    }
    function localeMonthsParse(monthName, format, strict) {
      var i, mom, regex;
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = []
      }
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = create_utc__createUTC([
          2000,
          i
        ]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i')
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i')
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i
        }
      }
    }
    // MOMENTS
    function setMonth(mom, value) {
      var dayOfMonth;
      if (!mom.isValid()) {
        // No op
        return mom
      }
      if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
          value = toInt(value)
        } else {
          value = mom.localeData().monthsParse(value);
          // TODO: Another silent failure?
          if (typeof value !== 'number') {
            return mom
          }
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        utils_hooks__hooks.updateOffset(this, true);
        return this
      } else {
        return get_set__get(this, 'Month')
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month())
    }
    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this)
        }
        if (isStrict) {
          return this._monthsShortStrictRegex
        } else {
          return this._monthsShortRegex
        }
      } else {
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex
      }
    }
    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this)
        }
        if (isStrict) {
          return this._monthsStrictRegex
        } else {
          return this._monthsRegex
        }
      } else {
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = create_utc__createUTC([
          2000,
          i
        ]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''))
      }
      // Sorting makes sure if one month (or abbr) is a prefix of another it
      // will match the longer piece.
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i])
      }
      this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')$', 'i');
      this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')$', 'i')
    }
    function checkOverflow(m) {
      var overflow;
      var a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
          overflow = WEEK
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY
        }
        getParsingFlags(m).overflow = overflow
      }
      return m
    }
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    var isoDates = [
      [
        'YYYYYY-MM-DD',
        /[+-]\d{6}-\d\d-\d\d/
      ],
      [
        'YYYY-MM-DD',
        /\d{4}-\d\d-\d\d/
      ],
      [
        'GGGG-[W]WW-E',
        /\d{4}-W\d\d-\d/
      ],
      [
        'GGGG-[W]WW',
        /\d{4}-W\d\d/,
        false
      ],
      [
        'YYYY-DDD',
        /\d{4}-\d{3}/
      ],
      [
        'YYYY-MM',
        /\d{4}-\d\d/,
        false
      ],
      [
        'YYYYYYMMDD',
        /[+-]\d{10}/
      ],
      [
        'YYYYMMDD',
        /\d{8}/
      ],
      // YYYYMM is NOT allowed by the standard
      [
        'GGGG[W]WWE',
        /\d{4}W\d{3}/
      ],
      [
        'GGGG[W]WW',
        /\d{4}W\d{2}/,
        false
      ],
      [
        'YYYYDDD',
        /\d{7}/
      ]
    ];
    // iso time formats and regexes
    var isoTimes = [
      [
        'HH:mm:ss.SSSS',
        /\d\d:\d\d:\d\d\.\d+/
      ],
      [
        'HH:mm:ss,SSSS',
        /\d\d:\d\d:\d\d,\d+/
      ],
      [
        'HH:mm:ss',
        /\d\d:\d\d:\d\d/
      ],
      [
        'HH:mm',
        /\d\d:\d\d/
      ],
      [
        'HHmmss.SSSS',
        /\d\d\d\d\d\d\.\d+/
      ],
      [
        'HHmmss,SSSS',
        /\d\d\d\d\d\d,\d+/
      ],
      [
        'HHmmss',
        /\d\d\d\d\d\d/
      ],
      [
        'HHmm',
        /\d\d\d\d/
      ],
      [
        'HH',
        /\d\d/
      ]
    ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    // date from iso format
    function configFromISO(config) {
      var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
      if (match) {
        getParsingFlags(config).iso = true;
        for (i = 0, l = isoDates.length; i < l; i++) {
          if (isoDates[i][1].exec(match[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break
          }
        }
        if (dateFormat == null) {
          config._isValid = false;
          return
        }
        if (match[3]) {
          for (i = 0, l = isoTimes.length; i < l; i++) {
            if (isoTimes[i][1].exec(match[3])) {
              // match[2] should be 'T' or space
              timeFormat = (match[2] || ' ') + isoTimes[i][0];
              break
            }
          }
          if (timeFormat == null) {
            config._isValid = false;
            return
          }
        }
        if (!allowTime && timeFormat != null) {
          config._isValid = false;
          return
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = 'Z'
          } else {
            config._isValid = false;
            return
          }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config)
      } else {
        config._isValid = false
      }
    }
    // date from iso format or fallback
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
        config._d = new Date(+matched[1]);
        return
      }
      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
        utils_hooks__hooks.createFromInputFallback(config)
      }
    }
    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''))
    });
    function createDate(y, m, d, h, M, s, ms) {
      //can't just apply() to create a date:
      //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
      var date = new Date(y, m, d, h, M, s, ms);
      //the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y)
      }
      return date
    }
    function createUTCDate(y) {
      var date = new Date(Date.UTC.apply(null, arguments));
      //the Date.UTC function remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y)
      }
      return date
    }
    // FORMATTING
    addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? '' + y : '+' + y
    });
    addFormatToken(0, [
      'YY',
      2
    ], 0, function () {
      return this.year() % 100
    });
    addFormatToken(0, [
      'YYYY',
      4
    ], 0, 'year');
    addFormatToken(0, [
      'YYYYY',
      5
    ], 0, 'year');
    addFormatToken(0, [
      'YYYYYY',
      6,
      true
    ], 0, 'year');
    // ALIASES
    addUnitAlias('year', 'y');
    // PARSING
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
      'YYYYY',
      'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input)
    });
    addParseToken('YY', function (input, array) {
      array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input)
    });
    addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10)
    });
    // HELPERS
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
    }
    // HOOKS
    utils_hooks__hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000)
    };
    // MOMENTS
    var getSetYear = makeGetSet('FullYear', false);
    function getIsLeapYear() {
      return isLeapYear(this.year())
    }
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
      var
        // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1
    }
    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year)
      } else {
        resYear = year;
        resDayOfYear = dayOfYear
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      }
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy)
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1
      } else {
        resYear = mom.year();
        resWeek = week
      }
      return {
        week: resWeek,
        year: resYear
      }
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7
    }
    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
      if (a != null) {
        return a
      }
      if (b != null) {
        return b
      }
      return c
    }
    function currentDateArray(config) {
      // hooks is actually the exported moment object
      var nowValue = new Date(utils_hooks__hooks.now());
      if (config._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ]
      }
      return [
        nowValue.getFullYear(),
        nowValue.getMonth(),
        nowValue.getDate()
      ]
    }
    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
      var i, date, input = [], currentDate, yearToUse;
      if (config._d) {
        return
      }
      currentDate = currentDateArray(config);
      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config)
      }
      //if the day of the year is set, figure out what it is
      if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
        if (config._dayOfYear > daysInYear(yearToUse)) {
          getParsingFlags(config)._overflowDayOfYear = true
        }
        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate()
      }
      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i]
      }
      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
        config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i]
      }
      // Check for 24:00:00.000
      if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0
      }
      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm)
      }
      if (config._nextDay) {
        config._a[HOUR] = 24
      }
    }
    function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true
        }
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;
        weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
        week = defaults(w.w, 1);
        if (w.d != null) {
          // weekday -- low day numbers are considered next week
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true
          }
        } else if (w.e != null) {
          // local weekday -- counting starts from begining of week
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true
          }
        } else {
          // default to begining of week
          weekday = dow
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true
      } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear
      }
    }
    // constant that refers to the ISO standard
    utils_hooks__hooks.ISO_8601 = function () {
    };
    // date from string and format string
    function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === utils_hooks__hooks.ISO_8601) {
        configFromISO(config);
        return
      }
      config._a = [];
      getParsingFlags(config).empty = true;
      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped)
          }
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          totalParsedInputLength += parsedInput.length
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false
          } else {
            getParsingFlags(config).unusedTokens.push(token)
          }
          addTimeToArrayFromToken(token, parsedInput, config)
        } else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token)
        }
      }
      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string)
      }
      // clear _12h flag if hour is <= 12
      if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined
      }
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
      configFromArray(config);
      checkOverflow(config)
    }
    function meridiemFixWrap(locale, hour, meridiem) {
      var isPm;
      if (meridiem == null) {
        // nothing to do
        return hour
      }
      if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem)
      } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
          hour += 12
        }
        if (!isPm && hour === 12) {
          hour = 0
        }
        return hour
      } else {
        // this is not supposed to happen
        return hour
      }
    }
    // date from string and array of format strings
    function configFromStringAndArray(config) {
      var tempConfig, bestMoment, scoreToBeat, i, currentScore;
      if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return
      }
      for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);
        if (!valid__isValid(tempConfig)) {
          continue
        }
        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (scoreToBeat == null || currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempConfig
        }
      }
      extend(config, bestMoment || tempConfig)
    }
    function configFromObject(config) {
      if (config._d) {
        return
      }
      var i = normalizeObjectUnits(config._i);
      config._a = map([
        i.year,
        i.month,
        i.day || i.date,
        i.hour,
        i.minute,
        i.second,
        i.millisecond
      ], function (obj) {
        return obj && parseInt(obj, 10)
      });
      configFromArray(config)
    }
    function createFromConfig(config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined
      }
      return res
    }
    function prepareConfig(config) {
      var input = config._i, format = config._f;
      config._locale = config._locale || locale_locales__getLocale(config._l);
      if (input === null || format === undefined && input === '') {
        return valid__createInvalid({ nullInput: true })
      }
      if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input)
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input))
      } else if (isArray(format)) {
        configFromStringAndArray(config)
      } else if (format) {
        configFromStringAndFormat(config)
      } else if (isDate(input)) {
        config._d = input
      } else {
        configFromInput(config)
      }
      if (!valid__isValid(config)) {
        config._d = null
      }
      return config
    }
    function configFromInput(config) {
      var input = config._i;
      if (input === undefined) {
        config._d = new Date(utils_hooks__hooks.now())
      } else if (isDate(input)) {
        config._d = new Date(+input)
      } else if (typeof input === 'string') {
        configFromString(config)
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
          return parseInt(obj, 10)
        });
        configFromArray(config)
      } else if (typeof input === 'object') {
        configFromObject(config)
      } else if (typeof input === 'number') {
        // from milliseconds
        config._d = new Date(input)
      } else {
        utils_hooks__hooks.createFromInputFallback(config)
      }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
      var c = {};
      if (typeof locale === 'boolean') {
        strict = locale;
        locale = undefined
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;
      return createFromConfig(c)
    }
    function local__createLocal(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false)
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function () {
      var other = local__createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other < this ? this : other
      } else {
        return valid__createInvalid()
      }
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function () {
      var other = local__createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other > this ? this : other
      } else {
        return valid__createInvalid()
      }
    });
    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0]
      }
      if (!moments.length) {
        return local__createLocal()
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i]
        }
      }
      return res
    }
    // TODO: Use [].sort instead?
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isBefore', args)
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isAfter', args)
    }
    var now = function () {
      return Date.now ? Date.now() : +new Date
    };
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
      // representation for dateAddRemove
      this._milliseconds = +milliseconds + seconds * 1000 + // 1000
      minutes * 60000 + // 1000 * 60
      hours * 3600000;
      // 1000 * 60 * 60
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days + weeks * 7;
      // It is impossible translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months + quarters * 3 + years * 12;
      this._data = {};
      this._locale = locale_locales__getLocale();
      this._bubble()
    }
    function isDuration(obj) {
      return obj instanceof Duration
    }
    // FORMATTING
    function offset(token, separator) {
      addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
          offset = -offset;
          sign = '-'
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2)
      })
    }
    offset('Z', ':');
    offset('ZZ', '');
    // PARSING
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken([
      'Z',
      'ZZ'
    ], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input)
    });
    // HELPERS
    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || '').match(matcher) || [];
      var chunk = matches[matches.length - 1] || [];
      var parts = (chunk + '').match(chunkOffset) || [
        '-',
        0,
        0
      ];
      var minutes = +(parts[1] * 60) + toInt(parts[2]);
      return parts[0] === '+' ? minutes : -minutes
    }
    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(+res._d + diff);
        utils_hooks__hooks.updateOffset(res, false);
        return res
      } else {
        return local__createLocal(input).local()
      }
    }
    function getDateOffset(m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset() / 15) * 15
    }
    // HOOKS
    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {
    };
    // MOMENTS
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime) {
      var offset = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      if (input != null) {
        if (typeof input === 'string') {
          input = offsetFromString(matchShortOffset, input)
        } else if (Math.abs(input) < 16) {
          input = input * 60
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this)
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, 'm')
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false)
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            utils_hooks__hooks.updateOffset(this, true);
            this._changeInProgress = null
          }
        }
        return this
      } else {
        return this._isUTC ? offset : getDateOffset(this)
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== 'string') {
          input = -input
        }
        this.utcOffset(input, keepLocalTime);
        return this
      } else {
        return -this.utcOffset()
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime)
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), 'm')
        }
      }
      return this
    }
    function setOffsetToParsedOffset() {
      if (this._tzm) {
        this.utcOffset(this._tzm)
      } else if (typeof this._i === 'string') {
        this.utcOffset(offsetFromString(matchOffset, this._i))
      }
      return this
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false
      }
      input = input ? local__createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted
      }
      var c = {};
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0
      } else {
        this._isDSTShifted = false
      }
      return this._isDSTShifted
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false
    }
    // ASP.NET json date format regex
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;
    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;
    function create__createDuration(input, key) {
      var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null, sign, ret, diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        }
      } else if (typeof input === 'number') {
        duration = {};
        if (key) {
          duration[key] = input
        } else {
          duration.milliseconds = input
        }
      } else if (!!(match = aspNetRegex.exec(input))) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign,
          h: toInt(match[HOUR]) * sign,
          m: toInt(match[MINUTE]) * sign,
          s: toInt(match[SECOND]) * sign,
          ms: toInt(match[MILLISECOND]) * sign
        }
      } else if (!!(match = isoRegex.exec(input))) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign),
          M: parseIso(match[3], sign),
          w: parseIso(match[4], sign),
          d: parseIso(match[5], sign),
          h: parseIso(match[6], sign),
          m: parseIso(match[7], sign),
          s: parseIso(match[8], sign)
        }
      } else if (duration == null) {
        // checks for null or undefined
        duration = {}
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale
      }
      return ret
    }
    create__createDuration.fn = Duration.prototype;
    function parseIso(inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign
    }
    function positiveMomentsDifference(base, other) {
      var res = {
        milliseconds: 0,
        months: 0
      };
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months
      }
      res.milliseconds = +other - +base.clone().add(res.months, 'M');
      return res
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return {
          milliseconds: 0,
          months: 0
        }
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other)
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months
      }
      return res
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1
      } else {
        return Math.round(number)
      }
    }
    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
      return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
          tmp = val;
          val = period;
          period = tmp
        }
        val = typeof val === 'string' ? +val : val;
        dur = create__createDuration(val, period);
        add_subtract__addSubtract(this, dur, direction);
        return this
      }
    }
    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
      if (!mom.isValid()) {
        // No op
        return
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (milliseconds) {
        mom._d.setTime(+mom._d + milliseconds * isAdding)
      }
      if (days) {
        get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding)
      }
      if (months) {
        setMonth(mom, get_set__get(mom, 'Month') + months * isAdding)
      }
      if (updateOffset) {
        utils_hooks__hooks.updateOffset(mom, days || months)
      }
    }
    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');
    function moment_calendar__calendar(time, formats) {
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || local__createLocal(), sod = cloneWithOffset(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);
      return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)))
    }
    function clone() {
      return new Moment(this)
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : local__createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false
      }
      units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
      if (units === 'millisecond') {
        return +this > +localInput
      } else {
        return +localInput < +this.clone().startOf(units)
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : local__createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false
      }
      units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
      if (units === 'millisecond') {
        return +this < +localInput
      } else {
        return +this.clone().endOf(units) < +localInput
      }
    }
    function isBetween(from, to, units) {
      return this.isAfter(from, units) && this.isBefore(to, units)
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : local__createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false
      }
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
        return +this === +localInput
      } else {
        inputMs = +localInput;
        return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units)
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units)
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units)
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, delta, output;
      if (!this.isValid()) {
        return NaN
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
      units = normalizeUnits(units);
      if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
          output = output / 3
        } else if (units === 'year') {
          output = output / 12
        }
      } else {
        delta = this - that;
        output = units === 'second' ? delta / 1000 : // 1000
        units === 'minute' ? delta / 60000 : // 1000 * 60
        units === 'hour' ? delta / 3600000 : // 1000 * 60 * 60
        units === 'day' ? (delta - zoneDelta) / 86400000 : // 1000 * 60 * 60 * 24, negate dst
        units === 'week' ? (delta - zoneDelta) / 604800000 : // 1000 * 60 * 60 * 24 * 7, negate dst
        delta
      }
      return asFloat ? output : absFloor(output)
    }
    function monthDiff(a, b) {
      // difference in months
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2)
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor)
      }
      return -(wholeMonthDiff + adjust)
    }
    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    function toString() {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ')
    }
    function moment_format__toISOString() {
      var m = this.clone().utc();
      if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          return this.toDate().toISOString()
        } else {
          return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
        }
      } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
      }
    }
    function format(inputString) {
      var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
      return this.localeData().postformat(output)
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
        return create__createDuration({
          to: this,
          from: time
        }).locale(this.locale()).humanize(!withoutSuffix)
      } else {
        return this.localeData().invalidDate()
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(local__createLocal(), withoutSuffix)
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
        return create__createDuration({
          from: this,
          to: time
        }).locale(this.locale()).humanize(!withoutSuffix)
      } else {
        return this.localeData().invalidDate()
      }
    }
    function toNow(withoutSuffix) {
      return this.to(local__createLocal(), withoutSuffix)
    }
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
      var newLocaleData;
      if (key === undefined) {
        return this._locale._abbr
      } else {
        newLocaleData = locale_locales__getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData
        }
        return this
      }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
      if (key === undefined) {
        return this.localeData()
      } else {
        return this.locale(key)
      }
    });
    function localeData() {
      return this._locale
    }
    function startOf(units) {
      units = normalizeUnits(units);
      // the following switch intentionally omits break keywords
      // to utilize falling through the cases.
      switch (units) {
      case 'year':
        this.month(0);
      /* falls through */
      case 'quarter':
      case 'month':
        this.date(1);
      /* falls through */
      case 'week':
      case 'isoWeek':
      case 'day':
        this.hours(0);
      /* falls through */
      case 'hour':
        this.minutes(0);
      /* falls through */
      case 'minute':
        this.seconds(0);
      /* falls through */
      case 'second':
        this.milliseconds(0)
      }
      // weeks are a special case
      if (units === 'week') {
        this.weekday(0)
      }
      if (units === 'isoWeek') {
        this.isoWeekday(1)
      }
      // quarters are also special
      if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3)
      }
      return this
    }
    function endOf(units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
        return this
      }
      return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms')
    }
    function to_type__valueOf() {
      return +this._d - (this._offset || 0) * 60000
    }
    function unix() {
      return Math.floor(+this / 1000)
    }
    function toDate() {
      return this._offset ? new Date(+this) : this._d
    }
    function toArray() {
      var m = this;
      return [
        m.year(),
        m.month(),
        m.date(),
        m.hour(),
        m.minute(),
        m.second(),
        m.millisecond()
      ]
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      }
    }
    function toJSON() {
      // new Date(NaN).toJSON() === null
      return this.isValid() ? this.toISOString() : null
    }
    function moment_valid__isValid() {
      return valid__isValid(this)
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this))
    }
    function invalidAt() {
      return getParsingFlags(this).overflow
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      }
    }
    // FORMATTING
    addFormatToken(0, [
      'gg',
      2
    ], 0, function () {
      return this.weekYear() % 100
    });
    addFormatToken(0, [
      'GG',
      2
    ], 0, function () {
      return this.isoWeekYear() % 100
    });
    function addWeekYearFormatToken(token, getter) {
      addFormatToken(0, [
        token,
        token.length
      ], 0, getter)
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    // ALIASES
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    // PARSING
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
      'gggg',
      'ggggg',
      'GGGG',
      'GGGGG'
    ], function (input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input)
    });
    addWeekParseToken([
      'gg',
      'GG'
    ], function (input, week, config, token) {
      week[token] = utils_hooks__hooks.parseTwoDigitYear(input)
    });
    // MOMENTS
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4)
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4)
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy)
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy)
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this
    }
    // FORMATTING
    addFormatToken('Q', 0, 'Qo', 'quarter');
    // ALIASES
    addUnitAlias('quarter', 'Q');
    // PARSING
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3
    });
    // MOMENTS
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3)
    }
    // FORMATTING
    addFormatToken('w', [
      'ww',
      2
    ], 'wo', 'week');
    addFormatToken('W', [
      'WW',
      2
    ], 'Wo', 'isoWeek');
    // ALIASES
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    // PARSING
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
      'w',
      'ww',
      'W',
      'WW'
    ], function (input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input)
    });
    // HELPERS
    // LOCALES
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6  // The week that contains Jan 1st is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow
    }
    function localeFirstDayOfYear() {
      return this._week.doy
    }
    // MOMENTS
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd')
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd')
    }
    // FORMATTING
    addFormatToken('D', [
      'DD',
      2
    ], 'Do', 'date');
    // ALIASES
    addUnitAlias('date', 'D');
    // PARSING
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
      return isStrict ? locale._ordinalParse : locale._ordinalParseLenient
    });
    addParseToken([
      'D',
      'DD'
    ], DATE);
    addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0], 10)
    });
    // MOMENTS
    var getSetDayOfMonth = makeGetSet('Date', true);
    // FORMATTING
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format)
    });
    addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format)
    });
    addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format)
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    // ALIASES
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    // PARSING
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);
    addWeekParseToken([
      'dd',
      'ddd',
      'dddd'
    ], function (input, week, config, token) {
      var weekday = config._locale.weekdaysParse(input, token, config._strict);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
        week.d = weekday
      } else {
        getParsingFlags(config).invalidWeekday = input
      }
    });
    addWeekParseToken([
      'd',
      'e',
      'E'
    ], function (input, week, config, token) {
      week[token] = toInt(input)
    });
    // HELPERS
    function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
        return input
      }
      if (!isNaN(input)) {
        return parseInt(input, 10)
      }
      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
        return input
      }
      return null
    }
    // LOCALES
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
      return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()]
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
      return this._weekdaysShort[m.day()]
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
      return this._weekdaysMin[m.day()]
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
      var i, mom, regex;
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = []
      }
      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = local__createLocal([
          2000,
          1
        ]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '.?') + '$', 'i');
          this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '.?') + '$', 'i');
          this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '.?') + '$', 'i')
        }
        if (!this._weekdaysParse[i]) {
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i')
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
          return i
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i
        }
      }
    }
    // MOMENTS
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd')
      } else {
        return day
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd')
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.
      return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7)
    }
    // FORMATTING
    addFormatToken('DDD', [
      'DDDD',
      3
    ], 'DDDo', 'dayOfYear');
    // ALIASES
    addUnitAlias('dayOfYear', 'DDD');
    // PARSING
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
      'DDD',
      'DDDD'
    ], function (input, array, config) {
      config._dayOfYear = toInt(input)
    });
    // HELPERS
    // MOMENTS
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, 'd')
    }
    // FORMATTING
    function hFormat() {
      return this.hours() % 12 || 12
    }
    addFormatToken('H', [
      'HH',
      2
    ], 0, 'hour');
    addFormatToken('h', [
      'hh',
      2
    ], 0, hFormat);
    addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2)
    });
    addFormatToken('hmmss', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
    });
    addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2)
    });
    addFormatToken('Hmmss', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
    });
    function meridiem(token, lowercase) {
      addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase)
      })
    }
    meridiem('a', true);
    meridiem('A', false);
    // ALIASES
    addUnitAlias('hour', 'h');
    // PARSING
    function matchMeridiem(isStrict, locale) {
      return locale._meridiemParse
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken([
      'H',
      'HH'
    ], HOUR);
    addParseToken([
      'a',
      'A'
    ], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input
    });
    addParseToken([
      'h',
      'hh'
    ], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true
    });
    addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true
    });
    addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true
    });
    addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos))
    });
    addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2))
    });
    // LOCALES
    function localeIsPM(input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return (input + '').toLowerCase().charAt(0) === 'p'
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM'
      } else {
        return isLower ? 'am' : 'AM'
      }
    }
    // MOMENTS
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);
    // FORMATTING
    addFormatToken('m', [
      'mm',
      2
    ], 0, 'minute');
    // ALIASES
    addUnitAlias('minute', 'm');
    // PARSING
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
      'm',
      'mm'
    ], MINUTE);
    // MOMENTS
    var getSetMinute = makeGetSet('Minutes', false);
    // FORMATTING
    addFormatToken('s', [
      'ss',
      2
    ], 0, 'second');
    // ALIASES
    addUnitAlias('second', 's');
    // PARSING
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
      's',
      'ss'
    ], SECOND);
    // MOMENTS
    var getSetSecond = makeGetSet('Seconds', false);
    // FORMATTING
    addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100)
    });
    addFormatToken(0, [
      'SS',
      2
    ], 0, function () {
      return ~~(this.millisecond() / 10)
    });
    addFormatToken(0, [
      'SSS',
      3
    ], 0, 'millisecond');
    addFormatToken(0, [
      'SSSS',
      4
    ], 0, function () {
      return this.millisecond() * 10
    });
    addFormatToken(0, [
      'SSSSS',
      5
    ], 0, function () {
      return this.millisecond() * 100
    });
    addFormatToken(0, [
      'SSSSSS',
      6
    ], 0, function () {
      return this.millisecond() * 1000
    });
    addFormatToken(0, [
      'SSSSSSS',
      7
    ], 0, function () {
      return this.millisecond() * 10000
    });
    addFormatToken(0, [
      'SSSSSSSS',
      8
    ], 0, function () {
      return this.millisecond() * 100000
    });
    addFormatToken(0, [
      'SSSSSSSSS',
      9
    ], 0, function () {
      return this.millisecond() * 1000000
    });
    // ALIASES
    addUnitAlias('millisecond', 'ms');
    // PARSING
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned)
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000)
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs)
    }
    // MOMENTS
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    // FORMATTING
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    // MOMENTS
    function getZoneAbbr() {
      return this._isUTC ? 'UTC' : ''
    }
    function getZoneName() {
      return this._isUTC ? 'Coordinated Universal Time' : ''
    }
    var momentPrototype__proto = Moment.prototype;
    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isSameOrAfter = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore = isSameOrBefore;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = toJSON;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.creationData = creationData;
    // Year
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;
    // Week Year
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
    // Month
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;
    // Week
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
    // Day
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;
    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
    // Offset
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;
    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;
    // Deprecations
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
    var momentPrototype = momentPrototype__proto;
    function moment__createUnix(input) {
      return local__createLocal(input * 1000)
    }
    function moment__createInZone() {
      return local__createLocal.apply(null, arguments).parseZone()
    }
    var defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    };
    function locale_calendar__calendar(key, mom, now) {
      var output = this._calendar[key];
      return isFunction(output) ? output.call(mom, now) : output
    }
    var defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
      var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format || !formatUpper) {
        return format
      }
      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1)
      });
      return this._longDateFormat[key]
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
      return this._invalidDate
    }
    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace('%d', number)
    }
    function preParsePostFormat(string) {
      return string
    }
    var defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    };
    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number)
    }
    function pastFuture(diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return isFunction(format) ? format(output) : format.replace(/%s/i, output)
    }
    var prototype__proto = Locale.prototype;
    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;
    // Month
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto._monthsRegex = defaultMonthsRegex;
    prototype__proto.monthsRegex = monthsRegex;
    prototype__proto._monthsShortRegex = defaultMonthsShortRegex;
    prototype__proto.monthsShortRegex = monthsShortRegex;
    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
    // Day of Week
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;
    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;
    function lists__get(format, index, field, setter) {
      var locale = locale_locales__getLocale();
      var utc = create_utc__createUTC().set(setter, index);
      return locale[field](utc, format)
    }
    function list(format, index, field, count, setter) {
      if (typeof format === 'number') {
        index = format;
        format = undefined
      }
      format = format || '';
      if (index != null) {
        return lists__get(format, index, field, setter)
      }
      var i;
      var out = [];
      for (i = 0; i < count; i++) {
        out[i] = lists__get(format, i, field, setter)
      }
      return out
    }
    function lists__listMonths(format, index) {
      return list(format, index, 'months', 12, 'month')
    }
    function lists__listMonthsShort(format, index) {
      return list(format, index, 'monthsShort', 12, 'month')
    }
    function lists__listWeekdays(format, index) {
      return list(format, index, 'weekdays', 7, 'day')
    }
    function lists__listWeekdaysShort(format, index) {
      return list(format, index, 'weekdaysShort', 7, 'day')
    }
    function lists__listWeekdaysMin(format, index) {
      return list(format, index, 'weekdaysMin', 7, 'day')
    }
    locale_locales__getSetGlobalLocale('en', {
      ordinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
        return number + output
      }
    });
    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
    var mathAbs = Math.abs;
    function duration_abs__abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this
    }
    function duration_add_subtract__addSubtract(duration, input, value, direction) {
      var other = create__createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble()
    }
    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, 1)
    }
    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, -1)
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number)
      } else {
        return Math.ceil(number)
      }
    }
    function bubble() {
      var milliseconds = this._milliseconds;
      var days = this._days;
      var months = this._months;
      var data = this._data;
      var seconds, minutes, hours, years, monthsFromDays;
      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
        milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
        days = 0;
        months = 0
      }
      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;
      seconds = absFloor(milliseconds / 1000);
      data.seconds = seconds % 60;
      minutes = absFloor(seconds / 60);
      data.minutes = minutes % 60;
      hours = absFloor(minutes / 60);
      data.hours = hours % 24;
      days += absFloor(hours / 24);
      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));
      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;
      data.days = days;
      data.months = months;
      data.years = years;
      return this
    }
    function daysToMonths(days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return days * 4800 / 146097
    }
    function monthsToDays(months) {
      // the reverse of daysToMonths
      return months * 146097 / 4800
    }
    function as(units) {
      var days;
      var months;
      var milliseconds = this._milliseconds;
      units = normalizeUnits(units);
      if (units === 'month' || units === 'year') {
        days = this._days + milliseconds / 86400000;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12
      } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
        case 'week':
          return days / 7 + milliseconds / 604800000;
        case 'day':
          return days + milliseconds / 86400000;
        case 'hour':
          return days * 24 + milliseconds / 3600000;
        case 'minute':
          return days * 1440 + milliseconds / 60000;
        case 'second':
          return days * 86400 + milliseconds / 1000;
        // Math.floor prevents floating point math errors here
        case 'millisecond':
          return Math.floor(days * 86400000) + milliseconds;
        default:
          throw new Error('Unknown unit ' + units)
        }
      }
    }
    // TODO: Use this.as('ms')?
    function duration_as__valueOf() {
      return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000
    }
    function makeAs(alias) {
      return function () {
        return this.as(alias)
      }
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');
    function duration_get__get(units) {
      units = normalizeUnits(units);
      return this[units + 's']()
    }
    function makeGetter(name) {
      return function () {
        return this._data[name]
      }
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
      return absFloor(this.days() / 7)
    }
    var round = Math.round;
    var thresholds = {
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month
      M: 11  // months to year
    };
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture)
    }
    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
      var duration = create__createDuration(posNegDuration).abs();
      var seconds = round(duration.as('s'));
      var minutes = round(duration.as('m'));
      var hours = round(duration.as('h'));
      var days = round(duration.as('d'));
      var months = round(duration.as('M'));
      var years = round(duration.as('y'));
      var a = seconds < thresholds.s && [
        's',
        seconds
      ] || minutes <= 1 && ['m'] || minutes < thresholds.m && [
        'mm',
        minutes
      ] || hours <= 1 && ['h'] || hours < thresholds.h && [
        'hh',
        hours
      ] || days <= 1 && ['d'] || days < thresholds.d && [
        'dd',
        days
      ] || months <= 1 && ['M'] || months < thresholds.M && [
        'MM',
        months
      ] || years <= 1 && ['y'] || [
        'yy',
        years
      ];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a)
    }
    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === undefined) {
        return false
      }
      if (limit === undefined) {
        return thresholds[threshold]
      }
      thresholds[threshold] = limit;
      return true
    }
    function humanize(withSuffix) {
      var locale = this.localeData();
      var output = duration_humanize__relativeTime(this, !withSuffix, locale);
      if (withSuffix) {
        output = locale.pastFuture(+this, output)
      }
      return locale.postformat(output)
    }
    var iso_string__abs = Math.abs;
    function iso_string__toISOString() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      var seconds = iso_string__abs(this._milliseconds) / 1000;
      var days = iso_string__abs(this._days);
      var months = iso_string__abs(this._months);
      var minutes, hours, years;
      // 3600 seconds -> 60 minutes -> 1 hour
      minutes = absFloor(seconds / 60);
      hours = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;
      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;
      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      var Y = years;
      var M = months;
      var D = days;
      var h = hours;
      var m = minutes;
      var s = seconds;
      var total = this.asSeconds();
      if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D'
      }
      return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '')
    }
    var duration_prototype__proto = Duration.prototype;
    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;
    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;
    // Side effect imports
    // FORMATTING
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    // PARSING
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input, 10) * 1000)
    });
    addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input))
    });
    // Side effect imports
    utils_hooks__hooks.version = '2.12.0';
    setHookCallback(local__createLocal);
    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.now = now;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.updateLocale = updateLocale;
    utils_hooks__hooks.locales = locale_locales__listLocales;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.prototype = momentPrototype;
    var _moment = utils_hooks__hooks;
    return _moment
  }))
});
// source: node_modules/daisho-riot/lib/controls/static-ago.js
require.define('daisho-riot/lib/controls/static-ago', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, StaticAgo, moment, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  moment = require('moment/moment');
  module.exports = StaticAgo = function (superClass) {
    extend(StaticAgo, superClass);
    function StaticAgo() {
      return StaticAgo.__super__.constructor.apply(this, arguments)
    }
    StaticAgo.prototype.tag = 'daisho-static-ago';
    StaticAgo.prototype.html = '<div>{ ago(input.ref.get(input.name)) }</div>';
    StaticAgo.prototype.init = function () {
      return StaticAgo.__super__.init.apply(this, arguments)
    };
    StaticAgo.prototype.ago = function (date) {
      return moment(date).fromNow()
    };
    return StaticAgo
  }(Control)  //# sourceMappingURL=static-ago.js.map
});
// source: node_modules/daisho-riot/lib/page.js
require.define('daisho-riot/lib/page', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Page, RiotPage, riot, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Page = require('daisho-sdk/lib').Page;
  riot = require('riot/riot');
  module.exports = RiotPage = function (superClass) {
    extend(RiotPage, superClass);
    function RiotPage() {
      return RiotPage.__super__.constructor.apply(this, arguments)
    }
    RiotPage.prototype.tagEl = 'tag';
    RiotPage.prototype.opts = null;
    RiotPage.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    RiotPage.prototype.render = function () {
      var el;
      el = document.createElement(this.tag);
      this.el.appendChild(el);
      this.tagEl = riot.mount(el, this.tag, this.opts)[0];
      return this.tagEl.update()
    };
    RiotPage.prototype.unload = function () {
      return this.tagEl.unmount()
    };
    return RiotPage
  }(Page)  //# sourceMappingURL=page.js.map
});
// source: node_modules/daisho-riot/lib/forms/index.js
require.define('daisho-riot/lib/forms', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    TableRow: require('daisho-riot/lib/forms/table-row'),
    register: function () {
      return this.TableRow.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/forms/table-row.js
require.define('daisho-riot/lib/forms/table-row', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, TableRow, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  module.exports = TableRow = function (superClass) {
    extend(TableRow, superClass);
    function TableRow() {
      return TableRow.__super__.constructor.apply(this, arguments)
    }
    TableRow.prototype.tag = 'daisho-table-row';
    TableRow.prototype.configs = null;
    TableRow.prototype.tableData = null;
    TableRow.prototype.data = null;
    TableRow.prototype.html = require('daisho-riot/templates/table-row');
    TableRow.prototype.init = function () {
      if (this.configs == null) {
        this.configs = this.parent.configs
      }
      if (this.tableData == null) {
        this.tableData = this.parent.tableData
      }
      return TableRow.__super__.init.apply(this, arguments)
    };
    return TableRow
  }(CrowdControl.Views.Form)  //# sourceMappingURL=table-row.js.map
});
// source: node_modules/daisho-riot/templates/table-row.html
require.define('daisho-riot/templates/table-row', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div each="{ column, i in tableData.get(\'columns\') }">\n  <daisho-poly-control lookup="{ column.id }" tag="{ column.tag }"></daisho-poly-control>\n</div>\n\n'
});
// source: node_modules/daisho-riot/lib/widgets/index.js
require.define('daisho-riot/lib/widgets', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Table: require('daisho-riot/lib/widgets/table'),
    TableControls: require('daisho-riot/lib/widgets/table-controls'),
    Menu: require('daisho-riot/lib/widgets/menu'),
    TableFilterMenu: require('daisho-riot/lib/widgets/table-filter-menu'),
    register: function () {
      this.Table.register();
      this.TableControls.register();
      this.Menu.register();
      return this.TableFilterMenu.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/widgets/table.js
require.define('daisho-riot/lib/widgets/table', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, Table, refer, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  refer = require('referential/lib');
  module.exports = Table = function (superClass) {
    extend(Table, superClass);
    function Table() {
      return Table.__super__.constructor.apply(this, arguments)
    }
    Table.prototype.tag = 'daisho-table-widget';
    Table.prototype.nameSinglular = 'Thing';
    Table.prototype.namePlural = 'Things';
    Table.prototype.configs = [];
    Table.prototype.data = refer({});
    Table.prototype.html = require('daisho-riot/templates/table-widget');
    return Table
  }(CrowdControl.Views.View)  //# sourceMappingURL=table.js.map
});
// source: node_modules/daisho-riot/templates/table-widget.html
require.define('daisho-riot/templates/table-widget', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div class="table-head">\n  <div class="table-row">\n    <div each="{ column, i in data.get(\'columns\') }">{ column.name }</div>\n  </div>\n</div>\n<div class="table-body">\n  <daisho-table-row class="table-row" each="{ item, i in data.get(\'items\') }" table-data="{ this.parent.data }" data="{ this.parent.data.ref(\'items.\' + i) }" config="{ this.parent.config }"></daisho-table-row>\n</div>\n\n'
});
// source: node_modules/daisho-riot/lib/widgets/table-controls.js
require.define('daisho-riot/lib/widgets/table-controls', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var $, CrowdControl, TableControls, refer, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  refer = require('referential/lib');
  $ = require('jquery/dist/jquery');
  module.exports = TableControls = function (superClass) {
    extend(TableControls, superClass);
    function TableControls() {
      return TableControls.__super__.constructor.apply(this, arguments)
    }
    TableControls.prototype.tag = 'daisho-table-controls-widget';
    TableControls.prototype.configs = [];
    TableControls.prototype.data = null;
    TableControls.prototype.filterData = null;
    TableControls.prototype.html = require('daisho-riot/templates/table-controls-widget');
    TableControls.prototype.init = function () {
      if (this.data == null) {
        this.data = refer({ filter: '' })
      }
      if (this.filterData == null) {
        this.filterData = refer({ options: [] })
      }
      return TableControls.__super__.init.apply(this, arguments)
    };
    TableControls.prototype.countWords = function () {
      var count;
      count = this.data.get('count');
      if (count === 1) {
        return count + ' ' + this.nameSingular
      } else {
        return count + ' ' + this.namePlural
      }
    };
    TableControls.prototype.sortWords = function () {
      var column, columns, i, len, lsort, sort;
      sort = this.data.get('sort');
      if (sort[0] === '-') {
        sort = sort.substr(1)
      }
      lsort = sort.toLowerCase();
      columns = this.data.get('columns');
      for (i = 0, len = columns.length; i < len; i++) {
        column = columns[i];
        if (column.id.toLowerCase() === lsort) {
          return column.name
        }
      }
      return sort
    };
    TableControls.prototype.resetMenus = function (event) {
      var $toggle, value;
      if (event != null) {
        $toggle = $(this.root).find('#' + event.target.htmlFor);
        value = $toggle.prop('checked')
      }
      $(this.root).find('.menu-toggle').prop('checked', false);
      if (event != null) {
        return $toggle.prop('checked', !value)
      }
    };
    TableControls.prototype.ignore = function (event) {
      event.stopPropagation();
      event.preventDefault();
      return false
    };
    return TableControls
  }(CrowdControl.Views.View)  //# sourceMappingURL=table-controls.js.map
});
// source: node_modules/daisho-riot/templates/table-controls-widget.html
require.define('daisho-riot/templates/table-controls-widget', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div class="table-filter-summary">\n  <span class="table-filter-count">\n    { countWords() }\n  </span>\n  <span>sorted by</span>\n  <span class="table-filter-sort">\n    { sortWords() }\n  </span>\n</div>\n<input id="table-column-button" class="menu-toggle" type="checkbox">\n<label class="table-filter-option button" for="table-column-button">\n  Columns\n</label>\n<input id="table-filter-button" class="menu-toggle" type="checkbox">\n<label class="table-filter-option button" for="table-filter-button" onclick="{ resetMenus }">\n  <span>Filters</span>\n  <div class="menu" onclick="{ ignore }">\n    <div class="menu-title">Filters</div>\n    <daisho-table-filter-menu-widget data="{ data }" filter-data="{ filterData }" filter-placeholder="Find a Filter"></daisho-table-filter-menu-widget>\n  </div>\n</label>\n'
});
// source: node_modules/daisho-riot/lib/widgets/menu.js
require.define('daisho-riot/lib/widgets/menu', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, Menu, filter, refer, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  refer = require('referential/lib');
  filter = require('daisho-riot/lib/utils/menu').filter;
  module.exports = Menu = function (superClass) {
    extend(Menu, superClass);
    function Menu() {
      return Menu.__super__.constructor.apply(this, arguments)
    }
    Menu.prototype.tag = 'daisho-menu-widget';
    Menu.prototype.configs = { filter: null };
    Menu.prototype.filter = true;
    Menu.prototype.filterPlaceholder = 'Type Something';
    Menu.prototype.options = [];
    Menu.prototype.filterData = null;
    Menu.prototype.data = null;
    Menu.prototype.html = require('daisho-riot/templates/menu-widget');
    Menu.prototype.init = function () {
      if (this.data == null) {
        this.data = refer({ filter: '' })
      }
      if (this.filterData == null) {
        this.filterData = refer({ options: [] })
      }
      Menu.__super__.init.apply(this, arguments);
      this.on('update', function (_this) {
        return function () {
          return _this.options = filter(_this.filterData.get('options'), _this.data.get('filter'))
        }
      }(this));
      return this.inputs.filter.on('change', function (_this) {
        return function () {
          return _this.update()
        }
      }(this))
    };
    Menu.prototype.noResults = function () {
      return this.options.length === 0
    };
    return Menu
  }(CrowdControl.Views.Form)  //# sourceMappingURL=menu.js.map
});
// source: node_modules/daisho-riot/lib/utils/menu.js
require.define('daisho-riot/lib/utils/menu', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    filter: function (options, filter) {
      var i, len, option, ret;
      ret = [];
      for (i = 0, len = options.length; i < len; i++) {
        option = options[i];
        if (option.name.indexOf(filter) > -1) {
          ret.push(option)
        }
      }
      return ret
    }
  }  //# sourceMappingURL=menu.js.map
});
// source: node_modules/daisho-riot/templates/menu-widget.html
require.define('daisho-riot/templates/menu-widget', function (module, exports, __dirname, __filename, process) {
  module.exports = '<daisho-inline-text-control lookup="filter" if="{ filter }" placeholder="{ filterPlaceholder }" realtime="true"></daisho-inline-text-control>\n<ul>\n  <li each="{ option, i in options }" onclick="{ option.action }">{ option.name }</li>\n  <li class="no-results" if="{ noResults() }">No Search Results</li>\n</ul>\n'
});
// source: node_modules/daisho-riot/lib/widgets/table-filter-menu.js
require.define('daisho-riot/lib/widgets/table-filter-menu', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Menu, TableFilterMenu, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Menu = require('daisho-riot/lib/widgets/menu');
  module.exports = TableFilterMenu = function (superClass) {
    extend(TableFilterMenu, superClass);
    function TableFilterMenu() {
      return TableFilterMenu.__super__.constructor.apply(this, arguments)
    }
    TableFilterMenu.prototype.tag = 'daisho-table-filter-menu-widget';
    TableFilterMenu.prototype.configs = { filter: null };
    TableFilterMenu.prototype.data = null;
    TableFilterMenu.prototype.filterData = null;
    TableFilterMenu.prototype.html = require('daisho-riot/templates/table-filter-menu-widget');
    TableFilterMenu.prototype.init = function () {
      if (this.configs.filter == null) {
        this.configs.filter = null
      }
      return TableFilterMenu.__super__.init.apply(this, arguments)
    };
    return TableFilterMenu
  }(Menu)  //# sourceMappingURL=table-filter-menu.js.map
});
// source: node_modules/daisho-riot/templates/table-filter-menu-widget.html
require.define('daisho-riot/templates/table-filter-menu-widget', function (module, exports, __dirname, __filename, process) {
  module.exports = '<daisho-inline-text-control lookup="filter" if="{ filter }" placeholder="{ filterPlaceholder }" realtime="true"></daisho-inline-text-control>\n<ul>\n  <li each="{ option, i in options }" onclick="{ option.action }">\n    <daisho-poly-control lookup="{ option.id }" tag="{ option.tag }"></daisho-poly-control>\n  </li>\n  <li class="no-results" if="{ noResults() }">No Search Results</li>\n</ul>\n'
});
// source: example/fixtures/user-v1.0.0/list.coffee
require.define('./list', function (module, exports, __dirname, __filename, process) {
  var UserList, View, refer, riot, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib').Views.View;
  refer = require('referential/lib');
  riot = require('riot/riot');
  module.exports = UserList = function (superClass) {
    extend(UserList, superClass);
    function UserList() {
      return UserList.__super__.constructor.apply(this, arguments)
    }
    UserList.prototype.tag = 'user-list';
    UserList.prototype.html = require('./templates/list');
    UserList.prototype.route = function () {
    };
    UserList.prototype.init = function () {
      this.data = refer({
        columns: [
          {
            id: 'email',
            name: 'Email',
            tag: 'daisho-static-text'
          },
          {
            id: 'firstName',
            name: 'First Name',
            tag: 'daisho-static-text'
          },
          {
            id: 'lastName',
            name: 'Last Name',
            tag: 'daisho-static-text'
          },
          {
            id: 'createdAt',
            name: 'Created On',
            tag: 'daisho-static-date'
          },
          {
            id: 'updatedAt',
            name: 'Last Updated',
            tag: 'daisho-static-ago'
          }
        ],
        items: [],
        page: 1,
        count: 0,
        display: 10,
        sort: '-UpdatedAt'
      });
      this.configs = {
        email: null,
        firstName: null,
        lastName: null,
        createdAt: null,
        updatedAt: null
      };
      return this.client.user.list({
        page: this.data.get('page'),
        display: this.data.get('display'),
        sort: this.data.get('sort')
      }).then(function (_this) {
        return function (res) {
          _this.data.set('items', res.models);
          _this.data.set('count', parseInt(res.count, 10));
          _this.data.set('page', parseInt(res.page, 10));
          _this.data.set('display', parseInt(res.display, 10));
          return riot.update()
        }
      }(this))
    };
    return UserList
  }(View)
});
// source: example/fixtures/user-v1.0.0/templates/list.html
require.define('./templates/list', function (module, exports, __dirname, __filename, process) {
  module.exports = '<daisho-table-controls-widget data="{ data }" name-singular="User" name-plural="Users">\n</daisho-table-controls-widget>\n<daisho-table-widget data="{ data }" configs="{ configs }">\n</daisho-table-widget>\n'
});
// source: example/fixtures/user-v1.0.0/main.coffee
require.async('user-v1.0.0/bundle.js', function (module, exports, __dirname, __filename, process) {
  var Module, Page, RiotPage, User, UserList, UserLists, ref, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  ref = require('daisho-sdk/lib'), Page = ref.Page, Module = ref.Module;
  RiotPage = require('daisho-riot/lib').RiotPage;
  UserList = require('./list');
  UserList.register();
  UserLists = function (superClass) {
    extend(UserLists, superClass);
    function UserLists() {
      return UserLists.__super__.constructor.apply(this, arguments)
    }
    UserLists.prototype.tag = 'user-list';
    UserLists.prototype.render = function () {
      return UserLists.__super__.render.apply(this, arguments)
    };
    return UserLists
  }(RiotPage);
  module.exports = User = function (superClass) {
    extend(User, superClass);
    function User() {
      return User.__super__.constructor.apply(this, arguments)
    }
    User.name = 'User';
    User.prototype.routes = {
      '/': UserLists,
      '/create': Page,
      '/edit': Page
    };
    return User
  }(Module)
})//# sourceMappingURL=data:application/json;base64,