// source: node_modules/daisho-sdk/lib/index.js
require.define('daisho-sdk/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Page: require('daisho-sdk/lib/page'),
    Module: require('daisho-sdk/lib/module')
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-sdk/lib/page.js
require.define('daisho-sdk/lib/page', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Page;
  module.exports = Page = function () {
    Page.prototype.el = null;
    Page.prototype.module = null;
    function Page(el, module1) {
      this.el = el;
      this.module = module1
    }
    Page.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    Page.prototype.render = function () {
    };
    Page.prototype.unload = function () {
    };
    Page.prototype.annotations = function () {
    };
    return Page
  }()  //# sourceMappingURL=page.js.map
});
// source: node_modules/daisho-sdk/lib/module.js
require.define('daisho-sdk/lib/module', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Module;
  module.exports = Module = function () {
    Module.prototype.json = null;
    function Module() {
    }
    Module.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    Module.prototype.unload = function () {
    };
    return Module
  }()  //# sourceMappingURL=module.js.map
});
// source: node_modules/daisho-riot/lib/index.js
require.define('daisho-riot/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Controls;
  Controls = require('daisho-riot/lib/controls');
  module.exports = {
    RiotPage: require('daisho-riot/lib/page'),
    Events: require('daisho-riot/lib/events'),
    Controls: require('daisho-riot/lib/controls'),
    Forms: require('daisho-riot/lib/forms'),
    Widgets: require('daisho-riot/lib/widgets'),
    register: function () {
      this.Controls.register();
      this.Forms.register();
      return this.Widgets.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/controls/index.js
require.define('daisho-riot/lib/controls', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  require('daisho-riot/lib/controls/poly');
  module.exports = {
    Control: require('daisho-riot/lib/controls/control'),
    Text: require('daisho-riot/lib/controls/text'),
    StaticText: require('daisho-riot/lib/controls/static-text'),
    StaticDate: require('daisho-riot/lib/controls/static-date'),
    StaticAgo: require('daisho-riot/lib/controls/static-ago'),
    register: function (m) {
      this.Text.register(m);
      this.StaticText.register(m);
      this.StaticDate.register(m);
      return this.StaticAgo.register(m)
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/controls/poly.js
require.define('daisho-riot/lib/controls/poly', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var riot;
  riot = require('crowdcontrol/lib').riot.riot;
  module.exports = riot.tag('daisho-poly-control', '', function (opts) {
    var el, tag, tagEl;
    if (opts.tag != null) {
      tag = opts.tag;
      delete opts.tag;
      el = document.createElement(tag);
      this.root.appendChild(el);
      opts.parent = this.parent;
      tagEl = riot.mount(el, tag, opts)[0];
      return tagEl.update()
    }
  })  //# sourceMappingURL=poly.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/index.js
require.define('crowdcontrol/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, r, riot;
  r = require('crowdcontrol/lib/riot');
  riot = r();
  CrowdControl = {
    Views: require('crowdcontrol/lib/views'),
    tags: [],
    start: function (opts) {
      return this.tags = riot.mount('*', opts)
    },
    update: function () {
      var i, len, ref, results, tag;
      ref = this.tags;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        results.push(tag.update())
      }
      return results
    },
    riot: r
  };
  if (module.exports != null) {
    module.exports = CrowdControl
  }
  if (typeof window !== 'undefined' && window !== null) {
    if (window.Crowdstart != null) {
      window.Crowdstart.Crowdcontrol = CrowdControl
    } else {
      window.Crowdstart = { CrowdControl: CrowdControl }
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/riot.js
require.define('crowdcontrol/lib/riot', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var r;
  r = function () {
    return this.riot
  };
  r.set = function (riot) {
    this.riot = riot
  };
  r.riot = typeof window !== 'undefined' && window !== null ? window.riot : void 0;
  module.exports = r  //# sourceMappingURL=riot.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/index.js
require.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Form: require('crowdcontrol/lib/views/form'),
    Input: require('crowdcontrol/lib/views/input'),
    View: require('crowdcontrol/lib/views/view')
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/form.js
require.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib/views/view');
  inputify = require('crowdcontrol/lib/views/inputify');
  observable = require('crowdcontrol/lib/riot')().observable;
  Promise = require('broken/lib');
  settle = require('promise-settle');
  Form = function (superClass) {
    extend(Form, superClass);
    function Form() {
      return Form.__super__.constructor.apply(this, arguments)
    }
    Form.prototype.configs = null;
    Form.prototype.inputs = null;
    Form.prototype.data = null;
    Form.prototype.initInputs = function () {
      var input, name, ref, results1;
      this.inputs = {};
      if (this.configs != null) {
        this.inputs = inputify(this.data, this.configs);
        ref = this.inputs;
        results1 = [];
        for (name in ref) {
          input = ref[name];
          results1.push(observable(input))
        }
        return results1
      }
    };
    Form.prototype.init = function () {
      return this.initInputs()
    };
    Form.prototype.submit = function () {
      var input, name, pRef, ps, ref;
      ps = [];
      ref = this.inputs;
      for (name in ref) {
        input = ref[name];
        pRef = {};
        input.trigger('validate', pRef);
        ps.push(pRef.p)
      }
      return settle(ps).then(function (_this) {
        return function (results) {
          var i, len, result;
          for (i = 0, len = results.length; i < len; i++) {
            result = results[i];
            if (!result.isFulfilled()) {
              return
            }
          }
          return _this._submit.apply(_this, arguments)
        }
      }(this))
    };
    Form.prototype._submit = function () {
    };
    return Form
  }(View);
  module.exports = Form  //# sourceMappingURL=form.js.map
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/view.js
require.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
  riot = require('crowdcontrol/lib/riot')();
  objectAssign = require('object-assign');
  setPrototypeOf = function () {
    var mixinProperties, setProtoOf;
    setProtoOf = function (obj, proto) {
      return obj.__proto__ = proto
    };
    mixinProperties = function (obj, proto) {
      var prop, results;
      results = [];
      for (prop in proto) {
        if (obj[prop] == null) {
          results.push(obj[prop] = proto[prop])
        } else {
          results.push(void 0)
        }
      }
      return results
    };
    if (Object.setPrototypeOf || { __proto__: [] } instanceof Array) {
      return setProtoOf
    } else {
      return mixinProperties
    }
  }();
  isFunction = require('is-function');
  collapsePrototype = function (collapse, proto) {
    var parentProto;
    if (proto === View.prototype) {
      return
    }
    parentProto = Object.getPrototypeOf(proto);
    collapsePrototype(collapse, parentProto);
    return objectAssign(collapse, parentProto)
  };
  View = function () {
    View.register = function () {
      return new this
    };
    View.prototype.tag = '';
    View.prototype.html = '';
    View.prototype.css = '';
    View.prototype.attrs = '';
    View.prototype.events = null;
    function View() {
      var newProto;
      newProto = collapsePrototype({}, this);
      this.beforeInit();
      riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
        var fn, handler, k, name, parent, proto, ref, ref1, self, v;
        if (newProto != null) {
          for (k in newProto) {
            v = newProto[k];
            if (isFunction(v)) {
              (function (_this) {
                return function (v) {
                  var oldFn;
                  if (_this[k] != null) {
                    oldFn = _this[k];
                    return _this[k] = function () {
                      oldFn.apply(_this, arguments);
                      return v.apply(_this, arguments)
                    }
                  } else {
                    return _this[k] = function () {
                      return v.apply(_this, arguments)
                    }
                  }
                }
              }(this)(v))
            } else {
              this[k] = v
            }
          }
        }
        self = this;
        parent = (ref = self.parent) != null ? ref : opts.parent;
        proto = Object.getPrototypeOf(self);
        while (parent != null && parent !== proto) {
          setPrototypeOf(self, parent);
          self = parent;
          parent = self.parent;
          proto = Object.getPrototypeOf(self)
        }
        if (opts != null) {
          for (k in opts) {
            v = opts[k];
            this[k] = v
          }
        }
        if (this.events != null) {
          ref1 = this.events;
          fn = function (_this) {
            return function (name, handler) {
              if (typeof handler === 'string') {
                return _this.on(name, function () {
                  return _this[handler].apply(_this, arguments)
                })
              } else {
                return _this.on(name, function () {
                  return handler.apply(_this, arguments)
                })
              }
            }
          }(this);
          for (name in ref1) {
            handler = ref1[name];
            fn(name, handler)
          }
        }
        return this.init(opts)
      })
    }
    View.prototype.beforeInit = function () {
    };
    View.prototype.init = function () {
    };
    return View
  }();
  module.exports = View  //# sourceMappingURL=view.js.map
});
// source: node_modules/daisho-riot/node_modules/object-assign/index.js
require.define('object-assign', function (module, exports, __dirname, __filename, process) {
  /* eslint-disable no-unused-vars */
  'use strict';
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined')
    }
    return Object(val)
  }
  module.exports = Object.assign || function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key]
        }
      }
      if (Object.getOwnPropertySymbols) {
        symbols = Object.getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]]
          }
        }
      }
    }
    return to
  }
});
// source: node_modules/daisho-riot/node_modules/is-function/index.js
require.define('is-function', function (module, exports, __dirname, __filename, process) {
  module.exports = isFunction;
  var toString = Object.prototype.toString;
  function isFunction(fn) {
    var string = toString.call(fn);
    return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
  }
  ;
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/inputify.js
require.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Promise, inputify, isFunction, isRef, refer;
  Promise = require('broken/lib');
  isFunction = require('is-function');
  refer = require('referential/lib');
  isRef = function (o) {
    return o != null && isFunction(o.ref)
  };
  inputify = function (data, configs) {
    var config, fn, inputs, name, ref;
    ref = data;
    if (!isRef(ref)) {
      ref = refer(data)
    }
    inputs = {};
    fn = function (name, config) {
      var fn1, i, input, len, middleware, middlewareFn, validate;
      middleware = [];
      if (config && config.length > 0) {
        fn1 = function (name, middlewareFn) {
          return middleware.push(function (pair) {
            ref = pair[0], name = pair[1];
            return Promise.resolve(pair).then(function (pair) {
              return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
            }).then(function (v) {
              ref.set(name, v);
              return pair
            })
          })
        };
        for (i = 0, len = config.length; i < len; i++) {
          middlewareFn = config[i];
          fn1(name, middlewareFn)
        }
      }
      middleware.push(function (pair) {
        ref = pair[0], name = pair[1];
        return Promise.resolve(ref.get(name))
      });
      validate = function (ref, name) {
        var j, len1, p;
        p = Promise.resolve([
          ref,
          name
        ]);
        for (j = 0, len1 = middleware.length; j < len1; j++) {
          middlewareFn = middleware[j];
          p = p.then(middlewareFn)
        }
        return p
      };
      input = {
        name: name,
        ref: ref,
        config: config,
        validate: validate
      };
      return inputs[name] = input
    };
    for (name in configs) {
      config = configs[name];
      fn(name, config)
    }
    return inputs
  };
  module.exports = inputify  //# sourceMappingURL=inputify.js.map
});
// source: node_modules/daisho-riot/node_modules/broken/lib/index.js
require.define('broken/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Promise, PromiseInspection;
  Promise = require('zousan/zousan-min');
  Promise.suppressUncaughtRejectionError = false;
  PromiseInspection = function () {
    function PromiseInspection(arg) {
      this.state = arg.state, this.value = arg.value, this.reason = arg.reason
    }
    PromiseInspection.prototype.isFulfilled = function () {
      return this.state === 'fulfilled'
    };
    PromiseInspection.prototype.isRejected = function () {
      return this.state === 'rejected'
    };
    return PromiseInspection
  }();
  Promise.reflect = function (promise) {
    return new Promise(function (resolve, reject) {
      return promise.then(function (value) {
        return resolve(new PromiseInspection({
          state: 'fulfilled',
          value: value
        }))
      })['catch'](function (err) {
        return resolve(new PromiseInspection({
          state: 'rejected',
          reason: err
        }))
      })
    })
  };
  Promise.settle = function (promises) {
    return Promise.all(promises.map(Promise.reflect))
  };
  Promise.prototype.callback = function (cb) {
    if (typeof cb === 'function') {
      this.then(function (value) {
        return cb(null, value)
      });
      this['catch'](function (error) {
        return cb(error, null)
      })
    }
    return this
  };
  module.exports = Promise  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/zousan/zousan-min.js
require.define('zousan/zousan-min', function (module, exports, __dirname, __filename, process) {
  !function (t) {
    'use strict';
    function e(t) {
      if (t) {
        var e = this;
        t(function (t) {
          e.resolve(t)
        }, function (t) {
          e.reject(t)
        })
      }
    }
    function n(t, e) {
      if ('function' == typeof t.y)
        try {
          var n = t.y.call(i, e);
          t.p.resolve(n)
        } catch (o) {
          t.p.reject(o)
        }
      else
        t.p.resolve(e)
    }
    function o(t, e) {
      if ('function' == typeof t.n)
        try {
          var n = t.n.call(i, e);
          t.p.resolve(n)
        } catch (o) {
          t.p.reject(o)
        }
      else
        t.p.reject(e)
    }
    var r, i, c = 'fulfilled', u = 'rejected', s = 'undefined', f = function () {
        function t() {
          for (; e.length - n;)
            e[n](), e[n++] = i, n == o && (e.splice(0, o), n = 0)
        }
        var e = [], n = 0, o = 1024, r = function () {
            if (typeof MutationObserver !== s) {
              var e = document.createElement('div'), n = new MutationObserver(t);
              return n.observe(e, { attributes: !0 }), function () {
                e.setAttribute('a', 0)
              }
            }
            return typeof setImmediate !== s ? function () {
              setImmediate(t)
            } : function () {
              setTimeout(t, 0)
            }
          }();
        return function (t) {
          e.push(t), e.length - n == 1 && r()
        }
      }();
    e.prototype = {
      resolve: function (t) {
        if (this.state === r) {
          if (t === this)
            return this.reject(new TypeError('Attempt to resolve promise with self'));
          var e = this;
          if (t && ('function' == typeof t || 'object' == typeof t))
            try {
              var o = !0, i = t.then;
              if ('function' == typeof i)
                return void i.call(t, function (t) {
                  o && (o = !1, e.resolve(t))
                }, function (t) {
                  o && (o = !1, e.reject(t))
                })
            } catch (u) {
              return void (o && this.reject(u))
            }
          this.state = c, this.v = t, e.c && f(function () {
            for (var o = 0, r = e.c.length; r > o; o++)
              n(e.c[o], t)
          })
        }
      },
      reject: function (t) {
        if (this.state === r) {
          this.state = u, this.v = t;
          var n = this.c;
          n ? f(function () {
            for (var e = 0, r = n.length; r > e; e++)
              o(n[e], t)
          }) : e.suppressUncaughtRejectionError || console.log('You upset Zousan. Please catch rejections: ', t, t.stack)
        }
      },
      then: function (t, i) {
        var u = new e, s = {
            y: t,
            n: i,
            p: u
          };
        if (this.state === r)
          this.c ? this.c.push(s) : this.c = [s];
        else {
          var l = this.state, a = this.v;
          f(function () {
            l === c ? n(s, a) : o(s, a)
          })
        }
        return u
      },
      'catch': function (t) {
        return this.then(null, t)
      },
      'finally': function (t) {
        return this.then(t, t)
      },
      timeout: function (t, n) {
        n = n || 'Timeout';
        var o = this;
        return new e(function (e, r) {
          setTimeout(function () {
            r(Error(n))
          }, t), o.then(function (t) {
            e(t)
          }, function (t) {
            r(t)
          })
        })
      }
    }, e.resolve = function (t) {
      var n = new e;
      return n.resolve(t), n
    }, e.reject = function (t) {
      var n = new e;
      return n.reject(t), n
    }, e.all = function (t) {
      function n(n, c) {
        'function' != typeof n.then && (n = e.resolve(n)), n.then(function (e) {
          o[c] = e, r++, r == t.length && i.resolve(o)
        }, function (t) {
          i.reject(t)
        })
      }
      for (var o = [], r = 0, i = new e, c = 0; c < t.length; c++)
        n(t[c], c);
      return t.length || i.resolve(o), i
    }, typeof module != s && module.exports && (module.exports = e), t.Zousan = e, e.soon = f
  }('undefined' != typeof global ? global : this)
});
// source: node_modules/daisho-riot/node_modules/referential/lib/index.js
require.define('referential/lib', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var refer;
  refer = require('referential/lib/refer');
  refer.Ref = require('referential/lib/ref');
  module.exports = refer  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/node_modules/referential/lib/refer.js
require.define('referential/lib/refer', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Ref, refer;
  Ref = require('referential/lib/ref');
  module.exports = refer = function (state, ref) {
    var fn, i, len, method, ref1, wrapper;
    if (ref == null) {
      ref = null
    }
    if (ref == null) {
      ref = new Ref(state)
    }
    wrapper = function (key) {
      return ref.get(key)
    };
    ref1 = [
      'value',
      'get',
      'set',
      'extend',
      'index',
      'ref'
    ];
    fn = function (method) {
      return wrapper[method] = function () {
        return ref[method].apply(ref, arguments)
      }
    };
    for (i = 0, len = ref1.length; i < len; i++) {
      method = ref1[i];
      fn(method)
    }
    wrapper.refer = function (key) {
      return refer(null, ref.ref(key))
    };
    wrapper.clone = function (key) {
      return refer(null, ref.clone(key))
    };
    return wrapper
  }  //# sourceMappingURL=refer.js.map
});
// source: node_modules/daisho-riot/node_modules/referential/lib/ref.js
require.define('referential/lib/ref', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Ref, extend, isArray, isNumber, isObject, isString;
  extend = require('node.extend');
  isArray = require('is-array');
  isNumber = require('is-number');
  isObject = require('is-object');
  isString = require('is-string');
  module.exports = Ref = function () {
    function Ref(_value, parent, key1) {
      this._value = _value;
      this.parent = parent;
      this.key = key1;
      this._cache = {}
    }
    Ref.prototype._mutate = function () {
      return this._cache = {}
    };
    Ref.prototype.value = function (state) {
      if (!this.parent) {
        if (state != null) {
          this._value = state
        }
        return this._value
      }
      if (state != null) {
        return this.parent.set(this.key, state)
      } else {
        return this.parent.get(this.key)
      }
    };
    Ref.prototype.ref = function (key) {
      if (!key) {
        return this
      }
      return new Ref(null, this, key)
    };
    Ref.prototype.get = function (key) {
      if (!key) {
        return this.value()
      } else {
        if (this._cache[key]) {
          return this._cache[key]
        }
        return this._cache[key] = this.index(key)
      }
    };
    Ref.prototype.set = function (key, value) {
      this._mutate();
      if (value == null) {
        this.value(extend(this.value(), key))
      } else {
        this.index(key, value)
      }
      return this
    };
    Ref.prototype.extend = function (key, value) {
      var clone;
      this._mutate();
      if (value == null) {
        this.value(extend(true, this.value(), key))
      } else {
        if (isObject(value)) {
          this.value(extend(true, this.ref(key).get(), value))
        } else {
          clone = this.clone();
          this.set(key, value);
          this.value(extend(true, clone.get(), this.value()))
        }
      }
      return this
    };
    Ref.prototype.clone = function (key) {
      return new Ref(extend(true, {}, this.get(key)))
    };
    Ref.prototype.index = function (key, value, obj, prev) {
      var next, prop, props;
      if (obj == null) {
        obj = this.value()
      }
      if (this.parent) {
        return this.parent.index(this.key + '.' + key, value)
      }
      if (isNumber(key)) {
        key = String(key)
      }
      props = key.split('.');
      if (value == null) {
        while (prop = props.shift()) {
          if (!props.length) {
            return obj != null ? obj[prop] : void 0
          }
          obj = obj != null ? obj[prop] : void 0
        }
        return
      }
      while (prop = props.shift()) {
        if (!props.length) {
          return obj[prop] = value
        } else {
          next = props[0];
          if (obj[next] == null) {
            if (isNumber(next)) {
              if (obj[prop] == null) {
                obj[prop] = []
              }
            } else {
              if (obj[prop] == null) {
                obj[prop] = {}
              }
            }
          }
        }
        obj = obj[prop]
      }
    };
    return Ref
  }()  //# sourceMappingURL=ref.js.map
});
// source: node_modules/daisho-riot/node_modules/node.extend/index.js
require.define('node.extend', function (module, exports, __dirname, __filename, process) {
  module.exports = require('node.extend/lib/extend')
});
// source: node_modules/daisho-riot/node_modules/node.extend/lib/extend.js
require.define('node.extend/lib/extend', function (module, exports, __dirname, __filename, process) {
  /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
  var is = require('is');
  function extend() {
    var target = arguments[0] || {};
    var i = 1;
    var length = arguments.length;
    var deep = false;
    var options, name, src, copy, copy_is_array, clone;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !is.fn(target)) {
      target = {}
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      options = arguments[i];
      if (options != null) {
        if (typeof options === 'string') {
          options = options.split('')
        }
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];
          // Prevent never-ending loop
          if (target === copy) {
            continue
          }
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
            if (copy_is_array) {
              copy_is_array = false;
              clone = src && is.array(src) ? src : []
            } else {
              clone = src && is.hash(src) ? src : {}
            }
            // Never move original objects, clone them
            target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
          } else if (typeof copy !== 'undefined') {
            target[name] = copy
          }
        }
      }
    }
    // Return the modified object
    return target
  }
  ;
  /**
 * @public
 */
  extend.version = '1.1.3';
  /**
 * Exports module.
 */
  module.exports = extend
});
// source: node_modules/daisho-riot/node_modules/is/index.js
require.define('is', function (module, exports, __dirname, __filename, process) {
  /* globals window, HTMLElement */
  /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
  var objProto = Object.prototype;
  var owns = objProto.hasOwnProperty;
  var toStr = objProto.toString;
  var symbolValueOf;
  if (typeof Symbol === 'function') {
    symbolValueOf = Symbol.prototype.valueOf
  }
  var isActualNaN = function (value) {
    return value !== value
  };
  var NON_HOST_TYPES = {
    'boolean': 1,
    number: 1,
    string: 1,
    undefined: 1
  };
  var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
  var hexRegex = /^[A-Fa-f0-9]+$/;
  /**
 * Expose `is`
 */
  var is = module.exports = {};
  /**
 * Test general.
 */
  /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
  is.a = is.type = function (value, type) {
    return typeof value === type
  };
  /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
  is.defined = function (value) {
    return typeof value !== 'undefined'
  };
  /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
  is.empty = function (value) {
    var type = toStr.call(value);
    var key;
    if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
      return value.length === 0
    }
    if (type === '[object Object]') {
      for (key in value) {
        if (owns.call(value, key)) {
          return false
        }
      }
      return true
    }
    return !value
  };
  /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
  is.equal = function equal(value, other) {
    if (value === other) {
      return true
    }
    var type = toStr.call(value);
    var key;
    if (type !== toStr.call(other)) {
      return false
    }
    if (type === '[object Object]') {
      for (key in value) {
        if (!is.equal(value[key], other[key]) || !(key in other)) {
          return false
        }
      }
      for (key in other) {
        if (!is.equal(value[key], other[key]) || !(key in value)) {
          return false
        }
      }
      return true
    }
    if (type === '[object Array]') {
      key = value.length;
      if (key !== other.length) {
        return false
      }
      while (--key) {
        if (!is.equal(value[key], other[key])) {
          return false
        }
      }
      return true
    }
    if (type === '[object Function]') {
      return value.prototype === other.prototype
    }
    if (type === '[object Date]') {
      return value.getTime() === other.getTime()
    }
    return false
  };
  /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
  is.hosted = function (value, host) {
    var type = typeof host[value];
    return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
  };
  /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
  is.instance = is['instanceof'] = function (value, constructor) {
    return value instanceof constructor
  };
  /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
  is.nil = is['null'] = function (value) {
    return value === null
  };
  /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
  is.undef = is.undefined = function (value) {
    return typeof value === 'undefined'
  };
  /**
 * Test arguments.
 */
  /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
  is.args = is.arguments = function (value) {
    var isStandardArguments = toStr.call(value) === '[object Arguments]';
    var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
    return isStandardArguments || isOldArguments
  };
  /**
 * Test array.
 */
  /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
  is.array = Array.isArray || function (value) {
    return toStr.call(value) === '[object Array]'
  };
  /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
  is.args.empty = function (value) {
    return is.args(value) && value.length === 0
  };
  /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
  is.array.empty = function (value) {
    return is.array(value) && value.length === 0
  };
  /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
  is.arraylike = function (value) {
    return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
  };
  /**
 * Test boolean.
 */
  /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
  is.bool = is['boolean'] = function (value) {
    return toStr.call(value) === '[object Boolean]'
  };
  /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
  is['false'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === false
  };
  /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
  is['true'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === true
  };
  /**
 * Test date.
 */
  /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
  is.date = function (value) {
    return toStr.call(value) === '[object Date]'
  };
  /**
 * Test element.
 */
  /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
  is.element = function (value) {
    return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
  };
  /**
 * Test error.
 */
  /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
  is.error = function (value) {
    return toStr.call(value) === '[object Error]'
  };
  /**
 * Test function.
 */
  /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
  is.fn = is['function'] = function (value) {
    var isAlert = typeof window !== 'undefined' && value === window.alert;
    return isAlert || toStr.call(value) === '[object Function]'
  };
  /**
 * Test number.
 */
  /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
  is.number = function (value) {
    return toStr.call(value) === '[object Number]'
  };
  /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
  is.infinite = function (value) {
    return value === Infinity || value === -Infinity
  };
  /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
  is.decimal = function (value) {
    return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
  };
  /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
  is.divisibleBy = function (value, n) {
    var isDividendInfinite = is.infinite(value);
    var isDivisorInfinite = is.infinite(n);
    var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
    return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
  };
  /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
  is.integer = is['int'] = function (value) {
    return is.number(value) && !isActualNaN(value) && value % 1 === 0
  };
  /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
  is.maximum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like')
    }
    var len = others.length;
    while (--len >= 0) {
      if (value < others[len]) {
        return false
      }
    }
    return true
  };
  /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
  is.minimum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like')
    }
    var len = others.length;
    while (--len >= 0) {
      if (value > others[len]) {
        return false
      }
    }
    return true
  };
  /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
  is.nan = function (value) {
    return !is.number(value) || value !== value
  };
  /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
  is.even = function (value) {
    return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
  };
  /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
  is.odd = function (value) {
    return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
  };
  /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
  is.ge = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value >= other
  };
  /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
  is.gt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value > other
  };
  /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
  is.le = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value <= other
  };
  /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
  is.lt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value')
    }
    return !is.infinite(value) && !is.infinite(other) && value < other
  };
  /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
  is.within = function (value, start, finish) {
    if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
      throw new TypeError('NaN is not a valid value')
    } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
      throw new TypeError('all arguments must be numbers')
    }
    var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
    return isAnyInfinite || value >= start && value <= finish
  };
  /**
 * Test object.
 */
  /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
  is.object = function (value) {
    return toStr.call(value) === '[object Object]'
  };
  /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
  is.hash = function (value) {
    return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
  };
  /**
 * Test regexp.
 */
  /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
  is.regexp = function (value) {
    return toStr.call(value) === '[object RegExp]'
  };
  /**
 * Test string.
 */
  /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
  is.string = function (value) {
    return toStr.call(value) === '[object String]'
  };
  /**
 * Test base64 string.
 */
  /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
  is.base64 = function (value) {
    return is.string(value) && (!value.length || base64Regex.test(value))
  };
  /**
 * Test base64 string.
 */
  /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
  is.hex = function (value) {
    return is.string(value) && (!value.length || hexRegex.test(value))
  };
  /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
  is.symbol = function (value) {
    return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
  }
});
// source: node_modules/daisho-riot/node_modules/is-array/index.js
require.define('is-array', function (module, exports, __dirname, __filename, process) {
  /**
 * isArray
 */
  var isArray = Array.isArray;
  /**
 * toString
 */
  var str = Object.prototype.toString;
  /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
  module.exports = isArray || function (val) {
    return !!val && '[object Array]' == str.call(val)
  }
});
// source: node_modules/daisho-riot/node_modules/is-number/index.js
require.define('is-number', function (module, exports, __dirname, __filename, process) {
  /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
  'use strict';
  var typeOf = require('kind-of');
  module.exports = function isNumber(num) {
    var type = typeOf(num);
    if (type !== 'number' && type !== 'string') {
      return false
    }
    var n = +num;
    return n - n + 1 >= 0 && num !== ''
  }
});
// source: node_modules/daisho-riot/node_modules/kind-of/index.js
require.define('kind-of', function (module, exports, __dirname, __filename, process) {
  var isBuffer = require('is-buffer');
  var toString = Object.prototype.toString;
  /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
  module.exports = function kindOf(val) {
    // primitivies
    if (typeof val === 'undefined') {
      return 'undefined'
    }
    if (val === null) {
      return 'null'
    }
    if (val === true || val === false || val instanceof Boolean) {
      return 'boolean'
    }
    if (typeof val === 'string' || val instanceof String) {
      return 'string'
    }
    if (typeof val === 'number' || val instanceof Number) {
      return 'number'
    }
    // functions
    if (typeof val === 'function' || val instanceof Function) {
      return 'function'
    }
    // array
    if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
      return 'array'
    }
    // check for instances of RegExp and Date before calling `toString`
    if (val instanceof RegExp) {
      return 'regexp'
    }
    if (val instanceof Date) {
      return 'date'
    }
    // other objects
    var type = toString.call(val);
    if (type === '[object RegExp]') {
      return 'regexp'
    }
    if (type === '[object Date]') {
      return 'date'
    }
    if (type === '[object Arguments]') {
      return 'arguments'
    }
    // buffer
    if (typeof Buffer !== 'undefined' && isBuffer(val)) {
      return 'buffer'
    }
    // es6: Map, WeakMap, Set, WeakSet
    if (type === '[object Set]') {
      return 'set'
    }
    if (type === '[object WeakSet]') {
      return 'weakset'
    }
    if (type === '[object Map]') {
      return 'map'
    }
    if (type === '[object WeakMap]') {
      return 'weakmap'
    }
    if (type === '[object Symbol]') {
      return 'symbol'
    }
    // typed arrays
    if (type === '[object Int8Array]') {
      return 'int8array'
    }
    if (type === '[object Uint8Array]') {
      return 'uint8array'
    }
    if (type === '[object Uint8ClampedArray]') {
      return 'uint8clampedarray'
    }
    if (type === '[object Int16Array]') {
      return 'int16array'
    }
    if (type === '[object Uint16Array]') {
      return 'uint16array'
    }
    if (type === '[object Int32Array]') {
      return 'int32array'
    }
    if (type === '[object Uint32Array]') {
      return 'uint32array'
    }
    if (type === '[object Float32Array]') {
      return 'float32array'
    }
    if (type === '[object Float64Array]') {
      return 'float64array'
    }
    // must be a plain object
    return 'object'
  }
});
// source: node_modules/daisho-riot/node_modules/is-buffer/index.js
require.define('is-buffer', function (module, exports, __dirname, __filename, process) {
  /**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */
  module.exports = function (obj) {
    return !!(obj != null && (obj._isBuffer || obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)))
  }
});
// source: node_modules/daisho-riot/node_modules/is-object/index.js
require.define('is-object', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = function isObject(x) {
    return typeof x === 'object' && x !== null
  }
});
// source: node_modules/daisho-riot/node_modules/is-string/index.js
require.define('is-string', function (module, exports, __dirname, __filename, process) {
  'use strict';
  var strValue = String.prototype.valueOf;
  var tryStringObject = function tryStringObject(value) {
    try {
      strValue.call(value);
      return true
    } catch (e) {
      return false
    }
  };
  var toStr = Object.prototype.toString;
  var strClass = '[object String]';
  var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
  module.exports = function isString(value) {
    if (typeof value === 'string') {
      return true
    }
    if (typeof value !== 'object') {
      return false
    }
    return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
  }
});
// source: node_modules/daisho-riot/node_modules/promise-settle/index.js
require.define('promise-settle', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = require('promise-settle/lib/promise-settle')
});
// source: node_modules/daisho-riot/node_modules/promise-settle/lib/promise-settle.js
require.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename, process) {
  'use strict';
  module.exports = settle;
  function settle(promises) {
    return Promise.resolve().then(function () {
      return promises
    }).then(function (promises) {
      if (!Array.isArray(promises))
        throw new TypeError('Expected an array of Promises');
      var promiseResults = promises.map(function (promise) {
        return Promise.resolve().then(function () {
          return promise
        }).then(function (result) {
          return promiseResult(result)
        }).catch(function (err) {
          return promiseResult(null, err)
        })
      });
      return Promise.all(promiseResults)
    })
  }
  function promiseResult(result, err) {
    var isFulfilled = typeof err === 'undefined';
    var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
    var isRejected = !isFulfilled;
    var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
    return {
      isFulfilled: returns.bind(isFulfilled),
      isRejected: returns.bind(isRejected),
      value: value,
      reason: reason
    }
  }
  function returns() {
    return this
  }
  function throws() {
    throw this
  }
});
// source: node_modules/daisho-riot/node_modules/crowdcontrol/lib/views/input.js
require.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Input, View, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib/views/view');
  Input = function (superClass) {
    extend(Input, superClass);
    function Input() {
      return Input.__super__.constructor.apply(this, arguments)
    }
    Input.prototype.input = null;
    Input.prototype.errorMessage = '';
    Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
    Input.prototype.beforeInit = function () {
      return this.html += this.errorHtml
    };
    Input.prototype.init = function () {
      return this.input.on('validate', function (_this) {
        return function (pRef) {
          return _this.validate(pRef)
        }
      }(this))
    };
    Input.prototype.getValue = function (event) {
      return event.target.value
    };
    Input.prototype.change = function (event) {
      var name, ref, ref1, value;
      ref1 = this.input, ref = ref1.ref, name = ref1.name;
      value = this.getValue(event);
      if (value === ref.get(name)) {
        return
      }
      this.input.ref.set(name, value);
      this.clearError();
      return this.validate()
    };
    Input.prototype.error = function (err) {
      var ref1;
      return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
    };
    Input.prototype.changed = function () {
    };
    Input.prototype.clearError = function () {
      return this.errorMessage = ''
    };
    Input.prototype.validate = function (pRef) {
      var p;
      p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
        return function (value) {
          _this.changed(value);
          return _this.update()
        }
      }(this))['catch'](function (_this) {
        return function (err) {
          _this.error(err);
          _this.update();
          throw err
        }
      }(this));
      if (pRef != null) {
        pRef.p = p
      }
      return p
    };
    return Input
  }(View);
  module.exports = Input  //# sourceMappingURL=input.js.map
});
// source: node_modules/daisho-riot/lib/controls/control.js
require.define('daisho-riot/lib/controls/control', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, CrowdControl, Events, riot, scrolling, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  Events = require('daisho-riot/lib/events');
  riot = require('riot/riot');
  scrolling = false;
  module.exports = Control = function (superClass) {
    extend(Control, superClass);
    function Control() {
      return Control.__super__.constructor.apply(this, arguments)
    }
    Control.prototype.init = function () {
      if (this.input == null && this.inputs != null) {
        this.input = this.inputs[this.lookup]
      }
      if (this.input != null) {
        return Control.__super__.init.apply(this, arguments)
      }
    };
    Control.prototype.getValue = function (event) {
      var ref;
      return (ref = $(event.target).val()) != null ? ref.trim() : void 0
    };
    Control.prototype.error = function (err) {
      var ref;
      if (err instanceof DOMException) {
        console.log('WARNING: Error in riot dom manipulation ignored.', err);
        return
      }
      Control.__super__.error.apply(this, arguments);
      if (!scrolling) {
        scrolling = true;
        $('html, body').animate({ scrollTop: $(this.root).offset().top - $(window).height() / 2 }, {
          complete: function () {
            return scrolling = false
          },
          duration: 500
        })
      }
      return (ref = this.m) != null ? ref.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name)) : void 0
    };
    Control.prototype.change = function () {
      var ref;
      Control.__super__.change.apply(this, arguments);
      return (ref = this.m) != null ? ref.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name)) : void 0
    };
    Control.prototype.changed = function (value) {
      var ref;
      if ((ref = this.m) != null) {
        ref.trigger(Events.ChangeSuccess, this.input.name, value)
      }
      return riot.update()
    };
    Control.register = function (m) {
      var v;
      v = Control.__super__.constructor.register.call(this);
      return v.m = m
    };
    return Control
  }(CrowdControl.Views.Input)  //# sourceMappingURL=control.js.map
});
// source: node_modules/daisho-riot/lib/events.js
require.define('daisho-riot/lib/events', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    Change: 'change',
    ChangeSuccess: 'change-success',
    ChangeFailed: 'change-failed'
  }  //# sourceMappingURL=events.js.map
});
// source: node_modules/daisho-riot/node_modules/riot/riot.js
require.define('riot/riot', function (module, exports, __dirname, __filename, process) {
  /* Riot v2.3.17, @license MIT */
  ;
  (function (window, undefined) {
    'use strict';
    var riot = {
        version: 'v2.3.17',
        settings: {}
      },
      // be aware, internal usage
      // ATTENTION: prefix the global dynamic variables with `__`
      // counter to give a unique id to all the Tag instances
      __uid = 0,
      // tags instances cache
      __virtualDom = [],
      // tags implementation cache
      __tagImpl = {},
      /**
   * Const
   */
      GLOBAL_MIXIN = '__global_mixin',
      // riot specific prefixes
      RIOT_PREFIX = 'riot-', RIOT_TAG = RIOT_PREFIX + 'tag', RIOT_TAG_IS = 'data-is',
      // for typeof == '' comparisons
      T_STRING = 'string', T_OBJECT = 'object', T_UNDEF = 'undefined', T_BOOL = 'boolean', T_FUNCTION = 'function',
      // special native tags that cannot be treated like the others
      SPECIAL_TAGS_REGEX = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/, RESERVED_WORDS_BLACKLIST = [
        '_item',
        '_id',
        '_parent',
        'update',
        'root',
        'mount',
        'unmount',
        'mixin',
        'isMounted',
        'isLoop',
        'tags',
        'parent',
        'opts',
        'trigger',
        'on',
        'off',
        'one'
      ],
      // version# for IE 8-11, 0 for others
      IE_VERSION = (window && window.document || {}).documentMode | 0;
    /* istanbul ignore next */
    riot.observable = function (el) {
      /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
      el = el || {};
      /**
   * Private variables and methods
   */
      var callbacks = {}, slice = Array.prototype.slice, onEachEvent = function (e, fn) {
          e.replace(/\S+/g, fn)
        };
      // extend the object adding the observable methods
      Object.defineProperties(el, {
        /**
     * Listen to the given space separated list of `events` and execute the `callback` each time an event is triggered.
     * @param  { String } events - events ids
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
        on: {
          value: function (events, fn) {
            if (typeof fn != 'function')
              return el;
            onEachEvent(events, function (name, pos) {
              (callbacks[name] = callbacks[name] || []).push(fn);
              fn.typed = pos > 0
            });
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Removes the given space separated list of `events` listeners
     * @param   { String } events - events ids
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
        off: {
          value: function (events, fn) {
            if (events == '*' && !fn)
              callbacks = {};
            else {
              onEachEvent(events, function (name) {
                if (fn) {
                  var arr = callbacks[name];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn)
                      arr.splice(i--, 1)
                  }
                } else
                  delete callbacks[name]
              })
            }
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Listen to the given space separated list of `events` and execute the `callback` at most once
     * @param   { String } events - events ids
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
        one: {
          value: function (events, fn) {
            function on() {
              el.off(events, on);
              fn.apply(el, arguments)
            }
            return el.on(events, on)
          },
          enumerable: false,
          writable: false,
          configurable: false
        },
        /**
     * Execute all callback functions that listen to the given space separated list of `events`
     * @param   { String } events - events ids
     * @returns { Object } el
     */
        trigger: {
          value: function (events) {
            // getting the arguments
            var arglen = arguments.length - 1, args = new Array(arglen), fns;
            for (var i = 0; i < arglen; i++) {
              args[i] = arguments[i + 1]  // skip first argument
            }
            onEachEvent(events, function (name) {
              fns = slice.call(callbacks[name] || [], 0);
              for (var i = 0, fn; fn = fns[i]; ++i) {
                if (fn.busy)
                  return;
                fn.busy = 1;
                fn.apply(el, fn.typed ? [name].concat(args) : args);
                if (fns[i] !== fn) {
                  i--
                }
                fn.busy = 0
              }
              if (callbacks['*'] && name != '*')
                el.trigger.apply(el, [
                  '*',
                  name
                ].concat(args))
            });
            return el
          },
          enumerable: false,
          writable: false,
          configurable: false
        }
      });
      return el
    }  /* istanbul ignore next */;
    (function (riot) {
      /**
 * Simple client-side router
 * @module riot-route
 */
      var RE_ORIGIN = /^.+?\/+[^\/]+/, EVENT_LISTENER = 'EventListener', REMOVE_EVENT_LISTENER = 'remove' + EVENT_LISTENER, ADD_EVENT_LISTENER = 'add' + EVENT_LISTENER, HAS_ATTRIBUTE = 'hasAttribute', REPLACE = 'replace', POPSTATE = 'popstate', HASHCHANGE = 'hashchange', TRIGGER = 'trigger', MAX_EMIT_STACK_LEVEL = 3, win = typeof window != 'undefined' && window, doc = typeof document != 'undefined' && document, hist = win && history, loc = win && (hist.location || win.location),
        // see html5-history-api
        prot = Router.prototype,
        // to minify more
        clickEvent = doc && doc.ontouchstart ? 'touchstart' : 'click', started = false, central = riot.observable(), routeFound = false, debouncedEmit, base, current, parser, secondParser, emitStack = [], emitStackLevel = 0;
      /**
 * Default parser. You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @returns {array} array
 */
      function DEFAULT_PARSER(path) {
        return path.split(/[\/?#]/)
      }
      /**
 * Default parser (second). You can replace it via router.parser method.
 * @param {string} path - current path (normalized)
 * @param {string} filter - filter string (normalized)
 * @returns {array} array
 */
      function DEFAULT_SECOND_PARSER(path, filter) {
        var re = new RegExp('^' + filter[REPLACE](/\*/g, '([^/?#]+?)')[REPLACE](/\.\./, '.*') + '$'), args = path.match(re);
        if (args)
          return args.slice(1)
      }
      /**
 * Simple/cheap debounce implementation
 * @param   {function} fn - callback
 * @param   {number} delay - delay in seconds
 * @returns {function} debounced function
 */
      function debounce(fn, delay) {
        var t;
        return function () {
          clearTimeout(t);
          t = setTimeout(fn, delay)
        }
      }
      /**
 * Set the window listeners to trigger the routes
 * @param {boolean} autoExec - see route.start
 */
      function start(autoExec) {
        debouncedEmit = debounce(emit, 1);
        win[ADD_EVENT_LISTENER](POPSTATE, debouncedEmit);
        win[ADD_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
        doc[ADD_EVENT_LISTENER](clickEvent, click);
        if (autoExec)
          emit(true)
      }
      /**
 * Router class
 */
      function Router() {
        this.$ = [];
        riot.observable(this);
        // make it observable
        central.on('stop', this.s.bind(this));
        central.on('emit', this.e.bind(this))
      }
      function normalize(path) {
        return path[REPLACE](/^\/|\/$/, '')
      }
      function isString(str) {
        return typeof str == 'string'
      }
      /**
 * Get the part after domain name
 * @param {string} href - fullpath
 * @returns {string} path from root
 */
      function getPathFromRoot(href) {
        return (href || loc.href || '')[REPLACE](RE_ORIGIN, '')
      }
      /**
 * Get the part after base
 * @param {string} href - fullpath
 * @returns {string} path from base
 */
      function getPathFromBase(href) {
        return base[0] == '#' ? (href || loc.href || '').split(base)[1] || '' : getPathFromRoot(href)[REPLACE](base, '')
      }
      function emit(force) {
        // the stack is needed for redirections
        var isRoot = emitStackLevel == 0;
        if (MAX_EMIT_STACK_LEVEL <= emitStackLevel)
          return;
        emitStackLevel++;
        emitStack.push(function () {
          var path = getPathFromBase();
          if (force || path != current) {
            central[TRIGGER]('emit', path);
            current = path
          }
        });
        if (isRoot) {
          while (emitStack.length) {
            emitStack[0]();
            emitStack.shift()
          }
          emitStackLevel = 0
        }
      }
      function click(e) {
        if (e.which != 1  // not left click
|| e.metaKey || e.ctrlKey || e.shiftKey || e.defaultPrevented)
          return;
        var el = e.target;
        while (el && el.nodeName != 'A')
          el = el.parentNode;
        if (!el || el.nodeName != 'A'  // not A tag
|| el[HAS_ATTRIBUTE]('download')  // has download attr
|| !el[HAS_ATTRIBUTE]('href')  // has no href attr
|| el.target && el.target != '_self'  // another window or frame
|| el.href.indexOf(loc.href.match(RE_ORIGIN)[0]) == -1  // cross origin
)
          return;
        if (el.href != loc.href) {
          if (el.href.split('#')[0] == loc.href.split('#')[0]  // internal jump
|| base != '#' && getPathFromRoot(el.href).indexOf(base) !== 0  // outside of base
|| !go(getPathFromBase(el.href), el.title || doc.title)  // route not found
)
            return
        }
        e.preventDefault()
      }
      /**
 * Go to the path
 * @param {string} path - destination path
 * @param {string} title - page title
 * @param {boolean} shouldReplace - use replaceState or pushState
 * @returns {boolean} - route not found flag
 */
      function go(path, title, shouldReplace) {
        if (hist) {
          // if a browser
          path = base + normalize(path);
          title = title || doc.title;
          // browsers ignores the second parameter `title`
          shouldReplace ? hist.replaceState(null, title, path) : hist.pushState(null, title, path);
          // so we need to set it manually
          doc.title = title;
          routeFound = false;
          emit();
          return routeFound
        }
        // Server-side usage: directly execute handlers for the path
        return central[TRIGGER]('emit', getPathFromBase(path))
      }
      /**
 * Go to path or set action
 * a single string:                go there
 * two strings:                    go there with setting a title
 * two strings and boolean:        replace history with setting a title
 * a single function:              set an action on the default route
 * a string/RegExp and a function: set an action on the route
 * @param {(string|function)} first - path / action / filter
 * @param {(string|RegExp|function)} second - title / action
 * @param {boolean} third - replace flag
 */
      prot.m = function (first, second, third) {
        if (isString(first) && (!second || isString(second)))
          go(first, second, third || false);
        else if (second)
          this.r(first, second);
        else
          this.r('@', first)
      };
      /**
 * Stop routing
 */
      prot.s = function () {
        this.off('*');
        this.$ = []
      };
      /**
 * Emit
 * @param {string} path - path
 */
      prot.e = function (path) {
        this.$.concat('@').some(function (filter) {
          var args = (filter == '@' ? parser : secondParser)(normalize(path), normalize(filter));
          if (typeof args != 'undefined') {
            this[TRIGGER].apply(null, [filter].concat(args));
            return routeFound = true  // exit from loop
          }
        }, this)
      };
      /**
 * Register route
 * @param {string} filter - filter for matching to url
 * @param {function} action - action to register
 */
      prot.r = function (filter, action) {
        if (filter != '@') {
          filter = '/' + normalize(filter);
          this.$.push(filter)
        }
        this.on(filter, action)
      };
      var mainRouter = new Router;
      var route = mainRouter.m.bind(mainRouter);
      /**
 * Create a sub router
 * @returns {function} the method of a new Router object
 */
      route.create = function () {
        var newSubRouter = new Router;
        // stop only this sub-router
        newSubRouter.m.stop = newSubRouter.s.bind(newSubRouter);
        // return sub-router's main method
        return newSubRouter.m.bind(newSubRouter)
      };
      /**
 * Set the base of url
 * @param {(str|RegExp)} arg - a new base or '#' or '#!'
 */
      route.base = function (arg) {
        base = arg || '#';
        current = getPathFromBase()  // recalculate current path
      };
      /** Exec routing right now **/
      route.exec = function () {
        emit(true)
      };
      /**
 * Replace the default router to yours
 * @param {function} fn - your parser function
 * @param {function} fn2 - your secondParser function
 */
      route.parser = function (fn, fn2) {
        if (!fn && !fn2) {
          // reset parser for testing...
          parser = DEFAULT_PARSER;
          secondParser = DEFAULT_SECOND_PARSER
        }
        if (fn)
          parser = fn;
        if (fn2)
          secondParser = fn2
      };
      /**
 * Helper function to get url query as an object
 * @returns {object} parsed query
 */
      route.query = function () {
        var q = {};
        var href = loc.href || current;
        href[REPLACE](/[?&](.+?)=([^&]*)/g, function (_, k, v) {
          q[k] = v
        });
        return q
      };
      /** Stop routing **/
      route.stop = function () {
        if (started) {
          if (win) {
            win[REMOVE_EVENT_LISTENER](POPSTATE, debouncedEmit);
            win[REMOVE_EVENT_LISTENER](HASHCHANGE, debouncedEmit);
            doc[REMOVE_EVENT_LISTENER](clickEvent, click)
          }
          central[TRIGGER]('stop');
          started = false
        }
      };
      /**
 * Start routing
 * @param {boolean} autoExec - automatically exec after starting if true
 */
      route.start = function (autoExec) {
        if (!started) {
          if (win) {
            if (document.readyState == 'complete')
              start(autoExec)  // the timeout is needed to solve
                               // a weird safari bug https://github.com/riot/route/issues/33
;
            else
              win[ADD_EVENT_LISTENER]('load', function () {
                setTimeout(function () {
                  start(autoExec)
                }, 1)
              })
          }
          started = true
        }
      };
      /** Prepare the router **/
      route.base();
      route.parser();
      riot.route = route
    }(riot));
    /* istanbul ignore next */
    /**
 * The riot template engine
 * @version v2.3.21
 */
    /**
 * riot.util.brackets
 *
 * - `brackets    ` - Returns a string or regex based on its parameter
 * - `brackets.set` - Change the current riot brackets
 *
 * @module
 */
    var brackets = function (UNDEF) {
      var REGLOB = 'g', R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g, R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, S_QBLOCKS = R_STRINGS.source + '|' + /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' + /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source, FINDBRACES = {
          '(': RegExp('([()])|' + S_QBLOCKS, REGLOB),
          '[': RegExp('([[\\]])|' + S_QBLOCKS, REGLOB),
          '{': RegExp('([{}])|' + S_QBLOCKS, REGLOB)
        }, DEFAULT = '{ }';
      var _pairs = [
        '{',
        '}',
        '{',
        '}',
        /{[^}]*}/,
        /\\([{}])/g,
        /\\({)|{/g,
        RegExp('\\\\(})|([[({])|(})|' + S_QBLOCKS, REGLOB),
        DEFAULT,
        /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
        /(^|[^\\]){=[\S\s]*?}/
      ];
      var cachedBrackets = UNDEF, _regex, _cache = [], _settings;
      function _loopback(re) {
        return re
      }
      function _rewrite(re, bp) {
        if (!bp)
          bp = _cache;
        return new RegExp(re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : '')
      }
      function _create(pair) {
        if (pair === DEFAULT)
          return _pairs;
        var arr = pair.split(' ');
        if (arr.length !== 2 || /[\x00-\x1F<>a-zA-Z0-9'",;\\]/.test(pair)) {
          throw new Error('Unsupported brackets "' + pair + '"')
        }
        arr = arr.concat(pair.replace(/(?=[[\]()*+?.^$|])/g, '\\').split(' '));
        arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
        arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
        arr[6] = _rewrite(_pairs[6], arr);
        arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCKS, REGLOB);
        arr[8] = pair;
        return arr
      }
      function _brackets(reOrIdx) {
        return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
      }
      _brackets.split = function split(str, tmpl, _bp) {
        // istanbul ignore next: _bp is for the compiler
        if (!_bp)
          _bp = _cache;
        var parts = [], match, isexpr, start, pos, re = _bp[6];
        isexpr = start = re.lastIndex = 0;
        while (match = re.exec(str)) {
          pos = match.index;
          if (isexpr) {
            if (match[2]) {
              re.lastIndex = skipBraces(str, match[2], re.lastIndex);
              continue
            }
            if (!match[3])
              continue
          }
          if (!match[1]) {
            unescapeStr(str.slice(start, pos));
            start = re.lastIndex;
            re = _bp[6 + (isexpr ^= 1)];
            re.lastIndex = start
          }
        }
        if (str && start < str.length) {
          unescapeStr(str.slice(start))
        }
        return parts;
        function unescapeStr(s) {
          if (tmpl || isexpr)
            parts.push(s && s.replace(_bp[5], '$1'));
          else
            parts.push(s)
        }
        function skipBraces(s, ch, ix) {
          var match, recch = FINDBRACES[ch];
          recch.lastIndex = ix;
          ix = 1;
          while (match = recch.exec(s)) {
            if (match[1] && !(match[1] === ch ? ++ix : --ix))
              break
          }
          return ix ? s.length : recch.lastIndex
        }
      };
      _brackets.hasExpr = function hasExpr(str) {
        return _cache[4].test(str)
      };
      _brackets.loopKeys = function loopKeys(expr) {
        var m = expr.match(_cache[9]);
        return m ? {
          key: m[1],
          pos: m[2],
          val: _cache[0] + m[3].trim() + _cache[1]
        } : { val: expr.trim() }
      };
      _brackets.hasRaw = function (src) {
        return _cache[10].test(src)
      };
      _brackets.array = function array(pair) {
        return pair ? _create(pair) : _cache
      };
      function _reset(pair) {
        if ((pair || (pair = DEFAULT)) !== _cache[8]) {
          _cache = _create(pair);
          _regex = pair === DEFAULT ? _loopback : _rewrite;
          _cache[9] = _regex(_pairs[9]);
          _cache[10] = _regex(_pairs[10])
        }
        cachedBrackets = pair
      }
      function _setSettings(o) {
        var b;
        o = o || {};
        b = o.brackets;
        Object.defineProperty(o, 'brackets', {
          set: _reset,
          get: function () {
            return cachedBrackets
          },
          enumerable: true
        });
        _settings = o;
        _reset(b)
      }
      Object.defineProperty(_brackets, 'settings', {
        set: _setSettings,
        get: function () {
          return _settings
        }
      });
      /* istanbul ignore next: in the browser riot is always in the scope */
      _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
      _brackets.set = _reset;
      _brackets.R_STRINGS = R_STRINGS;
      _brackets.R_MLCOMMS = R_MLCOMMS;
      _brackets.S_QBLOCKS = S_QBLOCKS;
      return _brackets
    }();
    /**
 * @module tmpl
 *
 * tmpl          - Root function, returns the template value, render with data
 * tmpl.hasExpr  - Test the existence of a expression inside a string
 * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
 */
    var tmpl = function () {
      var _cache = {};
      function _tmpl(str, data) {
        if (!str)
          return str;
        return (_cache[str] || (_cache[str] = _create(str))).call(data, _logErr)
      }
      _tmpl.haveRaw = brackets.hasRaw;
      _tmpl.hasExpr = brackets.hasExpr;
      _tmpl.loopKeys = brackets.loopKeys;
      _tmpl.errorHandler = null;
      function _logErr(err, ctx) {
        if (_tmpl.errorHandler) {
          err.riotData = {
            tagName: ctx && ctx.root && ctx.root.tagName,
            _riot_id: ctx && ctx._riot_id
          };
          _tmpl.errorHandler(err)
        }
      }
      function _create(str) {
        var expr = _getTmpl(str);
        if (expr.slice(0, 11) !== 'try{return ')
          expr = 'return ' + expr;
        return new Function('E', expr + ';')
      }
      var RE_QBLOCK = RegExp(brackets.S_QBLOCKS, 'g'), RE_QBMARK = /\x01(\d+)~/g;
      function _getTmpl(str) {
        var qstr = [], expr, parts = brackets.split(str.replace(/\u2057/g, '"'), 1);
        if (parts.length > 2 || parts[0]) {
          var i, j, list = [];
          for (i = j = 0; i < parts.length; ++i) {
            expr = parts[i];
            if (expr && (expr = i & 1 ? _parseExpr(expr, 1, qstr) : '"' + expr.replace(/\\/g, '\\\\').replace(/\r\n?|\n/g, '\\n').replace(/"/g, '\\"') + '"'))
              list[j++] = expr
          }
          expr = j < 2 ? list[0] : '[' + list.join(',') + '].join("")'
        } else {
          expr = _parseExpr(parts[1], 0, qstr)
        }
        if (qstr[0])
          expr = expr.replace(RE_QBMARK, function (_, pos) {
            return qstr[pos].replace(/\r/g, '\\r').replace(/\n/g, '\\n')
          });
        return expr
      }
      var RE_BREND = {
          '(': /[()]/g,
          '[': /[[\]]/g,
          '{': /[{}]/g
        }, CS_IDENT = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\x01(\d+)~):/;
      function _parseExpr(expr, asText, qstr) {
        if (expr[0] === '=')
          expr = expr.slice(1);
        expr = expr.replace(RE_QBLOCK, function (s, div) {
          return s.length > 2 && !div ? '' + (qstr.push(s) - 1) + '~' : s
        }).replace(/\s+/g, ' ').trim().replace(/\ ?([[\({},?\.:])\ ?/g, '$1');
        if (expr) {
          var list = [], cnt = 0, match;
          while (expr && (match = expr.match(CS_IDENT)) && !match.index) {
            var key, jsb, re = /,|([[{(])|$/g;
            expr = RegExp.rightContext;
            key = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];
            while (jsb = (match = re.exec(expr))[1])
              skipBraces(jsb, re);
            jsb = expr.slice(0, match.index);
            expr = RegExp.rightContext;
            list[cnt++] = _wrapExpr(jsb, 1, key)
          }
          expr = !cnt ? _wrapExpr(expr, asText) : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0]
        }
        return expr;
        function skipBraces(ch, re) {
          var mm, lv = 1, ir = RE_BREND[ch];
          ir.lastIndex = re.lastIndex;
          while (mm = ir.exec(expr)) {
            if (mm[0] === ch)
              ++lv;
            else if (!--lv)
              break
          }
          re.lastIndex = lv ? expr.length : ir.lastIndex
        }
      }
      // istanbul ignore next: not both
      var JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').', JS_VARNAME = /[,{][$\w]+:|(^ *|[^$\w\.])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g, JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;
      function _wrapExpr(expr, asText, key) {
        var tb;
        expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
          if (mvar) {
            pos = tb ? 0 : pos + match.length;
            if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
              match = p + '("' + mvar + JS_CONTEXT + mvar;
              if (pos)
                tb = (s = s[pos]) === '.' || s === '(' || s === '['
            } else if (pos) {
              tb = !JS_NOPROPS.test(s.slice(pos))
            }
          }
          return match
        });
        if (tb) {
          expr = 'try{return ' + expr + '}catch(e){E(e,this)}'
        }
        if (key) {
          expr = (tb ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')') + '?"' + key + '":""'
        } else if (asText) {
          expr = 'function(v){' + (tb ? expr.replace('return ', 'v=') : 'v=(' + expr + ')') + ';return v||v===0?v:""}.call(this)'
        }
        return expr
      }
      // istanbul ignore next: compatibility fix for beta versions
      _tmpl.parse = function (s) {
        return s
      };
      _tmpl.version = brackets.version = 'v2.3.21';
      return _tmpl
    }();
    /*
  lib/browser/tag/mkdom.js

  Includes hacks needed for the Internet Explorer version 9 and below
  See: http://kangax.github.io/compat-table/es5/#ie8
       http://codeplanet.io/dropping-ie8/
*/
    var mkdom = function _mkdom() {
      var reHasYield = /<yield\b/i, reYieldAll = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi, reYieldSrc = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi, reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi;
      var rootEls = {
          tr: 'tbody',
          th: 'tr',
          td: 'tr',
          col: 'colgroup'
        }, tblTags = IE_VERSION && IE_VERSION < 10 ? SPECIAL_TAGS_REGEX : /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;
      /**
   * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
   * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
   *
   * @param   {string} templ  - The template coming from the custom tag definition
   * @param   {string} [html] - HTML content that comes from the DOM element where you
   *           will mount the tag, mostly the original tag in the page
   * @returns {HTMLElement} DOM element with _templ_ merged through `YIELD` with the _html_.
   */
      function _mkdom(templ, html) {
        var match = templ && templ.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), el = mkEl('div');
        // replace all the yield tags with the tag inner html
        templ = replaceYield(templ, html);
        /* istanbul ignore next */
        if (tblTags.test(tagName))
          el = specialTags(el, templ, tagName);
        else
          el.innerHTML = templ;
        el.stub = true;
        return el
      }
      /*
    Creates the root element for table or select child elements:
    tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
  */
      function specialTags(el, templ, tagName) {
        var select = tagName[0] === 'o', parent = select ? 'select>' : 'table>';
        // trim() is important here, this ensures we don't have artifacts,
        // so we can check if we have only one element inside the parent
        el.innerHTML = '<' + parent + templ.trim() + '</' + parent;
        parent = el.firstChild;
        // returns the immediate parent if tr/th/td/col is the only element, if not
        // returns the whole tree, as this can include additional elements
        if (select) {
          parent.selectedIndex = -1  // for IE9, compatible w/current riot behavior
        } else {
          // avoids insertion of cointainer inside container (ex: tbody inside tbody)
          var tname = rootEls[tagName];
          if (tname && parent.childElementCount === 1)
            parent = $(tname, parent)
        }
        return parent
      }
      /*
    Replace the yield tag from any tag template with the innerHTML of the
    original tag in the page
  */
      function replaceYield(templ, html) {
        // do nothing if no yield
        if (!reHasYield.test(templ))
          return templ;
        // be careful with #1343 - string on the source having `$1`
        var src = {};
        html = html && html.replace(reYieldSrc, function (_, ref, text) {
          src[ref] = src[ref] || text;
          // preserve first definition
          return ''
        }).trim();
        return templ.replace(reYieldDest, function (_, ref, def) {
          // yield with from - to attrs
          return src[ref] || def || ''
        }).replace(reYieldAll, function (_, def) {
          // yield without any "from"
          return html || def || ''
        })
      }
      return _mkdom
    }();
    /**
 * Convert the item looped into an object used to extend the child tag properties
 * @param   { Object } expr - object containing the keys used to extend the children tags
 * @param   { * } key - value to assign to the new object returned
 * @param   { * } val - value containing the position of the item in the array
 * @returns { Object } - new object containing the values of the original item
 *
 * The variables 'key' and 'val' are arbitrary.
 * They depend on the collection type looped (Array, Object)
 * and on the expression used on the each tag
 *
 */
    function mkitem(expr, key, val) {
      var item = {};
      item[expr.key] = key;
      if (expr.pos)
        item[expr.pos] = val;
      return item
    }
    /**
 * Unmount the redundant tags
 * @param   { Array } items - array containing the current items to loop
 * @param   { Array } tags - array containing all the children tags
 */
    function unmountRedundant(items, tags) {
      var i = tags.length, j = items.length, t;
      while (i > j) {
        t = tags[--i];
        tags.splice(i, 1);
        t.unmount()
      }
    }
    /**
 * Move the nested custom tags in non custom loop tags
 * @param   { Object } child - non custom loop tag
 * @param   { Number } i - current position of the loop tag
 */
    function moveNestedTags(child, i) {
      Object.keys(child.tags).forEach(function (tagName) {
        var tag = child.tags[tagName];
        if (isArray(tag))
          each(tag, function (t) {
            moveChildTag(t, tagName, i)
          });
        else
          moveChildTag(tag, tagName, i)
      })
    }
    /**
 * Adds the elements for a virtual tag
 * @param { Tag } tag - the tag whose root's children will be inserted or appended
 * @param { Node } src - the node that will do the inserting or appending
 * @param { Tag } target - only if inserting, insert before this tag's first child
 */
    function addVirtual(tag, src, target) {
      var el = tag._root, sib;
      tag._virts = [];
      while (el) {
        sib = el.nextSibling;
        if (target)
          src.insertBefore(el, target._root);
        else
          src.appendChild(el);
        tag._virts.push(el);
        // hold for unmounting
        el = sib
      }
    }
    /**
 * Move virtual tag and all child nodes
 * @param { Tag } tag - first child reference used to start move
 * @param { Node } src  - the node that will do the inserting
 * @param { Tag } target - insert before this tag's first child
 * @param { Number } len - how many child nodes to move
 */
    function moveVirtual(tag, src, target, len) {
      var el = tag._root, sib, i = 0;
      for (; i < len; i++) {
        sib = el.nextSibling;
        src.insertBefore(el, target._root);
        el = sib
      }
    }
    /**
 * Manage tags having the 'each'
 * @param   { Object } dom - DOM node we need to loop
 * @param   { Tag } parent - parent tag instance where the dom node is contained
 * @param   { String } expr - string contained in the 'each' attribute
 */
    function _each(dom, parent, expr) {
      // remove the each property from the original tag
      remAttr(dom, 'each');
      var mustReorder = typeof getAttr(dom, 'no-reorder') !== T_STRING || remAttr(dom, 'no-reorder'), tagName = getTagName(dom), impl = __tagImpl[tagName] || { tmpl: dom.outerHTML }, useRoot = SPECIAL_TAGS_REGEX.test(tagName), root = dom.parentNode, ref = document.createTextNode(''), child = getTag(dom), isOption = tagName.toLowerCase() === 'option',
        // the option tags must be treated differently
        tags = [], oldItems = [], hasKeys, isVirtual = dom.tagName == 'VIRTUAL';
      // parse the each expression
      expr = tmpl.loopKeys(expr);
      // insert a marked where the loop tags will be injected
      root.insertBefore(ref, dom);
      // clean template code
      parent.one('before-mount', function () {
        // remove the original DOM node
        dom.parentNode.removeChild(dom);
        if (root.stub)
          root = parent.root
      }).on('update', function () {
        // get the new items collection
        var items = tmpl(expr.val, parent),
          // create a fragment to hold the new DOM nodes to inject in the parent tag
          frag = document.createDocumentFragment();
        // object loop. any changes cause full redraw
        if (!isArray(items)) {
          hasKeys = items || false;
          items = hasKeys ? Object.keys(items).map(function (key) {
            return mkitem(expr, key, items[key])
          }) : []
        }
        // loop all the new items
        var i = 0, itemsLength = items.length;
        for (; i < itemsLength; i++) {
          // reorder only if the items are objects
          var item = items[i], _mustReorder = mustReorder && item instanceof Object && !hasKeys, oldPos = oldItems.indexOf(item), pos = ~oldPos && _mustReorder ? oldPos : i,
            // does a tag exist in this position?
            tag = tags[pos];
          item = !hasKeys && expr.key ? mkitem(expr, item, i) : item;
          // new tag
          if (!_mustReorder && !tag  // with no-reorder we just update the old tags
|| _mustReorder && !~oldPos || !tag  // by default we always try to reorder the DOM elements
) {
            tag = new Tag(impl, {
              parent: parent,
              isLoop: true,
              hasImpl: !!__tagImpl[tagName],
              root: useRoot ? root : dom.cloneNode(),
              item: item
            }, dom.innerHTML);
            tag.mount();
            if (isVirtual)
              tag._root = tag.root.firstChild;
            // save reference for further moves or inserts
            // this tag must be appended
            if (i == tags.length || !tags[i]) {
              // fix 1581
              if (isVirtual)
                addVirtual(tag, frag);
              else
                frag.appendChild(tag.root)
            }  // this tag must be insert
            else {
              if (isVirtual)
                addVirtual(tag, root, tags[i]);
              else
                root.insertBefore(tag.root, tags[i].root);
              // #1374 some browsers reset selected here
              oldItems.splice(i, 0, item)
            }
            tags.splice(i, 0, tag);
            pos = i  // handled here so no move
          } else
            tag.update(item, true);
          // reorder the tag if it's not located in its previous position
          if (pos !== i && _mustReorder && tags[i]  // fix 1581 unable to reproduce it in a test!
) {
            // update the DOM
            if (isVirtual)
              moveVirtual(tag, root, tags[i], dom.childNodes.length);
            else
              root.insertBefore(tag.root, tags[i].root);
            // update the position attribute if it exists
            if (expr.pos)
              tag[expr.pos] = i;
            // move the old tag instance
            tags.splice(i, 0, tags.splice(pos, 1)[0]);
            // move the old item
            oldItems.splice(i, 0, oldItems.splice(pos, 1)[0]);
            // if the loop tags are not custom
            // we need to move all their custom tags into the right position
            if (!child && tag.tags)
              moveNestedTags(tag, i)
          }
          // cache the original item to use it in the events bound to this node
          // and its children
          tag._item = item;
          // cache the real parent tag internally
          defineProperty(tag, '_parent', parent)
        }
        // remove the redundant tags
        unmountRedundant(items, tags);
        // insert the new nodes
        if (isOption) {
          root.appendChild(frag);
          // #1374 <select> <option selected={true}> </select>
          if (root.length) {
            var si, op = root.options;
            root.selectedIndex = si = -1;
            for (i = 0; i < op.length; i++) {
              if (op[i].selected = op[i].__selected) {
                if (si < 0)
                  root.selectedIndex = si = i
              }
            }
          }
        } else
          root.insertBefore(frag, ref);
        // set the 'tags' property of the parent tag
        // if child is 'undefined' it means that we don't need to set this property
        // for example:
        // we don't need store the `myTag.tags['div']` property if we are looping a div tag
        // but we need to track the `myTag.tags['child']` property looping a custom child node named `child`
        if (child)
          parent.tags[tagName] = tags;
        // clone the items array
        oldItems = items.slice()
      })
    }
    /**
 * Object that will be used to inject and manage the css of every tag instance
 */
    var styleManager = function (_riot) {
      if (!window)
        return {
          // skip injection on the server
          add: function () {
          },
          inject: function () {
          }
        };
      var styleNode = function () {
        // create a new style element with the correct type
        var newNode = mkEl('style');
        setAttr(newNode, 'type', 'text/css');
        // replace any user node or insert the new one into the head
        var userNode = $('style[type=riot]');
        if (userNode) {
          if (userNode.id)
            newNode.id = userNode.id;
          userNode.parentNode.replaceChild(newNode, userNode)
        } else
          document.getElementsByTagName('head')[0].appendChild(newNode);
        return newNode
      }();
      // Create cache and shortcut to the correct property
      var cssTextProp = styleNode.styleSheet, stylesToInject = '';
      // Expose the style node in a non-modificable property
      Object.defineProperty(_riot, 'styleNode', {
        value: styleNode,
        writable: true
      });
      /**
   * Public api
   */
      return {
        /**
     * Save a tag style to be later injected into DOM
     * @param   { String } css [description]
     */
        add: function (css) {
          stylesToInject += css
        },
        /**
     * Inject all previously saved tag styles into DOM
     * innerHTML seems slow: http://jsperf.com/riot-insert-style
     */
        inject: function () {
          if (stylesToInject) {
            if (cssTextProp)
              cssTextProp.cssText += stylesToInject;
            else
              styleNode.innerHTML += stylesToInject;
            stylesToInject = ''
          }
        }
      }
    }(riot);
    function parseNamedElements(root, tag, childTags, forceParsingNamed) {
      walk(root, function (dom) {
        if (dom.nodeType == 1) {
          dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || getAttr(dom, 'each')) ? 1 : 0;
          // custom child tag
          if (childTags) {
            var child = getTag(dom);
            if (child && !dom.isLoop)
              childTags.push(initChildTag(child, {
                root: dom,
                parent: tag
              }, dom.innerHTML, tag))
          }
          if (!dom.isLoop || forceParsingNamed)
            setNamed(dom, tag, [])
        }
      })
    }
    function parseExpressions(root, tag, expressions) {
      function addExpr(dom, val, extra) {
        if (tmpl.hasExpr(val)) {
          expressions.push(extend({
            dom: dom,
            expr: val
          }, extra))
        }
      }
      walk(root, function (dom) {
        var type = dom.nodeType, attr;
        // text node
        if (type == 3 && dom.parentNode.tagName != 'STYLE')
          addExpr(dom, dom.nodeValue);
        if (type != 1)
          return;
        /* element */
        // loop
        attr = getAttr(dom, 'each');
        if (attr) {
          _each(dom, tag, attr);
          return false
        }
        // attribute expressions
        each(dom.attributes, function (attr) {
          var name = attr.name, bool = name.split('__')[1];
          addExpr(dom, attr.value, {
            attr: bool || name,
            bool: bool
          });
          if (bool) {
            remAttr(dom, name);
            return false
          }
        });
        // skip custom tags
        if (getTag(dom))
          return false
      })
    }
    function Tag(impl, conf, innerHTML) {
      var self = riot.observable(this), opts = inherit(conf.opts) || {}, parent = conf.parent, isLoop = conf.isLoop, hasImpl = conf.hasImpl, item = cleanUpData(conf.item), expressions = [], childTags = [], root = conf.root, tagName = root.tagName.toLowerCase(), attr = {}, implAttr = {}, propsInSyncWithParent = [], dom;
      // only call unmount if we have a valid __tagImpl (has name property)
      if (impl.name && root._tag)
        root._tag.unmount(true);
      // not yet mounted
      this.isMounted = false;
      root.isLoop = isLoop;
      // keep a reference to the tag just created
      // so we will be able to mount this tag multiple times
      root._tag = this;
      // create a unique id to this tag
      // it could be handy to use it also to improve the virtual dom rendering speed
      defineProperty(this, '_riot_id', ++__uid);
      // base 1 allows test !t._riot_id
      extend(this, {
        parent: parent,
        root: root,
        opts: opts,
        tags: {}
      }, item);
      // grab attributes
      each(root.attributes, function (el) {
        var val = el.value;
        // remember attributes with expressions only
        if (tmpl.hasExpr(val))
          attr[el.name] = val
      });
      dom = mkdom(impl.tmpl, innerHTML);
      // options
      function updateOpts() {
        var ctx = hasImpl && isLoop ? self : parent || self;
        // update opts from current DOM attributes
        each(root.attributes, function (el) {
          var val = el.value;
          opts[toCamel(el.name)] = tmpl.hasExpr(val) ? tmpl(val, ctx) : val
        });
        // recover those with expressions
        each(Object.keys(attr), function (name) {
          opts[toCamel(name)] = tmpl(attr[name], ctx)
        })
      }
      function normalizeData(data) {
        for (var key in item) {
          if (typeof self[key] !== T_UNDEF && isWritable(self, key))
            self[key] = data[key]
        }
      }
      function inheritFromParent() {
        if (!self.parent || !isLoop)
          return;
        each(Object.keys(self.parent), function (k) {
          // some properties must be always in sync with the parent tag
          var mustSync = !contains(RESERVED_WORDS_BLACKLIST, k) && contains(propsInSyncWithParent, k);
          if (typeof self[k] === T_UNDEF || mustSync) {
            // track the property to keep in sync
            // so we can keep it updated
            if (!mustSync)
              propsInSyncWithParent.push(k);
            self[k] = self.parent[k]
          }
        })
      }
      /**
   * Update the tag expressions and options
   * @param   { * }  data - data we want to use to extend the tag properties
   * @param   { Boolean } isInherited - is this update coming from a parent tag?
   * @returns { self }
   */
      defineProperty(this, 'update', function (data, isInherited) {
        // make sure the data passed will not override
        // the component core methods
        data = cleanUpData(data);
        // inherit properties from the parent
        inheritFromParent();
        // normalize the tag properties in case an item object was initially passed
        if (data && isObject(item)) {
          normalizeData(data);
          item = data
        }
        extend(self, data);
        updateOpts();
        self.trigger('update', data);
        update(expressions, self);
        // the updated event will be triggered
        // once the DOM will be ready and all the re-flows are completed
        // this is useful if you want to get the "real" root properties
        // 4 ex: root.offsetWidth ...
        if (isInherited && self.parent)
          // closes #1599
          self.parent.one('updated', function () {
            self.trigger('updated')
          });
        else
          rAF(function () {
            self.trigger('updated')
          });
        return this
      });
      defineProperty(this, 'mixin', function () {
        each(arguments, function (mix) {
          var instance;
          mix = typeof mix === T_STRING ? riot.mixin(mix) : mix;
          // check if the mixin is a function
          if (isFunction(mix)) {
            // create the new mixin instance
            instance = new mix;
            // save the prototype to loop it afterwards
            mix = mix.prototype
          } else
            instance = mix;
          // loop the keys in the function prototype or the all object keys
          each(Object.getOwnPropertyNames(mix), function (key) {
            // bind methods to self
            if (key != 'init')
              self[key] = isFunction(instance[key]) ? instance[key].bind(self) : instance[key]
          });
          // init method will be called automatically
          if (instance.init)
            instance.init.bind(self)()
        });
        return this
      });
      defineProperty(this, 'mount', function () {
        updateOpts();
        // add global mixin
        var globalMixin = riot.mixin(GLOBAL_MIXIN);
        if (globalMixin)
          self.mixin(globalMixin);
        // initialiation
        if (impl.fn)
          impl.fn.call(self, opts);
        // parse layout after init. fn may calculate args for nested custom tags
        parseExpressions(dom, self, expressions);
        // mount the child tags
        toggle(true);
        // update the root adding custom attributes coming from the compiler
        // it fixes also #1087
        if (impl.attrs)
          walkAttributes(impl.attrs, function (k, v) {
            setAttr(root, k, v)
          });
        if (impl.attrs || hasImpl)
          parseExpressions(self.root, self, expressions);
        if (!self.parent || isLoop)
          self.update(item);
        // internal use only, fixes #403
        self.trigger('before-mount');
        if (isLoop && !hasImpl) {
          // update the root attribute for the looped elements
          root = dom.firstChild
        } else {
          while (dom.firstChild)
            root.appendChild(dom.firstChild);
          if (root.stub)
            root = parent.root
        }
        defineProperty(self, 'root', root);
        // parse the named dom nodes in the looped child
        // adding them to the parent as well
        if (isLoop)
          parseNamedElements(self.root, self.parent, null, true);
        // if it's not a child tag we can trigger its mount event
        if (!self.parent || self.parent.isMounted) {
          self.isMounted = true;
          self.trigger('mount')
        }  // otherwise we need to wait that the parent event gets triggered
        else
          self.parent.one('mount', function () {
            // avoid to trigger the `mount` event for the tags
            // not visible included in an if statement
            if (!isInStub(self.root)) {
              self.parent.isMounted = self.isMounted = true;
              self.trigger('mount')
            }
          })
      });
      defineProperty(this, 'unmount', function (keepRootTag) {
        var el = root, p = el.parentNode, ptag, tagIndex = __virtualDom.indexOf(self);
        self.trigger('before-unmount');
        // remove this tag instance from the global virtualDom variable
        if (~tagIndex)
          __virtualDom.splice(tagIndex, 1);
        if (this._virts) {
          each(this._virts, function (v) {
            if (v.parentNode)
              v.parentNode.removeChild(v)
          })
        }
        if (p) {
          if (parent) {
            ptag = getImmediateCustomParentTag(parent);
            // remove this tag from the parent tags object
            // if there are multiple nested tags with same name..
            // remove this element form the array
            if (isArray(ptag.tags[tagName]))
              each(ptag.tags[tagName], function (tag, i) {
                if (tag._riot_id == self._riot_id)
                  ptag.tags[tagName].splice(i, 1)
              });
            else
              // otherwise just delete the tag instance
              ptag.tags[tagName] = undefined
          } else
            while (el.firstChild)
              el.removeChild(el.firstChild);
          if (!keepRootTag)
            p.removeChild(el);
          else
            // the riot-tag attribute isn't needed anymore, remove it
            remAttr(p, 'riot-tag')
        }
        self.trigger('unmount');
        toggle();
        self.off('*');
        self.isMounted = false;
        delete root._tag
      });
      // proxy function to bind updates
      // dispatched from a parent tag
      function onChildUpdate(data) {
        self.update(data, true)
      }
      function toggle(isMount) {
        // mount/unmount children
        each(childTags, function (child) {
          child[isMount ? 'mount' : 'unmount']()
        });
        // listen/unlisten parent (events flow one way from parent to children)
        if (!parent)
          return;
        var evt = isMount ? 'on' : 'off';
        // the loop tags will be always in sync with the parent automatically
        if (isLoop)
          parent[evt]('unmount', self.unmount);
        else {
          parent[evt]('update', onChildUpdate)[evt]('unmount', self.unmount)
        }
      }
      // named elements available for fn
      parseNamedElements(dom, this, childTags)
    }
    /**
 * Attach an event to a DOM node
 * @param { String } name - event name
 * @param { Function } handler - event callback
 * @param { Object } dom - dom node
 * @param { Tag } tag - tag instance
 */
    function setEventHandler(name, handler, dom, tag) {
      dom[name] = function (e) {
        var ptag = tag._parent, item = tag._item, el;
        if (!item)
          while (ptag && !item) {
            item = ptag._item;
            ptag = ptag._parent
          }
        // cross browser event fix
        e = e || window.event;
        // override the event properties
        if (isWritable(e, 'currentTarget'))
          e.currentTarget = dom;
        if (isWritable(e, 'target'))
          e.target = e.srcElement;
        if (isWritable(e, 'which'))
          e.which = e.charCode || e.keyCode;
        e.item = item;
        // prevent default behaviour (by default)
        if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {
          if (e.preventDefault)
            e.preventDefault();
          e.returnValue = false
        }
        if (!e.preventUpdate) {
          el = item ? getImmediateCustomParentTag(ptag) : tag;
          el.update()
        }
      }
    }
    /**
 * Insert a DOM node replacing another one (used by if- attribute)
 * @param   { Object } root - parent node
 * @param   { Object } node - node replaced
 * @param   { Object } before - node added
 */
    function insertTo(root, node, before) {
      if (!root)
        return;
      root.insertBefore(before, node);
      root.removeChild(node)
    }
    /**
 * Update the expressions in a Tag instance
 * @param   { Array } expressions - expression that must be re evaluated
 * @param   { Tag } tag - tag instance
 */
    function update(expressions, tag) {
      each(expressions, function (expr, i) {
        var dom = expr.dom, attrName = expr.attr, value = tmpl(expr.expr, tag), parent = expr.dom.parentNode;
        if (expr.bool) {
          value = !!value;
          if (attrName === 'selected')
            dom.__selected = value  // #1374
        } else if (value == null)
          value = '';
        // #1638: regression of #1612, update the dom only if the value of the
        // expression was changed
        if (expr.value === value) {
          return
        }
        expr.value = value;
        // textarea and text nodes has no attribute name
        if (!attrName) {
          // about #815 w/o replace: the browser converts the value to a string,
          // the comparison by "==" does too, but not in the server
          value += '';
          // test for parent avoids error with invalid assignment to nodeValue
          if (parent) {
            if (parent.tagName === 'TEXTAREA') {
              parent.value = value;
              // #1113
              if (!IE_VERSION)
                dom.nodeValue = value  // #1625 IE throws here, nodeValue
            }  // will be available on 'updated'
            else
              dom.nodeValue = value
          }
          return
        }
        // ~~#1612: look for changes in dom.value when updating the value~~
        if (attrName === 'value') {
          dom.value = value;
          return
        }
        // remove original attribute
        remAttr(dom, attrName);
        // event handler
        if (isFunction(value)) {
          setEventHandler(attrName, value, dom, tag)  // if- conditional
        } else if (attrName == 'if') {
          var stub = expr.stub, add = function () {
              insertTo(stub.parentNode, stub, dom)
            }, remove = function () {
              insertTo(dom.parentNode, dom, stub)
            };
          // add to DOM
          if (value) {
            if (stub) {
              add();
              dom.inStub = false;
              // avoid to trigger the mount event if the tags is not visible yet
              // maybe we can optimize this avoiding to mount the tag at all
              if (!isInStub(dom)) {
                walk(dom, function (el) {
                  if (el._tag && !el._tag.isMounted)
                    el._tag.isMounted = !!el._tag.trigger('mount')
                })
              }
            }  // remove from DOM
          } else {
            stub = expr.stub = stub || document.createTextNode('');
            // if the parentNode is defined we can easily replace the tag
            if (dom.parentNode)
              remove()  // otherwise we need to wait the updated event
;
            else
              (tag.parent || tag).one('updated', remove);
            dom.inStub = true
          }  // show / hide
        } else if (attrName === 'show') {
          dom.style.display = value ? '' : 'none'
        } else if (attrName === 'hide') {
          dom.style.display = value ? 'none' : ''
        } else if (expr.bool) {
          dom[attrName] = value;
          if (value)
            setAttr(dom, attrName, attrName)
        } else if (value === 0 || value && typeof value !== T_OBJECT) {
          // <img src="{ expr }">
          if (startsWith(attrName, RIOT_PREFIX) && attrName != RIOT_TAG) {
            attrName = attrName.slice(RIOT_PREFIX.length)
          }
          setAttr(dom, attrName, value)
        }
      })
    }
    /**
 * Specialized function for looping an array-like collection with `each={}`
 * @param   { Array } els - collection of items
 * @param   {Function} fn - callback function
 * @returns { Array } the array looped
 */
    function each(els, fn) {
      var len = els ? els.length : 0;
      for (var i = 0, el; i < len; i++) {
        el = els[i];
        // return false -> current item was removed by fn during the loop
        if (el != null && fn(el, i) === false)
          i--
      }
      return els
    }
    /**
 * Detect if the argument passed is a function
 * @param   { * } v - whatever you want to pass to this function
 * @returns { Boolean } -
 */
    function isFunction(v) {
      return typeof v === T_FUNCTION || false  // avoid IE problems
    }
    /**
 * Detect if the argument passed is an object, exclude null.
 * NOTE: Use isObject(x) && !isArray(x) to excludes arrays.
 * @param   { * } v - whatever you want to pass to this function
 * @returns { Boolean } -
 */
    function isObject(v) {
      return v && typeof v === T_OBJECT  // typeof null is 'object'
    }
    /**
 * Remove any DOM attribute from a node
 * @param   { Object } dom - DOM node we want to update
 * @param   { String } name - name of the property we want to remove
 */
    function remAttr(dom, name) {
      dom.removeAttribute(name)
    }
    /**
 * Convert a string containing dashes to camel case
 * @param   { String } string - input string
 * @returns { String } my-string -> myString
 */
    function toCamel(string) {
      return string.replace(/-(\w)/g, function (_, c) {
        return c.toUpperCase()
      })
    }
    /**
 * Get the value of any DOM attribute on a node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { String } name - name of the attribute we want to get
 * @returns { String | undefined } name of the node attribute whether it exists
 */
    function getAttr(dom, name) {
      return dom.getAttribute(name)
    }
    /**
 * Set any DOM attribute
 * @param { Object } dom - DOM node we want to update
 * @param { String } name - name of the property we want to set
 * @param { String } val - value of the property we want to set
 */
    function setAttr(dom, name, val) {
      dom.setAttribute(name, val)
    }
    /**
 * Detect the tag implementation by a DOM node
 * @param   { Object } dom - DOM node we need to parse to get its tag implementation
 * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
 */
    function getTag(dom) {
      return dom.tagName && __tagImpl[getAttr(dom, RIOT_TAG_IS) || getAttr(dom, RIOT_TAG) || dom.tagName.toLowerCase()]
    }
    /**
 * Add a child tag to its parent into the `tags` object
 * @param   { Object } tag - child tag instance
 * @param   { String } tagName - key where the new tag will be stored
 * @param   { Object } parent - tag instance where the new child tag will be included
 */
    function addChildTag(tag, tagName, parent) {
      var cachedTag = parent.tags[tagName];
      // if there are multiple children tags having the same name
      if (cachedTag) {
        // if the parent tags property is not yet an array
        // create it adding the first cached tag
        if (!isArray(cachedTag))
          // don't add the same tag twice
          if (cachedTag !== tag)
            parent.tags[tagName] = [cachedTag];
        // add the new nested tag to the array
        if (!contains(parent.tags[tagName], tag))
          parent.tags[tagName].push(tag)
      } else {
        parent.tags[tagName] = tag
      }
    }
    /**
 * Move the position of a custom tag in its parent tag
 * @param   { Object } tag - child tag instance
 * @param   { String } tagName - key where the tag was stored
 * @param   { Number } newPos - index where the new tag will be stored
 */
    function moveChildTag(tag, tagName, newPos) {
      var parent = tag.parent, tags;
      // no parent no move
      if (!parent)
        return;
      tags = parent.tags[tagName];
      if (isArray(tags))
        tags.splice(newPos, 0, tags.splice(tags.indexOf(tag), 1)[0]);
      else
        addChildTag(tag, tagName, parent)
    }
    /**
 * Create a new child tag including it correctly into its parent
 * @param   { Object } child - child tag implementation
 * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
 * @param   { String } innerHTML - inner html of the child node
 * @param   { Object } parent - instance of the parent tag including the child custom tag
 * @returns { Object } instance of the new child tag just created
 */
    function initChildTag(child, opts, innerHTML, parent) {
      var tag = new Tag(child, opts, innerHTML), tagName = getTagName(opts.root), ptag = getImmediateCustomParentTag(parent);
      // fix for the parent attribute in the looped elements
      tag.parent = ptag;
      // store the real parent tag
      // in some cases this could be different from the custom parent tag
      // for example in nested loops
      tag._parent = parent;
      // add this tag to the custom parent tag
      addChildTag(tag, tagName, ptag);
      // and also to the real parent tag
      if (ptag !== parent)
        addChildTag(tag, tagName, parent);
      // empty the child node once we got its template
      // to avoid that its children get compiled multiple times
      opts.root.innerHTML = '';
      return tag
    }
    /**
 * Loop backward all the parents tree to detect the first custom parent tag
 * @param   { Object } tag - a Tag instance
 * @returns { Object } the instance of the first custom parent tag found
 */
    function getImmediateCustomParentTag(tag) {
      var ptag = tag;
      while (!getTag(ptag.root)) {
        if (!ptag.parent)
          break;
        ptag = ptag.parent
      }
      return ptag
    }
    /**
 * Helper function to set an immutable property
 * @param   { Object } el - object where the new property will be set
 * @param   { String } key - object key where the new property will be stored
 * @param   { * } value - value of the new property
* @param   { Object } options - set the propery overriding the default options
 * @returns { Object } - the initial object
 */
    function defineProperty(el, key, value, options) {
      Object.defineProperty(el, key, extend({
        value: value,
        enumerable: false,
        writable: false,
        configurable: false
      }, options));
      return el
    }
    /**
 * Get the tag name of any DOM node
 * @param   { Object } dom - DOM node we want to parse
 * @returns { String } name to identify this dom node in riot
 */
    function getTagName(dom) {
      var child = getTag(dom), namedTag = getAttr(dom, 'name'), tagName = namedTag && !tmpl.hasExpr(namedTag) ? namedTag : child ? child.name : dom.tagName.toLowerCase();
      return tagName
    }
    /**
 * Extend any object with other properties
 * @param   { Object } src - source object
 * @returns { Object } the resulting extended object
 *
 * var obj = { foo: 'baz' }
 * extend(obj, {bar: 'bar', foo: 'bar'})
 * console.log(obj) => {bar: 'bar', foo: 'bar'}
 *
 */
    function extend(src) {
      var obj, args = arguments;
      for (var i = 1; i < args.length; ++i) {
        if (obj = args[i]) {
          for (var key in obj) {
            // check if this property of the source object could be overridden
            if (isWritable(src, key))
              src[key] = obj[key]
          }
        }
      }
      return src
    }
    /**
 * Check whether an array contains an item
 * @param   { Array } arr - target array
 * @param   { * } item - item to test
 * @returns { Boolean } Does 'arr' contain 'item'?
 */
    function contains(arr, item) {
      return ~arr.indexOf(item)
    }
    /**
 * Check whether an object is a kind of array
 * @param   { * } a - anything
 * @returns {Boolean} is 'a' an array?
 */
    function isArray(a) {
      return Array.isArray(a) || a instanceof Array
    }
    /**
 * Detect whether a property of an object could be overridden
 * @param   { Object }  obj - source object
 * @param   { String }  key - object property
 * @returns { Boolean } is this property writable?
 */
    function isWritable(obj, key) {
      var props = Object.getOwnPropertyDescriptor(obj, key);
      return typeof obj[key] === T_UNDEF || props && props.writable
    }
    /**
 * With this function we avoid that the internal Tag methods get overridden
 * @param   { Object } data - options we want to use to extend the tag instance
 * @returns { Object } clean object without containing the riot internal reserved words
 */
    function cleanUpData(data) {
      if (!(data instanceof Tag) && !(data && typeof data.trigger == T_FUNCTION))
        return data;
      var o = {};
      for (var key in data) {
        if (!contains(RESERVED_WORDS_BLACKLIST, key))
          o[key] = data[key]
      }
      return o
    }
    /**
 * Walk down recursively all the children tags starting dom node
 * @param   { Object }   dom - starting node where we will start the recursion
 * @param   { Function } fn - callback to transform the child node just found
 */
    function walk(dom, fn) {
      if (dom) {
        // stop the recursion
        if (fn(dom) === false)
          return;
        else {
          dom = dom.firstChild;
          while (dom) {
            walk(dom, fn);
            dom = dom.nextSibling
          }
        }
      }
    }
    /**
 * Minimize risk: only zero or one _space_ between attr & value
 * @param   { String }   html - html string we want to parse
 * @param   { Function } fn - callback function to apply on any attribute found
 */
    function walkAttributes(html, fn) {
      var m, re = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
      while (m = re.exec(html)) {
        fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
      }
    }
    /**
 * Check whether a DOM node is in stub mode, useful for the riot 'if' directive
 * @param   { Object }  dom - DOM node we want to parse
 * @returns { Boolean } -
 */
    function isInStub(dom) {
      while (dom) {
        if (dom.inStub)
          return true;
        dom = dom.parentNode
      }
      return false
    }
    /**
 * Create a generic DOM node
 * @param   { String } name - name of the DOM node we want to create
 * @returns { Object } DOM node just created
 */
    function mkEl(name) {
      return document.createElement(name)
    }
    /**
 * Shorter and fast way to select multiple nodes in the DOM
 * @param   { String } selector - DOM selector
 * @param   { Object } ctx - DOM node where the targets of our search will is located
 * @returns { Object } dom nodes found
 */
    function $$(selector, ctx) {
      return (ctx || document).querySelectorAll(selector)
    }
    /**
 * Shorter and fast way to select a single node in the DOM
 * @param   { String } selector - unique dom selector
 * @param   { Object } ctx - DOM node where the target of our search will is located
 * @returns { Object } dom node found
 */
    function $(selector, ctx) {
      return (ctx || document).querySelector(selector)
    }
    /**
 * Simple object prototypal inheritance
 * @param   { Object } parent - parent object
 * @returns { Object } child instance
 */
    function inherit(parent) {
      function Child() {
      }
      Child.prototype = parent;
      return new Child
    }
    /**
 * Get the name property needed to identify a DOM node in riot
 * @param   { Object } dom - DOM node we need to parse
 * @returns { String | undefined } give us back a string to identify this dom node
 */
    function getNamedKey(dom) {
      return getAttr(dom, 'id') || getAttr(dom, 'name')
    }
    /**
 * Set the named properties of a tag element
 * @param { Object } dom - DOM node we need to parse
 * @param { Object } parent - tag instance where the named dom element will be eventually added
 * @param { Array } keys - list of all the tag instance properties
 */
    function setNamed(dom, parent, keys) {
      // get the key value we want to add to the tag instance
      var key = getNamedKey(dom), isArr,
        // add the node detected to a tag instance using the named property
        add = function (value) {
          // avoid to override the tag properties already set
          if (contains(keys, key))
            return;
          // check whether this value is an array
          isArr = isArray(value);
          // if the key was never set
          if (!value)
            // set it once on the tag instance
            parent[key] = dom  // if it was an array and not yet set
;
          else if (!isArr || isArr && !contains(value, dom)) {
            // add the dom node into the array
            if (isArr)
              value.push(dom);
            else
              parent[key] = [
                value,
                dom
              ]
          }
        };
      // skip the elements with no named properties
      if (!key)
        return;
      // check whether this key has been already evaluated
      if (tmpl.hasExpr(key))
        // wait the first updated event only once
        parent.one('mount', function () {
          key = getNamedKey(dom);
          add(parent[key])
        });
      else
        add(parent[key])
    }
    /**
 * Faster String startsWith alternative
 * @param   { String } src - source string
 * @param   { String } str - test string
 * @returns { Boolean } -
 */
    function startsWith(src, str) {
      return src.slice(0, str.length) === str
    }
    /**
 * requestAnimationFrame function
 * Adapted from https://gist.github.com/paulirish/1579671, license MIT
 */
    var rAF = function (w) {
      var raf = w.requestAnimationFrame || w.mozRequestAnimationFrame || w.webkitRequestAnimationFrame;
      if (!raf || /iP(ad|hone|od).*OS 6/.test(w.navigator.userAgent)) {
        // buggy iOS6
        var lastTime = 0;
        raf = function (cb) {
          var nowtime = Date.now(), timeout = Math.max(16 - (nowtime - lastTime), 0);
          setTimeout(function () {
            cb(lastTime = nowtime + timeout)
          }, timeout)
        }
      }
      return raf
    }(window || {});
    /**
 * Mount a tag creating new Tag instance
 * @param   { Object } root - dom node where the tag will be mounted
 * @param   { String } tagName - name of the riot tag we want to mount
 * @param   { Object } opts - options to pass to the Tag instance
 * @returns { Tag } a new Tag instance
 */
    function mountTo(root, tagName, opts) {
      var tag = __tagImpl[tagName],
        // cache the inner HTML to fix #855
        innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
      // clear the inner html
      root.innerHTML = '';
      if (tag && root)
        tag = new Tag(tag, {
          root: root,
          opts: opts
        }, innerHTML);
      if (tag && tag.mount) {
        tag.mount();
        // add this tag to the virtualDom variable
        if (!contains(__virtualDom, tag))
          __virtualDom.push(tag)
      }
      return tag
    }
    /**
 * Riot public api
 */
    // share methods for other riot parts, e.g. compiler
    riot.util = {
      brackets: brackets,
      tmpl: tmpl
    };
    /**
 * Create a mixin that could be globally shared across all the tags
 */
    riot.mixin = function () {
      var mixins = {};
      /**
   * Create/Return a mixin by its name
   * @param   { String } name - mixin name (global mixin if missing)
   * @param   { Object } mixin - mixin logic
   * @returns { Object } the mixin logic
   */
      return function (name, mixin) {
        if (isObject(name)) {
          mixin = name;
          mixins[GLOBAL_MIXIN] = extend(mixins[GLOBAL_MIXIN] || {}, mixin);
          return
        }
        if (!mixin)
          return mixins[name];
        mixins[name] = mixin
      }
    }();
    /**
 * Create a new riot tag implementation
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   html - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
    riot.tag = function (name, html, css, attrs, fn) {
      if (isFunction(attrs)) {
        fn = attrs;
        if (/^[\w\-]+\s?=/.test(css)) {
          attrs = css;
          css = ''
        } else
          attrs = ''
      }
      if (css) {
        if (isFunction(css))
          fn = css;
        else
          styleManager.add(css)
      }
      name = name.toLowerCase();
      __tagImpl[name] = {
        name: name,
        tmpl: html,
        attrs: attrs,
        fn: fn
      };
      return name
    };
    /**
 * Create a new riot tag implementation (for use by the compiler)
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   html - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
    riot.tag2 = function (name, html, css, attrs, fn) {
      if (css)
        styleManager.add(css);
      //if (bpair) riot.settings.brackets = bpair
      __tagImpl[name] = {
        name: name,
        tmpl: html,
        attrs: attrs,
        fn: fn
      };
      return name
    };
    /**
 * Mount a tag using a specific tag implementation
 * @param   { String } selector - tag DOM selector
 * @param   { String } tagName - tag implementation name
 * @param   { Object } opts - tag logic
 * @returns { Array } new tags instances
 */
    riot.mount = function (selector, tagName, opts) {
      var els, allTags, tags = [];
      // helper functions
      function addRiotTags(arr) {
        var list = '';
        each(arr, function (e) {
          if (!/[^-\w]/.test(e)) {
            e = e.trim().toLowerCase();
            list += ',[' + RIOT_TAG_IS + '="' + e + '"],[' + RIOT_TAG + '="' + e + '"]'
          }
        });
        return list
      }
      function selectAllTags() {
        var keys = Object.keys(__tagImpl);
        return keys + addRiotTags(keys)
      }
      function pushTags(root) {
        if (root.tagName) {
          var riotTag = getAttr(root, RIOT_TAG_IS) || getAttr(root, RIOT_TAG);
          // have tagName? force riot-tag to be the same
          if (tagName && riotTag !== tagName) {
            riotTag = tagName;
            setAttr(root, RIOT_TAG_IS, tagName)
          }
          var tag = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);
          if (tag)
            tags.push(tag)
        } else if (root.length) {
          each(root, pushTags)  // assume nodeList
        }
      }
      // ----- mount code -----
      // inject styles into DOM
      styleManager.inject();
      if (isObject(tagName)) {
        opts = tagName;
        tagName = 0
      }
      // crawl the DOM to find the tag
      if (typeof selector === T_STRING) {
        if (selector === '*')
          // select all the tags registered
          // and also the tags found with the riot-tag attribute set
          selector = allTags = selectAllTags();
        else
          // or just the ones named like the selector
          selector += addRiotTags(selector.split(/, */));
        // make sure to pass always a selector
        // to the querySelectorAll function
        els = selector ? $$(selector) : []
      } else
        // probably you have passed already a tag or a NodeList
        els = selector;
      // select all the registered and mount them inside their root elements
      if (tagName === '*') {
        // get all custom tags
        tagName = allTags || selectAllTags();
        // if the root els it's just a single tag
        if (els.tagName)
          els = $$(tagName, els);
        else {
          // select all the children for all the different root elements
          var nodeList = [];
          each(els, function (_el) {
            nodeList.push($$(tagName, _el))
          });
          els = nodeList
        }
        // get rid of the tagName
        tagName = 0
      }
      pushTags(els);
      return tags
    };
    /**
 * Update all the tags instances created
 * @returns { Array } all the tags instances
 */
    riot.update = function () {
      return each(__virtualDom, function (tag) {
        tag.update()
      })
    };
    /**
 * Export the Tag constructor
 */
    riot.Tag = Tag;
    // support CommonJS, AMD & browser
    /* istanbul ignore next */
    if (typeof exports === T_OBJECT)
      module.exports = riot;
    else if (typeof define === T_FUNCTION && typeof define.amd !== T_UNDEF)
      define(function () {
        return riot
      });
    else
      window.riot = riot
  }(typeof window != 'undefined' ? window : void 0))
});
// source: node_modules/daisho-riot/lib/controls/text.js
require.define('daisho-riot/lib/controls/text', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, Text, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  module.exports = Text = function (superClass) {
    extend(Text, superClass);
    function Text() {
      return Text.__super__.constructor.apply(this, arguments)
    }
    Text.prototype.tag = 'daisho-text-control';
    Text.prototype.type = 'text';
    Text.prototype.html = require('daisho-riot/templates/text');
    Text.prototype.init = function () {
      return Text.__super__.init.apply(this, arguments)
    };
    return Text
  }(Control)  //# sourceMappingURL=text.js.map
});
// source: node_modules/daisho-riot/templates/text.html
require.define('daisho-riot/templates/text', function (module, exports, __dirname, __filename, process) {
  module.exports = '<input id="{ input.name }" name="{ name || input.name }" type="{ type }" class="{ filled: input.ref(input.name) }" onchange="{ change }" onblur="{ change }" value="{ input.ref(input.name) }">\n<label for="{ input.name }">{ placeholder }</label>\n'
});
// source: node_modules/daisho-riot/lib/controls/static-text.js
require.define('daisho-riot/lib/controls/static-text', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, StaticText, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  module.exports = StaticText = function (superClass) {
    extend(StaticText, superClass);
    function StaticText() {
      return StaticText.__super__.constructor.apply(this, arguments)
    }
    StaticText.prototype.tag = 'daisho-static-text';
    StaticText.prototype.html = '<div>{ input.ref.get(input.name) }</div>';
    StaticText.prototype.init = function () {
      return StaticText.__super__.init.apply(this, arguments)
    };
    return StaticText
  }(Control)  //# sourceMappingURL=static-text.js.map
});
// source: node_modules/daisho-riot/lib/controls/static-date.js
require.define('daisho-riot/lib/controls/static-date', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, StaticDate, moment, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  moment = require('moment/moment');
  module.exports = StaticDate = function (superClass) {
    extend(StaticDate, superClass);
    function StaticDate() {
      return StaticDate.__super__.constructor.apply(this, arguments)
    }
    StaticDate.prototype.tag = 'daisho-static-date';
    StaticDate.prototype.html = '<div>{ format(input.ref.get(input.name)) }</div>';
    StaticDate.prototype.init = function () {
      return StaticDate.__super__.init.apply(this, arguments)
    };
    StaticDate.prototype.format = function (date) {
      return moment(date).format('LLL')
    };
    return StaticDate
  }(Control)  //# sourceMappingURL=static-date.js.map
});
// source: node_modules/daisho-riot/node_modules/moment/moment.js
require.define('moment/moment', function (module, exports, __dirname, __filename, process) {
  //! moment.js
  //! version : 2.12.0
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com
  ;
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory()
  }(this, function () {
    'use strict';
    var hookCallback;
    function utils_hooks__hooks() {
      return hookCallback.apply(null, arguments)
    }
    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
      hookCallback = callback
    }
    function isArray(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]'
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]'
    }
    function map(arr, fn) {
      var res = [], i;
      for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i))
      }
      return res
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b)
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i]
        }
      }
      if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString
      }
      if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf
      }
      return a
    }
    function create_utc__createUTC(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc()
    }
    function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false
      }
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags()
      }
      return m._pf
    }
    function valid__isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m);
        m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
        if (m._strict) {
          m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined
        }
      }
      return m._isValid
    }
    function valid__createInvalid(flags) {
      var m = create_utc__createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags)
      } else {
        getParsingFlags(m).userInvalidated = true
      }
      return m
    }
    function isUndefined(input) {
      return input === void 0
    }
    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = utils_hooks__hooks.momentProperties = [];
    function copyConfig(to, from) {
      var i, prop, val;
      if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject
      }
      if (!isUndefined(from._i)) {
        to._i = from._i
      }
      if (!isUndefined(from._f)) {
        to._f = from._f
      }
      if (!isUndefined(from._l)) {
        to._l = from._l
      }
      if (!isUndefined(from._strict)) {
        to._strict = from._strict
      }
      if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm
      }
      if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC
      }
      if (!isUndefined(from._offset)) {
        to._offset = from._offset
      }
      if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from)
      }
      if (!isUndefined(from._locale)) {
        to._locale = from._locale
      }
      if (momentProperties.length > 0) {
        for (i in momentProperties) {
          prop = momentProperties[i];
          val = from[prop];
          if (!isUndefined(val)) {
            to[prop] = val
          }
        }
      }
      return to
    }
    var updateInProgress = false;
    // Moment prototype object
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
        updateInProgress = true;
        utils_hooks__hooks.updateOffset(this);
        updateInProgress = false
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number)
      } else {
        return Math.floor(number)
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber)
      }
      return value
    }
    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
      for (i = 0; i < len; i++) {
        if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
          diffs++
        }
      }
      return diffs + lengthDiff
    }
    function warn(msg) {
      if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
        console.warn('Deprecation warning: ' + msg)
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function () {
        if (firstTime) {
          warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + new Error().stack);
          firstTime = false
        }
        return fn.apply(this, arguments)
      }, fn)
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true
      }
    }
    utils_hooks__hooks.suppressDeprecationWarnings = false;
    function isFunction(input) {
      return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]'
    }
    function isObject(input) {
      return Object.prototype.toString.call(input) === '[object Object]'
    }
    function locale_set__set(config) {
      var prop, i;
      for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
          this[i] = prop
        } else {
          this['_' + i] = prop
        }
      }
      this._config = config;
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _ordinalParseLenient.
      this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source)
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop])
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop]
          } else {
            delete res[prop]
          }
        }
      }
      return res
    }
    function Locale(config) {
      if (config != null) {
        this.set(config)
      }
    }
    // internal storage for locale config files
    var locales = {};
    var globalLocale;
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key
    }
    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
      var i = 0, j, next, locale, split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
          locale = loadLocale(split.slice(0, j).join('-'));
          if (locale) {
            return locale
          }
          if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
            //the next array item is better than a shallower substring of this one
            break
          }
          j--
        }
        i++
      }
      return null
    }
    function loadLocale(name) {
      var oldLocale = null;
      // TODO: Find a better way to register and load all the locales in Node
      if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
        try {
          oldLocale = globalLocale._abbr;
          require('./locale/' + name);
          // because defineLocale currently also sets the global locale, we
          // want to undo that for lazy loaded locales
          locale_locales__getSetGlobalLocale(oldLocale)
        } catch (e) {
        }
      }
      return locales[name]
    }
    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined(values)) {
          data = locale_locales__getLocale(key)
        } else {
          data = defineLocale(key, values)
        }
        if (data) {
          // moment.duration._locale = moment._locale = data;
          globalLocale = data
        }
      }
      return globalLocale._abbr
    }
    function defineLocale(name, config) {
      if (config !== null) {
        config.abbr = name;
        if (locales[name] != null) {
          deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale');
          config = mergeConfigs(locales[name]._config, config)
        } else if (config.parentLocale != null) {
          if (locales[config.parentLocale] != null) {
            config = mergeConfigs(locales[config.parentLocale]._config, config)
          } else {
            // treat as if there is no base config
            deprecateSimple('parentLocaleUndefined', 'specified parentLocale is not defined yet')
          }
        }
        locales[name] = new Locale(config);
        // backwards compat for now: also set the locale
        locale_locales__getSetGlobalLocale(name);
        return locales[name]
      } else {
        // useful for testing
        delete locales[name];
        return null
      }
    }
    function updateLocale(name, config) {
      if (config != null) {
        var locale;
        if (locales[name] != null) {
          config = mergeConfigs(locales[name]._config, config)
        }
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;
        // backwards compat for now: also set the locale
        locale_locales__getSetGlobalLocale(name)
      } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale
          } else if (locales[name] != null) {
            delete locales[name]
          }
        }
      }
      return locales[name]
    }
    // returns locale data
    function locale_locales__getLocale(key) {
      var locale;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr
      }
      if (!key) {
        return globalLocale
      }
      if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
          return locale
        }
        key = [key]
      }
      return chooseLocale(key)
    }
    function locale_locales__listLocales() {
      return Object.keys(locales)
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit
    }
    function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop]
          }
        }
      }
      return normalizedInput
    }
    function makeGetSet(unit, keepTime) {
      return function (value) {
        if (value != null) {
          get_set__set(this, unit, value);
          utils_hooks__hooks.updateOffset(this, keepTime);
          return this
        } else {
          return get_set__get(this, unit)
        }
      }
    }
    function get_set__get(mom, unit) {
      return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN
    }
    function get_set__set(mom, unit, value) {
      if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value)
      }
    }
    // MOMENTS
    function getSet(units, value) {
      var unit;
      if (typeof units === 'object') {
        for (unit in units) {
          this.set(unit, units[unit])
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units](value)
        }
      }
      return this
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
      return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
        func = function () {
          return this[callback]()
        }
      }
      if (token) {
        formatTokenFunctions[token] = func
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function () {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2])
        }
      }
      if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
          return this.localeData().ordinal(func.apply(this, arguments), token)
        }
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '')
      }
      return input.replace(/\\/g, '')
    }
    function makeFormatFunction(format) {
      var array = format.match(formattingTokens), i, length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]]
        } else {
          array[i] = removeFormattingTokens(array[i])
        }
      }
      return function (mom) {
        var output = '';
        for (i = 0; i < length; i++) {
          output += array[i] instanceof Function ? array[i].call(mom, format) : array[i]
        }
        return output
      }
    }
    // format date using native date object
    function formatMoment(m, format) {
      if (!m.isValid()) {
        return m.localeData().invalidDate()
      }
      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
      return formatFunctions[format](m)
    }
    function expandFormat(format, locale) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1
      }
      return format
    }
    var match1 = /\d/;
    //       0 - 9
    var match2 = /\d\d/;
    //      00 - 99
    var match3 = /\d{3}/;
    //     000 - 999
    var match4 = /\d{4}/;
    //    0000 - 9999
    var match6 = /[+-]?\d{6}/;
    // -999999 - 999999
    var match1to2 = /\d\d?/;
    //       0 - 99
    var match3to4 = /\d\d\d\d?/;
    //     999 - 9999
    var match5to6 = /\d\d\d\d\d\d?/;
    //   99999 - 999999
    var match1to3 = /\d{1,3}/;
    //       0 - 999
    var match1to4 = /\d{1,4}/;
    //       0 - 9999
    var match1to6 = /[+-]?\d{1,6}/;
    // -999999 - 999999
    var matchUnsigned = /\d+/;
    //       0 - inf
    var matchSigned = /[+-]?\d+/;
    //    -inf - inf
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    // +00 -00 +00:00 -00:00 +0000 -0000 or Z
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    // 123456789 123456789.123
    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var regexes = {};
    function addRegexToken(token, regex, strictRegex) {
      regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return isStrict && strictRegex ? strictRegex : regex
      }
    }
    function getParseRegexForToken(token, config) {
      if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token))
      }
      return regexes[token](config._strict, config._locale)
    }
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
      return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4
      }))
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')
    }
    var tokens = {};
    function addParseToken(token, callback) {
      var i, func = callback;
      if (typeof token === 'string') {
        token = [token]
      }
      if (typeof callback === 'number') {
        func = function (input, array) {
          array[callback] = toInt(input)
        }
      }
      for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func
      }
    }
    function addWeekParseToken(token, callback) {
      addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token)
      })
    }
    function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token)
      }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;
    function daysInMonth(year, month) {
      return new Date(Date.UTC(year, month + 1, 0)).getUTCDate()
    }
    // FORMATTING
    addFormatToken('M', [
      'MM',
      2
    ], 'Mo', function () {
      return this.month() + 1
    });
    addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format)
    });
    addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format)
    });
    // ALIASES
    addUnitAlias('month', 'M');
    // PARSING
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
      return locale.monthsShortRegex(isStrict)
    });
    addRegexToken('MMMM', function (isStrict, locale) {
      return locale.monthsRegex(isStrict)
    });
    addParseToken([
      'M',
      'MM'
    ], function (input, array) {
      array[MONTH] = toInt(input) - 1
    });
    addParseToken([
      'MMM',
      'MMMM'
    ], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
        array[MONTH] = month
      } else {
        getParsingFlags(config).invalidMonth = input
      }
    });
    // LOCALES
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
      return isArray(this._months) ? this._months[m.month()] : this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()]
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
      return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()]
    }
    function localeMonthsParse(monthName, format, strict) {
      var i, mom, regex;
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = []
      }
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = create_utc__createUTC([
          2000,
          i
        ]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i')
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i')
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i
        }
      }
    }
    // MOMENTS
    function setMonth(mom, value) {
      var dayOfMonth;
      if (!mom.isValid()) {
        // No op
        return mom
      }
      if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
          value = toInt(value)
        } else {
          value = mom.localeData().monthsParse(value);
          // TODO: Another silent failure?
          if (typeof value !== 'number') {
            return mom
          }
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        utils_hooks__hooks.updateOffset(this, true);
        return this
      } else {
        return get_set__get(this, 'Month')
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month())
    }
    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this)
        }
        if (isStrict) {
          return this._monthsShortStrictRegex
        } else {
          return this._monthsShortRegex
        }
      } else {
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex
      }
    }
    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
          computeMonthsParse.call(this)
        }
        if (isStrict) {
          return this._monthsStrictRegex
        } else {
          return this._monthsRegex
        }
      } else {
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = create_utc__createUTC([
          2000,
          i
        ]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''))
      }
      // Sorting makes sure if one month (or abbr) is a prefix of another it
      // will match the longer piece.
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i])
      }
      this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')$', 'i');
      this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')$', 'i')
    }
    function checkOverflow(m) {
      var overflow;
      var a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
          overflow = WEEK
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY
        }
        getParsingFlags(m).overflow = overflow
      }
      return m
    }
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    var isoDates = [
      [
        'YYYYYY-MM-DD',
        /[+-]\d{6}-\d\d-\d\d/
      ],
      [
        'YYYY-MM-DD',
        /\d{4}-\d\d-\d\d/
      ],
      [
        'GGGG-[W]WW-E',
        /\d{4}-W\d\d-\d/
      ],
      [
        'GGGG-[W]WW',
        /\d{4}-W\d\d/,
        false
      ],
      [
        'YYYY-DDD',
        /\d{4}-\d{3}/
      ],
      [
        'YYYY-MM',
        /\d{4}-\d\d/,
        false
      ],
      [
        'YYYYYYMMDD',
        /[+-]\d{10}/
      ],
      [
        'YYYYMMDD',
        /\d{8}/
      ],
      // YYYYMM is NOT allowed by the standard
      [
        'GGGG[W]WWE',
        /\d{4}W\d{3}/
      ],
      [
        'GGGG[W]WW',
        /\d{4}W\d{2}/,
        false
      ],
      [
        'YYYYDDD',
        /\d{7}/
      ]
    ];
    // iso time formats and regexes
    var isoTimes = [
      [
        'HH:mm:ss.SSSS',
        /\d\d:\d\d:\d\d\.\d+/
      ],
      [
        'HH:mm:ss,SSSS',
        /\d\d:\d\d:\d\d,\d+/
      ],
      [
        'HH:mm:ss',
        /\d\d:\d\d:\d\d/
      ],
      [
        'HH:mm',
        /\d\d:\d\d/
      ],
      [
        'HHmmss.SSSS',
        /\d\d\d\d\d\d\.\d+/
      ],
      [
        'HHmmss,SSSS',
        /\d\d\d\d\d\d,\d+/
      ],
      [
        'HHmmss',
        /\d\d\d\d\d\d/
      ],
      [
        'HHmm',
        /\d\d\d\d/
      ],
      [
        'HH',
        /\d\d/
      ]
    ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    // date from iso format
    function configFromISO(config) {
      var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
      if (match) {
        getParsingFlags(config).iso = true;
        for (i = 0, l = isoDates.length; i < l; i++) {
          if (isoDates[i][1].exec(match[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break
          }
        }
        if (dateFormat == null) {
          config._isValid = false;
          return
        }
        if (match[3]) {
          for (i = 0, l = isoTimes.length; i < l; i++) {
            if (isoTimes[i][1].exec(match[3])) {
              // match[2] should be 'T' or space
              timeFormat = (match[2] || ' ') + isoTimes[i][0];
              break
            }
          }
          if (timeFormat == null) {
            config._isValid = false;
            return
          }
        }
        if (!allowTime && timeFormat != null) {
          config._isValid = false;
          return
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = 'Z'
          } else {
            config._isValid = false;
            return
          }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config)
      } else {
        config._isValid = false
      }
    }
    // date from iso format or fallback
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
        config._d = new Date(+matched[1]);
        return
      }
      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
        utils_hooks__hooks.createFromInputFallback(config)
      }
    }
    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''))
    });
    function createDate(y, m, d, h, M, s, ms) {
      //can't just apply() to create a date:
      //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
      var date = new Date(y, m, d, h, M, s, ms);
      //the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y)
      }
      return date
    }
    function createUTCDate(y) {
      var date = new Date(Date.UTC.apply(null, arguments));
      //the Date.UTC function remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y)
      }
      return date
    }
    // FORMATTING
    addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? '' + y : '+' + y
    });
    addFormatToken(0, [
      'YY',
      2
    ], 0, function () {
      return this.year() % 100
    });
    addFormatToken(0, [
      'YYYY',
      4
    ], 0, 'year');
    addFormatToken(0, [
      'YYYYY',
      5
    ], 0, 'year');
    addFormatToken(0, [
      'YYYYYY',
      6,
      true
    ], 0, 'year');
    // ALIASES
    addUnitAlias('year', 'y');
    // PARSING
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
      'YYYYY',
      'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input)
    });
    addParseToken('YY', function (input, array) {
      array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input)
    });
    addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10)
    });
    // HELPERS
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
    }
    // HOOKS
    utils_hooks__hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000)
    };
    // MOMENTS
    var getSetYear = makeGetSet('FullYear', false);
    function getIsLeapYear() {
      return isLeapYear(this.year())
    }
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
      var
        // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1
    }
    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year)
      } else {
        resYear = year;
        resDayOfYear = dayOfYear
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      }
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy)
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1
      } else {
        resYear = mom.year();
        resWeek = week
      }
      return {
        week: resWeek,
        year: resYear
      }
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7
    }
    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
      if (a != null) {
        return a
      }
      if (b != null) {
        return b
      }
      return c
    }
    function currentDateArray(config) {
      // hooks is actually the exported moment object
      var nowValue = new Date(utils_hooks__hooks.now());
      if (config._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ]
      }
      return [
        nowValue.getFullYear(),
        nowValue.getMonth(),
        nowValue.getDate()
      ]
    }
    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
      var i, date, input = [], currentDate, yearToUse;
      if (config._d) {
        return
      }
      currentDate = currentDateArray(config);
      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config)
      }
      //if the day of the year is set, figure out what it is
      if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
        if (config._dayOfYear > daysInYear(yearToUse)) {
          getParsingFlags(config)._overflowDayOfYear = true
        }
        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate()
      }
      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i]
      }
      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
        config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i]
      }
      // Check for 24:00:00.000
      if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0
      }
      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm)
      }
      if (config._nextDay) {
        config._a[HOUR] = 24
      }
    }
    function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true
        }
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;
        weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
        week = defaults(w.w, 1);
        if (w.d != null) {
          // weekday -- low day numbers are considered next week
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true
          }
        } else if (w.e != null) {
          // local weekday -- counting starts from begining of week
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true
          }
        } else {
          // default to begining of week
          weekday = dow
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true
      } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear
      }
    }
    // constant that refers to the ISO standard
    utils_hooks__hooks.ISO_8601 = function () {
    };
    // date from string and format string
    function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === utils_hooks__hooks.ISO_8601) {
        configFromISO(config);
        return
      }
      config._a = [];
      getParsingFlags(config).empty = true;
      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped)
          }
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          totalParsedInputLength += parsedInput.length
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false
          } else {
            getParsingFlags(config).unusedTokens.push(token)
          }
          addTimeToArrayFromToken(token, parsedInput, config)
        } else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token)
        }
      }
      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string)
      }
      // clear _12h flag if hour is <= 12
      if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined
      }
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
      configFromArray(config);
      checkOverflow(config)
    }
    function meridiemFixWrap(locale, hour, meridiem) {
      var isPm;
      if (meridiem == null) {
        // nothing to do
        return hour
      }
      if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem)
      } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
          hour += 12
        }
        if (!isPm && hour === 12) {
          hour = 0
        }
        return hour
      } else {
        // this is not supposed to happen
        return hour
      }
    }
    // date from string and array of format strings
    function configFromStringAndArray(config) {
      var tempConfig, bestMoment, scoreToBeat, i, currentScore;
      if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return
      }
      for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);
        if (!valid__isValid(tempConfig)) {
          continue
        }
        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (scoreToBeat == null || currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempConfig
        }
      }
      extend(config, bestMoment || tempConfig)
    }
    function configFromObject(config) {
      if (config._d) {
        return
      }
      var i = normalizeObjectUnits(config._i);
      config._a = map([
        i.year,
        i.month,
        i.day || i.date,
        i.hour,
        i.minute,
        i.second,
        i.millisecond
      ], function (obj) {
        return obj && parseInt(obj, 10)
      });
      configFromArray(config)
    }
    function createFromConfig(config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined
      }
      return res
    }
    function prepareConfig(config) {
      var input = config._i, format = config._f;
      config._locale = config._locale || locale_locales__getLocale(config._l);
      if (input === null || format === undefined && input === '') {
        return valid__createInvalid({ nullInput: true })
      }
      if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input)
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input))
      } else if (isArray(format)) {
        configFromStringAndArray(config)
      } else if (format) {
        configFromStringAndFormat(config)
      } else if (isDate(input)) {
        config._d = input
      } else {
        configFromInput(config)
      }
      if (!valid__isValid(config)) {
        config._d = null
      }
      return config
    }
    function configFromInput(config) {
      var input = config._i;
      if (input === undefined) {
        config._d = new Date(utils_hooks__hooks.now())
      } else if (isDate(input)) {
        config._d = new Date(+input)
      } else if (typeof input === 'string') {
        configFromString(config)
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
          return parseInt(obj, 10)
        });
        configFromArray(config)
      } else if (typeof input === 'object') {
        configFromObject(config)
      } else if (typeof input === 'number') {
        // from milliseconds
        config._d = new Date(input)
      } else {
        utils_hooks__hooks.createFromInputFallback(config)
      }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
      var c = {};
      if (typeof locale === 'boolean') {
        strict = locale;
        locale = undefined
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;
      return createFromConfig(c)
    }
    function local__createLocal(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false)
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function () {
      var other = local__createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other < this ? this : other
      } else {
        return valid__createInvalid()
      }
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function () {
      var other = local__createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other > this ? this : other
      } else {
        return valid__createInvalid()
      }
    });
    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0]
      }
      if (!moments.length) {
        return local__createLocal()
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i]
        }
      }
      return res
    }
    // TODO: Use [].sort instead?
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isBefore', args)
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isAfter', args)
    }
    var now = function () {
      return Date.now ? Date.now() : +new Date
    };
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
      // representation for dateAddRemove
      this._milliseconds = +milliseconds + seconds * 1000 + // 1000
      minutes * 60000 + // 1000 * 60
      hours * 3600000;
      // 1000 * 60 * 60
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days + weeks * 7;
      // It is impossible translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months + quarters * 3 + years * 12;
      this._data = {};
      this._locale = locale_locales__getLocale();
      this._bubble()
    }
    function isDuration(obj) {
      return obj instanceof Duration
    }
    // FORMATTING
    function offset(token, separator) {
      addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
          offset = -offset;
          sign = '-'
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2)
      })
    }
    offset('Z', ':');
    offset('ZZ', '');
    // PARSING
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken([
      'Z',
      'ZZ'
    ], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input)
    });
    // HELPERS
    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || '').match(matcher) || [];
      var chunk = matches[matches.length - 1] || [];
      var parts = (chunk + '').match(chunkOffset) || [
        '-',
        0,
        0
      ];
      var minutes = +(parts[1] * 60) + toInt(parts[2]);
      return parts[0] === '+' ? minutes : -minutes
    }
    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(+res._d + diff);
        utils_hooks__hooks.updateOffset(res, false);
        return res
      } else {
        return local__createLocal(input).local()
      }
    }
    function getDateOffset(m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset() / 15) * 15
    }
    // HOOKS
    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {
    };
    // MOMENTS
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime) {
      var offset = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      if (input != null) {
        if (typeof input === 'string') {
          input = offsetFromString(matchShortOffset, input)
        } else if (Math.abs(input) < 16) {
          input = input * 60
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this)
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, 'm')
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false)
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            utils_hooks__hooks.updateOffset(this, true);
            this._changeInProgress = null
          }
        }
        return this
      } else {
        return this._isUTC ? offset : getDateOffset(this)
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== 'string') {
          input = -input
        }
        this.utcOffset(input, keepLocalTime);
        return this
      } else {
        return -this.utcOffset()
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime)
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), 'm')
        }
      }
      return this
    }
    function setOffsetToParsedOffset() {
      if (this._tzm) {
        this.utcOffset(this._tzm)
      } else if (typeof this._i === 'string') {
        this.utcOffset(offsetFromString(matchOffset, this._i))
      }
      return this
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false
      }
      input = input ? local__createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted
      }
      var c = {};
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0
      } else {
        this._isDSTShifted = false
      }
      return this._isDSTShifted
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false
    }
    // ASP.NET json date format regex
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;
    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;
    function create__createDuration(input, key) {
      var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null, sign, ret, diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        }
      } else if (typeof input === 'number') {
        duration = {};
        if (key) {
          duration[key] = input
        } else {
          duration.milliseconds = input
        }
      } else if (!!(match = aspNetRegex.exec(input))) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign,
          h: toInt(match[HOUR]) * sign,
          m: toInt(match[MINUTE]) * sign,
          s: toInt(match[SECOND]) * sign,
          ms: toInt(match[MILLISECOND]) * sign
        }
      } else if (!!(match = isoRegex.exec(input))) {
        sign = match[1] === '-' ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign),
          M: parseIso(match[3], sign),
          w: parseIso(match[4], sign),
          d: parseIso(match[5], sign),
          h: parseIso(match[6], sign),
          m: parseIso(match[7], sign),
          s: parseIso(match[8], sign)
        }
      } else if (duration == null) {
        // checks for null or undefined
        duration = {}
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale
      }
      return ret
    }
    create__createDuration.fn = Duration.prototype;
    function parseIso(inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign
    }
    function positiveMomentsDifference(base, other) {
      var res = {
        milliseconds: 0,
        months: 0
      };
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months
      }
      res.milliseconds = +other - +base.clone().add(res.months, 'M');
      return res
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return {
          milliseconds: 0,
          months: 0
        }
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other)
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months
      }
      return res
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1
      } else {
        return Math.round(number)
      }
    }
    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
      return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
          tmp = val;
          val = period;
          period = tmp
        }
        val = typeof val === 'string' ? +val : val;
        dur = create__createDuration(val, period);
        add_subtract__addSubtract(this, dur, direction);
        return this
      }
    }
    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
      if (!mom.isValid()) {
        // No op
        return
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (milliseconds) {
        mom._d.setTime(+mom._d + milliseconds * isAdding)
      }
      if (days) {
        get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding)
      }
      if (months) {
        setMonth(mom, get_set__get(mom, 'Month') + months * isAdding)
      }
      if (updateOffset) {
        utils_hooks__hooks.updateOffset(mom, days || months)
      }
    }
    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');
    function moment_calendar__calendar(time, formats) {
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || local__createLocal(), sod = cloneWithOffset(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);
      return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)))
    }
    function clone() {
      return new Moment(this)
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : local__createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false
      }
      units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
      if (units === 'millisecond') {
        return +this > +localInput
      } else {
        return +localInput < +this.clone().startOf(units)
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : local__createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false
      }
      units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
      if (units === 'millisecond') {
        return +this < +localInput
      } else {
        return +this.clone().endOf(units) < +localInput
      }
    }
    function isBetween(from, to, units) {
      return this.isAfter(from, units) && this.isBefore(to, units)
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : local__createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false
      }
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
        return +this === +localInput
      } else {
        inputMs = +localInput;
        return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units)
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units)
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units)
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, delta, output;
      if (!this.isValid()) {
        return NaN
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
      units = normalizeUnits(units);
      if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
          output = output / 3
        } else if (units === 'year') {
          output = output / 12
        }
      } else {
        delta = this - that;
        output = units === 'second' ? delta / 1000 : // 1000
        units === 'minute' ? delta / 60000 : // 1000 * 60
        units === 'hour' ? delta / 3600000 : // 1000 * 60 * 60
        units === 'day' ? (delta - zoneDelta) / 86400000 : // 1000 * 60 * 60 * 24, negate dst
        units === 'week' ? (delta - zoneDelta) / 604800000 : // 1000 * 60 * 60 * 24 * 7, negate dst
        delta
      }
      return asFloat ? output : absFloor(output)
    }
    function monthDiff(a, b) {
      // difference in months
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2)
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor)
      }
      return -(wholeMonthDiff + adjust)
    }
    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    function toString() {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ')
    }
    function moment_format__toISOString() {
      var m = this.clone().utc();
      if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          return this.toDate().toISOString()
        } else {
          return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
        }
      } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
      }
    }
    function format(inputString) {
      var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
      return this.localeData().postformat(output)
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
        return create__createDuration({
          to: this,
          from: time
        }).locale(this.locale()).humanize(!withoutSuffix)
      } else {
        return this.localeData().invalidDate()
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(local__createLocal(), withoutSuffix)
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
        return create__createDuration({
          from: this,
          to: time
        }).locale(this.locale()).humanize(!withoutSuffix)
      } else {
        return this.localeData().invalidDate()
      }
    }
    function toNow(withoutSuffix) {
      return this.to(local__createLocal(), withoutSuffix)
    }
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
      var newLocaleData;
      if (key === undefined) {
        return this._locale._abbr
      } else {
        newLocaleData = locale_locales__getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData
        }
        return this
      }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
      if (key === undefined) {
        return this.localeData()
      } else {
        return this.locale(key)
      }
    });
    function localeData() {
      return this._locale
    }
    function startOf(units) {
      units = normalizeUnits(units);
      // the following switch intentionally omits break keywords
      // to utilize falling through the cases.
      switch (units) {
      case 'year':
        this.month(0);
      /* falls through */
      case 'quarter':
      case 'month':
        this.date(1);
      /* falls through */
      case 'week':
      case 'isoWeek':
      case 'day':
        this.hours(0);
      /* falls through */
      case 'hour':
        this.minutes(0);
      /* falls through */
      case 'minute':
        this.seconds(0);
      /* falls through */
      case 'second':
        this.milliseconds(0)
      }
      // weeks are a special case
      if (units === 'week') {
        this.weekday(0)
      }
      if (units === 'isoWeek') {
        this.isoWeekday(1)
      }
      // quarters are also special
      if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3)
      }
      return this
    }
    function endOf(units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
        return this
      }
      return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms')
    }
    function to_type__valueOf() {
      return +this._d - (this._offset || 0) * 60000
    }
    function unix() {
      return Math.floor(+this / 1000)
    }
    function toDate() {
      return this._offset ? new Date(+this) : this._d
    }
    function toArray() {
      var m = this;
      return [
        m.year(),
        m.month(),
        m.date(),
        m.hour(),
        m.minute(),
        m.second(),
        m.millisecond()
      ]
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      }
    }
    function toJSON() {
      // new Date(NaN).toJSON() === null
      return this.isValid() ? this.toISOString() : null
    }
    function moment_valid__isValid() {
      return valid__isValid(this)
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this))
    }
    function invalidAt() {
      return getParsingFlags(this).overflow
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      }
    }
    // FORMATTING
    addFormatToken(0, [
      'gg',
      2
    ], 0, function () {
      return this.weekYear() % 100
    });
    addFormatToken(0, [
      'GG',
      2
    ], 0, function () {
      return this.isoWeekYear() % 100
    });
    function addWeekYearFormatToken(token, getter) {
      addFormatToken(0, [
        token,
        token.length
      ], 0, getter)
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    // ALIASES
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    // PARSING
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
      'gggg',
      'ggggg',
      'GGGG',
      'GGGGG'
    ], function (input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input)
    });
    addWeekParseToken([
      'gg',
      'GG'
    ], function (input, week, config, token) {
      week[token] = utils_hooks__hooks.parseTwoDigitYear(input)
    });
    // MOMENTS
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4)
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4)
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy)
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy)
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this
    }
    // FORMATTING
    addFormatToken('Q', 0, 'Qo', 'quarter');
    // ALIASES
    addUnitAlias('quarter', 'Q');
    // PARSING
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3
    });
    // MOMENTS
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3)
    }
    // FORMATTING
    addFormatToken('w', [
      'ww',
      2
    ], 'wo', 'week');
    addFormatToken('W', [
      'WW',
      2
    ], 'Wo', 'isoWeek');
    // ALIASES
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    // PARSING
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
      'w',
      'ww',
      'W',
      'WW'
    ], function (input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input)
    });
    // HELPERS
    // LOCALES
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6  // The week that contains Jan 1st is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow
    }
    function localeFirstDayOfYear() {
      return this._week.doy
    }
    // MOMENTS
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd')
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd')
    }
    // FORMATTING
    addFormatToken('D', [
      'DD',
      2
    ], 'Do', 'date');
    // ALIASES
    addUnitAlias('date', 'D');
    // PARSING
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
      return isStrict ? locale._ordinalParse : locale._ordinalParseLenient
    });
    addParseToken([
      'D',
      'DD'
    ], DATE);
    addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0], 10)
    });
    // MOMENTS
    var getSetDayOfMonth = makeGetSet('Date', true);
    // FORMATTING
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format)
    });
    addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format)
    });
    addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format)
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    // ALIASES
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    // PARSING
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);
    addWeekParseToken([
      'dd',
      'ddd',
      'dddd'
    ], function (input, week, config, token) {
      var weekday = config._locale.weekdaysParse(input, token, config._strict);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
        week.d = weekday
      } else {
        getParsingFlags(config).invalidWeekday = input
      }
    });
    addWeekParseToken([
      'd',
      'e',
      'E'
    ], function (input, week, config, token) {
      week[token] = toInt(input)
    });
    // HELPERS
    function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
        return input
      }
      if (!isNaN(input)) {
        return parseInt(input, 10)
      }
      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
        return input
      }
      return null
    }
    // LOCALES
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
      return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()]
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
      return this._weekdaysShort[m.day()]
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
      return this._weekdaysMin[m.day()]
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
      var i, mom, regex;
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = []
      }
      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = local__createLocal([
          2000,
          1
        ]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '.?') + '$', 'i');
          this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '.?') + '$', 'i');
          this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '.?') + '$', 'i')
        }
        if (!this._weekdaysParse[i]) {
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i')
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
          return i
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i
        }
      }
    }
    // MOMENTS
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd')
      } else {
        return day
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd')
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN
      }
      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.
      return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7)
    }
    // FORMATTING
    addFormatToken('DDD', [
      'DDDD',
      3
    ], 'DDDo', 'dayOfYear');
    // ALIASES
    addUnitAlias('dayOfYear', 'DDD');
    // PARSING
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
      'DDD',
      'DDDD'
    ], function (input, array, config) {
      config._dayOfYear = toInt(input)
    });
    // HELPERS
    // MOMENTS
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, 'd')
    }
    // FORMATTING
    function hFormat() {
      return this.hours() % 12 || 12
    }
    addFormatToken('H', [
      'HH',
      2
    ], 0, 'hour');
    addFormatToken('h', [
      'hh',
      2
    ], 0, hFormat);
    addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2)
    });
    addFormatToken('hmmss', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
    });
    addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2)
    });
    addFormatToken('Hmmss', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
    });
    function meridiem(token, lowercase) {
      addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase)
      })
    }
    meridiem('a', true);
    meridiem('A', false);
    // ALIASES
    addUnitAlias('hour', 'h');
    // PARSING
    function matchMeridiem(isStrict, locale) {
      return locale._meridiemParse
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken([
      'H',
      'HH'
    ], HOUR);
    addParseToken([
      'a',
      'A'
    ], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input
    });
    addParseToken([
      'h',
      'hh'
    ], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true
    });
    addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true
    });
    addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true
    });
    addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos))
    });
    addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2))
    });
    // LOCALES
    function localeIsPM(input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return (input + '').toLowerCase().charAt(0) === 'p'
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM'
      } else {
        return isLower ? 'am' : 'AM'
      }
    }
    // MOMENTS
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);
    // FORMATTING
    addFormatToken('m', [
      'mm',
      2
    ], 0, 'minute');
    // ALIASES
    addUnitAlias('minute', 'm');
    // PARSING
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
      'm',
      'mm'
    ], MINUTE);
    // MOMENTS
    var getSetMinute = makeGetSet('Minutes', false);
    // FORMATTING
    addFormatToken('s', [
      'ss',
      2
    ], 0, 'second');
    // ALIASES
    addUnitAlias('second', 's');
    // PARSING
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
      's',
      'ss'
    ], SECOND);
    // MOMENTS
    var getSetSecond = makeGetSet('Seconds', false);
    // FORMATTING
    addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100)
    });
    addFormatToken(0, [
      'SS',
      2
    ], 0, function () {
      return ~~(this.millisecond() / 10)
    });
    addFormatToken(0, [
      'SSS',
      3
    ], 0, 'millisecond');
    addFormatToken(0, [
      'SSSS',
      4
    ], 0, function () {
      return this.millisecond() * 10
    });
    addFormatToken(0, [
      'SSSSS',
      5
    ], 0, function () {
      return this.millisecond() * 100
    });
    addFormatToken(0, [
      'SSSSSS',
      6
    ], 0, function () {
      return this.millisecond() * 1000
    });
    addFormatToken(0, [
      'SSSSSSS',
      7
    ], 0, function () {
      return this.millisecond() * 10000
    });
    addFormatToken(0, [
      'SSSSSSSS',
      8
    ], 0, function () {
      return this.millisecond() * 100000
    });
    addFormatToken(0, [
      'SSSSSSSSS',
      9
    ], 0, function () {
      return this.millisecond() * 1000000
    });
    // ALIASES
    addUnitAlias('millisecond', 'ms');
    // PARSING
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned)
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000)
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs)
    }
    // MOMENTS
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    // FORMATTING
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    // MOMENTS
    function getZoneAbbr() {
      return this._isUTC ? 'UTC' : ''
    }
    function getZoneName() {
      return this._isUTC ? 'Coordinated Universal Time' : ''
    }
    var momentPrototype__proto = Moment.prototype;
    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isSameOrAfter = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore = isSameOrBefore;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = toJSON;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.creationData = creationData;
    // Year
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;
    // Week Year
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
    // Month
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;
    // Week
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
    // Day
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;
    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
    // Offset
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;
    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;
    // Deprecations
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
    var momentPrototype = momentPrototype__proto;
    function moment__createUnix(input) {
      return local__createLocal(input * 1000)
    }
    function moment__createInZone() {
      return local__createLocal.apply(null, arguments).parseZone()
    }
    var defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    };
    function locale_calendar__calendar(key, mom, now) {
      var output = this._calendar[key];
      return isFunction(output) ? output.call(mom, now) : output
    }
    var defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
      var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format || !formatUpper) {
        return format
      }
      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1)
      });
      return this._longDateFormat[key]
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
      return this._invalidDate
    }
    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace('%d', number)
    }
    function preParsePostFormat(string) {
      return string
    }
    var defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    };
    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number)
    }
    function pastFuture(diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return isFunction(format) ? format(output) : format.replace(/%s/i, output)
    }
    var prototype__proto = Locale.prototype;
    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;
    // Month
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto._monthsRegex = defaultMonthsRegex;
    prototype__proto.monthsRegex = monthsRegex;
    prototype__proto._monthsShortRegex = defaultMonthsShortRegex;
    prototype__proto.monthsShortRegex = monthsShortRegex;
    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
    // Day of Week
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;
    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;
    function lists__get(format, index, field, setter) {
      var locale = locale_locales__getLocale();
      var utc = create_utc__createUTC().set(setter, index);
      return locale[field](utc, format)
    }
    function list(format, index, field, count, setter) {
      if (typeof format === 'number') {
        index = format;
        format = undefined
      }
      format = format || '';
      if (index != null) {
        return lists__get(format, index, field, setter)
      }
      var i;
      var out = [];
      for (i = 0; i < count; i++) {
        out[i] = lists__get(format, i, field, setter)
      }
      return out
    }
    function lists__listMonths(format, index) {
      return list(format, index, 'months', 12, 'month')
    }
    function lists__listMonthsShort(format, index) {
      return list(format, index, 'monthsShort', 12, 'month')
    }
    function lists__listWeekdays(format, index) {
      return list(format, index, 'weekdays', 7, 'day')
    }
    function lists__listWeekdaysShort(format, index) {
      return list(format, index, 'weekdaysShort', 7, 'day')
    }
    function lists__listWeekdaysMin(format, index) {
      return list(format, index, 'weekdaysMin', 7, 'day')
    }
    locale_locales__getSetGlobalLocale('en', {
      ordinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
        return number + output
      }
    });
    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
    var mathAbs = Math.abs;
    function duration_abs__abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this
    }
    function duration_add_subtract__addSubtract(duration, input, value, direction) {
      var other = create__createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble()
    }
    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, 1)
    }
    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, -1)
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number)
      } else {
        return Math.ceil(number)
      }
    }
    function bubble() {
      var milliseconds = this._milliseconds;
      var days = this._days;
      var months = this._months;
      var data = this._data;
      var seconds, minutes, hours, years, monthsFromDays;
      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
        milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
        days = 0;
        months = 0
      }
      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;
      seconds = absFloor(milliseconds / 1000);
      data.seconds = seconds % 60;
      minutes = absFloor(seconds / 60);
      data.minutes = minutes % 60;
      hours = absFloor(minutes / 60);
      data.hours = hours % 24;
      days += absFloor(hours / 24);
      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));
      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;
      data.days = days;
      data.months = months;
      data.years = years;
      return this
    }
    function daysToMonths(days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return days * 4800 / 146097
    }
    function monthsToDays(months) {
      // the reverse of daysToMonths
      return months * 146097 / 4800
    }
    function as(units) {
      var days;
      var months;
      var milliseconds = this._milliseconds;
      units = normalizeUnits(units);
      if (units === 'month' || units === 'year') {
        days = this._days + milliseconds / 86400000;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12
      } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
        case 'week':
          return days / 7 + milliseconds / 604800000;
        case 'day':
          return days + milliseconds / 86400000;
        case 'hour':
          return days * 24 + milliseconds / 3600000;
        case 'minute':
          return days * 1440 + milliseconds / 60000;
        case 'second':
          return days * 86400 + milliseconds / 1000;
        // Math.floor prevents floating point math errors here
        case 'millisecond':
          return Math.floor(days * 86400000) + milliseconds;
        default:
          throw new Error('Unknown unit ' + units)
        }
      }
    }
    // TODO: Use this.as('ms')?
    function duration_as__valueOf() {
      return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000
    }
    function makeAs(alias) {
      return function () {
        return this.as(alias)
      }
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');
    function duration_get__get(units) {
      units = normalizeUnits(units);
      return this[units + 's']()
    }
    function makeGetter(name) {
      return function () {
        return this._data[name]
      }
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
      return absFloor(this.days() / 7)
    }
    var round = Math.round;
    var thresholds = {
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month
      M: 11  // months to year
    };
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture)
    }
    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
      var duration = create__createDuration(posNegDuration).abs();
      var seconds = round(duration.as('s'));
      var minutes = round(duration.as('m'));
      var hours = round(duration.as('h'));
      var days = round(duration.as('d'));
      var months = round(duration.as('M'));
      var years = round(duration.as('y'));
      var a = seconds < thresholds.s && [
        's',
        seconds
      ] || minutes <= 1 && ['m'] || minutes < thresholds.m && [
        'mm',
        minutes
      ] || hours <= 1 && ['h'] || hours < thresholds.h && [
        'hh',
        hours
      ] || days <= 1 && ['d'] || days < thresholds.d && [
        'dd',
        days
      ] || months <= 1 && ['M'] || months < thresholds.M && [
        'MM',
        months
      ] || years <= 1 && ['y'] || [
        'yy',
        years
      ];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a)
    }
    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === undefined) {
        return false
      }
      if (limit === undefined) {
        return thresholds[threshold]
      }
      thresholds[threshold] = limit;
      return true
    }
    function humanize(withSuffix) {
      var locale = this.localeData();
      var output = duration_humanize__relativeTime(this, !withSuffix, locale);
      if (withSuffix) {
        output = locale.pastFuture(+this, output)
      }
      return locale.postformat(output)
    }
    var iso_string__abs = Math.abs;
    function iso_string__toISOString() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      var seconds = iso_string__abs(this._milliseconds) / 1000;
      var days = iso_string__abs(this._days);
      var months = iso_string__abs(this._months);
      var minutes, hours, years;
      // 3600 seconds -> 60 minutes -> 1 hour
      minutes = absFloor(seconds / 60);
      hours = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;
      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;
      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      var Y = years;
      var M = months;
      var D = days;
      var h = hours;
      var m = minutes;
      var s = seconds;
      var total = this.asSeconds();
      if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D'
      }
      return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '')
    }
    var duration_prototype__proto = Duration.prototype;
    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;
    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;
    // Side effect imports
    // FORMATTING
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    // PARSING
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input, 10) * 1000)
    });
    addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input))
    });
    // Side effect imports
    utils_hooks__hooks.version = '2.12.0';
    setHookCallback(local__createLocal);
    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.now = now;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.updateLocale = updateLocale;
    utils_hooks__hooks.locales = locale_locales__listLocales;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.prototype = momentPrototype;
    var _moment = utils_hooks__hooks;
    return _moment
  }))
});
// source: node_modules/daisho-riot/lib/controls/static-ago.js
require.define('daisho-riot/lib/controls/static-ago', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Control, StaticAgo, moment, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Control = require('daisho-riot/lib/controls/control');
  moment = require('moment/moment');
  module.exports = StaticAgo = function (superClass) {
    extend(StaticAgo, superClass);
    function StaticAgo() {
      return StaticAgo.__super__.constructor.apply(this, arguments)
    }
    StaticAgo.prototype.tag = 'daisho-static-ago';
    StaticAgo.prototype.html = '<div>{ ago(input.ref.get(input.name)) }</div>';
    StaticAgo.prototype.init = function () {
      return StaticAgo.__super__.init.apply(this, arguments)
    };
    StaticAgo.prototype.ago = function (date) {
      return moment(date).fromNow()
    };
    return StaticAgo
  }(Control)  //# sourceMappingURL=static-ago.js.map
});
// source: node_modules/daisho-riot/lib/page.js
require.define('daisho-riot/lib/page', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var Page, RiotPage, riot, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  Page = require('daisho-sdk/lib').Page;
  riot = require('riot/riot');
  module.exports = RiotPage = function (superClass) {
    extend(RiotPage, superClass);
    function RiotPage() {
      return RiotPage.__super__.constructor.apply(this, arguments)
    }
    RiotPage.prototype.tagEl = 'tag';
    RiotPage.prototype.opts = null;
    RiotPage.prototype.load = function (opts) {
      this.opts = opts != null ? opts : {}
    };
    RiotPage.prototype.render = function () {
      var el;
      el = document.createElement(this.tag);
      this.el.appendChild(el);
      this.tagEl = riot.mount(el, this.tag, this.opts)[0];
      return this.tagEl.update()
    };
    RiotPage.prototype.unload = function () {
      return this.tagEl.unmount()
    };
    return RiotPage
  }(Page)  //# sourceMappingURL=page.js.map
});
// source: node_modules/daisho-riot/lib/forms/index.js
require.define('daisho-riot/lib/forms', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    TableRow: require('daisho-riot/lib/forms/table-row'),
    register: function () {
      return this.TableRow.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/forms/table-row.js
require.define('daisho-riot/lib/forms/table-row', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, TableRow, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  module.exports = TableRow = function (superClass) {
    extend(TableRow, superClass);
    function TableRow() {
      return TableRow.__super__.constructor.apply(this, arguments)
    }
    TableRow.prototype.tag = 'daisho-table-row';
    TableRow.prototype.configs = null;
    TableRow.prototype.tableData = null;
    TableRow.prototype.data = null;
    TableRow.prototype.html = require('daisho-riot/templates/table-row');
    TableRow.prototype.init = function () {
      if (this.configs == null) {
        this.configs = this.parent.configs
      }
      if (this.tableData == null) {
        this.tableData = this.parent.tableData
      }
      return TableRow.__super__.init.apply(this, arguments)
    };
    return TableRow
  }(CrowdControl.Views.Form)  //# sourceMappingURL=table-row.js.map
});
// source: node_modules/daisho-riot/templates/table-row.html
require.define('daisho-riot/templates/table-row', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div each="{ column, i in tableData.get(\'columns\') }">\n  <daisho-poly-control lookup="{ column.id }" tag="{ column.tag }"></daisho-poly-control>\n</div>\n\n'
});
// source: node_modules/daisho-riot/lib/widgets/index.js
require.define('daisho-riot/lib/widgets', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  module.exports = {
    TableWidget: require('daisho-riot/lib/widgets/table-widget'),
    register: function () {
      return this.TableWidget.register()
    }
  }  //# sourceMappingURL=index.js.map
});
// source: node_modules/daisho-riot/lib/widgets/table-widget.js
require.define('daisho-riot/lib/widgets/table-widget', function (module, exports, __dirname, __filename, process) {
  // Generated by CoffeeScript 1.10.0
  var CrowdControl, TableWidget, refer, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  CrowdControl = require('crowdcontrol/lib');
  refer = require('referential/lib');
  module.exports = TableWidget = function (superClass) {
    extend(TableWidget, superClass);
    function TableWidget() {
      return TableWidget.__super__.constructor.apply(this, arguments)
    }
    TableWidget.prototype.tag = 'daisho-table-widget';
    TableWidget.prototype.configs = [];
    TableWidget.prototype.data = refer({});
    TableWidget.prototype.html = require('daisho-riot/templates/table-widget');
    return TableWidget
  }(CrowdControl.Views.View)  //# sourceMappingURL=table-widget.js.map
});
// source: node_modules/daisho-riot/templates/table-widget.html
require.define('daisho-riot/templates/table-widget', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div class="table-head">\n  <div class="table-row">\n    <div each="{ column, i in data.get(\'columns\') }">{ column.name }</div>\n  </div>\n</div>\n<div class="table-body">\n  <daisho-table-row class="table-row" each="{ item, i in data.get(\'items\') }" table-data="{ this.parent.data }" data="{ this.parent.data.ref(\'items.\' + i) }" config="{ this.parent.config }"></daisho-table-row>\n</div>\n\n'
});
// source: example/fixtures/user-v1.0.0/list.coffee
require.define('./list', function (module, exports, __dirname, __filename, process) {
  var UserList, View, refer, riot, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  View = require('crowdcontrol/lib').Views.View;
  refer = require('referential/lib');
  riot = require('riot/riot');
  module.exports = UserList = function (superClass) {
    extend(UserList, superClass);
    function UserList() {
      return UserList.__super__.constructor.apply(this, arguments)
    }
    UserList.prototype.tag = 'user-list';
    UserList.prototype.html = require('./templates/list');
    UserList.prototype.route = function () {
    };
    UserList.prototype.init = function () {
      this.data = refer({
        columns: [
          {
            id: 'email',
            name: 'Email',
            tag: 'daisho-static-text'
          },
          {
            id: 'firstName',
            name: 'First Name',
            tag: 'daisho-static-text'
          },
          {
            id: 'lastName',
            name: 'Last Name',
            tag: 'daisho-static-text'
          },
          {
            id: 'createdAt',
            name: 'Created On',
            tag: 'daisho-static-date'
          },
          {
            id: 'updatedAt',
            name: 'Last Updated',
            tag: 'daisho-static-ago'
          }
        ],
        items: [],
        page: 1,
        count: 0,
        display: 10,
        sort: '-UpdatedAt'
      });
      this.configs = {
        email: null,
        firstName: null,
        lastName: null,
        createdAt: null,
        updatedAt: null
      };
      return this.client.user.list({
        page: this.data.get('page'),
        display: this.data.get('display'),
        sort: this.data.get('sort')
      }).then(function (_this) {
        return function (res) {
          _this.data.set('items', res.models);
          _this.data.set('count', parseInt(res.count, 10));
          _this.data.set('page', parseInt(res.page, 10));
          _this.data.set('display', parseInt(res.display, 10));
          return riot.update()
        }
      }(this))
    };
    return UserList
  }(View)
});
// source: example/fixtures/user-v1.0.0/templates/list.html
require.define('./templates/list', function (module, exports, __dirname, __filename, process) {
  module.exports = '<div class="header">\n</div>\n<daisho-table-widget data="{ data }" configs="{ configs }">\n</daisho-table-widget>\n'
});
// source: example/fixtures/user-v1.0.0/main.coffee
require.async('user-v1.0.0/bundle.js', function (module, exports, __dirname, __filename, process) {
  var Module, Page, RiotPage, User, UserList, UserLists, ref, extend = function (child, parent) {
      for (var key in parent) {
        if (hasProp.call(parent, key))
          child[key] = parent[key]
      }
      function ctor() {
        this.constructor = child
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.__super__ = parent.prototype;
      return child
    }, hasProp = {}.hasOwnProperty;
  ref = require('daisho-sdk/lib'), Page = ref.Page, Module = ref.Module;
  RiotPage = require('daisho-riot/lib').RiotPage;
  UserList = require('./list');
  UserList.register();
  UserLists = function (superClass) {
    extend(UserLists, superClass);
    function UserLists() {
      return UserLists.__super__.constructor.apply(this, arguments)
    }
    UserLists.prototype.tag = 'user-list';
    UserLists.prototype.render = function () {
      return UserLists.__super__.render.apply(this, arguments)
    };
    return UserLists
  }(RiotPage);
  module.exports = User = function (superClass) {
    extend(User, superClass);
    function User() {
      return User.__super__.constructor.apply(this, arguments)
    }
    User.name = 'User';
    User.prototype.routes = {
      '/': UserLists,
      '/create': Page,
      '/edit': Page
    };
    return User
  }(Module)
})//# sourceMappingURL=data:application/json;base64,