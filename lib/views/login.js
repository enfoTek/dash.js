// Generated by CoffeeScript 1.12.4
var CrowdControl, Events, Login, isEmail, isPassword, isRequired, m, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CrowdControl = require('crowdcontrol');

ref = require('./middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, isPassword = ref.isPassword;

m = require('../mediator');

Events = require('../events');

module.exports = Login = (function(superClass) {
  extend(Login, superClass);

  function Login() {
    return Login.__super__.constructor.apply(this, arguments);
  }

  Login.prototype.tag = 'daisho-login';

  Login.prototype.html = require('../templates/login');

  Login.prototype.configs = {
    'account.email': [isRequired, isEmail],
    'account.password': [isPassword]
  };

  Login.prototype.error = null;

  Login.prototype.disabled = false;

  Login.prototype.init = function() {
    if (!this.data.get('account')) {
      this.data.set('account', {
        email: '',
        password: ''
      });
    }
    return Login.__super__.init.apply(this, arguments);
  };

  Login.prototype._submit = function(event) {
    var opts;
    opts = {
      email: this.data.get('account.email'),
      password: this.data.get('account.password')
    };
    this.error = null;
    m.trigger(Events.Login);
    this.disabled = true;
    this.update();
    return this.client.dashv2.login(opts).then((function(_this) {
      return function(res) {
        _this.disabled = false;
        _this.data.set('account.password', '');
        _this.data.set('account', res.user);
        _this.data.set('orgs', res.organizations);
        _this.data.set('activeOrg', 0);
        m.trigger(Events.LoginSuccess, res);
        return _this.update();
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        _this.disabled = false;
        _this.error = err.message;
        m.trigger(Events.LoginFailed, err);
        return _this.update();
      };
    })(this));
  };

  return Login;

})(CrowdControl.Views.Form);

//# sourceMappingURL=login.js.map
