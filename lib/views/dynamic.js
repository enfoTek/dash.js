// Generated by CoffeeScript 1.12.4
var $, CrowdControl, DynamicView, Events,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CrowdControl = require('crowdcontrol');

Events = require('../events');

$ = require('jquery');

module.exports = DynamicView = (function(superClass) {
  extend(DynamicView, superClass);

  function DynamicView() {
    return DynamicView.__super__.constructor.apply(this, arguments);
  }

  DynamicView.prototype.tag = 'daisho-dynamic';

  DynamicView.prototype.html = '';

  DynamicView.prototype._dataStaleField = null;

  DynamicView.prototype._dataStaleCached = '';

  DynamicView.prototype.autoRefresh = true;

  DynamicView.prototype.refreshTiming = 'before';

  DynamicView.prototype._p = false;

  DynamicView.prototype.init = function() {
    var r;
    r = this._refresh;
    this._refresh = (function(_this) {
      return function() {
        var e, p;
        p = r.apply(_this, arguments);
        if ((p != null ? p.then : void 0) != null) {
          p.then(function() {
            var e;
            try {
              return _this._dataStaleCached = JSON.stringify(_this.data.get(_this._dataStaleField));
            } catch (error) {
              e = error;
              return console.error('could not save stale data', e);
            }
          })["catch"](function(e) {
            return console.error('count not save stale data', e);
          });
        } else {
          try {
            _this._dataStaleCached = JSON.stringify(_this.data.get(_this._dataStaleField));
          } catch (error) {
            e = error;
            console.error('could not save stale data');
          }
        }
        return p;
      };
    })(this);
    if (this.autoRefresh) {
      if (this.mediator != null) {
        this.mediator.on(Events.Refresh, (function(_this) {
          return function() {
            return _this.refresh.apply(_this, arguments);
          };
        })(this));
      }
      if (this.refreshTiming === 'before') {
        this.on('update', (function(_this) {
          return function() {
            return _this.refresh.apply(_this, arguments);
          };
        })(this));
      } else {
        this.on('updated', (function(_this) {
          return function() {
            return _this.refresh.apply(_this, arguments);
          };
        })(this));
      }
    }
    if (this.mediator != null) {
      this.mediator.on(Events.ForceRefresh, (function(_this) {
        return function() {
          return _this._refresh.apply(_this, arguments);
        };
      })(this));
    }
    return DynamicView.__super__.init.apply(this, arguments);
  };

  DynamicView.prototype.refresh = function() {
    var _dataStaleCached;
    if ($(this.root).closest('body')[0] == null) {
      return;
    }
    _dataStaleCached = JSON.stringify(this.data.get(this._dataStaleField));
    if (_dataStaleCached === this._dataStaleCached) {
      return;
    }
    return this._refresh.apply(this, arguments);
  };

  DynamicView.prototype._refresh = function() {};

  return DynamicView;

})(CrowdControl.Views.Form);

//# sourceMappingURL=dynamic.js.map
