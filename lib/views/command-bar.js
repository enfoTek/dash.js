// Generated by CoffeeScript 1.12.4
var CommandBar, Events, Text, regex,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Text = require('./controls/text');

Events = require('../events');

regex = /(".*?"|[^"\s]+)+(?=\s*|\s*$)/g;

module.exports = CommandBar = (function(superClass) {
  extend(CommandBar, superClass);

  function CommandBar() {
    return CommandBar.__super__.constructor.apply(this, arguments);
  }

  CommandBar.prototype.tag = 'daisho-command-bar';

  CommandBar.prototype.html = require('../templates/command-bar');

  CommandBar.prototype.lookup = 'search';

  CommandBar.prototype.init = function() {
    CommandBar.__super__.init.apply(this, arguments);
    this.on('mount', (function(_this) {
      return function() {
        return $(_this.root).find('input').on('keydown', function(e) {
          return _this.keydown.apply(_this, arguments);
        });
      };
    })(this));
    return this.on('update', function() {});
  };

  CommandBar.prototype.keydown = function(event) {
    var cmd, found;
    if (event.which === 9) {
      cmd = this.getValue(event);
      if (cmd && cmd[0] === '/') {
        found = this.found();
        if (found[0] != null) {
          if (cmd.indexOf(found[0].command) !== 1) {
            $(this.root).find('input').val('/' + found[0].command);
            this.change(event);
          }
          return false;
        }
      }
    } else if (event.which === 13) {
      this.execute();
      return false;
    }
    this.update();
    return true;
  };

  CommandBar.prototype.pick = function(command) {
    return (function(_this) {
      return function() {
        return $(_this.root).find('input').val('/' + command);
      };
    })(this);
  };

  CommandBar.prototype.found = function() {
    var args, cmd;
    cmd = this.getValue({
      target: $(this.root).find('input')
    });
    if (cmd && cmd[0] === '/') {
      args = cmd.match(regex).map(function(str) {
        return str.trim();
      });
      return this.services.command.find(args[0].substr(1));
    } else {
      return [];
    }
  };

  CommandBar.prototype.execute = function() {
    var $el, args, cmd, e;
    $el = $(this.root).find('input');
    cmd = this.getValue({
      target: $el
    });
    if (cmd && cmd[0] === '/') {
      args = cmd.match(regex).map(function(str) {
        return str.trim();
      });
      $el.val('');
      this.change({
        target: $el
      });
      try {
        this.services.command.execute(args.shift().substr(1), args);
        this.mediator.trigger(Events.ForceRefresh);
      } catch (error) {
        e = error;
        console.log(e);
      }
    }
    return true;
  };

  return CommandBar;

})(Text);

//# sourceMappingURL=command-bar.js.map
