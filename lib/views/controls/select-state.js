// Generated by CoffeeScript 1.12.4
var Select, SelectState, states,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Select = require('./select');

states = require('../../data/states');

module.exports = SelectState = (function(superClass) {
  extend(SelectState, superClass);

  function SelectState() {
    return SelectState.__super__.constructor.apply(this, arguments);
  }

  SelectState.prototype.tag = 'select-state-control';

  SelectState.prototype.html = require('../../templates/controls/select-state');

  SelectState.prototype.options = function() {
    return states.data;
  };

  SelectState.prototype.countryField = 'country';

  SelectState.prototype.lookup = 'state';

  SelectState.prototype.init = function() {
    SelectState.__super__.init.apply(this, arguments);
    return this.on('update', (function(_this) {
      return function() {
        var k, ref, state, v;
        if (_this.input == null) {
          return;
        }
        state = _this.input.ref.get(_this.lookup);
        if (state) {
          state = state.toLowerCase();
          if (state.length === 2) {
            return _this.input.ref.set(_this.lookup, state);
          } else {
            ref = states.data;
            for (k in ref) {
              v = ref[k];
              if (v.toLowerCase() === state) {
                _this.input.ref.set(_this.lookup, k);
                return;
              }
            }
          }
        }
      };
    })(this));
  };

  SelectState.prototype.onUpdated = function() {
    var value;
    if (this.input == null) {
      return;
    }
    if (this.input.ref.get(this.countryField) === 'us') {
      $(this.root).find('.selectize-control').show();
    } else {
      $(this.root).find('.selectize-control').hide();
      value = this.input.ref.get(this.input.name);
      if (value) {
        this.input.ref.set(this.input.name, value.toUpperCase());
      }
    }
    return SelectState.__super__.onUpdated.apply(this, arguments);
  };

  return SelectState;

})(Select);

//# sourceMappingURL=select-state.js.map
