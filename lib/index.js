// Generated by CoffeeScript 1.12.4
var CrowdControl, Daisho, HanzoJS, Services, Tween, Views, animate, blueprints, reservedTags;

if (typeof window !== "undefined" && window !== null) {
  window.$ = require('jquery');
}

require('selectize');

HanzoJS = require('hanzo.js');

blueprints = require('./blueprints');

window.requestAnimationFrame = require('raf');

CrowdControl = require('crowdcontrol');

Tween = require('tween.js');

animate = function(time) {
  requestAnimationFrame(animate);
  return Tween.update(time);
};

requestAnimationFrame(animate);

reservedTags = {};

CrowdControl.Views.Form.register = CrowdControl.Views.View.register = function() {
  var r;
  if (reservedTags[this.tag]) {
    throw new Error(this.tag + " is reserved:", reservedTags[this.tag]);
  }
  r = new this;
  this.tag = r.tag;
  reservedTags[this.tag] = this;
  return r;
};

Views = require('./views');

Views.register();

Services = require('./services');

module.exports = Daisho = (function() {
  Daisho.CrowdControl = CrowdControl;

  Daisho.Views = Views;

  Daisho.Graphics = Views.Graphics;

  Daisho.Services = Services;

  Daisho.Events = require('./events');

  Daisho.mediator = require('./mediator');

  Daisho.util = require('./util');

  Daisho.prototype.client = null;

  Daisho.prototype.data = null;

  Daisho.prototype.settings = null;

  Daisho.prototype.modules = null;

  Daisho.prototype.debug = false;

  Daisho.prototype.services = null;

  Daisho.prototype.util = Daisho.util;

  function Daisho(url, modules, data, settings, debug) {
    var k, v;
    this.data = data;
    this.settings = settings;
    if (debug == null) {
      debug = false;
    }
    this.client = new HanzoJS.Api({
      debug: debug,
      endpoint: url
    });
    this.debug = debug;
    this.services = {
      menu: new Services.Menu(this, debug),
      page: new Services.Page(this, debug),
      command: new Services.Command(this, debug)
    };
    this.services.page.mount = (function(_this) {
      return function() {
        return _this.mount.apply(_this, arguments);
      };
    })(this);
    this.services.page.update = (function(_this) {
      return function() {
        return _this.update.apply(_this, arguments);
      };
    })(this);
    for (k in blueprints) {
      v = blueprints[k];
      this.client.addBlueprints(k, v);
    }
    this.modules = modules;
  }

  Daisho.prototype.start = function() {
    var k, module, modules;
    modules = this.modules;
    for (k in modules) {
      module = modules[k];
      if (typeof module === 'string') {

      } else {
        new module(this, this.services.page, this.services.menu, this.services.command);
      }
    }
    return this.services.menu.start();
  };

  Daisho.prototype.mount = function(tag, opts) {
    var isHTML, tagName;
    if (opts == null) {
      opts = {};
    }
    isHTML = tag instanceof HTMLElement;
    if (isHTML) {
      tagName = tag.tagName.toLowerCase();
    } else {
      tagName = tag;
    }
    if (!opts.client) {
      opts.client = this.client;
    }
    if (!opts.data) {
      if (!this.data.get(tagName)) {
        this.data.set(tagName, {});
      }
      opts.data = this.data.ref(tagName);
    }
    if (!opts.parentData) {
      opts.parentData = this.data;
    }
    if (!opts.services) {
      opts.settings = this.settings;
    }
    if (!opts.services) {
      opts.services = this.services;
    }
    if (!opts.mediator) {
      opts.mediator = Daisho.mediator;
    }
    if (!opts.daisho) {
      opts.daisho = this;
    }
    if (typeof tag === 'string') {
      return CrowdControl.mount(tag, opts);
    } else if (isHTML) {
      return CrowdControl.mount(tag, tagName, opts);
    }
  };

  Daisho.prototype.update = function() {
    return CrowdControl.update.apply(riot, arguments);
  };

  return Daisho;

})();

//# sourceMappingURL=index.js.map
