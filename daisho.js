(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require a module
  function rqzt(file, callback) {
    if ({}.hasOwnProperty.call(rqzt.cache, file))
      return rqzt.cache[file];
    // Handle async require
    if (typeof callback == 'function') {
      rqzt.load(file, callback);
      return
    }
    var resolved = rqzt.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      rqzt: rqzt,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    rqzt.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return rqzt.cache[file] = module$.exports
  }
  rqzt.modules = {};
  rqzt.cache = {};
  rqzt.resolve = function (file) {
    return {}.hasOwnProperty.call(rqzt.modules, file) ? rqzt.modules[file] : void 0
  };
  // Define normal static module
  rqzt.define = function (file, fn) {
    rqzt.modules[file] = fn
  };
  // source: src/index.coffee
  rqzt.define('./index', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Daisho, HanzoJS, Services, Tween, Views, animate, blueprints, reservedTags;
    if (typeof window !== 'undefined' && window !== null) {
      window.$ = rqzt('jquery/dist/jquery')
    }
    rqzt('selectize/dist/js/selectize');
    HanzoJS = rqzt('hanzo.js/lib/browser');
    blueprints = rqzt('./blueprints');
    if (typeof window !== 'undefined' && window !== null) {
      window.riot = rqzt('riot/riot')
    }
    riot.observable = rqzt('riot-observable/dist/observable');
    window.requestAnimationFrame = rqzt('raf');
    CrowdControl = rqzt('crowdcontrol/lib');
    Tween = rqzt('tween.js/src/Tween');
    animate = function (time) {
      requestAnimationFrame(animate);
      return Tween.update(time)
    };
    requestAnimationFrame(animate);
    reservedTags = {};
    CrowdControl.Views.Form.register = CrowdControl.Views.View.register = function () {
      var r;
      if (reservedTags[this.tag]) {
        throw new Error(this.tag + ' is reserved:', reservedTags[this.tag])
      }
      r = new this;
      this.tag = r.tag;
      reservedTags[this.tag] = this;
      return r
    };
    Views = rqzt('./views');
    Views.register();
    Services = rqzt('./services');
    module.exports = Daisho = function () {
      Daisho.CrowdControl = CrowdControl;
      Daisho.Views = Views;
      Daisho.Graphics = Views.Graphics;
      Daisho.Services = Services;
      Daisho.Events = rqzt('./events');
      Daisho.Mediator = rqzt('./mediator');
      Daisho.Riot = riot;
      Daisho.util = rqzt('./util');
      Daisho.prototype.client = null;
      Daisho.prototype.data = null;
      Daisho.prototype.modules = null;
      Daisho.prototype.debug = false;
      Daisho.prototype.services = null;
      Daisho.prototype.util = Daisho.util;
      function Daisho(url, modules, data, debug) {
        var k, v;
        this.data = data;
        if (debug == null) {
          debug = false
        }
        this.client = new HanzoJS.Api({
          debug: debug,
          endpoint: url
        });
        this.debug = debug;
        this.services = {
          menu: new Services.Menu(this),
          page: new Services.Page(this, this.data, debug)
        };
        this.services.page.mount = function (_this) {
          return function () {
            return _this.mount.apply(_this, arguments)
          }
        }(this);
        this.services.page.update = function (_this) {
          return function () {
            return _this.update.apply(_this, arguments)
          }
        }(this);
        for (k in blueprints) {
          v = blueprints[k];
          this.client.addBlueprints(k, v)
        }
        this.modules = modules
      }
      Daisho.prototype.start = function () {
        var k, module, modules;
        modules = this.modules;
        for (k in modules) {
          module = modules[k];
          if (typeof module === 'string') {
          } else {
            new module(this, this.services.page, this.services.menu)
          }
        }
        return this.services.menu.start()
      };
      Daisho.prototype.mount = function (tag, opts) {
        var isHTML, tagName;
        if (opts == null) {
          opts = {}
        }
        isHTML = tag instanceof HTMLElement;
        if (isHTML) {
          tagName = tag.tagName.toLowerCase()
        } else {
          tagName = tag
        }
        if (!opts.client) {
          opts.client = this.client
        }
        if (!opts.data) {
          if (this.data.get(tagName)) {
            this.data.set(tagName, {})
          }
          opts.data = this.data.ref(tagName)
        }
        if (!opts.parentData) {
          opts.parentData = this.data
        }
        if (!opts.services) {
          opts.services = this.services
        }
        if (!opts.daisho) {
          opts.daisho = this
        }
        if (typeof tag === 'string') {
          return riot.mount(tag, opts)
        } else if (isHTML) {
          return riot.mount(tag, tagName, opts)
        }
      };
      Daisho.prototype.update = function () {
        return requestAnimationFrame(function () {
          return riot.update.apply(riot, arguments)
        })
      };
      return Daisho
    }()
  });
  // source: node_modules/jquery/dist/jquery.js
  rqzt.define('jquery/dist/jquery', function (module, exports, __dirname, __filename, process) {
    /*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
    (function (global, factory) {
      'use strict';
      if (typeof module === 'object' && typeof module.exports === 'object') {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ? factory(global, true) : function (w) {
          if (!w.document) {
            throw new Error('jQuery requires a window with a document')
          }
          return factory(w)
        }
      } else {
        factory(global)
      }  // Pass this if window is not defined yet
    }(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
      // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
      // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
      // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
      // enough that all such attempts are guarded in a try block.
      'use strict';
      var arr = [];
      var document = window.document;
      var getProto = Object.getPrototypeOf;
      var slice = arr.slice;
      var concat = arr.concat;
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      function DOMEval(code, doc) {
        doc = doc || document;
        var script = doc.createElement('script');
        script.text = code;
        doc.head.appendChild(script).parentNode.removeChild(script)
      }
      /* global Symbol */
      // Defining this global in .eslintrc.json would create a danger of using the global
      // unguarded in another place, it seems safer to define global only for this module
      var version = '3.1.1',
        // Define a local copy of jQuery
        jQuery = function (selector, context) {
          // The jQuery object is actually just the init constructor 'enhanced'
          // Need init if jQuery is called (just allow error to be thrown if not included)
          return new jQuery.fn.init(selector, context)
        },
        // Support: Android <=4.0 only
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g,
        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function (all, letter) {
          return letter.toUpperCase()
        };
      jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function () {
          return slice.call(this)
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function (num) {
          // Return all the elements in a clean array
          if (num == null) {
            return slice.call(this)
          }
          // Return just the one element from the set
          return num < 0 ? this[num + this.length] : this[num]
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function (elems) {
          // Build a new jQuery matched element set
          var ret = jQuery.merge(this.constructor(), elems);
          // Add the old object onto the stack (as a reference)
          ret.prevObject = this;
          // Return the newly-formed element set
          return ret
        },
        // Execute a callback for every element in the matched set.
        each: function (callback) {
          return jQuery.each(this, callback)
        },
        map: function (callback) {
          return this.pushStack(jQuery.map(this, function (elem, i) {
            return callback.call(elem, i, elem)
          }))
        },
        slice: function () {
          return this.pushStack(slice.apply(this, arguments))
        },
        first: function () {
          return this.eq(0)
        },
        last: function () {
          return this.eq(-1)
        },
        eq: function (i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
        },
        end: function () {
          return this.prevObject || this.constructor()
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === 'boolean') {
          deep = target;
          // Skip the boolean and the target
          target = arguments[i] || {};
          i++
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
          target = {}
        }
        // Extend jQuery itself if only one argument is passed
        if (i === length) {
          target = this;
          i--
        }
        for (; i < length; i++) {
          // Only deal with non-null/undefined values
          if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
              src = target[name];
              copy = options[name];
              // Prevent never-ending loop
              if (target === copy) {
                continue
              }
              // Recurse if we're merging plain objects or arrays
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && jQuery.isArray(src) ? src : []
                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {}
                }
                // Never move original objects, clone them
                target[name] = jQuery.extend(deep, clone, copy)  // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy
              }
            }
          }
        }
        // Return the modified object
        return target
      };
      jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function (msg) {
          throw new Error(msg)
        },
        noop: function () {
        },
        isFunction: function (obj) {
          return jQuery.type(obj) === 'function'
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
          return obj != null && obj === obj.window
        },
        isNumeric: function (obj) {
          // As of jQuery 3.0, isNumeric is limited to
          // strings and numbers (primitives or objects)
          // that can be coerced to finite numbers (gh-2662)
          var type = jQuery.type(obj);
          return (type === 'number' || type === 'string') && // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj))
        },
        isPlainObject: function (obj) {
          var proto, Ctor;
          // Detect obvious negatives
          // Use toString instead of jQuery.type to catch host objects
          if (!obj || toString.call(obj) !== '[object Object]') {
            return false
          }
          proto = getProto(obj);
          // Objects with no prototype (e.g., `Object.create( null )`) are plain
          if (!proto) {
            return true
          }
          // Objects with prototype are plain iff they were constructed by a global Object function
          Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString
        },
        isEmptyObject: function (obj) {
          /* eslint-disable no-unused-vars */
          // See https://github.com/eslint/eslint/issues/6125
          var name;
          for (name in obj) {
            return false
          }
          return true
        },
        type: function (obj) {
          if (obj == null) {
            return obj + ''
          }
          // Support: Android <=2.3 only (functionish RegExp)
          return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj
        },
        // Evaluates a script in a global context
        globalEval: function (code) {
          DOMEval(code)
        },
        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE <=9 - 11, Edge 12 - 13
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function (string) {
          return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase)
        },
        nodeName: function (elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
        },
        each: function (obj, callback) {
          var length, i = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          }
          return obj
        },
        // Support: Android <=4.0 only
        trim: function (text) {
          return text == null ? '' : (text + '').replace(rtrim, '')
        },
        // results is for internal usage only
        makeArray: function (arr, results) {
          var ret = results || [];
          if (arr != null) {
            if (isArrayLike(Object(arr))) {
              jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr)
            } else {
              push.call(ret, arr)
            }
          }
          return ret
        },
        inArray: function (elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i)
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function (first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j]
          }
          first.length = i;
          return first
        },
        grep: function (elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          // Go through the array, only saving the items
          // that pass the validator function
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i])
            }
          }
          return matches
        },
        // arg is for internal usage only
        map: function (elems, callback, arg) {
          var length, value, i = 0, ret = [];
          // Go through the array, translating each of the items to their new values
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value)
              }
            }  // Go through every key on the object,
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value)
              }
            }
          }
          // Flatten any nested arrays
          return concat.apply([], ret)
        },
        // A global GUID counter for objects
        guid: 1,
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function (fn, context) {
          var tmp, args, proxy;
          if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp
          }
          // Quick check to determine if target is callable, in the spec
          // this throws a TypeError, but we will just return undefined.
          if (!jQuery.isFunction(fn)) {
            return undefined
          }
          // Simulated bind
          args = slice.call(arguments, 2);
          proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)))
          };
          // Set the guid of unique handler to the same of original handler, so it can be removed
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy
        },
        now: Date.now,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
      });
      if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator]
      }
      // Populate the class2type map
      jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase()
      });
      function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && 'length' in obj && obj.length, type = jQuery.type(obj);
        if (type === 'function' || jQuery.isWindow(obj)) {
          return false
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj
      }
      var Sizzle = /*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
      function (window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate,
          // Local document vars
          setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
          // Instance-specific data
          expando = 'sizzle' + 1 * new Date, preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
            if (a === b) {
              hasDuplicate = true
            }
            return 0
          },
          // Instance methods
          hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
          // Use a stripped-down indexOf as it's faster than native
          // https://jsperf.com/thor-indexof-vs-for/5
          indexOf = function (list, elem) {
            var i = 0, len = list.length;
            for (; i < len; i++) {
              if (list[i] === elem) {
                return i
              }
            }
            return -1
          }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
          // Regular expressions
          // http://www.w3.org/TR/css3-selectors/#whitespace
          whitespace = '[\\x20\\t\\r\\n\\f]',
          // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
          identifier = '(?:\\\\.|[\\w-]|[^ -\\xa0])+',
          // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
          attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + // Operator (capture 2)
          '*([*^$|!~]?=)' + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
          '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
          // 1. quoted (capture 3; capture 4 or capture 5)
          '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + // 2. simple (capture 6)
          '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + // 3. anything else (capture 2)
          '.*' + ')\\)|)',
          // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
          rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
            'ID': new RegExp('^#(' + identifier + ')'),
            'CLASS': new RegExp('^\\.(' + identifier + ')'),
            'TAG': new RegExp('^(' + identifier + '|[*])'),
            'ATTR': new RegExp('^' + attributes),
            'PSEUDO': new RegExp('^' + pseudos),
            'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
            'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
          }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/,
          // Easily-parseable/retrievable ID or TAG or CLASS selectors
          rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/,
          // CSS escapes
          // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
          runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
            var high = '0x' + escaped - 65536;
            // NaN means non-codepoint
            // Support: Firefox<24
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
            String.fromCharCode(high + 65536) : // Supplemental Plane codepoint (surrogate pair)
            String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
          },
          // CSS string/identifier serialization
          // https://drafts.csswg.org/cssom/#common-serializing-idioms
          rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function (ch, asCodePoint) {
            if (asCodePoint) {
              // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
              if (ch === ' ') {
                return '�'
              }
              // Control characters and (dependent upon position) numbers get escaped as code points
              return ch.slice(0, -1) + '\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' '
            }
            // Other potentially-special ASCII characters get backslash-escaped
            return '\\' + ch
          },
          // Used for iframes
          // See setDocument()
          // Removing the function wrapper causes a "Permission Denied"
          // error in IE
          unloadHandler = function () {
            setDocument()
          }, disabledAncestor = addCombinator(function (elem) {
            return elem.disabled === true && ('form' in elem || 'label' in elem)
          }, {
            dir: 'parentNode',
            next: 'legend'
          });
        // Optimize for push.apply( _, NodeList )
        try {
          push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
          // Support: Android<4.0
          // Detect silently failing push.apply
          arr[preferredDoc.childNodes.length].nodeType
        } catch (e) {
          push = {
            apply: arr.length ? // Leverage slice if possible
            function (target, els) {
              push_native.apply(target, slice.call(els))
            } : // Support: IE<9
            // Otherwise append directly
            function (target, els) {
              var j = target.length, i = 0;
              // Can't trust NodeList.length
              while (target[j++] = els[i++]) {
              }
              target.length = j - 1
            }
          }
        }
        function Sizzle(selector, context, results, seed) {
          var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument,
            // nodeType defaults to 9, since context defaults to document
            nodeType = context ? context.nodeType : 9;
          results = results || [];
          // Return early from calls with invalid selector or context
          if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results
          }
          // Try to shortcut find operations (as opposed to filters) in HTML documents
          if (!seed) {
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
              setDocument(context)
            }
            context = context || document;
            if (documentIsHTML) {
              // If the selector is sufficiently simple, try using a "get*By*" DOM method
              // (excepting DocumentFragment context, where the methods don't exist)
              if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                // ID selector
                if (m = match[1]) {
                  // Document context
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      // Support: IE, Opera, Webkit
                      // TODO: identify versions
                      // getElementById can match elements by name instead of ID
                      if (elem.id === m) {
                        results.push(elem);
                        return results
                      }
                    } else {
                      return results
                    }  // Element context
                  } else {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results
                    }
                  }  // Type selector
                } else if (match[2]) {
                  push.apply(results, context.getElementsByTagName(selector));
                  return results  // Class selector
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                  push.apply(results, context.getElementsByClassName(m));
                  return results
                }
              }
              // Take advantage of querySelectorAll
              if (support.qsa && !compilerCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                if (nodeType !== 1) {
                  newContext = context;
                  newSelector = selector  // qSA looks outside Element context, which is not what we want
                                          // Thanks to Andrew Dupont for this workaround technique
                                          // Support: IE <=8
                                          // Exclude object elements
                } else if (context.nodeName.toLowerCase() !== 'object') {
                  // Capture the context ID, setting it first if necessary
                  if (nid = context.getAttribute('id')) {
                    nid = nid.replace(rcssescape, fcssescape)
                  } else {
                    context.setAttribute('id', nid = expando)
                  }
                  // Prefix every selector in the list
                  groups = tokenize(selector);
                  i = groups.length;
                  while (i--) {
                    groups[i] = '#' + nid + ' ' + toSelector(groups[i])
                  }
                  newSelector = groups.join(',');
                  // Expand context for sibling selectors
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context
                }
                if (newSelector) {
                  try {
                    push.apply(results, newContext.querySelectorAll(newSelector));
                    return results
                  } catch (qsaError) {
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute('id')
                    }
                  }
                }
              }
            }
          }
          // All others
          return select(selector.replace(rtrim, '$1'), context, results, seed)
        }
        /**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
        function createCache() {
          var keys = [];
          function cache(key, value) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if (keys.push(key + ' ') > Expr.cacheLength) {
              // Only keep the most recent entries
              delete cache[keys.shift()]
            }
            return cache[key + ' '] = value
          }
          return cache
        }
        /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
        function markFunction(fn) {
          fn[expando] = true;
          return fn
        }
        /**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
        function assert(fn) {
          var el = document.createElement('fieldset');
          try {
            return !!fn(el)
          } catch (e) {
            return false
          } finally {
            // Remove from its parent by default
            if (el.parentNode) {
              el.parentNode.removeChild(el)
            }
            // release memory in IE
            el = null
          }
        }
        /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
        function addHandle(attrs, handler) {
          var arr = attrs.split('|'), i = arr.length;
          while (i--) {
            Expr.attrHandle[arr[i]] = handler
          }
        }
        /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
        function siblingCheck(a, b) {
          var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
          // Use IE sourceIndex if available on both nodes
          if (diff) {
            return diff
          }
          // Check if b follows a
          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1
              }
            }
          }
          return a ? 1 : -1
        }
        /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
        function createInputPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === 'input' && elem.type === type
          }
        }
        /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
        function createButtonPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === 'input' || name === 'button') && elem.type === type
          }
        }
        /**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
        function createDisabledPseudo(disabled) {
          // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
          return function (elem) {
            // Only certain elements can match :enabled or :disabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
            if ('form' in elem) {
              // Check for inherited disabledness on relevant non-disabled elements:
              // * listed form-associated elements in a disabled fieldset
              //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
              // * option elements in a disabled optgroup
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
              // All such elements have a "form" property.
              if (elem.parentNode && elem.disabled === false) {
                // Option elements defer to a parent optgroup if present
                if ('label' in elem) {
                  if ('label' in elem.parentNode) {
                    return elem.parentNode.disabled === disabled
                  } else {
                    return elem.disabled === disabled
                  }
                }
                // Support: IE 6 - 11
                // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                /* jshint -W018 */
                elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled
              }
              return elem.disabled === disabled  // Try to winnow out elements that can't be disabled before trusting the disabled property.
                                                 // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                                                 // even exist on them, let alone have a boolean value.
            } else if ('label' in elem) {
              return elem.disabled === disabled
            }
            // Remaining elements are neither :enabled nor :disabled
            return false
          }
        }
        /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
        function createPositionalPseudo(fn) {
          return markFunction(function (argument) {
            argument = +argument;
            return markFunction(function (seed, matches) {
              var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
              // Match elements found at the specified indexes
              while (i--) {
                if (seed[j = matchIndexes[i]]) {
                  seed[j] = !(matches[j] = seed[j])
                }
              }
            })
          })
        }
        /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== 'undefined' && context
        }
        // Expose support vars for convenience
        support = Sizzle.support = {};
        /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
        isXML = Sizzle.isXML = function (elem) {
          // documentElement is verified for cases where it doesn't yet exist
          // (such as loading iframes in IE - #4833)
          var documentElement = elem && (elem.ownerDocument || elem).documentElement;
          return documentElement ? documentElement.nodeName !== 'HTML' : false
        };
        /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
        setDocument = Sizzle.setDocument = function (node) {
          var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          // Return early if doc is invalid or already selected
          if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
            return document
          }
          // Update global variables
          document = doc;
          docElem = document.documentElement;
          documentIsHTML = !isXML(document);
          // Support: IE 9-11, Edge
          // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
          if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
            // Support: IE 11, Edge
            if (subWindow.addEventListener) {
              subWindow.addEventListener('unload', unloadHandler, false)  // Support: IE 9 - 10 only
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent('onunload', unloadHandler)
            }
          }
          /* Attributes
	---------------------------------------------------------------------- */
          // Support: IE<8
          // Verify that getAttribute really returns attributes and not properties
          // (excepting IE8 booleans)
          support.attributes = assert(function (el) {
            el.className = 'i';
            return !el.getAttribute('className')
          });
          /* getElement(s)By*
	---------------------------------------------------------------------- */
          // Check if getElementsByTagName("*") returns only elements
          support.getElementsByTagName = assert(function (el) {
            el.appendChild(document.createComment(''));
            return !el.getElementsByTagName('*').length
          });
          // Support: IE<9
          support.getElementsByClassName = rnative.test(document.getElementsByClassName);
          // Support: IE<10
          // Check if getElementById returns elements by name
          // The broken getElementById methods don't pick up programmatically-set names,
          // so use a roundabout getElementsByName test
          support.getById = assert(function (el) {
            docElem.appendChild(el).id = expando;
            return !document.getElementsByName || !document.getElementsByName(expando).length
          });
          // ID filter and find
          if (support.getById) {
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                return elem.getAttribute('id') === attrId
              }
            };
            Expr.find['ID'] = function (id, context) {
              if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : []
              }
            }
          } else {
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                return node && node.value === attrId
              }
            };
            // Support: IE 6 - 7 only
            // getElementById is not reliable as a find shortcut
            Expr.find['ID'] = function (id, context) {
              if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                var node, i, elems, elem = context.getElementById(id);
                if (elem) {
                  // Verify the id attribute
                  node = elem.getAttributeNode('id');
                  if (node && node.value === id) {
                    return [elem]
                  }
                  // Fall back on getElementsByName
                  elems = context.getElementsByName(id);
                  i = 0;
                  while (elem = elems[i++]) {
                    node = elem.getAttributeNode('id');
                    if (node && node.value === id) {
                      return [elem]
                    }
                  }
                }
                return []
              }
            }
          }
          // Tag
          Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
            if (typeof context.getElementsByTagName !== 'undefined') {
              return context.getElementsByTagName(tag)  // DocumentFragment nodes don't have gEBTN
            } else if (support.qsa) {
              return context.querySelectorAll(tag)
            }
          } : function (tag, context) {
            var elem, tmp = [], i = 0,
              // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
              results = context.getElementsByTagName(tag);
            // Filter out possible comments
            if (tag === '*') {
              while (elem = results[i++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem)
                }
              }
              return tmp
            }
            return results
          };
          // Class
          Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
            if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
              return context.getElementsByClassName(className)
            }
          };
          /* QSA/matchesSelector
	---------------------------------------------------------------------- */
          // QSA and matchesSelector support
          // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
          rbuggyMatches = [];
          // qSa(:focus) reports false when true (Chrome 21)
          // We allow this because of a bug in IE8/9 that throws an error
          // whenever `document.activeElement` is accessed on an iframe
          // So, we allow :focus to pass through QSA all the time to avoid the IE error
          // See https://bugs.jquery.com/ticket/13378
          rbuggyQSA = [];
          if (support.qsa = rnative.test(document.querySelectorAll)) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function (el) {
              // Select is set to empty string on purpose
              // This is to test IE's treatment of not explicitly
              // setting a boolean content attribute,
              // since its presence should be enough
              // https://bugs.jquery.com/ticket/12359
              docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
              // Support: IE8, Opera 11-12.16
              // Nothing should be selected when empty strings follow ^= or $= or *=
              // The test attribute must be unknown in Opera but "safe" for WinRT
              // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")')
              }
              // Support: IE8
              // Boolean attributes and "value" are not treated correctly
              if (!el.querySelectorAll('[selected]').length) {
                rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')')
              }
              // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
              if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                rbuggyQSA.push('~=')
              }
              // Webkit/Opera - :checked should return selected option elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              // IE8 throws error here and will not see later tests
              if (!el.querySelectorAll(':checked').length) {
                rbuggyQSA.push(':checked')
              }
              // Support: Safari 8+, iOS 8+
              // https://bugs.webkit.org/show_bug.cgi?id=136851
              // In-page `selector#id sibling-combinator selector` fails
              if (!el.querySelectorAll('a#' + expando + '+*').length) {
                rbuggyQSA.push('.#.+[+~]')
              }
            });
            assert(function (el) {
              el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";
              // Support: Windows 8 Native Apps
              // The type and name attributes are restricted during .innerHTML assignment
              var input = document.createElement('input');
              input.setAttribute('type', 'hidden');
              el.appendChild(input).setAttribute('name', 'D');
              // Support: IE8
              // Enforce case-sensitivity of name attribute
              if (el.querySelectorAll('[name=d]').length) {
                rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=')
              }
              // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
              // IE8 throws error here and will not see later tests
              if (el.querySelectorAll(':enabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              // Support: IE9-11+
              // IE's :disabled selector does not pick up the children of disabled fieldsets
              docElem.appendChild(el).disabled = true;
              if (el.querySelectorAll(':disabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              // Opera 10-11 does not throw on post-comma invalid pseudos
              el.querySelectorAll('*,:x');
              rbuggyQSA.push(',.*:')
            })
          }
          if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function (el) {
              // Check to see if it's possible to do matchesSelector
              // on a disconnected node (IE 9)
              support.disconnectedMatch = matches.call(el, '*');
              // This should fail with an exception
              // Gecko does not error, returns false instead
              matches.call(el, "[s!='']:x");
              rbuggyMatches.push('!=', pseudos)
            })
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
          /* Contains
	---------------------------------------------------------------------- */
          hasCompare = rnative.test(docElem.compareDocumentPosition);
          // Element contains another
          // Purposefully self-exclusive
          // As in, an element does not contain itself
          contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
          } : function (a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true
                }
              }
            }
            return false
          };
          /* Sorting
	---------------------------------------------------------------------- */
          // Document order sorting
          sortOrder = hasCompare ? function (a, b) {
            // Flag for duplicate removal
            if (a === b) {
              hasDuplicate = true;
              return 0
            }
            // Sort on method existence if only one input has compareDocumentPosition
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare
            }
            // Calculate position if both inputs belong to the same document
            compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
            1;
            // Disconnected nodes
            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
              // Choose the first element that is related to our preferred document
              if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                return -1
              }
              if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                return 1
              }
              // Maintain original order
              return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
            }
            return compare & 4 ? -1 : 1
          } : function (a, b) {
            // Exit early if the nodes are identical
            if (a === b) {
              hasDuplicate = true;
              return 0
            }
            var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
            // Parentless nodes are either documents or disconnected
            if (!aup || !bup) {
              return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0  // If the nodes are siblings, we can do a quick check
            } else if (aup === bup) {
              return siblingCheck(a, b)
            }
            // Otherwise we need full lists of their ancestors for comparison
            cur = a;
            while (cur = cur.parentNode) {
              ap.unshift(cur)
            }
            cur = b;
            while (cur = cur.parentNode) {
              bp.unshift(cur)
            }
            // Walk down the tree looking for a discrepancy
            while (ap[i] === bp[i]) {
              i++
            }
            return i ? // Do a sibling check if the nodes have a common ancestor
            siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
            ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
          };
          return document
        };
        Sizzle.matches = function (expr, elements) {
          return Sizzle(expr, null, null, elements)
        };
        Sizzle.matchesSelector = function (elem, expr) {
          // Set document vars if needed
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          // Make sure that attribute selectors are quoted
          expr = expr.replace(rattributeQuotes, "='$1']");
          if (support.matchesSelector && documentIsHTML && !compilerCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              // IE 9's matchesSelector returns false on disconnected nodes
              if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) {
                return ret
              }
            } catch (e) {
            }
          }
          return Sizzle(expr, document, null, [elem]).length > 0
        };
        Sizzle.contains = function (context, elem) {
          // Set document vars if needed
          if ((context.ownerDocument || context) !== document) {
            setDocument(context)
          }
          return contains(context, elem)
        };
        Sizzle.attr = function (elem, name) {
          // Set document vars if needed
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          var fn = Expr.attrHandle[name.toLowerCase()],
            // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
          return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
        };
        Sizzle.escape = function (sel) {
          return (sel + '').replace(rcssescape, fcssescape)
        };
        Sizzle.error = function (msg) {
          throw new Error('Syntax error, unrecognized expression: ' + msg)
        };
        /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
        Sizzle.uniqueSort = function (results) {
          var elem, duplicates = [], j = 0, i = 0;
          // Unless we *know* we can detect duplicates, assume their presence
          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice(0);
          results.sort(sortOrder);
          if (hasDuplicate) {
            while (elem = results[i++]) {
              if (elem === results[i]) {
                j = duplicates.push(i)
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1)
            }
          }
          // Clear input after sorting to release objects
          // See https://github.com/jquery/sizzle/pull/225
          sortInput = null;
          return results
        };
        /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
        getText = Sizzle.getText = function (elem) {
          var node, ret = '', i = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            // If no nodeType, this is expected to be an array
            while (node = elem[i++]) {
              // Do not traverse comment nodes
              ret += getText(node)
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (jQuery #11153)
            if (typeof elem.textContent === 'string') {
              return elem.textContent
            } else {
              // Traverse its children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem)
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue
          }
          // Do not include comment or processing instruction nodes
          return ret
        };
        Expr = Sizzle.selectors = {
          // Can be adjusted by the user
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            '>': {
              dir: 'parentNode',
              first: true
            },
            ' ': { dir: 'parentNode' },
            '+': {
              dir: 'previousSibling',
              first: true
            },
            '~': { dir: 'previousSibling' }
          },
          preFilter: {
            'ATTR': function (match) {
              match[1] = match[1].replace(runescape, funescape);
              // Move the given value to match[3] whether quoted or unquoted
              match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
              if (match[2] === '~=') {
                match[3] = ' ' + match[3] + ' '
              }
              return match.slice(0, 4)
            },
            'CHILD': function (match) {
              /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === 'nth') {
                // nth-* requires argument
                if (!match[3]) {
                  Sizzle.error(match[0])
                }
                // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                match[5] = +(match[7] + match[8] || match[3] === 'odd')  // other types prohibit arguments
              } else if (match[3]) {
                Sizzle.error(match[0])
              }
              return match
            },
            'PSEUDO': function (match) {
              var excess, unquoted = !match[6] && match[2];
              if (matchExpr['CHILD'].test(match[0])) {
                return null
              }
              // Accept quoted arguments as-is
              if (match[3]) {
                match[2] = match[4] || match[5] || ''  // Strip excess characters from unquoted arguments
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                // excess is a negative index
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess)
              }
              // Return only captures needed by the pseudo filter method (type and argument)
              return match.slice(0, 3)
            }
          },
          filter: {
            'TAG': function (nodeNameSelector) {
              var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === '*' ? function () {
                return true
              } : function (elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
              }
            },
            'CLASS': function (className) {
              var pattern = classCache[className + ' '];
              return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '')
              })
            },
            'ATTR': function (name, operator, check) {
              return function (elem) {
                var result = Sizzle.attr(elem, name);
                if (result == null) {
                  return operator === '!='
                }
                if (!operator) {
                  return true
                }
                result += '';
                return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false
              }
            },
            'CHILD': function (type, what, argument, first, last) {
              var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
              return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
              function (elem) {
                return !!elem.parentNode
              } : function (elem, context, xml) {
                var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                if (parent) {
                  // :(first|last|only)-(child|of-type)
                  if (simple) {
                    while (dir) {
                      node = elem;
                      while (node = node[dir]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false
                        }
                      }
                      // Reverse direction for :only-* (if we haven't yet done so)
                      start = dir = type === 'only' && !start && 'nextSibling'
                    }
                    return true
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  // non-xml :nth-child(...) stores cache data on `parent`
                  if (forward && useCache) {
                    // Seek `elem` from a previously-cached index
                    // ...in a gzip-friendly way
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {});
                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                      // When found, cache indexes on `parent` and break
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        uniqueCache[type] = [
                          dirruns,
                          nodeIndex,
                          diff
                        ];
                        break
                      }
                    }
                  } else {
                    // Use previously-cached element index if available
                    if (useCache) {
                      // ...in a gzip-friendly way
                      node = elem;
                      outerCache = node[expando] || (node[expando] = {});
                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex
                    }
                    // xml :nth-child(...)
                    // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                    if (diff === false) {
                      // Use the same loop as above to seek `elem` from the start
                      while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          // Cache the index of each encountered element
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)
                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            uniqueCache[type] = [
                              dirruns,
                              diff
                            ]
                          }
                          if (node === elem) {
                            break
                          }
                        }
                      }
                    }
                  }
                  // Incorporate the offset, then check against cycle size
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0
                }
              }
            },
            'PSEUDO': function (pseudo, argument) {
              // pseudo-class names are case-insensitive
              // http://www.w3.org/TR/selectors/#pseudo-classes
              // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
              // Remember that setFilters inherits from pseudos
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
              // The user may use createPseudo to indicate that
              // arguments are needed to create the filter function
              // just as Sizzle does
              if (fn[expando]) {
                return fn(argument)
              }
              // But maintain support for old signatures
              if (fn.length > 1) {
                args = [
                  pseudo,
                  pseudo,
                  '',
                  argument
                ];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                  var idx, matched = fn(seed, argument), i = matched.length;
                  while (i--) {
                    idx = indexOf(seed, matched[i]);
                    seed[idx] = !(matches[idx] = matched[i])
                  }
                }) : function (elem) {
                  return fn(elem, 0, args)
                }
              }
              return fn
            }
          },
          pseudos: {
            // Potentially complex pseudos
            'not': markFunction(function (selector) {
              // Trim the selector passed to compile
              // to avoid treating leading and trailing
              // spaces as combinators
              var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
              return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                // Match elements unmatched by `matcher`
                while (i--) {
                  if (elem = unmatched[i]) {
                    seed[i] = !(matches[i] = elem)
                  }
                }
              }) : function (elem, context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                // Don't keep the element (issue #299)
                input[0] = null;
                return !results.pop()
              }
            }),
            'has': markFunction(function (selector) {
              return function (elem) {
                return Sizzle(selector, elem).length > 0
              }
            }),
            'contains': markFunction(function (text) {
              text = text.replace(runescape, funescape);
              return function (elem) {
                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
              }
            }),
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            'lang': markFunction(function (lang) {
              // lang value must be a valid identifier
              if (!ridentifier.test(lang || '')) {
                Sizzle.error('unsupported lang: ' + lang)
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function (elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + '-') === 0
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false
              }
            }),
            // Miscellaneous
            'target': function (elem) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice(1) === elem.id
            },
            'root': function (elem) {
              return elem === docElem
            },
            'focus': function (elem) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
            },
            // Boolean properties
            'enabled': createDisabledPseudo(false),
            'disabled': createDisabledPseudo(true),
            'checked': function (elem) {
              // In CSS3, :checked should return both checked and selected elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              var nodeName = elem.nodeName.toLowerCase();
              return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected
            },
            'selected': function (elem) {
              // Accessing this property makes selected-by-default
              // options in Safari work properly
              if (elem.parentNode) {
                elem.parentNode.selectedIndex
              }
              return elem.selected === true
            },
            // Contents
            'empty': function (elem) {
              // http://www.w3.org/TR/selectors/#empty-pseudo
              // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
              //   but not by others (comment: 8; processing instruction: 7; etc.)
              // nodeType < 6 works because attributes (2) do not appear as children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false
                }
              }
              return true
            },
            'parent': function (elem) {
              return !Expr.pseudos['empty'](elem)
            },
            // Element/input types
            'header': function (elem) {
              return rheader.test(elem.nodeName)
            },
            'input': function (elem) {
              return rinputs.test(elem.nodeName)
            },
            'button': function (elem) {
              var name = elem.nodeName.toLowerCase();
              return name === 'input' && elem.type === 'button' || name === 'button'
            },
            'text': function (elem) {
              var attr;
              return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text')
            },
            // Position-in-collection
            'first': createPositionalPseudo(function () {
              return [0]
            }),
            'last': createPositionalPseudo(function (matchIndexes, length) {
              return [length - 1]
            }),
            'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument]
            }),
            'even': createPositionalPseudo(function (matchIndexes, length) {
              var i = 0;
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'odd': createPositionalPseudo(function (matchIndexes, length) {
              var i = 1;
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; --i >= 0;) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; ++i < length;) {
                matchIndexes.push(i)
              }
              return matchIndexes
            })
          }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        // Add button/input type pseudos
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
          }) {
          Expr.pseudos[i] = createInputPseudo(i)
        }
        for (i in {
            submit: true,
            reset: true
          }) {
          Expr.pseudos[i] = createButtonPseudo(i)
        }
        // Easy API for creating new setFilters
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters;
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0)
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            // Comma and first run
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice(match[0].length) || soFar
              }
              groups.push(tokens = [])
            }
            matched = false;
            // Combinators
            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace(rtrim, ' ')
              });
              soFar = soFar.slice(matched.length)
            }
            // Filters
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice(matched.length)
              }
            }
            if (!matched) {
              break
            }
          }
          // Return the length of the invalid excess
          // if we're just parsing
          // Otherwise, throw an error or return tokens
          return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
          tokenCache(selector, groups).slice(0)
        };
        function toSelector(tokens) {
          var i = 0, len = tokens.length, selector = '';
          for (; i < len; i++) {
            selector += tokens[i].value
          }
          return selector
        }
        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === 'parentNode', doneName = done++;
          return combinator.first ? // Check against closest ancestor/preceding element
          function (elem, context, xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml)
              }
            }
            return false
          } : // Check against all ancestor/preceding elements
          function (elem, context, xml) {
            var oldCache, uniqueCache, outerCache, newCache = [
                dirruns,
                doneName
              ];
            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
            if (xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true
                  }
                }
              }
            } else {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)
                  uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                  if (skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir] || elem
                  } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    // Assign to newCache so results back-propagate to previous elements
                    return newCache[2] = oldCache[2]
                  } else {
                    // Reuse newcache so results back-propagate to previous elements
                    uniqueCache[key] = newCache;
                    // A match means we're done; a fail means we have to keep checking
                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true
                    }
                  }
                }
              }
            }
            return false
          }
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function (elem, context, xml) {
            var i = matchers.length;
            while (i--) {
              if (!matchers[i](elem, context, xml)) {
                return false
              }
            }
            return true
          } : matchers[0]
        }
        function multipleContexts(selector, contexts, results) {
          var i = 0, len = contexts.length;
          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results)
          }
          return results
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
          for (; i < len; i++) {
            if (elem = unmatched[i]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i)
                }
              }
            }
          }
          return newUnmatched
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter)
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector)
          }
          return markFunction(function (seed, results, context, xml) {
            var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
              // Get initial elements from seed or context
              elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
              // Prefilter to get matcher input, preserving a map for seed-results synchronization
              matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
              postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
              [] : // ...otherwise use results directly
              results : matcherIn;
            // Find primary matches
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml)
            }
            // Apply postFilter
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              // Un-match failing elements by moving them back to matcherIn
              i = temp.length;
              while (i--) {
                if (elem = temp[i]) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  // Get the final matcherOut by condensing this intermediate into postFinder contexts
                  temp = [];
                  i = matcherOut.length;
                  while (i--) {
                    if (elem = matcherOut[i]) {
                      // Restore matcherIn since elem is not yet a final match
                      temp.push(matcherIn[i] = elem)
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml)
                }
                // Move matched elements from seed to results to keep them synchronized
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                    seed[temp] = !(results[temp] = elem)
                  }
                }
              }  // Add elements to results, through postFinder if defined
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml)
              } else {
                push.apply(results, matcherOut)
              }
            }
          })
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function (elem) {
              return elem === checkContext
            }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
              return indexOf(checkContext, elem) > -1
            }, implicitRelative, true), matchers = [function (elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                // Avoid hanging onto element (issue #299)
                checkContext = null;
                return ret
              }];
          for (; i < len; i++) {
            if (matcher = Expr.relative[tokens[i].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)]
            } else {
              matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
              // Return special upon seeing a positional matcher
              if (matcher[expando]) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break
                  }
                }
                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
              }
              matchers.push(matcher)
            }
          }
          return elementMatcher(matchers)
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext,
                // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find['TAG']('*', outermost),
                // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context === document || context || outermost
              }
              // Add elements passing elementMatchers directly to results
              // Support: IE<9, Safari
              // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
              for (; i !== len && (elem = elems[i]) != null; i++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context && elem.ownerDocument !== document) {
                    setDocument(elem);
                    xml = !documentIsHTML
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context || document, xml)) {
                      results.push(elem);
                      break
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique
                  }
                }
                // Track unmatched elements for set filters
                if (bySet) {
                  // They will have gone through all possible matchers
                  if (elem = !matcher && elem) {
                    matchedCount--
                  }
                  // Lengthen the array for every element, matched or not
                  if (seed) {
                    unmatched.push(elem)
                  }
                }
              }
              // `i` is now the count of elements visited above, and adding it to `matchedCount`
              // makes the latter nonnegative.
              matchedCount += i;
              // Apply set filters to unmatched elements
              // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
              // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
              // no element matchers and no seed.
              // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
              // case, which will result in a "00" `matchedCount` that differs from `i` but is also
              // numerically zero.
              if (bySet && i !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml)
                }
                if (seed) {
                  // Reintegrate element matches to eliminate the need for sorting
                  if (matchedCount > 0) {
                    while (i--) {
                      if (!(unmatched[i] || setMatched[i])) {
                        setMatched[i] = pop.call(results)
                      }
                    }
                  }
                  // Discard index placeholder values to get only actual matches
                  setMatched = condense(setMatched)
                }
                // Add matches to results
                push.apply(results, setMatched);
                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  Sizzle.uniqueSort(results)
                }
              }
              // Override manipulation of globals by nested matchers
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup
              }
              return unmatched
            };
          return bySet ? markFunction(superMatcher) : superMatcher
        }
        compile = Sizzle.compile = function (selector, match) {
          var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
          if (!cached) {
            // Generate a function of recursive functions that can be used to check each element
            if (!match) {
              match = tokenize(selector)
            }
            i = match.length;
            while (i--) {
              cached = matcherFromTokens(match[i]);
              if (cached[expando]) {
                setMatchers.push(cached)
              } else {
                elementMatchers.push(cached)
              }
            }
            // Cache the compiled function
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            // Save selector and tokenization
            cached.selector = selector
          }
          return cached
        };
        /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
        select = Sizzle.select = function (selector, context, results, seed) {
          var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          // Try to minimize operations if there is only one selector in the list and no seed
          // (the latter of which guarantees us context)
          if (match.length === 1) {
            // Reduce context if the leading compound selector is an ID
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
              if (!context) {
                return results  // Precompiled matchers will still verify ancestry, so step up a level
              } else if (compiled) {
                context = context.parentNode
              }
              selector = selector.slice(tokens.shift().value.length)
            }
            // Fetch a seed set for right-to-left matching
            i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
            while (i--) {
              token = tokens[i];
              // Abort if we hit a combinator
              if (Expr.relative[type = token.type]) {
                break
              }
              if (find = Expr.find[type]) {
                // Search, expanding context for leading sibling combinators
                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  // If seed is empty or no tokens remain, we can return early
                  tokens.splice(i, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push.apply(results, seed);
                    return results
                  }
                  break
                }
              }
            }
          }
          // Compile and execute a filtering function if one is not provided
          // Provide `match` to avoid retokenization if we modified the selector above
          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results
        };
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function (el) {
          // Should return 1, but returns 4 (following)
          return el.compareDocumentPosition(document.createElement('fieldset')) & 1
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function (el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute('href') === '#'
          })) {
          addHandle('type|href|height|width', function (elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2)
            }
          })
        }
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function (el) {
            el.innerHTML = '<input/>';
            el.firstChild.setAttribute('value', '');
            return el.firstChild.getAttribute('value') === ''
          })) {
          addHandle('value', function (elem, name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === 'input') {
              return elem.defaultValue
            }
          })
        }
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function (el) {
            return el.getAttribute('disabled') == null
          })) {
          addHandle(booleans, function (elem, name, isXML) {
            var val;
            if (!isXML) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
            }
          })
        }
        return Sizzle
      }(window);
      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      // Deprecated
      jQuery.expr[':'] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      jQuery.escapeSelector = Sizzle.escape;
      var dir = function (elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break
            }
            matched.push(elem)
          }
        }
        return matched
      };
      var siblings = function (n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n)
          }
        }
        return matched
      };
      var rneedsContext = jQuery.expr.match.needsContext;
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      var risSimple = /^.[^:#\[\.,]*$/;
      // Implement the identical functionality for filter and not
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not
          })
        }
        // Single element
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not
          })
        }
        // Arraylike of elements (jQuery, arguments, Array)
        if (typeof qualifier !== 'string') {
          return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) > -1 !== not
          })
        }
        // Simple selector that can be filtered directly, removing non-Elements
        if (risSimple.test(qualifier)) {
          return jQuery.filter(qualifier, elements, not)
        }
        // Complex selector, compare the two sets, removing non-Elements
        qualifier = jQuery.filter(qualifier, elements);
        return jQuery.grep(elements, function (elem) {
          return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1
        })
      }
      jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ':not(' + expr + ')'
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : []
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
          return elem.nodeType === 1
        }))
      };
      jQuery.fn.extend({
        find: function (selector) {
          var i, ret, len = this.length, self = this;
          if (typeof selector !== 'string') {
            return this.pushStack(jQuery(selector).filter(function () {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true
                }
              }
            }))
          }
          ret = this.pushStack([]);
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret)
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret
        },
        filter: function (selector) {
          return this.pushStack(winnow(this, selector || [], false))
        },
        not: function (selector) {
          return this.pushStack(winnow(this, selector || [], true))
        },
        is: function (selector) {
          return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
          // so $("p:first").is("p:last") won't return true for a doc with two "p".
          typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
        }
      });
      // Initialize a jQuery object
      // A central reference to the root jQuery(document)
      var rootjQuery,
        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        // Shortcut simple #id case for speed
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function (selector, context, root) {
          var match, elem;
          // HANDLE: $(""), $(null), $(undefined), $(false)
          if (!selector) {
            return this
          }
          // Method init() accepts an alternate rootjQuery
          // so migrate can support jQuery.sub (gh-2101)
          root = root || rootjQuery;
          // Handle HTML strings
          if (typeof selector === 'string') {
            if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
              // Assume that strings that start and end with <> are HTML and skip the regex check
              match = [
                null,
                selector,
                null
              ]
            } else {
              match = rquickExpr.exec(selector)
            }
            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {
              // HANDLE: $(html) -> $(array)
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                // Option to run scripts is true for back-compat
                // Intentionally let the error be thrown if parseHTML is not present
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                // HANDLE: $(html, props)
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {
                    // Properties of context are called as methods if possible
                    if (jQuery.isFunction(this[match])) {
                      this[match](context[match])  // ...and otherwise set as attributes
                    } else {
                      this.attr(match, context[match])
                    }
                  }
                }
                return this  // HANDLE: $(#id)
              } else {
                elem = document.getElementById(match[2]);
                if (elem) {
                  // Inject the element directly into the jQuery object
                  this[0] = elem;
                  this.length = 1
                }
                return this
              }  // HANDLE: $(expr, $(...))
            } else if (!context || context.jquery) {
              return (context || root).find(selector)  // HANDLE: $(expr, context)
                                                       // (which is just equivalent to: $(context).find(expr)
            } else {
              return this.constructor(context).find(selector)
            }  // HANDLE: $(DOMElement)
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this  // HANDLE: $(function)
                         // Shortcut for document ready
          } else if (jQuery.isFunction(selector)) {
            return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
            selector(jQuery)
          }
          return jQuery.makeArray(selector, this)
        };
      // Give the init function the jQuery prototype for later instantiation
      init.prototype = jQuery.fn;
      // Initialize central reference
      rootjQuery = jQuery(document);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/,
        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
      jQuery.fn.extend({
        has: function (target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function () {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true
              }
            }
          })
        },
        closest: function (selectors, context) {
          var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== 'string' && jQuery(selectors);
          // Positional selectors never match, since there's no _selection_ context
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                // Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched)
        },
        // Determine the position of an element within the set
        index: function (elem) {
          // No argument, return index in parent
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
          }
          // Index in selector
          if (typeof elem === 'string') {
            return indexOf.call(jQuery(elem), this[0])
          }
          // Locate the position of the desired element
          return indexOf.call(this, // If it receives a jQuery object, the first element is used
          elem.jquery ? elem[0] : elem)
        },
        add: function (selector, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))))
        },
        addBack: function (selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
        }
      });
      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur
      }
      jQuery.each({
        parent: function (elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null
        },
        parents: function (elem) {
          return dir(elem, 'parentNode')
        },
        parentsUntil: function (elem, i, until) {
          return dir(elem, 'parentNode', until)
        },
        next: function (elem) {
          return sibling(elem, 'nextSibling')
        },
        prev: function (elem) {
          return sibling(elem, 'previousSibling')
        },
        nextAll: function (elem) {
          return dir(elem, 'nextSibling')
        },
        prevAll: function (elem) {
          return dir(elem, 'previousSibling')
        },
        nextUntil: function (elem, i, until) {
          return dir(elem, 'nextSibling', until)
        },
        prevUntil: function (elem, i, until) {
          return dir(elem, 'previousSibling', until)
        },
        siblings: function (elem) {
          return siblings((elem.parentNode || {}).firstChild, elem)
        },
        children: function (elem) {
          return siblings(elem.firstChild)
        },
        contents: function (elem) {
          return elem.contentDocument || jQuery.merge([], elem.childNodes)
        }
      }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== 'Until') {
            selector = until
          }
          if (selector && typeof selector === 'string') {
            matched = jQuery.filter(selector, matched)
          }
          if (this.length > 1) {
            // Remove duplicates
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched)
            }
            // Reverse order for parents* and prev-derivatives
            if (rparentsprev.test(name)) {
              matched.reverse()
            }
          }
          return this.pushStack(matched)
        }
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      // Convert String-formatted options into Object-formatted ones
      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
          object[flag] = true
        });
        return object
      }
      /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
      jQuery.Callbacks = function (options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
        var
          // Flag to know if list is currently firing
          firing,
          // Last fire value for non-forgettable lists
          memory,
          // Flag to know if list was already fired
          fired,
          // Flag to prevent firing
          locked,
          // Actual callback list
          list = [],
          // Queue of execution data for repeatable lists
          queue = [],
          // Index of currently firing callback (modified by add/remove as needed)
          firingIndex = -1,
          // Fire callbacks
          fire = function () {
            // Enforce single-firing
            locked = options.once;
            // Execute callbacks for all pending executions,
            // respecting firingIndex overrides and runtime changes
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                // Run callback and check for early termination
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  // Jump to end and forget the data so .add doesn't re-fire
                  firingIndex = list.length;
                  memory = false
                }
              }
            }
            // Forget the data if we're done with it
            if (!options.memory) {
              memory = false
            }
            firing = false;
            // Clean up if we're done firing for good
            if (locked) {
              // Keep an empty list if we have data for future add calls
              if (memory) {
                list = []  // Otherwise, this object is spent
              } else {
                list = ''
              }
            }
          },
          // Actual Callbacks object
          self = {
            // Add a callback or a collection of callbacks to the list
            add: function () {
              if (list) {
                // If we have memory from a past run, we should fire after adding
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory)
                }
                (function add(args) {
                  jQuery.each(args, function (_, arg) {
                    if (jQuery.isFunction(arg)) {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg)
                      }
                    } else if (arg && arg.length && jQuery.type(arg) !== 'string') {
                      // Inspect recursively
                      add(arg)
                    }
                  })
                }(arguments));
                if (memory && !firing) {
                  fire()
                }
              }
              return this
            },
            // Remove a callback from the list
            remove: function () {
              jQuery.each(arguments, function (_, arg) {
                var index;
                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  // Handle firing indexes
                  if (index <= firingIndex) {
                    firingIndex--
                  }
                }
              });
              return this
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function (fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0
            },
            // Remove all callbacks from the list
            empty: function () {
              if (list) {
                list = []
              }
              return this
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function () {
              locked = queue = [];
              list = memory = '';
              return this
            },
            disabled: function () {
              return !list
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function () {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = ''
              }
              return this
            },
            locked: function () {
              return !!locked
            },
            // Call all callbacks with the given context and arguments
            fireWith: function (context, args) {
              if (!locked) {
                args = args || [];
                args = [
                  context,
                  args.slice ? args.slice() : args
                ];
                queue.push(args);
                if (!firing) {
                  fire()
                }
              }
              return this
            },
            // Call all the callbacks with the given arguments
            fire: function () {
              self.fireWith(this, arguments);
              return this
            },
            // To know if the callbacks have already been called at least once
            fired: function () {
              return !!fired
            }
          };
        return self
      };
      function Identity(v) {
        return v
      }
      function Thrower(ex) {
        throw ex
      }
      function adoptValue(value, resolve, reject) {
        var method;
        try {
          // Check for promise aspect first to privilege synchronous behavior
          if (value && jQuery.isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject)  // Other thenables
          } else if (value && jQuery.isFunction(method = value.then)) {
            method.call(value, resolve, reject)  // Other non-thenables
          } else {
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            resolve.call(undefined, value)
          }  // For Promises/A+, convert exceptions into rejections
             // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
             // Deferred#then to conditionally suppress rejection.
        } catch (value) {
          // Support: Android 4.0 only
          // Strict mode functions invoked without .call/.apply get global-object context
          reject.call(undefined, value)
        }
      }
      jQuery.extend({
        Deferred: function (func) {
          var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              [
                'notify',
                'progress',
                jQuery.Callbacks('memory'),
                jQuery.Callbacks('memory'),
                2
              ],
              [
                'resolve',
                'done',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                0,
                'resolved'
              ],
              [
                'reject',
                'fail',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                1,
                'rejected'
              ]
            ], state = 'pending', promise = {
              state: function () {
                return state
              },
              always: function () {
                deferred.done(arguments).fail(arguments);
                return this
              },
              'catch': function (fn) {
                return promise.then(null, fn)
              },
              // Keep pipe for back-compat
              pipe: function () {
                var fns = arguments;
                return jQuery.Deferred(function (newDefer) {
                  jQuery.each(tuples, function (i, tuple) {
                    // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                    var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    // deferred.progress(function() { bind to newDefer or newDefer.notify })
                    // deferred.done(function() { bind to newDefer or newDefer.resolve })
                    // deferred.fail(function() { bind to newDefer or newDefer.reject })
                    deferred[tuple[1]](function () {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && jQuery.isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject)
                      } else {
                        newDefer[tuple[0] + 'With'](this, fn ? [returned] : arguments)
                      }
                    })
                  });
                  fns = null
                }).promise()
              },
              then: function (onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred, handler, special) {
                  return function () {
                    var that = this, args = arguments, mightThrow = function () {
                        var returned, then;
                        // Support: Promises/A+ section 2.3.3.3.3
                        // https://promisesaplus.com/#point-59
                        // Ignore double-resolution attempts
                        if (depth < maxDepth) {
                          return
                        }
                        returned = handler.apply(that, args);
                        // Support: Promises/A+ section 2.3.1
                        // https://promisesaplus.com/#point-48
                        if (returned === deferred.promise()) {
                          throw new TypeError('Thenable self-resolution')
                        }
                        // Support: Promises/A+ sections 2.3.3.1, 3.5
                        // https://promisesaplus.com/#point-54
                        // https://promisesaplus.com/#point-75
                        // Retrieve `then` only once
                        then = returned && (typeof returned === 'object' || typeof returned === 'function') && returned.then;
                        // Handle a returned thenable
                        if (jQuery.isFunction(then)) {
                          // Special processors (notify) just wait for resolution
                          if (special) {
                            then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special))  // Normal processors (resolve) also hook into progress
                          } else {
                            // ...and disregard older resolution values
                            maxDepth++;
                            then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith))
                          }  // Handle all other returned values
                        } else {
                          // Only substitute handlers pass on context
                          // and multiple values (non-spec behavior)
                          if (handler !== Identity) {
                            that = undefined;
                            args = [returned]
                          }
                          // Process the value(s)
                          // Default process is resolve
                          (special || deferred.resolveWith)(that, args)
                        }
                      },
                      // Only normal processors (resolve) catch and reject exceptions
                      process = special ? mightThrow : function () {
                        try {
                          mightThrow()
                        } catch (e) {
                          if (jQuery.Deferred.exceptionHook) {
                            jQuery.Deferred.exceptionHook(e, process.stackTrace)
                          }
                          // Support: Promises/A+ section 2.3.3.3.4.1
                          // https://promisesaplus.com/#point-61
                          // Ignore post-resolution exceptions
                          if (depth + 1 >= maxDepth) {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Thrower) {
                              that = undefined;
                              args = [e]
                            }
                            deferred.rejectWith(that, args)
                          }
                        }
                      };
                    // Support: Promises/A+ section 2.3.3.3.1
                    // https://promisesaplus.com/#point-57
                    // Re-resolve promises immediately to dodge false rejection from
                    // subsequent errors
                    if (depth) {
                      process()
                    } else {
                      // Call an optional hook to record the stack, in case of exception
                      // since it's otherwise lost when execution goes async
                      if (jQuery.Deferred.getStackHook) {
                        process.stackTrace = jQuery.Deferred.getStackHook()
                      }
                      window.setTimeout(process)
                    }
                  }
                }
                return jQuery.Deferred(function (newDefer) {
                  // progress_handlers.add( ... )
                  tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                  // fulfilled_handlers.add( ... )
                  tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));
                  // rejected_handlers.add( ... )
                  tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower))
                }).promise()
              },
              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function (obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise
              }
            }, deferred = {};
          // Add list-specific methods
          jQuery.each(tuples, function (i, tuple) {
            var list = tuple[2], stateString = tuple[5];
            // promise.progress = list.add
            // promise.done = list.add
            // promise.fail = list.add
            promise[tuple[1]] = list.add;
            // Handle state
            if (stateString) {
              list.add(function () {
                // state = "resolved" (i.e., fulfilled)
                // state = "rejected"
                state = stateString
              }, // rejected_callbacks.disable
              // fulfilled_callbacks.disable
              tuples[3 - i][2].disable, // progress_callbacks.lock
              tuples[0][2].lock)
            }
            // progress_handlers.fire
            // fulfilled_handlers.fire
            // rejected_handlers.fire
            list.add(tuple[3].fire);
            // deferred.notify = function() { deferred.notifyWith(...) }
            // deferred.resolve = function() { deferred.resolveWith(...) }
            // deferred.reject = function() { deferred.rejectWith(...) }
            deferred[tuple[0]] = function () {
              deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments);
              return this
            };
            // deferred.notifyWith = list.fireWith
            // deferred.resolveWith = list.fireWith
            // deferred.rejectWith = list.fireWith
            deferred[tuple[0] + 'With'] = list.fireWith
          });
          // Make the deferred a promise
          promise.promise(deferred);
          // Call given func if any
          if (func) {
            func.call(deferred, deferred)
          }
          // All done!
          return deferred
        },
        // Deferred helper
        when: function (singleValue) {
          var
            // count of uncompleted subordinates
            remaining = arguments.length,
            // count of unprocessed arguments
            i = remaining,
            // subordinate fulfillment data
            resolveContexts = Array(i), resolveValues = slice.call(arguments),
            // the master Deferred
            master = jQuery.Deferred(),
            // subordinate callback factory
            updateFunc = function (i) {
              return function (value) {
                resolveContexts[i] = this;
                resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  master.resolveWith(resolveContexts, resolveValues)
                }
              }
            };
          // Single- and empty arguments are adopted like Promise.resolve
          if (remaining <= 1) {
            adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject);
            // Use .then() to unwrap secondary thenables (cf. gh-3000)
            if (master.state() === 'pending' || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {
              return master.then()
            }
          }
          // Multiple arguments are aggregated like Promise.all array elements
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), master.reject)
          }
          return master.promise()
        }
      });
      // These usually indicate a programmer mistake during development,
      // warn about them ASAP rather than swallowing them by default.
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery.Deferred.exceptionHook = function (error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
          void 0
        }
      };
      jQuery.readyException = function (error) {
        window.setTimeout(function () {
          throw error
        })
      };
      // The deferred used on DOM ready
      var readyList = jQuery.Deferred();
      jQuery.fn.ready = function (fn) {
        readyList.then(fn)  // Wrap jQuery.readyException in a function so that the lookup
                            // happens at the time of error handling instead of callback
                            // registration.
.catch(function (error) {
          jQuery.readyException(error)
        });
        return this
      };
      jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Hold (or release) the ready event
        holdReady: function (hold) {
          if (hold) {
            jQuery.readyWait++
          } else {
            jQuery.ready(true)
          }
        },
        // Handle when the DOM is ready
        ready: function (wait) {
          // Abort if there are pending holds or we're already ready
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return
          }
          // Remember that the DOM is ready
          jQuery.isReady = true;
          // If a normal DOM Ready event fired, decrement, and wait if need be
          if (wait !== true && --jQuery.readyWait > 0) {
            return
          }
          // If there are functions bound, to execute
          readyList.resolveWith(document, [jQuery])
        }
      });
      jQuery.ready.then = readyList.then;
      // The ready event handler and self cleanup method
      function completed() {
        document.removeEventListener('DOMContentLoaded', completed);
        window.removeEventListener('load', completed);
        jQuery.ready()
      }
      // Catch cases where $(document).ready() is called
      // after the browser event has already occurred.
      // Support: IE <=9 - 10 only
      // Older IE sometimes signals "interactive" too soon
      if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready)
      } else {
        // Use the handy event callback
        document.addEventListener('DOMContentLoaded', completed);
        // A fallback to window.onload, that will always work
        window.addEventListener('load', completed)
      }
      // Multifunctional method to get and set values of a collection
      // The value/s can optionally be executed if it's a function
      var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        // Sets many values
        if (jQuery.type(key) === 'object') {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw)
          }  // Sets one value
        } else if (value !== undefined) {
          chainable = true;
          if (!jQuery.isFunction(value)) {
            raw = true
          }
          if (bulk) {
            // Bulk operations run against the entire set
            if (raw) {
              fn.call(elems, value);
              fn = null  // ...except when executing function values
            } else {
              bulk = fn;
              fn = function (elem, key, value) {
                return bulk.call(jQuery(elem), value)
              }
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
            }
          }
        }
        if (chainable) {
          return elems
        }
        // Gets
        if (bulk) {
          return fn.call(elems)
        }
        return len ? fn(elems[0], key) : emptyGet
      };
      var acceptData = function (owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
      };
      function Data() {
        this.expando = jQuery.expando + Data.uid++
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function (owner) {
          // Check if the owner object already has a cache
          var value = owner[this.expando];
          // If not, create one
          if (!value) {
            value = {};
            // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return an empty object.
            if (acceptData(owner)) {
              // If it is a node unlikely to be stringify-ed or looped over
              // use plain assignment
              if (owner.nodeType) {
                owner[this.expando] = value  // Otherwise secure it in a non-enumerable property
                                             // configurable must be true to allow the property to be
                                             // deleted when data is removed
              } else {
                Object.defineProperty(owner, this.expando, {
                  value: value,
                  configurable: true
                })
              }
            }
          }
          return value
        },
        set: function (owner, data, value) {
          var prop, cache = this.cache(owner);
          // Handle: [ owner, key, value ] args
          // Always use camelCase key (gh-2257)
          if (typeof data === 'string') {
            cache[jQuery.camelCase(data)] = value  // Handle: [ owner, { properties } ] args
          } else {
            // Copy the properties one-by-one to the cache object
            for (prop in data) {
              cache[jQuery.camelCase(prop)] = data[prop]
            }
          }
          return cache
        },
        get: function (owner, key) {
          return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][jQuery.camelCase(key)]
        },
        access: function (owner, key, value) {
          // In cases where either:
          //
          //   1. No key was specified
          //   2. A string key was specified, but no value provided
          //
          // Take the "read" path and allow the get method to determine
          // which value to return, respectively either:
          //
          //   1. The entire cache object
          //   2. The data stored at the key
          //
          if (key === undefined || key && typeof key === 'string' && value === undefined) {
            return this.get(owner, key)
          }
          // When the key is not a string, or both a key and value
          // are specified, set or extend (existing objects) with either:
          //
          //   1. An object of properties
          //   2. A key and value
          //
          this.set(owner, key, value);
          // Since the "set" path can have two possible entry points
          // return the expected data based on which path was taken[*]
          return value !== undefined ? value : key
        },
        remove: function (owner, key) {
          var i, cache = owner[this.expando];
          if (cache === undefined) {
            return
          }
          if (key !== undefined) {
            // Support array or space separated string of keys
            if (jQuery.isArray(key)) {
              // If key is an array of keys...
              // We always set camelCase keys, so remove that.
              key = key.map(jQuery.camelCase)
            } else {
              key = jQuery.camelCase(key);
              // If a key with the spaces exists, use it.
              // Otherwise, create an array by matching non-whitespace
              key = key in cache ? [key] : key.match(rnothtmlwhite) || []
            }
            i = key.length;
            while (i--) {
              delete cache[key[i]]
            }
          }
          // Remove the expando if there's no more data
          if (key === undefined || jQuery.isEmptyObject(cache)) {
            // Support: Chrome <=35 - 45
            // Webkit & Blink performance suffers when deleting properties
            // from DOM nodes, so set to undefined instead
            // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
            if (owner.nodeType) {
              owner[this.expando] = undefined
            } else {
              delete owner[this.expando]
            }
          }
        },
        hasData: function (owner) {
          var cache = owner[this.expando];
          return cache !== undefined && !jQuery.isEmptyObject(cache)
        }
      };
      var dataPriv = new Data;
      var dataUser = new Data;
      //	Implementation Summary
      //
      //	1. Enforce API surface and semantic compatibility with 1.9.x branch
      //	2. Improve the module's maintainability by reducing the storage
      //		paths to a single mechanism.
      //	3. Use the same single mechanism to support "private" and "user" data.
      //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
      //	5. Avoid exposing implementation details on user objects (eg. expando properties)
      //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data) {
        if (data === 'true') {
          return true
        }
        if (data === 'false') {
          return false
        }
        if (data === 'null') {
          return null
        }
        // Only convert to a number if it doesn't change the string
        if (data === +data + '') {
          return +data
        }
        if (rbrace.test(data)) {
          return JSON.parse(data)
        }
        return data
      }
      function dataAttr(elem, key, data) {
        var name;
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
          name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === 'string') {
            try {
              data = getData(data)
            } catch (e) {
            }
            // Make sure we set the data so it isn't changed later
            dataUser.set(elem, key, data)
          } else {
            data = undefined
          }
        }
        return data
      }
      jQuery.extend({
        hasData: function (elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem)
        },
        data: function (elem, name, data) {
          return dataUser.access(elem, name, data)
        },
        removeData: function (elem, name) {
          dataUser.remove(elem, name)
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function (elem, name, data) {
          return dataPriv.access(elem, name, data)
        },
        _removeData: function (elem, name) {
          dataPriv.remove(elem, name)
        }
      });
      jQuery.fn.extend({
        data: function (key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          // Gets all values
          if (key === undefined) {
            if (this.length) {
              data = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                i = attrs.length;
                while (i--) {
                  // Support: IE 11 only
                  // The attrs elements can be null (#14894)
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf('data-') === 0) {
                      name = jQuery.camelCase(name.slice(5));
                      dataAttr(elem, name, data[name])
                    }
                  }
                }
                dataPriv.set(elem, 'hasDataAttrs', true)
              }
            }
            return data
          }
          // Sets multiple values
          if (typeof key === 'object') {
            return this.each(function () {
              dataUser.set(this, key)
            })
          }
          return access(this, function (value) {
            var data;
            // The calling jQuery object (element matches) is not empty
            // (and therefore has an element appears at this[ 0 ]) and the
            // `value` parameter was not undefined. An empty jQuery object
            // will result in `undefined` for elem = this[ 0 ] which will
            // throw an exception if an attempt to read a data cache is made.
            if (elem && value === undefined) {
              // Attempt to get data from the cache
              // The key will always be camelCased in Data
              data = dataUser.get(elem, key);
              if (data !== undefined) {
                return data
              }
              // Attempt to "discover" the data in
              // HTML5 custom data-* attrs
              data = dataAttr(elem, key);
              if (data !== undefined) {
                return data
              }
              // We tried really hard, but the data doesn't exist.
              return
            }
            // Set the data...
            this.each(function () {
              // We always store the camelCased key
              dataUser.set(this, key, value)
            })
          }, null, value, arguments.length > 1, null, true)
        },
        removeData: function (key) {
          return this.each(function () {
            dataUser.remove(this, key)
          })
        }
      });
      jQuery.extend({
        queue: function (elem, type, data) {
          var queue;
          if (elem) {
            type = (type || 'fx') + 'queue';
            queue = dataPriv.get(elem, type);
            // Speed up dequeue by getting out quickly if this is just a lookup
            if (data) {
              if (!queue || jQuery.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data))
              } else {
                queue.push(data)
              }
            }
            return queue || []
          }
        },
        dequeue: function (elem, type) {
          type = type || 'fx';
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
              jQuery.dequeue(elem, type)
            };
          // If the fx queue is dequeued, always remove the progress sentinel
          if (fn === 'inprogress') {
            fn = queue.shift();
            startLength--
          }
          if (fn) {
            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if (type === 'fx') {
              queue.unshift('inprogress')
            }
            // Clear up the last queue stop function
            delete hooks.stop;
            fn.call(elem, next, hooks)
          }
          if (!startLength && hooks) {
            hooks.empty.fire()
          }
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function (elem, type) {
          var key = type + 'queueHooks';
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks('once memory').add(function () {
              dataPriv.remove(elem, [
                type + 'queue',
                key
              ])
            })
          })
        }
      });
      jQuery.fn.extend({
        queue: function (type, data) {
          var setter = 2;
          if (typeof type !== 'string') {
            data = type;
            type = 'fx';
            setter--
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type)
          }
          return data === undefined ? this : this.each(function () {
            var queue = jQuery.queue(this, type, data);
            // Ensure a hooks for this queue
            jQuery._queueHooks(this, type);
            if (type === 'fx' && queue[0] !== 'inprogress') {
              jQuery.dequeue(this, type)
            }
          })
        },
        dequeue: function (type) {
          return this.each(function () {
            jQuery.dequeue(this, type)
          })
        },
        clearQueue: function (type) {
          return this.queue(type || 'fx', [])
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function (type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
              if (!--count) {
                defer.resolveWith(elements, [elements])
              }
            };
          if (typeof type !== 'string') {
            obj = type;
            type = undefined
          }
          type = type || 'fx';
          while (i--) {
            tmp = dataPriv.get(elements[i], type + 'queueHooks');
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve)
            }
          }
          resolve();
          return defer.promise(obj)
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
      var cssExpand = [
        'Top',
        'Right',
        'Bottom',
        'Left'
      ];
      var isHiddenWithinTree = function (elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === 'none' || elem.style.display === '' && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, 'display') === 'none'
      };
      var swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        // Remember the old values, and insert the new ones
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name]
        }
        ret = callback.apply(elem, args || []);
        // Revert the old values
        for (name in options) {
          elem.style[name] = old[name]
        }
        return ret
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale = 1, maxIterations = 20, currentValue = tween ? function () {
            return tween.cur()
          } : function () {
            return jQuery.css(elem, prop, '')
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
          // Starting value computation is required for potential unit mismatches
          initialInUnit = (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          // Trust units reported by jQuery.css
          unit = unit || initialInUnit[3];
          // Make sure we update the tween properties later on
          valueParts = valueParts || [];
          // Iteratively approximate from a nonzero starting point
          initialInUnit = +initial || 1;
          do {
            // If previous iteration zeroed out, double until we get *something*.
            // Use string for doubling so we don't accidentally see scale as unchanged below
            scale = scale || '.5';
            // Adjust and apply
            initialInUnit = initialInUnit / scale;
            jQuery.style(elem, prop, initialInUnit + unit)  // Update scale, tolerating zero or NaN from tween.cur()
                                                            // Break the loop if scale is unchanged or perfect, or if we've just had enough.
          } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations)
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          // Apply relative offset (+=/-=) if specified
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted
          }
        }
        return adjusted
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
          return display
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, 'display');
        temp.parentNode.removeChild(temp);
        if (display === 'none') {
          display = 'block'
        }
        defaultDisplayMap[nodeName] = display;
        return display
      }
      function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        // Determine new display value for elements that need to change
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue
          }
          display = elem.style.display;
          if (show) {
            // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
            // check is required in this first loop unless we have a nonempty display value (either
            // inline or about-to-be-restored)
            if (display === 'none') {
              values[index] = dataPriv.get(elem, 'display') || null;
              if (!values[index]) {
                elem.style.display = ''
              }
            }
            if (elem.style.display === '' && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem)
            }
          } else {
            if (display !== 'none') {
              values[index] = 'none';
              // Remember what we're overwriting
              dataPriv.set(elem, 'display', display)
            }
          }
        }
        // Set the display of the elements in a second loop to avoid constant reflow
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index]
          }
        }
        return elements
      }
      jQuery.fn.extend({
        show: function () {
          return showHide(this, true)
        },
        hide: function () {
          return showHide(this)
        },
        toggle: function (state) {
          if (typeof state === 'boolean') {
            return state ? this.show() : this.hide()
          }
          return this.each(function () {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show()
            } else {
              jQuery(this).hide()
            }
          })
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
      var rscriptType = /^$|\/(?:java|ecma)script/i;
      // We have to close these tags to support XHTML (#13200)
      var wrapMap = {
        // Support: IE <=9 only
        option: [
          1,
          "<select multiple='multiple'>",
          '</select>'
        ],
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [
          1,
          '<table>',
          '</table>'
        ],
        col: [
          2,
          '<table><colgroup>',
          '</colgroup></table>'
        ],
        tr: [
          2,
          '<table><tbody>',
          '</tbody></table>'
        ],
        td: [
          3,
          '<table><tbody><tr>',
          '</tr></tbody></table>'
        ],
        _default: [
          0,
          '',
          ''
        ]
      };
      // Support: IE <=9 only
      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;
        if (typeof context.getElementsByTagName !== 'undefined') {
          ret = context.getElementsByTagName(tag || '*')
        } else if (typeof context.querySelectorAll !== 'undefined') {
          ret = context.querySelectorAll(tag || '*')
        } else {
          ret = []
        }
        if (tag === undefined || tag && jQuery.nodeName(context, tag)) {
          return jQuery.merge([context], ret)
        }
        return ret
      }
      // Mark scripts as having already been evaluated
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'))
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
          elem = elems[i];
          if (elem || elem === 0) {
            // Add nodes directly
            if (jQuery.type(elem) === 'object') {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem)  // Convert non-html into a text node
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem))  // Convert html into DOM nodes
            } else {
              tmp = tmp || fragment.appendChild(context.createElement('div'));
              // Deserialize a standard representation
              tag = (rtagName.exec(elem) || [
                '',
                ''
              ])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
              // Descend through wrappers to the right content
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild
              }
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, tmp.childNodes);
              // Remember the top-level container
              tmp = fragment.firstChild;
              // Ensure the created nodes are orphaned (#12392)
              tmp.textContent = ''
            }
          }
        }
        // Remove wrapper from fragment
        fragment.textContent = '';
        i = 0;
        while (elem = nodes[i++]) {
          // Skip elements already in the context collection (trac-4087)
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem)
            }
            continue
          }
          contains = jQuery.contains(elem.ownerDocument, elem);
          // Append to fragment
          tmp = getAll(fragment.appendChild(elem), 'script');
          // Preserve script evaluation history
          if (contains) {
            setGlobalEval(tmp)
          }
          // Capture executables
          if (scripts) {
            j = 0;
            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || '')) {
                scripts.push(elem)
              }
            }
          }
        }
        return fragment
      }
      (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
      }());
      var documentElement = document.documentElement;
      var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue() {
        return true
      }
      function returnFalse() {
        return false
      }
      // Support: IE <=9 only
      // See #13393 for more info
      function safeActiveElement() {
        try {
          return document.activeElement
        } catch (err) {
        }
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        // Types can be a map of types/handlers
        if (typeof types === 'object') {
          // ( types-Object, selector, data )
          if (typeof selector !== 'string') {
            // ( types-Object, data )
            data = data || selector;
            selector = undefined
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one)
          }
          return elem
        }
        if (data == null && fn == null) {
          // ( types, fn )
          fn = selector;
          data = selector = undefined
        } else if (fn == null) {
          if (typeof selector === 'string') {
            // ( types, selector, fn )
            fn = data;
            data = undefined
          } else {
            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined
          }
        }
        if (fn === false) {
          fn = returnFalse
        } else if (!fn) {
          return elem
        }
        if (one === 1) {
          origFn = fn;
          fn = function (event) {
            // Can use an empty set, since event contains the info
            jQuery().off(event);
            return origFn.apply(this, arguments)
          };
          // Use same guid so caller can remove using origFn
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
        }
        return elem.each(function () {
          jQuery.event.add(this, types, fn, data, selector)
        })
      }
      /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
      jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          // Don't attach events to noData or text/comment nodes (but allow plain objects)
          if (!elemData) {
            return
          }
          // Caller can pass in an object of custom data in lieu of the handler
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector
          }
          // Ensure that invalid selectors throw exceptions at attach time
          // Evaluate against documentElement in case elem is a non-element node (e.g., document)
          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector)
          }
          // Make sure that the handler has a unique ID, used to find/remove it later
          if (!handler.guid) {
            handler.guid = jQuery.guid++
          }
          // Init the element's event structure and main handler, if this is the first
          if (!(events = elemData.events)) {
            events = elemData.events = {}
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function (e) {
              // Discard the second event of a jQuery.event.trigger() and
              // when an event is called after a page has unloaded
              return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined
            }
          }
          // Handle multiple events separated by a space
          types = (types || '').match(rnothtmlwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            // There *must* be a type, no attaching namespace-only handlers
            if (!type) {
              continue
            }
            // If event changes its type, use the special event handlers for the changed type
            special = jQuery.event.special[type] || {};
            // If selector defined, determine special event api type, otherwise given type
            type = (selector ? special.delegateType : special.bindType) || type;
            // Update special based on newly reset type
            special = jQuery.event.special[type] || {};
            // handleObj is passed to all event handlers
            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join('.')
            }, handleObjIn);
            // Init the event handler queue if we're the first
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              // Only use addEventListener if the special events handler returns false
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle)
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid
              }
            }
            // Add to the element's handler list, delegates in front
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj)
            } else {
              handlers.push(handleObj)
            }
            // Keep track of which events have ever been used, for event optimization
            jQuery.event.global[type] = true
          }
        },
        // Detach an event or set of events from an element
        remove: function (elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return
          }
          // Once for each type.namespace in types; type may be omitted
          types = (types || '').match(rnothtmlwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            // Unbind all events (on this namespace, if provided) for the element
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true)
              }
              continue
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
            // Remove matching events
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj)
                }
              }
            }
            // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle)
              }
              delete events[type]
            }
          }
          // Remove data and the expando if it's no longer used
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, 'handle events')
          }
        },
        dispatch: function (nativeEvent) {
          // Make a writable jQuery.Event from the native event object
          var event = jQuery.event.fix(nativeEvent);
          var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
          // Use the fix-ed jQuery.Event rather than the (read-only) native event
          args[0] = event;
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i]
          }
          event.delegateTarget = this;
          // Call the preDispatch hook for the mapped type, and let it bail if desired
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return
          }
          // Determine handlers
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          // Run delegates first; they may want to stop propagation beneath us
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              // Triggered event must either 1) have no namespace, or 2) have namespace(s)
              // a subset or equal to those in the bound event (both can have no namespace).
              if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation()
                  }
                }
              }
            }
          }
          // Call the postDispatch hook for the mapped type
          if (special.postDispatch) {
            special.postDispatch.call(this, event)
          }
          return event.result
        },
        handlers: function (event, handlers) {
          var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          // Find delegate handlers
          if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === 'click' && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              // Don't check non-elements (#13208)
              // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
              if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  // Don't conflict with Object.prototype properties (#13203)
                  sel = handleObj.selector + ' ';
                  if (matchedSelectors[sel] === undefined) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj)
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matchedHandlers
                  })
                }
              }
            }
          }
          // Add the remaining (directly-bound) handlers
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({
              elem: cur,
              handlers: handlers.slice(delegateCount)
            })
          }
          return handlerQueue
        },
        addProp: function (name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: jQuery.isFunction(hook) ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent)
              }
            } : function () {
              if (this.originalEvent) {
                return this.originalEvent[name]
              }
            },
            set: function (value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: value
              })
            }
          })
        },
        fix: function (originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent)
        },
        special: {
          load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
          },
          focus: {
            // Fire native event if possible so blur/focus sequence is correct
            trigger: function () {
              if (this !== safeActiveElement() && this.focus) {
                this.focus();
                return false
              }
            },
            delegateType: 'focusin'
          },
          blur: {
            trigger: function () {
              if (this === safeActiveElement() && this.blur) {
                this.blur();
                return false
              }
            },
            delegateType: 'focusout'
          },
          click: {
            // For checkbox, fire native event so checked state will be right
            trigger: function () {
              if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                this.click();
                return false
              }
            },
            // For cross-browser consistency, don't fire native .click() on links
            _default: function (event) {
              return jQuery.nodeName(event.target, 'a')
            }
          },
          beforeunload: {
            postDispatch: function (event) {
              // Support: Firefox 20+
              // Firefox doesn't alert if the returnValue field is not set.
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result
              }
            }
          }
        }
      };
      jQuery.removeEvent = function (elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle)
        }
      };
      jQuery.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props)
        }
        // Event object
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
          src.returnValue === false ? returnTrue : returnFalse;
          // Create target properties
          // Support: Safari <=6 - 7 only
          // Target should not be a text node (#504, #13143)
          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget  // Event type
        } else {
          this.type = src
        }
        // Put explicitly provided properties onto the event object
        if (props) {
          jQuery.extend(this, props)
        }
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
        // Mark it as fixed
        this[jQuery.expando] = true
      };
      // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
      // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function () {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault()
          }
        },
        stopPropagation: function () {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation()
          }
        },
        stopImmediatePropagation: function () {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation()
          }
          this.stopPropagation()
        }
      };
      // Includes all common event props including KeyEvent and MouseEvent specific props
      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        'char': true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function (event) {
          var button = event.button;
          // Add which for key events
          if (event.which == null && rkeyEvent.test(event.type)) {
            return event.charCode != null ? event.charCode : event.keyCode
          }
          // Add which for click: 1 === left; 2 === middle; 3 === right
          if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
            if (button & 1) {
              return 1
            }
            if (button & 2) {
              return 3
            }
            if (button & 4) {
              return 2
            }
            return 0
          }
          return event.which
        }
      }, jQuery.event.addProp);
      // Create mouseenter/leave events using mouseover/out and event-time checks
      // so that event delegation works in jQuery.
      // Do the same for pointerenter/pointerleave and pointerover/pointerout
      //
      // Support: Safari 7 only
      // Safari sends mouseenter too often; see:
      // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
      // for the description of the bug (it existed in older Chrome versions as well).
      jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
      }, function (orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function (event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            // For mouseenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix
            }
            return ret
          }
        }
      });
      jQuery.fn.extend({
        on: function (types, selector, data, fn) {
          return on(this, types, selector, data, fn)
        },
        one: function (types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1)
        },
        off: function (types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this
          }
          if (typeof types === 'object') {
            // ( types-object [, selector] )
            for (type in types) {
              this.off(type, selector, types[type])
            }
            return this
          }
          if (selector === false || typeof selector === 'function') {
            // ( types [, fn] )
            fn = selector;
            selector = undefined
          }
          if (fn === false) {
            fn = returnFalse
          }
          return this.each(function () {
            jQuery.event.remove(this, types, fn, selector)
          })
        }
      });
      var
        /* eslint-disable max-len */
        // See https://github.com/eslint/eslint/issues/3229
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        /* eslint-enable */
        // Support: IE <=10 - 11, Edge 12 - 13
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
      function manipulationTarget(elem, content) {
        if (jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')) {
          return elem.getElementsByTagName('tbody')[0] || elem
        }
        return elem
      }
      // Replace/restore the type attribute of script elements for safe DOM manipulation
      function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem
      }
      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
          elem.type = match[1]
        } else {
          elem.removeAttribute('type')
        }
        return elem
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return
        }
        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.access(src);
          pdataCur = dataPriv.set(dest, pdataOld);
          events = pdataOld.events;
          if (events) {
            delete pdataCur.handle;
            pdataCur.events = {};
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i])
              }
            }
          }
        }
        // 2. Copy user data
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur)
        }
      }
      // Fix IE bugs, see support tests
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
          dest.checked = src.checked  // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === 'input' || nodeName === 'textarea') {
          dest.defaultValue = src.defaultValue
        }
      }
      function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
        // We can't cloneNode fragments that contain checked, in WebKit
        if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
          return collection.each(function (index) {
            var self = collection.eq(index);
            if (isFunction) {
              args[0] = value.call(this, index, self.html())
            }
            domManip(self, args, callback, ignored)
          })
        }
        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first
          }
          // Require either new content or an interest in ignored elements to invoke the callback
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
            hasScripts = scripts.length;
            // Use the original fragment for the last item
            // instead of the first because it can end up
            // being emptied incorrectly in certain situations (#8070).
            for (; i < l; i++) {
              node = fragment;
              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true);
                // Keep references to cloned scripts for later restoration
                if (hasScripts) {
                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(scripts, getAll(node, 'script'))
                }
              }
              callback.call(collection[i], node, i)
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              // Reenable scripts
              jQuery.map(scripts, restoreScript);
              // Evaluate executable scripts on first document insertion
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                  if (node.src) {
                    // Optional AJAX dependency, but won't run scripts if not present
                    if (jQuery._evalUrl) {
                      jQuery._evalUrl(node.src)
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ''), doc)
                  }
                }
              }
            }
          }
        }
        return collection
      }
      function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node))
          }
          if (node.parentNode) {
            if (keepData && jQuery.contains(node.ownerDocument, node)) {
              setGlobalEval(getAll(node, 'script'))
            }
            node.parentNode.removeChild(node)
          }
        }
        return elem
      }
      jQuery.extend({
        htmlPrefilter: function (html) {
          return html.replace(rxhtmlTag, '<$1></$2>')
        },
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
          // Fix IE cloning issues
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i])
            }
          }
          // Copy the events from the original to the clone
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i])
              }
            } else {
              cloneCopyEvent(elem, clone)
            }
          }
          // Preserve script evaluation history
          destElements = getAll(clone, 'script');
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, 'script'))
          }
          // Return the cloned set
          return clone
        },
        cleanData: function (elems) {
          var data, elem, type, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== undefined; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type)  // This is a shortcut to avoid jQuery.event.remove's overhead
                    } else {
                      jQuery.removeEvent(elem, type, data.handle)
                    }
                  }
                }
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataPriv.expando] = undefined
              }
              if (elem[dataUser.expando]) {
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function (selector) {
          return remove(this, selector, true)
        },
        remove: function (selector) {
          return remove(this, selector)
        },
        text: function (value) {
          return access(this, function (value) {
            return value === undefined ? jQuery.text(this) : this.empty().each(function () {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value
              }
            })
          }, null, value, arguments.length)
        },
        append: function () {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem)
            }
          })
        },
        prepend: function () {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild)
            }
          })
        },
        before: function () {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this)
            }
          })
        },
        after: function () {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling)
            }
          })
        },
        empty: function () {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              // Prevent memory leaks
              jQuery.cleanData(getAll(elem, false));
              // Remove any remaining nodes
              elem.textContent = ''
            }
          }
          return this
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function () {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
          })
        },
        html: function (value) {
          return access(this, function (value) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML
            }
            // See if we can take a shortcut and just use innerHTML
            if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                '',
                ''
              ])[1].toLowerCase()]) {
              value = jQuery.htmlPrefilter(value);
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  // Remove element nodes and prevent memory leaks
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value
                  }
                }
                elem = 0  // If using innerHTML throws an exception, use the fallback method
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value)
            }
          }, null, value, arguments.length)
        },
        replaceWith: function () {
          var ignored = [];
          // Make the changes, replacing each non-ignored context element with the new content
          return domManip(this, arguments, function (elem) {
            var parent = this.parentNode;
            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this)
              }
            }  // Force callback invocation
          }, ignored)
        }
      });
      jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
      }, function (name, original) {
        jQuery.fn[name] = function (selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            // Support: Android <=4.0 only, PhantomJS 1 only
            // .get() because push.apply(_, arraylike) throws on ancient WebKit
            push.apply(ret, elems.get())
          }
          return this.pushStack(ret)
        }
      });
      var rmargin = /^margin/;
      var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
      var getStyles = function (elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window
        }
        return view.getComputedStyle(elem)
      };
      (function () {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
          // This is a singleton, we need to execute it only once
          if (!div) {
            return
          }
          div.style.cssText = 'box-sizing:border-box;' + 'position:relative;display:block;' + 'margin:auto;border:1px;padding:1px;' + 'top:1%;width:50%';
          div.innerHTML = '';
          documentElement.appendChild(container);
          var divStyle = window.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== '1%';
          // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
          reliableMarginLeftVal = divStyle.marginLeft === '2px';
          boxSizingReliableVal = divStyle.width === '4px';
          // Support: Android 4.0 - 4.3 only
          // Some styles come back with percentage values, even though they shouldn't
          div.style.marginRight = '50%';
          pixelMarginRightVal = divStyle.marginRight === '4px';
          documentElement.removeChild(container);
          // Nullify the div so it wouldn't be stored in the memory and
          // it will also be a sign that checks already performed
          div = null
        }
        var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
        // Finish early in limited (non-browser) environments
        if (!div.style) {
          return
        }
        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        container.style.cssText = 'border:0;width:8px;height:0;top:0;left:-9999px;' + 'padding:0;margin-top:1px;position:absolute';
        container.appendChild(div);
        jQuery.extend(support, {
          pixelPosition: function () {
            computeStyleTests();
            return pixelPositionVal
          },
          boxSizingReliable: function () {
            computeStyleTests();
            return boxSizingReliableVal
          },
          pixelMarginRight: function () {
            computeStyleTests();
            return pixelMarginRightVal
          },
          reliableMarginLeft: function () {
            computeStyleTests();
            return reliableMarginLeftVal
          }
        })
      }());
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        // Support: IE <=9 only
        // getPropertyValue is only needed for .css('filter') (#12537)
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
          if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name)
          }
          // A tribute to the "awesome hack by Dean Edwards"
          // Android Browser returns percentage for some values,
          // but width seems to be reliably pixels.
          // This is against the CSSOM draft spec:
          // https://drafts.csswg.org/cssom/#resolved-values
          if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
            // Remember the original values
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            // Put in the new values to get a computed value out
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            // Revert the changed values
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth
          }
        }
        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + '' : ret
      }
      function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
          get: function () {
            if (conditionFn()) {
              // Hook not needed (or it's not possible to use it due
              // to missing dependency), remove it.
              delete this.get;
              return
            }
            // Hook needed; redefine it so that the support test is not executed again.
            return (this.get = hookFn).apply(this, arguments)
          }
        }
      }
      var
        // Swappable if display is none or starts with table
        // except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        }, cssNormalTransform = {
          letterSpacing: '0',
          fontWeight: '400'
        }, cssPrefixes = [
          'Webkit',
          'Moz',
          'ms'
        ], emptyStyle = document.createElement('div').style;
      // Return a css property mapped to a potentially vendor prefixed property
      function vendorPropName(name) {
        // Shortcut for names that are not vendor prefixed
        if (name in emptyStyle) {
          return name
        }
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name
          }
        }
      }
      function setPositiveNumber(elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value
      }
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i, val = 0;
        // If we already have the right measurement, avoid augmentation
        if (extra === (isBorderBox ? 'border' : 'content')) {
          i = 4  // Otherwise initialize for horizontal or vertical properties
        } else {
          i = name === 'width' ? 1 : 0
        }
        for (; i < 4; i += 2) {
          // Both box models exclude margin, so add it if we want it
          if (extra === 'margin') {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles)
          }
          if (isBorderBox) {
            // border-box includes padding, so remove it if we want content
            if (extra === 'content') {
              val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles)
            }
            // At this point, extra isn't border nor margin, so remove border
            if (extra !== 'margin') {
              val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
            }
          } else {
            // At this point, extra isn't content, so add padding
            val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
            // At this point, extra isn't content nor padding, so add border
            if (extra !== 'padding') {
              val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
            }
          }
        }
        return val
      }
      function getWidthOrHeight(elem, name, extra) {
        // Start with offset property, which is equivalent to the border-box value
        var val, valueIsBorderBox = true, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        // Support: IE <=11 only
        // Running getBoundingClientRect on a disconnected node
        // in IE throws an error.
        if (elem.getClientRects().length) {
          val = elem.getBoundingClientRect()[name]
        }
        // Some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
          // Fall back to computed then uncomputed css if necessary
          val = curCSS(elem, name, styles);
          if (val < 0 || val == null) {
            val = elem.style[name]
          }
          // Computed unit is not pixels. Stop here and return.
          if (rnumnonpx.test(val)) {
            return val
          }
          // Check for style in case a browser which returns unreliable values
          // for getComputedStyle silently falls back to the reliable elem.style
          valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
          // Normalize "", auto, and prepare for extra
          val = parseFloat(val) || 0
        }
        // Use the active box-sizing model to add/subtract irrelevant styles
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px'
      }
      jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
          opacity: {
            get: function (elem, computed) {
              if (computed) {
                // We should always get a number back from opacity
                var ret = curCSS(elem, 'opacity');
                return ret === '' ? '1' : ret
              }
            }
          }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
          'animationIterationCount': true,
          'columnCount': true,
          'fillOpacity': true,
          'flexGrow': true,
          'flexShrink': true,
          'fontWeight': true,
          'lineHeight': true,
          'opacity': true,
          'order': true,
          'orphans': true,
          'widows': true,
          'zIndex': true,
          'zoom': true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: { 'float': 'cssFloat' },
        // Get and set the style property on a DOM Node
        style: function (elem, name, value, extra) {
          // Don't set styles on text and comment nodes
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return
          }
          // Make sure that we're working with the right name
          var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
          // Gets hook for the prefixed version, then unprefixed version
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          // Check if we're setting a value
          if (value !== undefined) {
            type = typeof value;
            // Convert "+=" or "-=" to relative numbers (#7345)
            if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              // Fixes bug #9237
              type = 'number'
            }
            // Make sure that null and NaN values aren't set (#7116)
            if (value == null || value !== value) {
              return
            }
            // If a number was passed in, add the unit (except for certain CSS properties)
            if (type === 'number') {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px')
            }
            // background-* props affect original clone's values
            if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
              style[name] = 'inherit'
            }
            // If a hook was provided, use that value, otherwise just set the specified value
            if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              style[name] = value
            }
          } else {
            // If a hook was provided get the non-computed value from there
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret
            }
            // Otherwise just get the value from the style object
            return style[name]
          }
        },
        css: function (elem, name, extra, styles) {
          var val, num, hooks, origName = jQuery.camelCase(name);
          // Make sure that we're working with the right name
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
          // Try prefixed name followed by the unprefixed name
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          // If a hook was provided get the computed value from there
          if (hooks && 'get' in hooks) {
            val = hooks.get(elem, true, extra)
          }
          // Otherwise, if a way to get the computed value exists, use that
          if (val === undefined) {
            val = curCSS(elem, name, styles)
          }
          // Convert "normal" to computed value
          if (val === 'normal' && name in cssNormalTransform) {
            val = cssNormalTransform[name]
          }
          // Make numeric if forced or a qualifier was provided and val looks numeric
          if (extra === '' || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val
          }
          return val
        }
      });
      jQuery.each([
        'height',
        'width'
      ], function (i, name) {
        jQuery.cssHooks[name] = {
          get: function (elem, computed, extra) {
            if (computed) {
              // Certain elements can have dimension info if we invisibly show them
              // but it must have a current display style that would benefit
              return rdisplayswap.test(jQuery.css(elem, 'display')) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, name, extra)
              }) : getWidthOrHeight(elem, name, extra)
            }
          },
          set: function (elem, value, extra) {
            var matches, styles = extra && getStyles(elem), subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles);
            // Convert to pixels if value adjustment is needed
            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
              elem.style[name] = value;
              value = jQuery.css(elem, name)
            }
            return setPositiveNumber(elem, value, subtract)
          }
        }
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
            return elem.getBoundingClientRect().left
          })) + 'px'
        }
      });
      // These hooks are used by animate to expand properties
      jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
      }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function (value) {
            var i = 0, expanded = {},
              // Assumes a single number if not a string
              parts = typeof value === 'string' ? value.split(' ') : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
            }
            return expanded
          }
        };
        if (!rmargin.test(prefix)) {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
        }
      });
      jQuery.fn.extend({
        css: function (name, value) {
          return access(this, function (elem, name, value) {
            var styles, len, map = {}, i = 0;
            if (jQuery.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;
              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles)
              }
              return map
            }
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
          }, name, value, arguments.length > 1)
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing)
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px')
        },
        cur: function () {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
        },
        run: function (percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
          } else {
            this.pos = eased = percent
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this)
          }
          if (hooks && hooks.set) {
            hooks.set(this)
          } else {
            Tween.propHooks._default.set(this)
          }
          return this
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function (tween) {
            var result;
            // Use a property on the element directly when it is not a DOM element,
            // or when there is no matching style property that exists.
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop]
            }
            // Passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails.
            // Simple values such as "10px" are parsed to Float;
            // complex values such as "rotate(1rad)" are returned as-is.
            result = jQuery.css(tween.elem, tween.prop, '');
            // Empty strings, null, undefined and "auto" are converted to 0.
            return !result || result === 'auto' ? 0 : result
          },
          set: function (tween) {
            // Use step hook for back compat.
            // Use cssHook if its there.
            // Use .style if available and use plain properties where available.
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween)
            } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
            } else {
              tween.elem[tween.prop] = tween.now
            }
          }
        }
      };
      // Support: IE <=9 only
      // Panic based approach to setting things on disconnected nodes
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now
          }
        }
      };
      jQuery.easing = {
        linear: function (p) {
          return p
        },
        swing: function (p) {
          return 0.5 - Math.cos(p * Math.PI) / 2
        },
        _default: 'swing'
      };
      jQuery.fx = Tween.prototype.init;
      // Back compat <1.8 extension point
      jQuery.fx.step = {};
      var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function raf() {
        if (timerId) {
          window.requestAnimationFrame(raf);
          jQuery.fx.tick()
        }
      }
      // Animations created synchronously will run synchronously
      function createFxNow() {
        window.setTimeout(function () {
          fxNow = undefined
        });
        return fxNow = jQuery.now()
      }
      // Generate parameters to create a standard animation
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs['margin' + which] = attrs['padding' + which] = type
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type
        }
        return attrs
      }
      function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            // We're done with this property
            return tween
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = 'width' in props || 'height' in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, 'fxshow');
        // Queue-skipping animations hijack the fx hooks
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, 'fx');
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function () {
              if (!hooks.unqueued) {
                oldfire()
              }
            }
          }
          hooks.unqueued++;
          anim.always(function () {
            // Ensure the complete handler is called before this completes
            anim.always(function () {
              hooks.unqueued--;
              if (!jQuery.queue(elem, 'fx').length) {
                hooks.empty.fire()
              }
            })
          })
        }
        // Detect show/hide animations
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === 'toggle';
            if (value === (hidden ? 'hide' : 'show')) {
              // Pretend to be hidden if this is a "show" and
              // there is still data from a stopped show/hide
              if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                hidden = true  // Ignore all other no-op show/hide data
              } else {
                continue
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
          }
        }
        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
          return
        }
        // Restrict "overflow" and "display" styles during box animations
        if (isBox && elem.nodeType === 1) {
          // Support: IE <=9 - 11, Edge 12 - 13
          // Record all 3 overflow attributes because IE does not infer the shorthand
          // from identically-valued overflowX and overflowY
          opts.overflow = [
            style.overflow,
            style.overflowX,
            style.overflowY
          ];
          // Identify a display type, preferring old show/hide data over the CSS cascade
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, 'display')
          }
          display = jQuery.css(elem, 'display');
          if (display === 'none') {
            if (restoreDisplay) {
              display = restoreDisplay
            } else {
              // Get nonempty value(s) by temporarily forcing visibility
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, 'display');
              showHide([elem])
            }
          }
          // Animate inline elements as inline-block
          if (display === 'inline' || display === 'inline-block' && restoreDisplay != null) {
            if (jQuery.css(elem, 'float') === 'none') {
              // Restore the original display value at the end of pure show/hide animations
              if (!propTween) {
                anim.done(function () {
                  style.display = restoreDisplay
                });
                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === 'none' ? '' : display
                }
              }
              style.display = 'inline-block'
            }
          }
        }
        if (opts.overflow) {
          style.overflow = 'hidden';
          anim.always(function () {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2]
          })
        }
        // Implement show/hide animations
        propTween = false;
        for (prop in orig) {
          // General show/hide setup for this element animation
          if (!propTween) {
            if (dataShow) {
              if ('hidden' in dataShow) {
                hidden = dataShow.hidden
              }
            } else {
              dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay })
            }
            // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
            if (toggle) {
              dataShow.hidden = !hidden
            }
            // Show elements before animating them
            if (hidden) {
              showHide([elem], true)
            }
            /* eslint-disable no-loop-func */
            anim.done(function () {
              /* eslint-enable no-loop-func */
              // The final step of a "hide" animation is actually hiding the element
              if (!hidden) {
                showHide([elem])
              }
              dataPriv.remove(elem, 'fxshow');
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop])
              }
            })
          }
          // Per-property setup
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
          name = jQuery.camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (jQuery.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0]
          }
          if (index !== name) {
            props[name] = value;
            delete props[index]
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && 'expand' in hooks) {
            value = hooks.expand(value);
            delete props[name];
            // Not quite $.extend, this won't overwrite existing keys.
            // Reusing 'index' because we have the correct "name"
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing
              }
            }
          } else {
            specialEasing[name] = easing
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
            // Don't match elem in the :animated selector
            delete tick.elem
          }), tick = function () {
            if (stopped) {
              return false
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
              // Support: Android 2.3 only
              // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
              temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (; index < length; index++) {
              animation.tweens[index].run(percent)
            }
            deferred.notifyWith(elem, [
              animation,
              percent,
              remaining
            ]);
            if (percent < 1 && length) {
              return remaining
            } else {
              deferred.resolveWith(elem, [animation]);
              return false
            }
          }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
              specialEasing: {},
              easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function (prop, end) {
              var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween
            },
            stop: function (gotoEnd) {
              var index = 0,
                // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this
              }
              stopped = true;
              for (; index < length; index++) {
                animation.tweens[index].run(1)
              }
              // Resolve when we played the last frame; otherwise, reject
              if (gotoEnd) {
                deferred.notifyWith(elem, [
                  animation,
                  1,
                  0
                ]);
                deferred.resolveWith(elem, [
                  animation,
                  gotoEnd
                ])
              } else {
                deferred.rejectWith(elem, [
                  animation,
                  gotoEnd
                ])
              }
              return this
            }
          }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (jQuery.isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result)
            }
            return result
          }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation)
        }
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        // attach callbacks from options
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          '*': [function (prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween
            }]
        },
        tweener: function (props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props;
            props = ['*']
          } else {
            props = props.match(rnothtmlwhite)
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback)
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function (callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback)
          } else {
            Animation.prefilters.push(callback)
          }
        }
      });
      jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        // Go to the end state if fx are off or if document is hidden
        if (jQuery.fx.off || document.hidden) {
          opt.duration = 0
        } else {
          if (typeof opt.duration !== 'number') {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration]
            } else {
              opt.duration = jQuery.fx.speeds._default
            }
          }
        }
        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
          opt.queue = 'fx'
        }
        // Queueing
        opt.old = opt.complete;
        opt.complete = function () {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this)
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue)
          }
        };
        return opt
      };
      jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
          // Show any hidden elements after setting opacity to 0
          return this.filter(isHiddenWithinTree).css('opacity', 0).show()  // Animate to the value specified
.end().animate({ opacity: to }, speed, easing, callback)
        },
        animate: function (prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
              // Operate on a copy of prop so per-property easing won't be lost
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              // Empty animations, or finishing resolves immediately
              if (empty || dataPriv.get(this, 'finish')) {
                anim.stop(true)
              }
            };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
        },
        stop: function (type, clearQueue, gotoEnd) {
          var stopQueue = function (hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd)
          };
          if (typeof type !== 'string') {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined
          }
          if (clearQueue && type !== false) {
            this.queue(type || 'fx', [])
          }
          return this.each(function () {
            var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index])
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index])
                }
              }
            }
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1)
              }
            }
            // Start the next in the queue if the last step wasn't forced.
            // Timers currently will call their complete callbacks, which
            // will dequeue but only if they were gotoEnd.
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type)
            }
          })
        },
        finish: function (type) {
          if (type !== false) {
            type = type || 'fx'
          }
          return this.each(function () {
            var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
            // Enable finishing flag on private data
            data.finish = true;
            // Empty the queue first
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true)
            }
            // Look for any active animations, and finish them
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1)
              }
            }
            // Look for any animations in the old queue and finish them
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this)
              }
            }
            // Turn off finishing flag
            delete data.finish
          })
        }
      });
      jQuery.each([
        'toggle',
        'show',
        'hide'
      ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
          return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
        }
      });
      // Generate shortcuts for custom animations
      jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
      }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
          return this.animate(props, speed, easing, callback)
        }
      });
      jQuery.timers = [];
      jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          // Checks the timer has not already been removed
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1)
          }
        }
        if (!timers.length) {
          jQuery.fx.stop()
        }
        fxNow = undefined
      };
      jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        if (timer()) {
          jQuery.fx.start()
        } else {
          jQuery.timers.pop()
        }
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function () {
        if (!timerId) {
          timerId = window.requestAnimationFrame ? window.requestAnimationFrame(raf) : window.setInterval(jQuery.fx.tick, jQuery.fx.interval)
        }
      };
      jQuery.fx.stop = function () {
        if (window.cancelAnimationFrame) {
          window.cancelAnimationFrame(timerId)
        } else {
          window.clearInterval(timerId)
        }
        timerId = null
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
      };
      // Based off of the plugin by Clint Helfers, with permission.
      // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
      jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
          var timeout = window.setTimeout(next, time);
          hooks.stop = function () {
            window.clearTimeout(timeout)
          }
        })
      };
      (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== '';
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't'
      }());
      var boolHook, attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function (name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1)
        },
        removeAttr: function (name) {
          return this.each(function () {
            jQuery.removeAttr(this, name)
          })
        }
      });
      jQuery.extend({
        attr: function (elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          // Don't get/set attributes on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          // Fallback to prop when attributes are not supported
          if (typeof elem.getAttribute === 'undefined') {
            return jQuery.prop(elem, name, value)
          }
          // Attribute hooks are determined by the lowercase version
          // Grab necessary hook if one is defined
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined)
          }
          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return
            }
            if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret
            }
            elem.setAttribute(name, value + '');
            return value
          }
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret
          }
          ret = jQuery.find.attr(elem, name);
          // Non-existent attributes return null, we normalize to undefined
          return ret == null ? undefined : ret
        },
        attrHooks: {
          type: {
            set: function (elem, value) {
              if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                var val = elem.value;
                elem.setAttribute('type', value);
                if (val) {
                  elem.value = val
                }
                return value
              }
            }
          }
        },
        removeAttr: function (elem, value) {
          var name, i = 0,
            // Attribute names can contain non-HTML whitespace characters
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
            attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name)
            }
          }
        }
      });
      // Hooks for boolean attributes
      boolHook = {
        set: function (elem, value, name) {
          if (value === false) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name)
          } else {
            elem.setAttribute(name, name)
          }
          return name
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
          var ret, handle, lowercaseName = name.toLowerCase();
          if (!isXML) {
            // Avoid an infinite loop by temporarily removing this function from the getter
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle
          }
          return ret
        }
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function (name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1)
        },
        removeProp: function (name) {
          return this.each(function () {
            delete this[jQuery.propFix[name] || name]
          })
        }
      });
      jQuery.extend({
        prop: function (elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          // Don't get/set properties on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            // Fix name and attach hooks
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name]
          }
          if (value !== undefined) {
            if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret
            }
            return elem[name] = value
          }
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret
          }
          return elem[name]
        },
        propHooks: {
          tabIndex: {
            get: function (elem) {
              // Support: IE <=9 - 11 only
              // elem.tabIndex doesn't always return the
              // correct value when it hasn't been explicitly set
              // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
              // Use proper attribute retrieval(#12072)
              var tabindex = jQuery.find.attr(elem, 'tabindex');
              if (tabindex) {
                return parseInt(tabindex, 10)
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0
              }
              return -1
            }
          }
        },
        propFix: {
          'for': 'htmlFor',
          'class': 'className'
        }
      });
      // Support: IE <=11 only
      // Accessing the selectedIndex property
      // forces the browser to respect setting selected
      // on the option
      // The getter ensures a default option is selected
      // when in an optgroup
      // eslint rule "no-unused-expressions" is disabled for this code
      // since it considers such accessions noop
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function (elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex
            }
            return null
          },
          set: function (elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex
              }
            }
          }
        }
      }
      jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
      ], function () {
        jQuery.propFix[this.toLowerCase()] = this
      });
      // Strip and collapse whitespace according to HTML spec
      // https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(' ')
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute('class') || ''
      }
      jQuery.fn.extend({
        addClass: function (value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)))
            })
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || [];
            while (elem = this[i++]) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  if (cur.indexOf(' ' + clazz + ' ') < 0) {
                    cur += clazz + ' '
                  }
                }
                // Only assign if different to avoid unneeded rendering.
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        removeClass: function (value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)))
            })
          }
          if (!arguments.length) {
            return this.attr('class', '')
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || [];
            while (elem = this[i++]) {
              curValue = getClass(elem);
              // This expression is here for better compressibility (see addClass)
              cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  // Remove *all* instances
                  while (cur.indexOf(' ' + clazz + ' ') > -1) {
                    cur = cur.replace(' ' + clazz + ' ', ' ')
                  }
                }
                // Only assign if different to avoid unneeded rendering.
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        toggleClass: function (value, stateVal) {
          var type = typeof value;
          if (typeof stateVal === 'boolean' && type === 'string') {
            return stateVal ? this.addClass(value) : this.removeClass(value)
          }
          if (jQuery.isFunction(value)) {
            return this.each(function (i) {
              jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal)
            })
          }
          return this.each(function () {
            var className, i, self, classNames;
            if (type === 'string') {
              // Toggle individual class names
              i = 0;
              self = jQuery(this);
              classNames = value.match(rnothtmlwhite) || [];
              while (className = classNames[i++]) {
                // Check each className given, space separated list
                if (self.hasClass(className)) {
                  self.removeClass(className)
                } else {
                  self.addClass(className)
                }
              }  // Toggle whole class name
            } else if (value === undefined || type === 'boolean') {
              className = getClass(this);
              if (className) {
                // Store className if set
                dataPriv.set(this, '__className__', className)
              }
              // If the element has a class name or if we're passed `false`,
              // then remove the whole classname (if there was one, the above saved it).
              // Otherwise bring back whatever was previously saved (if anything),
              // falling back to the empty string if nothing was stored.
              if (this.setAttribute) {
                this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '')
              }
            }
          })
        },
        hasClass: function (selector) {
          var className, elem, i = 0;
          className = ' ' + selector + ' ';
          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1) {
              return true
            }
          }
          return false
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function (value) {
          var hooks, ret, isFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                return ret
              }
              ret = elem.value;
              // Handle most common string cases
              if (typeof ret === 'string') {
                return ret.replace(rreturn, '')
              }
              // Handle cases where value is null/undef or number
              return ret == null ? '' : ret
            }
            return
          }
          isFunction = jQuery.isFunction(value);
          return this.each(function (i) {
            var val;
            if (this.nodeType !== 1) {
              return
            }
            if (isFunction) {
              val = value.call(this, i, jQuery(this).val())
            } else {
              val = value
            }
            // Treat null/undefined as ""; convert numbers to string
            if (val == null) {
              val = ''
            } else if (typeof val === 'number') {
              val += ''
            } else if (jQuery.isArray(val)) {
              val = jQuery.map(val, function (value) {
                return value == null ? '' : value + ''
              })
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            // If set returns undefined, fall back to normal setting
            if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
              this.value = val
            }
          })
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function (elem) {
              var val = jQuery.find.attr(elem, 'value');
              return val != null ? val : // Support: IE <=10 - 11 only
              // option.text throws exceptions (#14686, #14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem))
            }
          },
          select: {
            get: function (elem) {
              var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one', values = one ? null : [], max = one ? index + 1 : options.length;
              if (index < 0) {
                i = max
              } else {
                i = one ? index : 0
              }
              // Loop through all the selected options
              for (; i < max; i++) {
                option = options[i];
                // Support: IE <=9 only
                // IE8-9 doesn't update selected after form reset (#2551)
                if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                  // Get the specific value for the option
                  value = jQuery(option).val();
                  // We don't need an array for one selects
                  if (one) {
                    return value
                  }
                  // Multi-Selects return an array
                  values.push(value)
                }
              }
              return values
            },
            set: function (elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                /* eslint-disable no-cond-assign */
                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true
                }  /* eslint-enable no-cond-assign */
              }
              // Force browsers to behave consistently when non-matching value is set
              if (!optionSet) {
                elem.selectedIndex = -1
              }
              return values
            }
          }
        }
      });
      // Radios and checkboxes getter/setter
      jQuery.each([
        'radio',
        'checkbox'
      ], function () {
        jQuery.valHooks[this] = {
          set: function (elem, value) {
            if (jQuery.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute('value') === null ? 'on' : elem.value
          }
        }
      });
      // Return jQuery for attributes-only inclusion
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
      jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
          cur = tmp = elem = elem || document;
          // Don't do events on text and comment nodes
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return
          }
          // focus/blur morphs to focusin/out; ensure we're not firing them right now
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return
          }
          if (type.indexOf('.') > -1) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split('.');
            type = namespaces.shift();
            namespaces.sort()
          }
          ontype = type.indexOf(':') < 0 && 'on' + type;
          // Caller can pass in a jQuery.Event object, Object, or just an event type string
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
          // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join('.');
          event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
          // Clean up the event in case it is being reused
          event.result = undefined;
          if (!event.target) {
            event.target = elem
          }
          // Clone any incoming data and prepend the event, creating the handler arg list
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          // Allow special events to draw outside the lines
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return
          }
          // Determine event propagation path in advance, per W3C events spec (#9951)
          // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur
            }
            // Only add window if we got to document (e.g., not plain obj or detached DOM)
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window)
            }
          }
          // Fire handlers on the event path
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            event.type = i > 1 ? bubbleType : special.bindType || type;
            // jQuery handler
            handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
            if (handle) {
              handle.apply(cur, data)
            }
            // Native handler
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault()
              }
            }
          }
          event.type = type;
          // If nobody prevented the default action, do it now
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              // Call a native DOM method on the target with the same name as the event.
              // Don't do default actions on window, that's where global variables be (#6170)
              if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                // Don't re-trigger an onFOO event when we call its FOO() method
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null
                }
                // Prevent re-triggering of the same event, since we already bubbled it above
                jQuery.event.triggered = type;
                elem[type]();
                jQuery.event.triggered = undefined;
                if (tmp) {
                  elem[ontype] = tmp
                }
              }
            }
          }
          return event.result
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function (type, elem, event) {
          var e = jQuery.extend(new jQuery.Event, event, {
            type: type,
            isSimulated: true
          });
          jQuery.event.trigger(e, null, elem)
        }
      });
      jQuery.fn.extend({
        trigger: function (type, data) {
          return this.each(function () {
            jQuery.event.trigger(type, data, this)
          })
        },
        triggerHandler: function (type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true)
          }
        }
      });
      jQuery.each(('blur focus focusin focusout resize scroll click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup contextmenu').split(' '), function (i, name) {
        // Handle event binding
        jQuery.fn[name] = function (data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
        }
      });
      jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        }
      });
      support.focusin = 'onfocusin' in window;
      // Support: Firefox <=44
      // Firefox doesn't have focus(in | out) events
      // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
      //
      // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
      // focus(in | out) events fire after focus & blur events,
      // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
      // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
      if (!support.focusin) {
        jQuery.each({
          focus: 'focusin',
          blur: 'focusout'
        }, function (orig, fix) {
          // Attach a single capturing handler on the document while someone wants focusin/focusout
          var handler = function (event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event))
          };
          jQuery.event.special[fix] = {
            setup: function () {
              var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true)
              }
              dataPriv.access(doc, fix, (attaches || 0) + 1)
            },
            teardown: function () {
              var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix)
              } else {
                dataPriv.access(doc, fix, attaches)
              }
            }
          }
        })
      }
      var location = window.location;
      var nonce = jQuery.now();
      var rquery = /\?/;
      // Cross-browser xml parsing
      jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== 'string') {
          return null
        }
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
          xml = new window.DOMParser().parseFromString(data, 'text/xml')
        } catch (e) {
          xml = undefined
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
          jQuery.error('Invalid XML: ' + data)
        }
        return xml
      };
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
          // Serialize array item.
          jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) {
              // Treat each array item as a scalar.
              add(prefix, v)
            } else {
              // Item is non-scalar (array or object), encode its numeric index.
              buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add)
            }
          })
        } else if (!traditional && jQuery.type(obj) === 'object') {
          // Serialize object item.
          for (name in obj) {
            buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
          }
        } else {
          // Serialize scalar item.
          add(prefix, obj)
        }
      }
      // Serialize an array of form elements or a set of
      // key/values into a query string
      jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, valueOrFunction) {
            // If value is a function, invoke it and use its return value
            var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value == null ? '' : value)
          };
        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          // Serialize the form elements
          jQuery.each(a, function () {
            add(this.name, this.value)
          })
        } else {
          // If traditional, encode the "old" way (the way 1.3.2 or older
          // did it), otherwise encode params recursively.
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add)
          }
        }
        // Return the resulting serialization
        return s.join('&')
      };
      jQuery.fn.extend({
        serialize: function () {
          return jQuery.param(this.serializeArray())
        },
        serializeArray: function () {
          return this.map(function () {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop(this, 'elements');
            return elements ? jQuery.makeArray(elements) : this
          }).filter(function () {
            var type = this.type;
            // Use .is( ":disabled" ) so that fieldset[disabled] works
            return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type))
          }).map(function (i, elem) {
            var val = jQuery(this).val();
            if (val == null) {
              return null
            }
            if (jQuery.isArray(val)) {
              return jQuery.map(val, function (val) {
                return {
                  name: elem.name,
                  value: val.replace(rCRLF, '\r\n')
                }
              })
            }
            return {
              name: elem.name,
              value: val.replace(rCRLF, '\r\n')
            }
          }).get()
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//,
        /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
        prefilters = {},
        /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
        transports = {},
        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = '*/'.concat('*'),
        // Anchor tag for parsing the document origin
        originAnchor = document.createElement('a');
      originAnchor.href = location.href;
      // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
      function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {
          if (typeof dataTypeExpression !== 'string') {
            func = dataTypeExpression;
            dataTypeExpression = '*'
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (jQuery.isFunction(func)) {
            // For each dataType in the dataTypeExpression
            while (dataType = dataTypes[i++]) {
              // Prepend if requested
              if (dataType[0] === '+') {
                dataType = dataType.slice(1) || '*';
                (structure[dataType] = structure[dataType] || []).unshift(func)  // Otherwise append
              } else {
                (structure[dataType] = structure[dataType] || []).push(func)
              }
            }
          }
        }
      }
      // Base inspection function for prefilters and transports
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport)
            }
          });
          return selected
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*')
      }
      // A special extend for ajax options
      // that takes "flat" options (not to be deep extended)
      // Fixes #9887
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep)
        }
        return target
      }
      /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === '*') {
          dataTypes.shift();
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader('Content-Type')
          }
        }
        // Check if we're dealing with a known content-type
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break
            }
          }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0]
        } else {
          // Try convertible dataTypes
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
              finalDataType = type;
              break
            }
            if (!firstDataType) {
              firstDataType = type
            }
          }
          // Or just use first one
          finalDataType = finalDataType || firstDataType
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType)
          }
          return responses[finalDataType]
        }
      }
      /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {},
          // Work with a copy of dataTypes in case we need to modify it for conversion
          dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv]
          }
        }
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response
          }
          // Apply the dataFilter if provided
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType)
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            // There's only work to do if current dataType is non-auto
            if (current === '*') {
              current = prev  // Convert response if prev dataType is non-auto and differs from current
            } else if (prev !== '*' && prev !== current) {
              // Seek a direct converter
              conv = converters[prev + ' ' + current] || converters['* ' + current];
              // If none found, seek a pair
              if (!conv) {
                for (conv2 in converters) {
                  // If conv2 outputs current
                  tmp = conv2.split(' ');
                  if (tmp[1] === current) {
                    // If prev can be converted to accepted input
                    conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                    if (conv) {
                      // Condense equivalence converters
                      if (conv === true) {
                        conv = converters[conv2]  // Otherwise, insert the intermediate dataType
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1])
                      }
                      break
                    }
                  }
                }
              }
              // Apply converter (if not an equivalence)
              if (conv !== true) {
                // Unless errors are allowed to bubble, catch and return them
                if (conv && s.throws) {
                  response = conv(response)
                } else {
                  try {
                    response = conv(response)
                  } catch (e) {
                    return {
                      state: 'parsererror',
                      error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                    }
                  }
                }
              }
            }
          }
        }
        return {
          state: 'success',
          data: response
        }
      }
      jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: 'GET',
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/
          accepts: {
            '*': allTypes,
            text: 'text/plain',
            html: 'text/html',
            xml: 'application/xml, text/xml',
            json: 'application/json, text/javascript'
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: 'responseXML',
            text: 'responseText',
            json: 'responseJSON'
          },
          // Data converters
          // Keys separate source (or catchall "*") and destination types with a single space
          converters: {
            // Convert anything to text
            '* text': String,
            // Text to html (true = no transformation)
            'text html': true,
            // Evaluate text as a json expression
            'text json': JSON.parse,
            // Parse text as xml
            'text xml': jQuery.parseXML
          },
          // For options that shouldn't be deep extended:
          // you can add your own custom options here if
          // and when you create one that shouldn't be
          // deep extended (see ajaxExtend)
          flatOptions: {
            url: true,
            context: true
          }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function (target, settings) {
          return settings ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target)
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function (url, options) {
          // If url is an object, simulate pre-1.5 signature
          if (typeof url === 'object') {
            options = url;
            url = undefined
          }
          // Force options to be an object
          options = options || {};
          var transport,
            // URL without anti-cache param
            cacheURL,
            // Response headers
            responseHeadersString, responseHeaders,
            // timeout handle
            timeoutTimer,
            // Url cleanup var
            urlAnchor,
            // Request state (becomes false upon send and true upon completion)
            completed,
            // To know if global events are to be dispatched
            fireGlobals,
            // Loop variable
            i,
            // uncached part of the url
            uncached,
            // Create the final options object
            s = jQuery.ajaxSetup({}, options),
            // Callbacks context
            callbackContext = s.context || s,
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
            // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
            // Status-dependent callbacks
            statusCode = s.statusCode || {},
            // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {},
            // Default abort message
            strAbort = 'canceled',
            // Fake xhr
            jqXHR = {
              readyState: 0,
              // Builds headers hashtable if needed
              getResponseHeader: function (key) {
                var match;
                if (completed) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase()] = match[2]
                    }
                  }
                  match = responseHeaders[key.toLowerCase()]
                }
                return match == null ? null : match
              },
              // Raw string
              getAllResponseHeaders: function () {
                return completed ? responseHeadersString : null
              },
              // Caches the header
              setRequestHeader: function (name, value) {
                if (completed == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value
                }
                return this
              },
              // Overrides response content-type header
              overrideMimeType: function (type) {
                if (completed == null) {
                  s.mimeType = type
                }
                return this
              },
              // Status-dependent callbacks
              statusCode: function (map) {
                var code;
                if (map) {
                  if (completed) {
                    // Execute the appropriate callbacks
                    jqXHR.always(map[jqXHR.status])
                  } else {
                    // Lazy-add the new callbacks in a way that preserves old ones
                    for (code in map) {
                      statusCode[code] = [
                        statusCode[code],
                        map[code]
                      ]
                    }
                  }
                }
                return this
              },
              // Cancel the request
              abort: function (statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText)
                }
                done(0, finalText);
                return this
              }
            };
          // Attach deferreds
          deferred.promise(jqXHR);
          // Add protocol if not provided (prefilters might expect it)
          // Handle falsy url in the settings object (#10093: consistency with old signature)
          // We also use the url parameter if available
          s.url = ((url || s.url || location.href) + '').replace(rprotocol, location.protocol + '//');
          // Alias method option to type as per ticket #12004
          s.type = options.method || options.type || s.method || s.type;
          // Extract dataTypes list
          s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [''];
          // A cross-domain request is in order when the origin doesn't match the current origin.
          if (s.crossDomain == null) {
            urlAnchor = document.createElement('a');
            // Support: IE <=8 - 11, Edge 12 - 13
            // IE throws exception on accessing the href property if url is malformed,
            // e.g. http://example.com:80x/
            try {
              urlAnchor.href = s.url;
              // Support: IE <=8 - 11 only
              // Anchor's host property isn't correctly set when s.url is relative
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host
            } catch (e) {
              // If there is an error parsing the URL, assume it is crossDomain,
              // it can be rejected by the transport if it is invalid
              s.crossDomain = true
            }
          }
          // Convert data if not already a string
          if (s.data && s.processData && typeof s.data !== 'string') {
            s.data = jQuery.param(s.data, s.traditional)
          }
          // Apply prefilters
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          // If request was aborted inside a prefilter, stop there
          if (completed) {
            return jqXHR
          }
          // We can fire global events as of now if asked to
          // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
          fireGlobals = jQuery.event && s.global;
          // Watch for a new set of requests
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger('ajaxStart')
          }
          // Uppercase the type
          s.type = s.type.toUpperCase();
          // Determine if request has content
          s.hasContent = !rnoContent.test(s.type);
          // Save the URL in case we're toying with the If-Modified-Since
          // and/or If-None-Match header later on
          // Remove hash to simplify url manipulation
          cacheURL = s.url.replace(rhash, '');
          // More options handling for requests with no content
          if (!s.hasContent) {
            // Remember the hash so we can put it back
            uncached = s.url.slice(cacheURL.length);
            // If data is available, append data to url
            if (s.data) {
              cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;
              // #9682: remove data so that it's not used in an eventual retry
              delete s.data
            }
            // Add or update anti-cache param if needed
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, '$1');
              uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++ + uncached
            }
            // Put hash and anti-cache on the URL that will be requested (gh-1732)
            s.url = cacheURL + uncached  // Change '%20' to '+' if this is encoded form body content (gh-2658)
          } else if (s.data && s.processData && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0) {
            s.data = s.data.replace(r20, '+')
          }
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL])
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL])
            }
          }
          // Set the correct header, if data is being sent
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader('Content-Type', s.contentType)
          }
          // Set the Accepts header for the server, depending on the dataType
          jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
          // Check for headers option
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i])
          }
          // Allow custom headers/mimetypes and early abort
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
            // Abort if not done already and return
            return jqXHR.abort()
          }
          // Aborting is no longer a cancellation
          strAbort = 'abort';
          // Install callbacks on deferreds
          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error);
          // Get transport
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          // If no transport, we auto-abort
          if (!transport) {
            done(-1, 'No Transport')
          } else {
            jqXHR.readyState = 1;
            // Send global event
            if (fireGlobals) {
              globalEventContext.trigger('ajaxSend', [
                jqXHR,
                s
              ])
            }
            // If request was aborted inside ajaxSend, stop there
            if (completed) {
              return jqXHR
            }
            // Timeout
            if (s.async && s.timeout > 0) {
              timeoutTimer = window.setTimeout(function () {
                jqXHR.abort('timeout')
              }, s.timeout)
            }
            try {
              completed = false;
              transport.send(requestHeaders, done)
            } catch (e) {
              // Rethrow post-completion exceptions
              if (completed) {
                throw e
              }
              // Propagate others as results
              done(-1, e)
            }
          }
          // Callback for when everything is done
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            // Ignore repeat invocations
            if (completed) {
              return
            }
            completed = true;
            // Clear timeout if it exists
            if (timeoutTimer) {
              window.clearTimeout(timeoutTimer)
            }
            // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)
            transport = undefined;
            // Cache response headers
            responseHeadersString = headers || '';
            // Set readyState
            jqXHR.readyState = status > 0 ? 4 : 0;
            // Determine if successful
            isSuccess = status >= 200 && status < 300 || status === 304;
            // Get response data
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses)
            }
            // Convert no matter what (that way responseXXX fields are always set)
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            // If successful, handle type chaining
            if (isSuccess) {
              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader('Last-Modified');
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified
                }
                modified = jqXHR.getResponseHeader('etag');
                if (modified) {
                  jQuery.etag[cacheURL] = modified
                }
              }
              // if no content
              if (status === 204 || s.type === 'HEAD') {
                statusText = 'nocontent'  // if not modified
              } else if (status === 304) {
                statusText = 'notmodified'  // If we have data, let's convert it
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error
              }
            } else {
              // Extract error from statusText and normalize for non-aborts
              error = statusText;
              if (status || !statusText) {
                statusText = 'error';
                if (status < 0) {
                  status = 0
                }
              }
            }
            // Set data for the fake xhr object
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + '';
            // Success/Error
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [
                success,
                statusText,
                jqXHR
              ])
            } else {
              deferred.rejectWith(callbackContext, [
                jqXHR,
                statusText,
                error
              ])
            }
            // Status-dependent callbacks
            jqXHR.statusCode(statusCode);
            statusCode = undefined;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                jqXHR,
                s,
                isSuccess ? success : error
              ])
            }
            // Complete
            completeDeferred.fireWith(callbackContext, [
              jqXHR,
              statusText
            ]);
            if (fireGlobals) {
              globalEventContext.trigger('ajaxComplete', [
                jqXHR,
                s
              ]);
              // Handle the global AJAX counter
              if (!--jQuery.active) {
                jQuery.event.trigger('ajaxStop')
              }
            }
          }
          return jqXHR
        },
        getJSON: function (url, data, callback) {
          return jQuery.get(url, data, callback, 'json')
        },
        getScript: function (url, callback) {
          return jQuery.get(url, undefined, callback, 'script')
        }
      });
      jQuery.each([
        'get',
        'post'
      ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
          // Shift arguments if data argument was omitted
          if (jQuery.isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined
          }
          // The url can be an options object (which then must have .url)
          return jQuery.ajax(jQuery.extend({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          }, jQuery.isPlainObject(url) && url))
        }
      });
      jQuery._evalUrl = function (url) {
        return jQuery.ajax({
          url: url,
          // Make this explicit, since user can override this through ajaxSetup (#11264)
          type: 'GET',
          dataType: 'script',
          cache: true,
          async: false,
          global: false,
          'throws': true
        })
      };
      jQuery.fn.extend({
        wrapAll: function (html) {
          var wrap;
          if (this[0]) {
            if (jQuery.isFunction(html)) {
              html = html.call(this[0])
            }
            // The elements to wrap the target around
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0])
            }
            wrap.map(function () {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild
              }
              return elem
            }).append(this)
          }
          return this
        },
        wrapInner: function (html) {
          if (jQuery.isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapInner(html.call(this, i))
            })
          }
          return this.each(function () {
            var self = jQuery(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html)
            } else {
              self.append(html)
            }
          })
        },
        wrap: function (html) {
          var isFunction = jQuery.isFunction(html);
          return this.each(function (i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
          })
        },
        unwrap: function (selector) {
          this.parent(selector).not('body').each(function () {
            jQuery(this).replaceWith(this.childNodes)
          });
          return this
        }
      });
      jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem)
      };
      jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length)
      };
      jQuery.ajaxSettings.xhr = function () {
        try {
          return new window.XMLHttpRequest
        } catch (e) {
        }
      };
      var xhrSuccessStatus = {
          // File protocol always yields status code 0, assume 200
          0: 200,
          // Support: IE <=9 only
          // #1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;
        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function (headers, complete) {
              var i, xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              // Apply custom fields if provided
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i]
                }
              }
              // Override mime type if needed
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType)
              }
              // X-Requested-With header
              // For cross-domain requests, seeing as conditions for a preflight are
              // akin to a jigsaw puzzle, we simply never set it to be sure.
              // (it can always be set on a per-request basis or even using ajaxSetup)
              // For same-domain requests, won't change header if already provided.
              if (!options.crossDomain && !headers['X-Requested-With']) {
                headers['X-Requested-With'] = 'XMLHttpRequest'
              }
              // Set headers
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i])
              }
              // Callback
              callback = function (type) {
                return function () {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
                    if (type === 'abort') {
                      xhr.abort()
                    } else if (type === 'error') {
                      // Support: IE <=9 only
                      // On a manual native abort, IE9 throws
                      // errors on any property access that is not readyState
                      if (typeof xhr.status !== 'number') {
                        complete(0, 'error')
                      } else {
                        complete(// File: protocol always yields status 0; see #8605, #14207
                        xhr.status, xhr.statusText)
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                      // IE9 has no XHR2 but throws on binary (trac-11426)
                      // For XHR2 non-text, let the caller handle it (gh-2498)
                      (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders())
                    }
                  }
                }
              };
              // Listen to events
              xhr.onload = callback();
              errorCallback = xhr.onerror = callback('error');
              // Support: IE 9 only
              // Use onreadystatechange to replace onabort
              // to handle uncaught aborts
              if (xhr.onabort !== undefined) {
                xhr.onabort = errorCallback
              } else {
                xhr.onreadystatechange = function () {
                  // Check readyState before timeout as it changes
                  if (xhr.readyState === 4) {
                    // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window.setTimeout(function () {
                      if (callback) {
                        errorCallback()
                      }
                    })
                  }
                }
              }
              // Create the abort callback
              callback = callback('abort');
              try {
                // Do send the request (this may raise an exception)
                xhr.send(options.hasContent && options.data || null)
              } catch (e) {
                // #14683: Only rethrow if this hasn't been notified as an error yet
                if (callback) {
                  throw e
                }
              }
            },
            abort: function () {
              if (callback) {
                callback()
              }
            }
          }
        }
      });
      // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
      jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
          s.contents.script = false
        }
      });
      // Install script dataType
      jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
          'text script': function (text) {
            jQuery.globalEval(text);
            return text
          }
        }
      });
      // Handle cache's special case and crossDomain
      jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
          s.cache = false
        }
        if (s.crossDomain) {
          s.type = 'GET'
        }
      });
      // Bind script tag hack transport
      jQuery.ajaxTransport('script', function (s) {
        // This transport only deals with cross domain requests
        if (s.crossDomain) {
          var script, callback;
          return {
            send: function (_, complete) {
              script = jQuery('<script>').prop({
                charset: s.scriptCharset,
                src: s.url
              }).on('load error', callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === 'error' ? 404 : 200, evt.type)
                }
              });
              // Use native DOM manipulation to avoid our domManip AJAX trickery
              document.head.appendChild(script[0])
            },
            abort: function () {
              if (callback) {
                callback()
              }
            }
          }
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      // Default jsonp settings
      jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
          var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
          this[callback] = true;
          return callback
        }
      });
      // Detect, normalize options and install callbacks for jsonp requests
      jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
          // Get callback name, remembering preexisting value associated with it
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          // Insert callback into url or form data
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName)
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName
          }
          // Use data converter to retrieve json after script execution
          s.converters['script json'] = function () {
            if (!responseContainer) {
              jQuery.error(callbackName + ' was not called')
            }
            return responseContainer[0]
          };
          // Force json dataType
          s.dataTypes[0] = 'json';
          // Install callback
          overwritten = window[callbackName];
          window[callbackName] = function () {
            responseContainer = arguments
          };
          // Clean-up function (fires after converters)
          jqXHR.always(function () {
            // If previous value didn't exist - remove it
            if (overwritten === undefined) {
              jQuery(window).removeProp(callbackName)  // Otherwise restore preexisting value
            } else {
              window[callbackName] = overwritten
            }
            // Save back as free
            if (s[callbackName]) {
              // Make sure that re-using the options doesn't screw things around
              s.jsonpCallback = originalSettings.jsonpCallback;
              // Save the callback name for future use
              oldCallbacks.push(callbackName)
            }
            // Call if it was a function and we have a response
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0])
            }
            responseContainer = overwritten = undefined
          });
          // Delegate to script
          return 'script'
        }
      });
      // Support: Safari 8 only
      // In Safari 8 documents created via document.implementation.createHTMLDocument
      // collapse sibling forms: the second one becomes a child of the first one.
      // Because of that, this security measure has to be disabled in Safari 8.
      // https://bugs.webkit.org/show_bug.cgi?id=137337
      support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument('').body;
        body.innerHTML = '<form></form><form></form>';
        return body.childNodes.length === 2
      }();
      // Argument "data" should be string of html
      // context (optional): If specified, the fragment will be created in this context,
      // defaults to document
      // keepScripts (optional): If true, will include scripts passed in the html string
      jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== 'string') {
          return []
        }
        if (typeof context === 'boolean') {
          keepScripts = context;
          context = false
        }
        var base, parsed, scripts;
        if (!context) {
          // Stop scripts or inline event handlers from being executed immediately
          // by using document.implementation
          if (support.createHTMLDocument) {
            context = document.implementation.createHTMLDocument('');
            // Set the base href for the created document
            // so any parsed elements with URLs
            // are based on the document's URL (gh-2965)
            base = context.createElement('base');
            base.href = document.location.href;
            context.head.appendChild(base)
          } else {
            context = document
          }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        // Single tag
        if (parsed) {
          return [context.createElement(parsed[1])]
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove()
        }
        return jQuery.merge([], parsed.childNodes)
      };
      /**
 * Load a url into a page
 */
      jQuery.fn.load = function (url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off)
        }
        // If it's a function
        if (jQuery.isFunction(params)) {
          // We assume that it's the callback
          callback = params;
          params = undefined  // Otherwise, build a param string
        } else if (params && typeof params === 'object') {
          type = 'POST'
        }
        // If we have elements to modify, make the request
        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || 'GET',
            dataType: 'html',
            data: params
          }).done(function (responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText)  // If the request succeeds, this function gets "data", "status", "jqXHR"
                           // but they are ignored because response was set above.
                           // If it fails, this function gets "jqXHR", "status", "error"
          }).always(callback && function (jqXHR, status) {
            self.each(function () {
              callback.apply(this, response || [
                jqXHR.responseText,
                status,
                jqXHR
              ])
            })
          })
        }
        return this
      };
      // Attach a bunch of functions for handling common AJAX events
      jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
      ], function (i, type) {
        jQuery.fn[type] = function (fn) {
          return this.on(type, fn)
        }
      });
      jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
          return elem === fn.elem
        }).length
      };
      /**
 * Gets a window from an element
 */
      function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
      }
      jQuery.offset = {
        setOffset: function (elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
          // Set position first, in-case top/left are set even on static elem
          if (position === 'static') {
            elem.style.position = 'relative'
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, 'top');
          curCSSLeft = jQuery.css(elem, 'left');
          calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
          // Need to be able to calculate position if either
          // top or left is auto and position is either absolute or fixed
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0
          }
          if (jQuery.isFunction(options)) {
            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({}, curOffset))
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft
          }
          if ('using' in options) {
            options.using.call(elem, props)
          } else {
            curElem.css(props)
          }
        }
      };
      jQuery.fn.extend({
        offset: function (options) {
          // Preserve chaining for setter
          if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i)
            })
          }
          var docElem, win, rect, doc, elem = this[0];
          if (!elem) {
            return
          }
          // Support: IE <=11 only
          // Running getBoundingClientRect on a
          // disconnected node in IE throws an error
          if (!elem.getClientRects().length) {
            return {
              top: 0,
              left: 0
            }
          }
          rect = elem.getBoundingClientRect();
          // Make sure element is not hidden (display: none)
          if (rect.width || rect.height) {
            doc = elem.ownerDocument;
            win = getWindow(doc);
            docElem = doc.documentElement;
            return {
              top: rect.top + win.pageYOffset - docElem.clientTop,
              left: rect.left + win.pageXOffset - docElem.clientLeft
            }
          }
          // Return zeros for disconnected and hidden elements (gh-2310)
          return rect
        },
        position: function () {
          if (!this[0]) {
            return
          }
          var offsetParent, offset, elem = this[0], parentOffset = {
              top: 0,
              left: 0
            };
          // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
          // because it is its only offset parent
          if (jQuery.css(elem, 'position') === 'fixed') {
            // Assume getBoundingClientRect is there when computed position is fixed
            offset = elem.getBoundingClientRect()
          } else {
            // Get *real* offsetParent
            offsetParent = this.offsetParent();
            // Get correct offsets
            offset = this.offset();
            if (!jQuery.nodeName(offsetParent[0], 'html')) {
              parentOffset = offsetParent.offset()
            }
            // Add offsetParent borders
            parentOffset = {
              top: parentOffset.top + jQuery.css(offsetParent[0], 'borderTopWidth', true),
              left: parentOffset.left + jQuery.css(offsetParent[0], 'borderLeftWidth', true)
            }
          }
          // Subtract parent offsets and element margins
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
            left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
          }
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function () {
          return this.map(function () {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
              offsetParent = offsetParent.offsetParent
            }
            return offsetParent || documentElement
          })
        }
      });
      // Create scrollLeft and scrollTop methods
      jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
      }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
          return access(this, function (elem, method, val) {
            var win = getWindow(elem);
            if (val === undefined) {
              return win ? win[prop] : elem[method]
            }
            if (win) {
              win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset)
            } else {
              elem[method] = val
            }
          }, method, val, arguments.length)
        }
      });
      // Support: Safari <=7 - 9.1, Chrome <=37 - 49
      // Add the top/left cssHooks using jQuery.fn.position
      // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
      // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
      // getComputedStyle returns percent when specified for top/left/bottom/right;
      // rather than make the css module depend on the offset module, just check for it here
      jQuery.each([
        'top',
        'left'
      ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            // If curCSS returns percentage, fallback to offset
            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed
          }
        })
      });
      // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
      jQuery.each({
        Height: 'height',
        Width: 'width'
      }, function (name, type) {
        jQuery.each({
          padding: 'inner' + name,
          content: type,
          '': 'outer' + name
        }, function (defaultExtra, funcName) {
          // Margin is only for outerHeight, outerWidth
          jQuery.fn[funcName] = function (margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
            return access(this, function (elem, type, value) {
              var doc;
              if (jQuery.isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf('outer') === 0 ? elem['inner' + name] : elem.document.documentElement['client' + name]
              }
              // Get document width or height
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest
                return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name])
              }
              return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
              jQuery.css(elem, type, extra) : // Set width or height on the element
              jQuery.style(elem, type, value, extra)
            }, type, chainable ? margin : undefined, chainable)
          }
        })
      });
      jQuery.fn.extend({
        bind: function (types, data, fn) {
          return this.on(types, null, data, fn)
        },
        unbind: function (types, fn) {
          return this.off(types, null, fn)
        },
        delegate: function (selector, types, data, fn) {
          return this.on(types, selector, data, fn)
        },
        undelegate: function (selector, types, fn) {
          // ( namespace ) or ( selector, types [, fn] )
          return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn)
        }
      });
      jQuery.parseJSON = JSON.parse;
      // Register as a named AMD module, since jQuery can be concatenated with other
      // files that may use define, but not via a proper concatenation script that
      // understands anonymous AMD modules. A named AMD is safest and most robust
      // way to register. Lowercase jquery is used because AMD module names are
      // derived from file names, and jQuery is normally delivered in a lowercase
      // file name. Do this after creating the global so that if an AMD module wants
      // to call noConflict to hide this version of jQuery, it will work.
      // Note that for maximum portability, libraries that are not jQuery should
      // declare themselves as anonymous modules, and avoid setting a global if an
      // AMD loader is present. jQuery is a special case. For more information, see
      // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
      if (typeof define === 'function' && define.amd) {
        define('jquery', [], function () {
          return jQuery
        })
      }
      var
        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,
        // Map over the $ in case of overwrite
        _$ = window.$;
      jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
          window.$ = _$
        }
        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery
        }
        return jQuery
      };
      // Expose jQuery and $ identifiers, even in AMD
      // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
      // and CommonJS for browser emulators (#13566)
      if (!noGlobal) {
        window.jQuery = window.$ = jQuery
      }
      return jQuery
    }))
  });
  // source: node_modules/selectize/dist/js/selectize.js
  rqzt.define('selectize/dist/js/selectize', function (module, exports, __dirname, __filename, process) {
    /**
 * selectize.js (v0.12.4)
 * Copyright (c) 2013–2015 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    /*jshint curly:false */
    /*jshint browser:true */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define([
          'jquery',
          'sifter',
          'microplugin'
        ], factory)
      } else if (typeof exports === 'object') {
        module.exports = factory(rqzt('jquery/dist/jquery'), rqzt('sifter/sifter'), rqzt('microplugin/src/microplugin'))
      } else {
        root.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin)
      }
    }(this, function ($, Sifter, MicroPlugin) {
      'use strict';
      var highlight = function ($element, pattern) {
        if (typeof pattern === 'string' && !pattern.length)
          return;
        var regex = typeof pattern === 'string' ? new RegExp(pattern, 'i') : pattern;
        var highlight = function (node) {
          var skip = 0;
          if (node.nodeType === 3) {
            var pos = node.data.search(regex);
            if (pos >= 0 && node.data.length > 0) {
              var match = node.data.match(regex);
              var spannode = document.createElement('span');
              spannode.className = 'highlight';
              var middlebit = node.splitText(pos);
              var endbit = middlebit.splitText(match[0].length);
              var middleclone = middlebit.cloneNode(true);
              spannode.appendChild(middleclone);
              middlebit.parentNode.replaceChild(spannode, middlebit);
              skip = 1
            }
          } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {
            for (var i = 0; i < node.childNodes.length; ++i) {
              i += highlight(node.childNodes[i])
            }
          }
          return skip
        };
        return $element.each(function () {
          highlight(this)
        })
      };
      /**
	 * removeHighlight fn copied from highlight v5 and
	 * edited to remove with() and pass js strict mode
	 */
      $.fn.removeHighlight = function () {
        return this.find('span.highlight').each(function () {
          this.parentNode.firstChild.nodeName;
          var parent = this.parentNode;
          parent.replaceChild(this.firstChild, this);
          parent.normalize()
        }).end()
      };
      var MicroEvent = function () {
      };
      MicroEvent.prototype = {
        on: function (event, fct) {
          this._events = this._events || {};
          this._events[event] = this._events[event] || [];
          this._events[event].push(fct)
        },
        off: function (event, fct) {
          var n = arguments.length;
          if (n === 0)
            return delete this._events;
          if (n === 1)
            return delete this._events[event];
          this._events = this._events || {};
          if (event in this._events === false)
            return;
          this._events[event].splice(this._events[event].indexOf(fct), 1)
        },
        trigger: function (event) {
          this._events = this._events || {};
          if (event in this._events === false)
            return;
          for (var i = 0; i < this._events[event].length; i++) {
            this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))
          }
        }
      };
      /**
	 * Mixin will delegate all MicroEvent.js function in the destination object.
	 *
	 * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent
	 *
	 * @param {object} the object which will support MicroEvent
	 */
      MicroEvent.mixin = function (destObject) {
        var props = [
          'on',
          'off',
          'trigger'
        ];
        for (var i = 0; i < props.length; i++) {
          destObject.prototype[props[i]] = MicroEvent.prototype[props[i]]
        }
      };
      var IS_MAC = /Mac/.test(navigator.userAgent);
      var KEY_A = 65;
      var KEY_COMMA = 188;
      var KEY_RETURN = 13;
      var KEY_ESC = 27;
      var KEY_LEFT = 37;
      var KEY_UP = 38;
      var KEY_P = 80;
      var KEY_RIGHT = 39;
      var KEY_DOWN = 40;
      var KEY_N = 78;
      var KEY_BACKSPACE = 8;
      var KEY_DELETE = 46;
      var KEY_SHIFT = 16;
      var KEY_CMD = IS_MAC ? 91 : 17;
      var KEY_CTRL = IS_MAC ? 18 : 17;
      var KEY_TAB = 9;
      var TAG_SELECT = 1;
      var TAG_INPUT = 2;
      // for now, android support in general is too spotty to support validity
      var SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('input').validity;
      var isset = function (object) {
        return typeof object !== 'undefined'
      };
      /**
	 * Converts a scalar to its best string representation
	 * for hash keys and HTML attribute values.
	 *
	 * Transformations:
	 *   'str'     -> 'str'
	 *   null      -> ''
	 *   undefined -> ''
	 *   true      -> '1'
	 *   false     -> '0'
	 *   0         -> '0'
	 *   1         -> '1'
	 *
	 * @param {string} value
	 * @returns {string|null}
	 */
      var hash_key = function (value) {
        if (typeof value === 'undefined' || value === null)
          return null;
        if (typeof value === 'boolean')
          return value ? '1' : '0';
        return value + ''
      };
      /**
	 * Escapes a string for use within HTML.
	 *
	 * @param {string} str
	 * @returns {string}
	 */
      var escape_html = function (str) {
        return (str + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;')
      };
      /**
	 * Escapes "$" characters in replacement strings.
	 *
	 * @param {string} str
	 * @returns {string}
	 */
      var escape_replace = function (str) {
        return (str + '').replace(/\$/g, '$$$$')
      };
      var hook = {};
      /**
	 * Wraps `method` on `self` so that `fn`
	 * is invoked before the original method.
	 *
	 * @param {object} self
	 * @param {string} method
	 * @param {function} fn
	 */
      hook.before = function (self, method, fn) {
        var original = self[method];
        self[method] = function () {
          fn.apply(self, arguments);
          return original.apply(self, arguments)
        }
      };
      /**
	 * Wraps `method` on `self` so that `fn`
	 * is invoked after the original method.
	 *
	 * @param {object} self
	 * @param {string} method
	 * @param {function} fn
	 */
      hook.after = function (self, method, fn) {
        var original = self[method];
        self[method] = function () {
          var result = original.apply(self, arguments);
          fn.apply(self, arguments);
          return result
        }
      };
      /**
	 * Wraps `fn` so that it can only be invoked once.
	 *
	 * @param {function} fn
	 * @returns {function}
	 */
      var once = function (fn) {
        var called = false;
        return function () {
          if (called)
            return;
          called = true;
          fn.apply(this, arguments)
        }
      };
      /**
	 * Wraps `fn` so that it can only be called once
	 * every `delay` milliseconds (invoked on the falling edge).
	 *
	 * @param {function} fn
	 * @param {int} delay
	 * @returns {function}
	 */
      var debounce = function (fn, delay) {
        var timeout;
        return function () {
          var self = this;
          var args = arguments;
          window.clearTimeout(timeout);
          timeout = window.setTimeout(function () {
            fn.apply(self, args)
          }, delay)
        }
      };
      /**
	 * Debounce all fired events types listed in `types`
	 * while executing the provided `fn`.
	 *
	 * @param {object} self
	 * @param {array} types
	 * @param {function} fn
	 */
      var debounce_events = function (self, types, fn) {
        var type;
        var trigger = self.trigger;
        var event_args = {};
        // override trigger method
        self.trigger = function () {
          var type = arguments[0];
          if (types.indexOf(type) !== -1) {
            event_args[type] = arguments
          } else {
            return trigger.apply(self, arguments)
          }
        };
        // invoke provided function
        fn.apply(self, []);
        self.trigger = trigger;
        // trigger queued events
        for (type in event_args) {
          if (event_args.hasOwnProperty(type)) {
            trigger.apply(self, event_args[type])
          }
        }
      };
      /**
	 * A workaround for http://bugs.jquery.com/ticket/6696
	 *
	 * @param {object} $parent - Parent element to listen on.
	 * @param {string} event - Event name.
	 * @param {string} selector - Descendant selector to filter by.
	 * @param {function} fn - Event handler.
	 */
      var watchChildEvent = function ($parent, event, selector, fn) {
        $parent.on(event, selector, function (e) {
          var child = e.target;
          while (child && child.parentNode !== $parent[0]) {
            child = child.parentNode
          }
          e.currentTarget = child;
          return fn.apply(this, [e])
        })
      };
      /**
	 * Determines the current selection within a text input control.
	 * Returns an object containing:
	 *   - start
	 *   - length
	 *
	 * @param {object} input
	 * @returns {object}
	 */
      var getSelection = function (input) {
        var result = {};
        if ('selectionStart' in input) {
          result.start = input.selectionStart;
          result.length = input.selectionEnd - result.start
        } else if (document.selection) {
          input.focus();
          var sel = document.selection.createRange();
          var selLen = document.selection.createRange().text.length;
          sel.moveStart('character', -input.value.length);
          result.start = sel.text.length - selLen;
          result.length = selLen
        }
        return result
      };
      /**
	 * Copies CSS properties from one element to another.
	 *
	 * @param {object} $from
	 * @param {object} $to
	 * @param {array} properties
	 */
      var transferStyles = function ($from, $to, properties) {
        var i, n, styles = {};
        if (properties) {
          for (i = 0, n = properties.length; i < n; i++) {
            styles[properties[i]] = $from.css(properties[i])
          }
        } else {
          styles = $from.css()
        }
        $to.css(styles)
      };
      /**
	 * Measures the width of a string within a
	 * parent element (in pixels).
	 *
	 * @param {string} str
	 * @param {object} $parent
	 * @returns {int}
	 */
      var measureString = function (str, $parent) {
        if (!str) {
          return 0
        }
        var $test = $('<test>').css({
          position: 'absolute',
          top: -99999,
          left: -99999,
          width: 'auto',
          padding: 0,
          whiteSpace: 'pre'
        }).text(str).appendTo('body');
        transferStyles($parent, $test, [
          'letterSpacing',
          'fontSize',
          'fontFamily',
          'fontWeight',
          'textTransform'
        ]);
        var width = $test.width();
        $test.remove();
        return width
      };
      /**
	 * Sets up an input to grow horizontally as the user
	 * types. If the value is changed manually, you can
	 * trigger the "update" handler to resize:
	 *
	 * $input.trigger('update');
	 *
	 * @param {object} $input
	 */
      var autoGrow = function ($input) {
        var currentWidth = null;
        var update = function (e, options) {
          var value, keyCode, printable, placeholder, width;
          var shift, character, selection;
          e = e || window.event || {};
          options = options || {};
          if (e.metaKey || e.altKey)
            return;
          if (!options.force && $input.data('grow') === false)
            return;
          value = $input.val();
          if (e.type && e.type.toLowerCase() === 'keydown') {
            keyCode = e.keyCode;
            printable = keyCode >= 97 && keyCode <= 122 || keyCode >= 65 && keyCode <= 90 || keyCode >= 48 && keyCode <= 57 || // 0-9
            keyCode === 32  // space
;
            if (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {
              selection = getSelection($input[0]);
              if (selection.length) {
                value = value.substring(0, selection.start) + value.substring(selection.start + selection.length)
              } else if (keyCode === KEY_BACKSPACE && selection.start) {
                value = value.substring(0, selection.start - 1) + value.substring(selection.start + 1)
              } else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {
                value = value.substring(0, selection.start) + value.substring(selection.start + 1)
              }
            } else if (printable) {
              shift = e.shiftKey;
              character = String.fromCharCode(e.keyCode);
              if (shift)
                character = character.toUpperCase();
              else
                character = character.toLowerCase();
              value += character
            }
          }
          placeholder = $input.attr('placeholder');
          if (!value && placeholder) {
            value = placeholder
          }
          width = measureString(value, $input) + 4;
          if (width !== currentWidth) {
            currentWidth = width;
            $input.width(width);
            $input.triggerHandler('resize')
          }
        };
        $input.on('keydown keyup update blur', update);
        update()
      };
      var domToString = function (d) {
        var tmp = document.createElement('div');
        tmp.appendChild(d.cloneNode(true));
        return tmp.innerHTML
      };
      var logError = function (message, options) {
        if (!options)
          options = {};
        var component = 'Selectize';
        void 0;
        if (options.explanation) {
          // console.group is undefined in <IE11
          if (console.group)
            void 0;
          void 0;
          if (console.group)
            void 0
        }
      };
      var Selectize = function ($input, settings) {
        var key, i, n, dir, input, self = this;
        input = $input[0];
        input.selectize = self;
        // detect rtl environment
        var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);
        dir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;
        dir = dir || $input.parents('[dir]:first').attr('dir') || '';
        // setup default state
        $.extend(self, {
          order: 0,
          settings: settings,
          $input: $input,
          tabIndex: $input.attr('tabindex') || '',
          tagType: input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,
          rtl: /rtl/i.test(dir),
          eventNS: '.selectize' + ++Selectize.count,
          highlightedValue: null,
          isOpen: false,
          isDisabled: false,
          isRequired: $input.is('[required]'),
          isInvalid: false,
          isLocked: false,
          isFocused: false,
          isInputHidden: false,
          isSetup: false,
          isShiftDown: false,
          isCmdDown: false,
          isCtrlDown: false,
          ignoreFocus: false,
          ignoreBlur: false,
          ignoreHover: false,
          hasOptions: false,
          currentResults: null,
          lastValue: '',
          caretPos: 0,
          loading: 0,
          loadedSearches: {},
          $activeOption: null,
          $activeItems: [],
          optgroups: {},
          options: {},
          userOptions: {},
          items: [],
          renderCache: {},
          onSearchChange: settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)
        });
        // search system
        self.sifter = new Sifter(this.options, { diacritics: settings.diacritics });
        // build options table
        if (self.settings.options) {
          for (i = 0, n = self.settings.options.length; i < n; i++) {
            self.registerOption(self.settings.options[i])
          }
          delete self.settings.options
        }
        // build optgroup table
        if (self.settings.optgroups) {
          for (i = 0, n = self.settings.optgroups.length; i < n; i++) {
            self.registerOptionGroup(self.settings.optgroups[i])
          }
          delete self.settings.optgroups
        }
        // option-dependent defaults
        self.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');
        if (typeof self.settings.hideSelected !== 'boolean') {
          self.settings.hideSelected = self.settings.mode === 'multi'
        }
        self.initializePlugins(self.settings.plugins);
        self.setupCallbacks();
        self.setupTemplates();
        self.setup()
      };
      // mixins
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      MicroEvent.mixin(Selectize);
      if (typeof MicroPlugin !== 'undefined') {
        MicroPlugin.mixin(Selectize)
      } else {
        logError('Dependency MicroPlugin is missing', { explanation: 'Make sure you either: (1) are using the "standalone" ' + 'version of Selectize, or (2) require MicroPlugin before you ' + 'load Selectize.' })
      }
      // methods
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      $.extend(Selectize.prototype, {
        /**
		 * Creates all elements and sets up event bindings.
		 */
        setup: function () {
          var self = this;
          var settings = self.settings;
          var eventNS = self.eventNS;
          var $window = $(window);
          var $document = $(document);
          var $input = self.$input;
          var $wrapper;
          var $control;
          var $control_input;
          var $dropdown;
          var $dropdown_content;
          var $dropdown_parent;
          var inputMode;
          var timeout_blur;
          var timeout_focus;
          var classes;
          var classes_plugins;
          var inputId;
          inputMode = self.settings.mode;
          classes = $input.attr('class') || '';
          $wrapper = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);
          $control = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);
          $control_input = $('<input type="text" autocomplete="off" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);
          $dropdown_parent = $(settings.dropdownParent || $wrapper);
          $dropdown = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);
          $dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);
          if (inputId = $input.attr('id')) {
            $control_input.attr('id', inputId + '-selectized');
            $("label[for='" + inputId + "']").attr('for', inputId + '-selectized')
          }
          if (self.settings.copyClassesToDropdown) {
            $dropdown.addClass(classes)
          }
          $wrapper.css({ width: $input[0].style.width });
          if (self.plugins.names.length) {
            classes_plugins = 'plugin-' + self.plugins.names.join(' plugin-');
            $wrapper.addClass(classes_plugins);
            $dropdown.addClass(classes_plugins)
          }
          if ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {
            $input.attr('multiple', 'multiple')
          }
          if (self.settings.placeholder) {
            $control_input.attr('placeholder', settings.placeholder)
          }
          // if splitOn was not passed in, construct it from the delimiter to allow pasting universally
          if (!self.settings.splitOn && self.settings.delimiter) {
            var delimiterEscaped = self.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            self.settings.splitOn = new RegExp('\\s*' + delimiterEscaped + '+\\s*')
          }
          if ($input.attr('autocorrect')) {
            $control_input.attr('autocorrect', $input.attr('autocorrect'))
          }
          if ($input.attr('autocapitalize')) {
            $control_input.attr('autocapitalize', $input.attr('autocapitalize'))
          }
          self.$wrapper = $wrapper;
          self.$control = $control;
          self.$control_input = $control_input;
          self.$dropdown = $dropdown;
          self.$dropdown_content = $dropdown_content;
          $dropdown.on('mouseenter', '[data-selectable]', function () {
            return self.onOptionHover.apply(self, arguments)
          });
          $dropdown.on('mousedown click', '[data-selectable]', function () {
            return self.onOptionSelect.apply(self, arguments)
          });
          watchChildEvent($control, 'mousedown', '*:not(input)', function () {
            return self.onItemSelect.apply(self, arguments)
          });
          autoGrow($control_input);
          $control.on({
            mousedown: function () {
              return self.onMouseDown.apply(self, arguments)
            },
            click: function () {
              return self.onClick.apply(self, arguments)
            }
          });
          $control_input.on({
            mousedown: function (e) {
              e.stopPropagation()
            },
            keydown: function () {
              return self.onKeyDown.apply(self, arguments)
            },
            keyup: function () {
              return self.onKeyUp.apply(self, arguments)
            },
            keypress: function () {
              return self.onKeyPress.apply(self, arguments)
            },
            resize: function () {
              self.positionDropdown.apply(self, [])
            },
            blur: function () {
              return self.onBlur.apply(self, arguments)
            },
            focus: function () {
              self.ignoreBlur = false;
              return self.onFocus.apply(self, arguments)
            },
            paste: function () {
              return self.onPaste.apply(self, arguments)
            }
          });
          $document.on('keydown' + eventNS, function (e) {
            self.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];
            self.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];
            self.isShiftDown = e.shiftKey
          });
          $document.on('keyup' + eventNS, function (e) {
            if (e.keyCode === KEY_CTRL)
              self.isCtrlDown = false;
            if (e.keyCode === KEY_SHIFT)
              self.isShiftDown = false;
            if (e.keyCode === KEY_CMD)
              self.isCmdDown = false
          });
          $document.on('mousedown' + eventNS, function (e) {
            if (self.isFocused) {
              // prevent events on the dropdown scrollbar from causing the control to blur
              if (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {
                return false
              }
              // blur on click outside
              if (!self.$control.has(e.target).length && e.target !== self.$control[0]) {
                self.blur(e.target)
              }
            }
          });
          $window.on([
            'scroll' + eventNS,
            'resize' + eventNS
          ].join(' '), function () {
            if (self.isOpen) {
              self.positionDropdown.apply(self, arguments)
            }
          });
          $window.on('mousemove' + eventNS, function () {
            self.ignoreHover = false
          });
          // store original children and tab index so that they can be
          // restored when the destroy() method is called.
          this.revertSettings = {
            $children: $input.children().detach(),
            tabindex: $input.attr('tabindex')
          };
          $input.attr('tabindex', -1).hide().after(self.$wrapper);
          if ($.isArray(settings.items)) {
            self.setValue(settings.items);
            delete settings.items
          }
          // feature detect for the validation API
          if (SUPPORTS_VALIDITY_API) {
            $input.on('invalid' + eventNS, function (e) {
              e.preventDefault();
              self.isInvalid = true;
              self.refreshState()
            })
          }
          self.updateOriginalInput();
          self.refreshItems();
          self.refreshState();
          self.updatePlaceholder();
          self.isSetup = true;
          if ($input.is(':disabled')) {
            self.disable()
          }
          self.on('change', this.onChange);
          $input.data('selectize', self);
          $input.addClass('selectized');
          self.trigger('initialize');
          // preload options
          if (settings.preload === true) {
            self.onSearchChange('')
          }
        },
        /**
		 * Sets up default rendering functions.
		 */
        setupTemplates: function () {
          var self = this;
          var field_label = self.settings.labelField;
          var field_optgroup = self.settings.optgroupLabelField;
          var templates = {
            'optgroup': function (data) {
              return '<div class="optgroup">' + data.html + '</div>'
            },
            'optgroup_header': function (data, escape) {
              return '<div class="optgroup-header">' + escape(data[field_optgroup]) + '</div>'
            },
            'option': function (data, escape) {
              return '<div class="option">' + escape(data[field_label]) + '</div>'
            },
            'item': function (data, escape) {
              return '<div class="item">' + escape(data[field_label]) + '</div>'
            },
            'option_create': function (data, escape) {
              return '<div class="create">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>'
            }
          };
          self.settings.render = $.extend({}, templates, self.settings.render)
        },
        /**
		 * Maps fired events to callbacks provided
		 * in the settings used when creating the control.
		 */
        setupCallbacks: function () {
          var key, fn, callbacks = {
              'initialize': 'onInitialize',
              'change': 'onChange',
              'item_add': 'onItemAdd',
              'item_remove': 'onItemRemove',
              'clear': 'onClear',
              'option_add': 'onOptionAdd',
              'option_remove': 'onOptionRemove',
              'option_clear': 'onOptionClear',
              'optgroup_add': 'onOptionGroupAdd',
              'optgroup_remove': 'onOptionGroupRemove',
              'optgroup_clear': 'onOptionGroupClear',
              'dropdown_open': 'onDropdownOpen',
              'dropdown_close': 'onDropdownClose',
              'type': 'onType',
              'load': 'onLoad',
              'focus': 'onFocus',
              'blur': 'onBlur'
            };
          for (key in callbacks) {
            if (callbacks.hasOwnProperty(key)) {
              fn = this.settings[callbacks[key]];
              if (fn)
                this.on(key, fn)
            }
          }
        },
        /**
		 * Triggered when the main control element
		 * has a click event.
		 *
		 * @param {object} e
		 * @return {boolean}
		 */
        onClick: function (e) {
          var self = this;
          // necessary for mobile webkit devices (manual focus triggering
          // is ignored unless invoked within a click event)
          if (!self.isFocused) {
            self.focus();
            e.preventDefault()
          }
        },
        /**
		 * Triggered when the main control element
		 * has a mouse down event.
		 *
		 * @param {object} e
		 * @return {boolean}
		 */
        onMouseDown: function (e) {
          var self = this;
          var defaultPrevented = e.isDefaultPrevented();
          var $target = $(e.target);
          if (self.isFocused) {
            // retain focus by preventing native handling. if the
            // event target is the input it should not be modified.
            // otherwise, text selection within the input won't work.
            if (e.target !== self.$control_input[0]) {
              if (self.settings.mode === 'single') {
                // toggle dropdown
                self.isOpen ? self.close() : self.open()
              } else if (!defaultPrevented) {
                self.setActiveItem(null)
              }
              return false
            }
          } else {
            // give control focus
            if (!defaultPrevented) {
              window.setTimeout(function () {
                self.focus()
              }, 0)
            }
          }
        },
        /**
		 * Triggered when the value of the control has been changed.
		 * This should propagate the event to the original DOM
		 * input / select element.
		 */
        onChange: function () {
          this.$input.trigger('change')
        },
        /**
		 * Triggered on <input> paste.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onPaste: function (e) {
          var self = this;
          if (self.isFull() || self.isInputHidden || self.isLocked) {
            e.preventDefault();
            return
          }
          // If a regex or string is included, this will split the pasted
          // input and create Items for each separate value
          if (self.settings.splitOn) {
            // Wait for pasted text to be recognized in value
            setTimeout(function () {
              var pastedText = self.$control_input.val();
              if (!pastedText.match(self.settings.splitOn)) {
                return
              }
              var splitInput = $.trim(pastedText).split(self.settings.splitOn);
              for (var i = 0, n = splitInput.length; i < n; i++) {
                self.createItem(splitInput[i])
              }
            }, 0)
          }
        },
        /**
		 * Triggered on <input> keypress.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyPress: function (e) {
          if (this.isLocked)
            return e && e.preventDefault();
          var character = String.fromCharCode(e.keyCode || e.which);
          if (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {
            this.createItem();
            e.preventDefault();
            return false
          }
        },
        /**
		 * Triggered on <input> keydown.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyDown: function (e) {
          var isInput = e.target === this.$control_input[0];
          var self = this;
          if (self.isLocked) {
            if (e.keyCode !== KEY_TAB) {
              e.preventDefault()
            }
            return
          }
          switch (e.keyCode) {
          case KEY_A:
            if (self.isCmdDown) {
              self.selectAll();
              return
            }
            break;
          case KEY_ESC:
            if (self.isOpen) {
              e.preventDefault();
              e.stopPropagation();
              self.close()
            }
            return;
          case KEY_N:
            if (!e.ctrlKey || e.altKey)
              break;
          case KEY_DOWN:
            if (!self.isOpen && self.hasOptions) {
              self.open()
            } else if (self.$activeOption) {
              self.ignoreHover = true;
              var $next = self.getAdjacentOption(self.$activeOption, 1);
              if ($next.length)
                self.setActiveOption($next, true, true)
            }
            e.preventDefault();
            return;
          case KEY_P:
            if (!e.ctrlKey || e.altKey)
              break;
          case KEY_UP:
            if (self.$activeOption) {
              self.ignoreHover = true;
              var $prev = self.getAdjacentOption(self.$activeOption, -1);
              if ($prev.length)
                self.setActiveOption($prev, true, true)
            }
            e.preventDefault();
            return;
          case KEY_RETURN:
            if (self.isOpen && self.$activeOption) {
              self.onOptionSelect({ currentTarget: self.$activeOption });
              e.preventDefault()
            }
            return;
          case KEY_LEFT:
            self.advanceSelection(-1, e);
            return;
          case KEY_RIGHT:
            self.advanceSelection(1, e);
            return;
          case KEY_TAB:
            if (self.settings.selectOnTab && self.isOpen && self.$activeOption) {
              self.onOptionSelect({ currentTarget: self.$activeOption });
              // Default behaviour is to jump to the next field, we only want this
              // if the current field doesn't accept any more entries
              if (!self.isFull()) {
                e.preventDefault()
              }
            }
            if (self.settings.create && self.createItem()) {
              e.preventDefault()
            }
            return;
          case KEY_BACKSPACE:
          case KEY_DELETE:
            self.deleteSelection(e);
            return
          }
          if ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {
            e.preventDefault();
            return
          }
        },
        /**
		 * Triggered on <input> keyup.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyUp: function (e) {
          var self = this;
          if (self.isLocked)
            return e && e.preventDefault();
          var value = self.$control_input.val() || '';
          if (self.lastValue !== value) {
            self.lastValue = value;
            self.onSearchChange(value);
            self.refreshOptions();
            self.trigger('type', value)
          }
        },
        /**
		 * Invokes the user-provide option provider / loader.
		 *
		 * Note: this function is debounced in the Selectize
		 * constructor (by `settings.loadThrottle` milliseconds)
		 *
		 * @param {string} value
		 */
        onSearchChange: function (value) {
          var self = this;
          var fn = self.settings.load;
          if (!fn)
            return;
          if (self.loadedSearches.hasOwnProperty(value))
            return;
          self.loadedSearches[value] = true;
          self.load(function (callback) {
            fn.apply(self, [
              value,
              callback
            ])
          })
        },
        /**
		 * Triggered on <input> focus.
		 *
		 * @param {object} e (optional)
		 * @returns {boolean}
		 */
        onFocus: function (e) {
          var self = this;
          var wasFocused = self.isFocused;
          if (self.isDisabled) {
            self.blur();
            e && e.preventDefault();
            return false
          }
          if (self.ignoreFocus)
            return;
          self.isFocused = true;
          if (self.settings.preload === 'focus')
            self.onSearchChange('');
          if (!wasFocused)
            self.trigger('focus');
          if (!self.$activeItems.length) {
            self.showInput();
            self.setActiveItem(null);
            self.refreshOptions(!!self.settings.openOnFocus)
          }
          self.refreshState()
        },
        /**
		 * Triggered on <input> blur.
		 *
		 * @param {object} e
		 * @param {Element} dest
		 */
        onBlur: function (e, dest) {
          var self = this;
          if (!self.isFocused)
            return;
          self.isFocused = false;
          if (self.ignoreFocus) {
            return
          } else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {
            // necessary to prevent IE closing the dropdown when the scrollbar is clicked
            self.ignoreBlur = true;
            self.onFocus(e);
            return
          }
          var deactivate = function () {
            self.close();
            self.setTextboxValue('');
            self.setActiveItem(null);
            self.setActiveOption(null);
            self.setCaret(self.items.length);
            self.refreshState();
            // IE11 bug: element still marked as active
            dest && dest.focus && dest.focus();
            self.ignoreFocus = false;
            self.trigger('blur')
          };
          self.ignoreFocus = true;
          if (self.settings.create && self.settings.createOnBlur) {
            self.createItem(null, false, deactivate)
          } else {
            deactivate()
          }
        },
        /**
		 * Triggered when the user rolls over
		 * an option in the autocomplete dropdown menu.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onOptionHover: function (e) {
          if (this.ignoreHover)
            return;
          this.setActiveOption(e.currentTarget, false)
        },
        /**
		 * Triggered when the user clicks on an option
		 * in the autocomplete dropdown menu.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onOptionSelect: function (e) {
          var value, $target, $option, self = this;
          if (e.preventDefault) {
            e.preventDefault();
            e.stopPropagation()
          }
          $target = $(e.currentTarget);
          if ($target.hasClass('create')) {
            self.createItem(null, function () {
              if (self.settings.closeAfterSelect) {
                self.close()
              }
            })
          } else {
            value = $target.attr('data-value');
            if (typeof value !== 'undefined') {
              self.lastQuery = null;
              self.setTextboxValue('');
              self.addItem(value);
              if (self.settings.closeAfterSelect) {
                self.close()
              } else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {
                self.setActiveOption(self.getOption(value))
              }
            }
          }
        },
        /**
		 * Triggered when the user clicks on an item
		 * that has been selected.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onItemSelect: function (e) {
          var self = this;
          if (self.isLocked)
            return;
          if (self.settings.mode === 'multi') {
            e.preventDefault();
            self.setActiveItem(e.currentTarget, e)
          }
        },
        /**
		 * Invokes the provided method that provides
		 * results to a callback---which are then added
		 * as options to the control.
		 *
		 * @param {function} fn
		 */
        load: function (fn) {
          var self = this;
          var $wrapper = self.$wrapper.addClass(self.settings.loadingClass);
          self.loading++;
          fn.apply(self, [function (results) {
              self.loading = Math.max(self.loading - 1, 0);
              if (results && results.length) {
                self.addOption(results);
                self.refreshOptions(self.isFocused && !self.isInputHidden)
              }
              if (!self.loading) {
                $wrapper.removeClass(self.settings.loadingClass)
              }
              self.trigger('load', results)
            }])
        },
        /**
		 * Sets the input field of the control to the specified value.
		 *
		 * @param {string} value
		 */
        setTextboxValue: function (value) {
          var $input = this.$control_input;
          var changed = $input.val() !== value;
          if (changed) {
            $input.val(value).triggerHandler('update');
            this.lastValue = value
          }
        },
        /**
		 * Returns the value of the control. If multiple items
		 * can be selected (e.g. <select multiple>), this returns
		 * an array. If only one item can be selected, this
		 * returns a string.
		 *
		 * @returns {mixed}
		 */
        getValue: function () {
          if (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {
            return this.items
          } else {
            return this.items.join(this.settings.delimiter)
          }
        },
        /**
		 * Resets the selected items to the given value.
		 *
		 * @param {mixed} value
		 */
        setValue: function (value, silent) {
          var events = silent ? [] : ['change'];
          debounce_events(this, events, function () {
            this.clear(silent);
            this.addItems(value, silent)
          })
        },
        /**
		 * Sets the selected item.
		 *
		 * @param {object} $item
		 * @param {object} e (optional)
		 */
        setActiveItem: function ($item, e) {
          var self = this;
          var eventName;
          var i, idx, begin, end, item, swap;
          var $last;
          if (self.settings.mode === 'single')
            return;
          $item = $($item);
          // clear the active selection
          if (!$item.length) {
            $(self.$activeItems).removeClass('active');
            self.$activeItems = [];
            if (self.isFocused) {
              self.showInput()
            }
            return
          }
          // modify selection
          eventName = e && e.type.toLowerCase();
          if (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {
            $last = self.$control.children('.active:last');
            begin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);
            end = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);
            if (begin > end) {
              swap = begin;
              begin = end;
              end = swap
            }
            for (i = begin; i <= end; i++) {
              item = self.$control[0].childNodes[i];
              if (self.$activeItems.indexOf(item) === -1) {
                $(item).addClass('active');
                self.$activeItems.push(item)
              }
            }
            e.preventDefault()
          } else if (eventName === 'mousedown' && self.isCtrlDown || eventName === 'keydown' && this.isShiftDown) {
            if ($item.hasClass('active')) {
              idx = self.$activeItems.indexOf($item[0]);
              self.$activeItems.splice(idx, 1);
              $item.removeClass('active')
            } else {
              self.$activeItems.push($item.addClass('active')[0])
            }
          } else {
            $(self.$activeItems).removeClass('active');
            self.$activeItems = [$item.addClass('active')[0]]
          }
          // ensure control has focus
          self.hideInput();
          if (!this.isFocused) {
            self.focus()
          }
        },
        /**
		 * Sets the selected item in the dropdown menu
		 * of available options.
		 *
		 * @param {object} $object
		 * @param {boolean} scroll
		 * @param {boolean} animate
		 */
        setActiveOption: function ($option, scroll, animate) {
          var height_menu, height_item, y;
          var scroll_top, scroll_bottom;
          var self = this;
          if (self.$activeOption)
            self.$activeOption.removeClass('active');
          self.$activeOption = null;
          $option = $($option);
          if (!$option.length)
            return;
          self.$activeOption = $option.addClass('active');
          if (scroll || !isset(scroll)) {
            height_menu = self.$dropdown_content.height();
            height_item = self.$activeOption.outerHeight(true);
            scroll = self.$dropdown_content.scrollTop() || 0;
            y = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;
            scroll_top = y;
            scroll_bottom = y - height_menu + height_item;
            if (y + height_item > height_menu + scroll) {
              self.$dropdown_content.stop().animate({ scrollTop: scroll_bottom }, animate ? self.settings.scrollDuration : 0)
            } else if (y < scroll) {
              self.$dropdown_content.stop().animate({ scrollTop: scroll_top }, animate ? self.settings.scrollDuration : 0)
            }
          }
        },
        /**
		 * Selects all items (CTRL + A).
		 */
        selectAll: function () {
          var self = this;
          if (self.settings.mode === 'single')
            return;
          self.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));
          if (self.$activeItems.length) {
            self.hideInput();
            self.close()
          }
          self.focus()
        },
        /**
		 * Hides the input element out of view, while
		 * retaining its focus.
		 */
        hideInput: function () {
          var self = this;
          self.setTextboxValue('');
          self.$control_input.css({
            opacity: 0,
            position: 'absolute',
            left: self.rtl ? 10000 : -10000
          });
          self.isInputHidden = true
        },
        /**
		 * Restores input visibility.
		 */
        showInput: function () {
          this.$control_input.css({
            opacity: 1,
            position: 'relative',
            left: 0
          });
          this.isInputHidden = false
        },
        /**
		 * Gives the control focus.
		 */
        focus: function () {
          var self = this;
          if (self.isDisabled)
            return;
          self.ignoreFocus = true;
          self.$control_input[0].focus();
          window.setTimeout(function () {
            self.ignoreFocus = false;
            self.onFocus()
          }, 0)
        },
        /**
		 * Forces the control out of focus.
		 *
		 * @param {Element} dest
		 */
        blur: function (dest) {
          this.$control_input[0].blur();
          this.onBlur(null, dest)
        },
        /**
		 * Returns a function that scores an object
		 * to show how good of a match it is to the
		 * provided query.
		 *
		 * @param {string} query
		 * @param {object} options
		 * @return {function}
		 */
        getScoreFunction: function (query) {
          return this.sifter.getScoreFunction(query, this.getSearchOptions())
        },
        /**
		 * Returns search options for sifter (the system
		 * for scoring and sorting results).
		 *
		 * @see https://github.com/brianreavis/sifter.js
		 * @return {object}
		 */
        getSearchOptions: function () {
          var settings = this.settings;
          var sort = settings.sortField;
          if (typeof sort === 'string') {
            sort = [{ field: sort }]
          }
          return {
            fields: settings.searchField,
            conjunction: settings.searchConjunction,
            sort: sort
          }
        },
        /**
		 * Searches through available options and returns
		 * a sorted array of matches.
		 *
		 * Returns an object containing:
		 *
		 *   - query {string}
		 *   - tokens {array}
		 *   - total {int}
		 *   - items {array}
		 *
		 * @param {string} query
		 * @returns {object}
		 */
        search: function (query) {
          var i, value, score, result, calculateScore;
          var self = this;
          var settings = self.settings;
          var options = this.getSearchOptions();
          // validate user-provided result scoring function
          if (settings.score) {
            calculateScore = self.settings.score.apply(this, [query]);
            if (typeof calculateScore !== 'function') {
              throw new Error('Selectize "score" setting must be a function that returns a function')
            }
          }
          // perform search
          if (query !== self.lastQuery) {
            self.lastQuery = query;
            result = self.sifter.search(query, $.extend(options, { score: calculateScore }));
            self.currentResults = result
          } else {
            result = $.extend(true, {}, self.currentResults)
          }
          // filter out selected items
          if (settings.hideSelected) {
            for (i = result.items.length - 1; i >= 0; i--) {
              if (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {
                result.items.splice(i, 1)
              }
            }
          }
          return result
        },
        /**
		 * Refreshes the list of available options shown
		 * in the autocomplete dropdown menu.
		 *
		 * @param {boolean} triggerDropdown
		 */
        refreshOptions: function (triggerDropdown) {
          var i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;
          var $active, $active_before, $create;
          if (typeof triggerDropdown === 'undefined') {
            triggerDropdown = true
          }
          var self = this;
          var query = $.trim(self.$control_input.val());
          var results = self.search(query);
          var $dropdown_content = self.$dropdown_content;
          var active_before = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));
          // build markup
          n = results.items.length;
          if (typeof self.settings.maxOptions === 'number') {
            n = Math.min(n, self.settings.maxOptions)
          }
          // render and group available options individually
          groups = {};
          groups_order = [];
          for (i = 0; i < n; i++) {
            option = self.options[results.items[i].id];
            option_html = self.render('option', option);
            optgroup = option[self.settings.optgroupField] || '';
            optgroups = $.isArray(optgroup) ? optgroup : [optgroup];
            for (j = 0, k = optgroups && optgroups.length; j < k; j++) {
              optgroup = optgroups[j];
              if (!self.optgroups.hasOwnProperty(optgroup)) {
                optgroup = ''
              }
              if (!groups.hasOwnProperty(optgroup)) {
                groups[optgroup] = document.createDocumentFragment();
                groups_order.push(optgroup)
              }
              groups[optgroup].appendChild(option_html)
            }
          }
          // sort optgroups
          if (this.settings.lockOptgroupOrder) {
            groups_order.sort(function (a, b) {
              var a_order = self.optgroups[a].$order || 0;
              var b_order = self.optgroups[b].$order || 0;
              return a_order - b_order
            })
          }
          // render optgroup headers & join groups
          html = document.createDocumentFragment();
          for (i = 0, n = groups_order.length; i < n; i++) {
            optgroup = groups_order[i];
            if (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].childNodes.length) {
              // render the optgroup header and options within it,
              // then pass it to the wrapper template
              html_children = document.createDocumentFragment();
              html_children.appendChild(self.render('optgroup_header', self.optgroups[optgroup]));
              html_children.appendChild(groups[optgroup]);
              html.appendChild(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {
                html: domToString(html_children),
                dom: html_children
              })))
            } else {
              html.appendChild(groups[optgroup])
            }
          }
          $dropdown_content.html(html);
          // highlight matching terms inline
          if (self.settings.highlight && results.query.length && results.tokens.length) {
            $dropdown_content.removeHighlight();
            for (i = 0, n = results.tokens.length; i < n; i++) {
              highlight($dropdown_content, results.tokens[i].regex)
            }
          }
          // add "selected" class to selected options
          if (!self.settings.hideSelected) {
            for (i = 0, n = self.items.length; i < n; i++) {
              self.getOption(self.items[i]).addClass('selected')
            }
          }
          // add create option
          has_create_option = self.canCreate(query);
          if (has_create_option) {
            $dropdown_content.prepend(self.render('option_create', { input: query }));
            $create = $($dropdown_content[0].childNodes[0])
          }
          // activate
          self.hasOptions = results.items.length > 0 || has_create_option;
          if (self.hasOptions) {
            if (results.items.length > 0) {
              $active_before = active_before && self.getOption(active_before);
              if ($active_before && $active_before.length) {
                $active = $active_before
              } else if (self.settings.mode === 'single' && self.items.length) {
                $active = self.getOption(self.items[0])
              }
              if (!$active || !$active.length) {
                if ($create && !self.settings.addPrecedence) {
                  $active = self.getAdjacentOption($create, 1)
                } else {
                  $active = $dropdown_content.find('[data-selectable]:first')
                }
              }
            } else {
              $active = $create
            }
            self.setActiveOption($active);
            if (triggerDropdown && !self.isOpen) {
              self.open()
            }
          } else {
            self.setActiveOption(null);
            if (triggerDropdown && self.isOpen) {
              self.close()
            }
          }
        },
        /**
		 * Adds an available option. If it already exists,
		 * nothing will happen. Note: this does not refresh
		 * the options list dropdown (use `refreshOptions`
		 * for that).
		 *
		 * Usage:
		 *
		 *   this.addOption(data)
		 *
		 * @param {object|array} data
		 */
        addOption: function (data) {
          var i, n, value, self = this;
          if ($.isArray(data)) {
            for (i = 0, n = data.length; i < n; i++) {
              self.addOption(data[i])
            }
            return
          }
          if (value = self.registerOption(data)) {
            self.userOptions[value] = true;
            self.lastQuery = null;
            self.trigger('option_add', value, data)
          }
        },
        /**
		 * Registers an option to the pool of options.
		 *
		 * @param {object} data
		 * @return {boolean|string}
		 */
        registerOption: function (data) {
          var key = hash_key(data[this.settings.valueField]);
          if (typeof key === 'undefined' || key === null || this.options.hasOwnProperty(key))
            return false;
          data.$order = data.$order || ++this.order;
          this.options[key] = data;
          return key
        },
        /**
		 * Registers an option group to the pool of option groups.
		 *
		 * @param {object} data
		 * @return {boolean|string}
		 */
        registerOptionGroup: function (data) {
          var key = hash_key(data[this.settings.optgroupValueField]);
          if (!key)
            return false;
          data.$order = data.$order || ++this.order;
          this.optgroups[key] = data;
          return key
        },
        /**
		 * Registers a new optgroup for options
		 * to be bucketed into.
		 *
		 * @param {string} id
		 * @param {object} data
		 */
        addOptionGroup: function (id, data) {
          data[this.settings.optgroupValueField] = id;
          if (id = this.registerOptionGroup(data)) {
            this.trigger('optgroup_add', id, data)
          }
        },
        /**
		 * Removes an existing option group.
		 *
		 * @param {string} id
		 */
        removeOptionGroup: function (id) {
          if (this.optgroups.hasOwnProperty(id)) {
            delete this.optgroups[id];
            this.renderCache = {};
            this.trigger('optgroup_remove', id)
          }
        },
        /**
		 * Clears all existing option groups.
		 */
        clearOptionGroups: function () {
          this.optgroups = {};
          this.renderCache = {};
          this.trigger('optgroup_clear')
        },
        /**
		 * Updates an option available for selection. If
		 * it is visible in the selected items or options
		 * dropdown, it will be re-rendered automatically.
		 *
		 * @param {string} value
		 * @param {object} data
		 */
        updateOption: function (value, data) {
          var self = this;
          var $item, $item_new;
          var value_new, index_item, cache_items, cache_options, order_old;
          value = hash_key(value);
          value_new = hash_key(data[self.settings.valueField]);
          // sanity checks
          if (value === null)
            return;
          if (!self.options.hasOwnProperty(value))
            return;
          if (typeof value_new !== 'string')
            throw new Error('Value must be set in option data');
          order_old = self.options[value].$order;
          // update references
          if (value_new !== value) {
            delete self.options[value];
            index_item = self.items.indexOf(value);
            if (index_item !== -1) {
              self.items.splice(index_item, 1, value_new)
            }
          }
          data.$order = data.$order || order_old;
          self.options[value_new] = data;
          // invalidate render cache
          cache_items = self.renderCache['item'];
          cache_options = self.renderCache['option'];
          if (cache_items) {
            delete cache_items[value];
            delete cache_items[value_new]
          }
          if (cache_options) {
            delete cache_options[value];
            delete cache_options[value_new]
          }
          // update the item if it's selected
          if (self.items.indexOf(value_new) !== -1) {
            $item = self.getItem(value);
            $item_new = $(self.render('item', data));
            if ($item.hasClass('active'))
              $item_new.addClass('active');
            $item.replaceWith($item_new)
          }
          // invalidate last query because we might have updated the sortField
          self.lastQuery = null;
          // update dropdown contents
          if (self.isOpen) {
            self.refreshOptions(false)
          }
        },
        /**
		 * Removes a single option.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        removeOption: function (value, silent) {
          var self = this;
          value = hash_key(value);
          var cache_items = self.renderCache['item'];
          var cache_options = self.renderCache['option'];
          if (cache_items)
            delete cache_items[value];
          if (cache_options)
            delete cache_options[value];
          delete self.userOptions[value];
          delete self.options[value];
          self.lastQuery = null;
          self.trigger('option_remove', value);
          self.removeItem(value, silent)
        },
        /**
		 * Clears all options.
		 */
        clearOptions: function () {
          var self = this;
          self.loadedSearches = {};
          self.userOptions = {};
          self.renderCache = {};
          self.options = self.sifter.items = {};
          self.lastQuery = null;
          self.trigger('option_clear');
          self.clear()
        },
        /**
		 * Returns the jQuery element of the option
		 * matching the given value.
		 *
		 * @param {string} value
		 * @returns {object}
		 */
        getOption: function (value) {
          return this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'))
        },
        /**
		 * Returns the jQuery element of the next or
		 * previous selectable option.
		 *
		 * @param {object} $option
		 * @param {int} direction  can be 1 for next or -1 for previous
		 * @return {object}
		 */
        getAdjacentOption: function ($option, direction) {
          var $options = this.$dropdown.find('[data-selectable]');
          var index = $options.index($option) + direction;
          return index >= 0 && index < $options.length ? $options.eq(index) : $()
        },
        /**
		 * Finds the first element with a "data-value" attribute
		 * that matches the given value.
		 *
		 * @param {mixed} value
		 * @param {object} $els
		 * @return {object}
		 */
        getElementWithValue: function (value, $els) {
          value = hash_key(value);
          if (typeof value !== 'undefined' && value !== null) {
            for (var i = 0, n = $els.length; i < n; i++) {
              if ($els[i].getAttribute('data-value') === value) {
                return $($els[i])
              }
            }
          }
          return $()
        },
        /**
		 * Returns the jQuery element of the item
		 * matching the given value.
		 *
		 * @param {string} value
		 * @returns {object}
		 */
        getItem: function (value) {
          return this.getElementWithValue(value, this.$control.children())
        },
        /**
		 * "Selects" multiple items at once. Adds them to the list
		 * at the current caret position.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        addItems: function (values, silent) {
          var items = $.isArray(values) ? values : [values];
          for (var i = 0, n = items.length; i < n; i++) {
            this.isPending = i < n - 1;
            this.addItem(items[i], silent)
          }
        },
        /**
		 * "Selects" an item. Adds it to the list
		 * at the current caret position.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        addItem: function (value, silent) {
          var events = silent ? [] : ['change'];
          debounce_events(this, events, function () {
            var $item, $option, $options;
            var self = this;
            var inputMode = self.settings.mode;
            var i, active, value_next, wasFull;
            value = hash_key(value);
            if (self.items.indexOf(value) !== -1) {
              if (inputMode === 'single')
                self.close();
              return
            }
            if (!self.options.hasOwnProperty(value))
              return;
            if (inputMode === 'single')
              self.clear(silent);
            if (inputMode === 'multi' && self.isFull())
              return;
            $item = $(self.render('item', self.options[value]));
            wasFull = self.isFull();
            self.items.splice(self.caretPos, 0, value);
            self.insertAtCaret($item);
            if (!self.isPending || !wasFull && self.isFull()) {
              self.refreshState()
            }
            if (self.isSetup) {
              $options = self.$dropdown_content.find('[data-selectable]');
              // update menu / remove the option (if this is not one item being added as part of series)
              if (!self.isPending) {
                $option = self.getOption(value);
                value_next = self.getAdjacentOption($option, 1).attr('data-value');
                self.refreshOptions(self.isFocused && inputMode !== 'single');
                if (value_next) {
                  self.setActiveOption(self.getOption(value_next))
                }
              }
              // hide the menu if the maximum number of items have been selected or no options are left
              if (!$options.length || self.isFull()) {
                self.close()
              } else {
                self.positionDropdown()
              }
              self.updatePlaceholder();
              self.trigger('item_add', value, $item);
              self.updateOriginalInput({ silent: silent })
            }
          })
        },
        /**
		 * Removes the selected item matching
		 * the provided value.
		 *
		 * @param {string} value
		 */
        removeItem: function (value, silent) {
          var self = this;
          var $item, i, idx;
          $item = value instanceof $ ? value : self.getItem(value);
          value = hash_key($item.attr('data-value'));
          i = self.items.indexOf(value);
          if (i !== -1) {
            $item.remove();
            if ($item.hasClass('active')) {
              idx = self.$activeItems.indexOf($item[0]);
              self.$activeItems.splice(idx, 1)
            }
            self.items.splice(i, 1);
            self.lastQuery = null;
            if (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {
              self.removeOption(value, silent)
            }
            if (i < self.caretPos) {
              self.setCaret(self.caretPos - 1)
            }
            self.refreshState();
            self.updatePlaceholder();
            self.updateOriginalInput({ silent: silent });
            self.positionDropdown();
            self.trigger('item_remove', value, $item)
          }
        },
        /**
		 * Invokes the `create` method provided in the
		 * selectize options that should provide the data
		 * for the new item, given the user input.
		 *
		 * Once this completes, it will be added
		 * to the item list.
		 *
		 * @param {string} value
		 * @param {boolean} [triggerDropdown]
		 * @param {function} [callback]
		 * @return {boolean}
		 */
        createItem: function (input, triggerDropdown) {
          var self = this;
          var caret = self.caretPos;
          input = input || $.trim(self.$control_input.val() || '');
          var callback = arguments[arguments.length - 1];
          if (typeof callback !== 'function')
            callback = function () {
            };
          if (typeof triggerDropdown !== 'boolean') {
            triggerDropdown = true
          }
          if (!self.canCreate(input)) {
            callback();
            return false
          }
          self.lock();
          var setup = typeof self.settings.create === 'function' ? this.settings.create : function (input) {
            var data = {};
            data[self.settings.labelField] = input;
            data[self.settings.valueField] = input;
            return data
          };
          var create = once(function (data) {
            self.unlock();
            if (!data || typeof data !== 'object')
              return callback();
            var value = hash_key(data[self.settings.valueField]);
            if (typeof value !== 'string')
              return callback();
            self.setTextboxValue('');
            self.addOption(data);
            self.setCaret(caret);
            self.addItem(value);
            self.refreshOptions(triggerDropdown && self.settings.mode !== 'single');
            callback(data)
          });
          var output = setup.apply(this, [
            input,
            create
          ]);
          if (typeof output !== 'undefined') {
            create(output)
          }
          return true
        },
        /**
		 * Re-renders the selected item lists.
		 */
        refreshItems: function () {
          this.lastQuery = null;
          if (this.isSetup) {
            this.addItem(this.items)
          }
          this.refreshState();
          this.updateOriginalInput()
        },
        /**
		 * Updates all state-dependent attributes
		 * and CSS classes.
		 */
        refreshState: function () {
          this.refreshValidityState();
          this.refreshClasses()
        },
        /**
		 * Update the `required` attribute of both input and control input.
		 *
		 * The `required` property needs to be activated on the control input
		 * for the error to be displayed at the right place. `required` also
		 * needs to be temporarily deactivated on the input since the input is
		 * hidden and can't show errors.
		 */
        refreshValidityState: function () {
          if (!this.isRequired)
            return false;
          var invalid = !this.items.length;
          this.isInvalid = invalid;
          this.$control_input.prop('required', invalid);
          this.$input.prop('required', !invalid)
        },
        /**
		 * Updates all state-dependent CSS classes.
		 */
        refreshClasses: function () {
          var self = this;
          var isFull = self.isFull();
          var isLocked = self.isLocked;
          self.$wrapper.toggleClass('rtl', self.rtl);
          self.$control.toggleClass('focus', self.isFocused).toggleClass('disabled', self.isDisabled).toggleClass('required', self.isRequired).toggleClass('invalid', self.isInvalid).toggleClass('locked', isLocked).toggleClass('full', isFull).toggleClass('not-full', !isFull).toggleClass('input-active', self.isFocused && !self.isInputHidden).toggleClass('dropdown-active', self.isOpen).toggleClass('has-options', !$.isEmptyObject(self.options)).toggleClass('has-items', self.items.length > 0);
          self.$control_input.data('grow', !isFull && !isLocked)
        },
        /**
		 * Determines whether or not more items can be added
		 * to the control without exceeding the user-defined maximum.
		 *
		 * @returns {boolean}
		 */
        isFull: function () {
          return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems
        },
        /**
		 * Refreshes the original <select> or <input>
		 * element to reflect the current state.
		 */
        updateOriginalInput: function (opts) {
          var i, n, options, label, self = this;
          opts = opts || {};
          if (self.tagType === TAG_SELECT) {
            options = [];
            for (i = 0, n = self.items.length; i < n; i++) {
              label = self.options[self.items[i]][self.settings.labelField] || '';
              options.push('<option value="' + escape_html(self.items[i]) + '" selected="selected">' + escape_html(label) + '</option>')
            }
            if (!options.length && !this.$input.attr('multiple')) {
              options.push('<option value="" selected="selected"></option>')
            }
            self.$input.html(options.join(''))
          } else {
            self.$input.val(self.getValue());
            self.$input.attr('value', self.$input.val())
          }
          if (self.isSetup) {
            if (!opts.silent) {
              self.trigger('change', self.$input.val())
            }
          }
        },
        /**
		 * Shows/hide the input placeholder depending
		 * on if there items in the list already.
		 */
        updatePlaceholder: function () {
          if (!this.settings.placeholder)
            return;
          var $input = this.$control_input;
          if (this.items.length) {
            $input.removeAttr('placeholder')
          } else {
            $input.attr('placeholder', this.settings.placeholder)
          }
          $input.triggerHandler('update', { force: true })
        },
        /**
		 * Shows the autocomplete dropdown containing
		 * the available options.
		 */
        open: function () {
          var self = this;
          if (self.isLocked || self.isOpen || self.settings.mode === 'multi' && self.isFull())
            return;
          self.focus();
          self.isOpen = true;
          self.refreshState();
          self.$dropdown.css({
            visibility: 'hidden',
            display: 'block'
          });
          self.positionDropdown();
          self.$dropdown.css({ visibility: 'visible' });
          self.trigger('dropdown_open', self.$dropdown)
        },
        /**
		 * Closes the autocomplete dropdown menu.
		 */
        close: function () {
          var self = this;
          var trigger = self.isOpen;
          if (self.settings.mode === 'single' && self.items.length) {
            self.hideInput();
            self.$control_input.blur()  // close keyboard on iOS
          }
          self.isOpen = false;
          self.$dropdown.hide();
          self.setActiveOption(null);
          self.refreshState();
          if (trigger)
            self.trigger('dropdown_close', self.$dropdown)
        },
        /**
		 * Calculates and applies the appropriate
		 * position of the dropdown.
		 */
        positionDropdown: function () {
          var $control = this.$control;
          var offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();
          offset.top += $control.outerHeight(true);
          this.$dropdown.css({
            width: $control.outerWidth(),
            top: offset.top,
            left: offset.left
          })
        },
        /**
		 * Resets / clears all selected items
		 * from the control.
		 *
		 * @param {boolean} silent
		 */
        clear: function (silent) {
          var self = this;
          if (!self.items.length)
            return;
          self.$control.children(':not(input)').remove();
          self.items = [];
          self.lastQuery = null;
          self.setCaret(0);
          self.setActiveItem(null);
          self.updatePlaceholder();
          self.updateOriginalInput({ silent: silent });
          self.refreshState();
          self.showInput();
          self.trigger('clear')
        },
        /**
		 * A helper method for inserting an element
		 * at the current caret position.
		 *
		 * @param {object} $el
		 */
        insertAtCaret: function ($el) {
          var caret = Math.min(this.caretPos, this.items.length);
          if (caret === 0) {
            this.$control.prepend($el)
          } else {
            $(this.$control[0].childNodes[caret]).before($el)
          }
          this.setCaret(caret + 1)
        },
        /**
		 * Removes the current selected item(s).
		 *
		 * @param {object} e (optional)
		 * @returns {boolean}
		 */
        deleteSelection: function (e) {
          var i, n, direction, selection, values, caret, option_select, $option_select, $tail;
          var self = this;
          direction = e && e.keyCode === KEY_BACKSPACE ? -1 : 1;
          selection = getSelection(self.$control_input[0]);
          if (self.$activeOption && !self.settings.hideSelected) {
            option_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value')
          }
          // determine items that will be removed
          values = [];
          if (self.$activeItems.length) {
            $tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));
            caret = self.$control.children(':not(input)').index($tail);
            if (direction > 0) {
              caret++
            }
            for (i = 0, n = self.$activeItems.length; i < n; i++) {
              values.push($(self.$activeItems[i]).attr('data-value'))
            }
            if (e) {
              e.preventDefault();
              e.stopPropagation()
            }
          } else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {
            if (direction < 0 && selection.start === 0 && selection.length === 0) {
              values.push(self.items[self.caretPos - 1])
            } else if (direction > 0 && selection.start === self.$control_input.val().length) {
              values.push(self.items[self.caretPos])
            }
          }
          // allow the callback to abort
          if (!values.length || typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false) {
            return false
          }
          // perform removal
          if (typeof caret !== 'undefined') {
            self.setCaret(caret)
          }
          while (values.length) {
            self.removeItem(values.pop())
          }
          self.showInput();
          self.positionDropdown();
          self.refreshOptions(true);
          // select previous option
          if (option_select) {
            $option_select = self.getOption(option_select);
            if ($option_select.length) {
              self.setActiveOption($option_select)
            }
          }
          return true
        },
        /**
		 * Selects the previous / next item (depending
		 * on the `direction` argument).
		 *
		 * > 0 - right
		 * < 0 - left
		 *
		 * @param {int} direction
		 * @param {object} e (optional)
		 */
        advanceSelection: function (direction, e) {
          var tail, selection, idx, valueLength, cursorAtEdge, $tail;
          var self = this;
          if (direction === 0)
            return;
          if (self.rtl)
            direction *= -1;
          tail = direction > 0 ? 'last' : 'first';
          selection = getSelection(self.$control_input[0]);
          if (self.isFocused && !self.isInputHidden) {
            valueLength = self.$control_input.val().length;
            cursorAtEdge = direction < 0 ? selection.start === 0 && selection.length === 0 : selection.start === valueLength;
            if (cursorAtEdge && !valueLength) {
              self.advanceCaret(direction, e)
            }
          } else {
            $tail = self.$control.children('.active:' + tail);
            if ($tail.length) {
              idx = self.$control.children(':not(input)').index($tail);
              self.setActiveItem(null);
              self.setCaret(direction > 0 ? idx + 1 : idx)
            }
          }
        },
        /**
		 * Moves the caret left / right.
		 *
		 * @param {int} direction
		 * @param {object} e (optional)
		 */
        advanceCaret: function (direction, e) {
          var self = this, fn, $adj;
          if (direction === 0)
            return;
          fn = direction > 0 ? 'next' : 'prev';
          if (self.isShiftDown) {
            $adj = self.$control_input[fn]();
            if ($adj.length) {
              self.hideInput();
              self.setActiveItem($adj);
              e && e.preventDefault()
            }
          } else {
            self.setCaret(self.caretPos + direction)
          }
        },
        /**
		 * Moves the caret to the specified index.
		 *
		 * @param {int} i
		 */
        setCaret: function (i) {
          var self = this;
          if (self.settings.mode === 'single') {
            i = self.items.length
          } else {
            i = Math.max(0, Math.min(self.items.length, i))
          }
          if (!self.isPending) {
            // the input must be moved by leaving it in place and moving the
            // siblings, due to the fact that focus cannot be restored once lost
            // on mobile webkit devices
            var j, n, fn, $children, $child;
            $children = self.$control.children(':not(input)');
            for (j = 0, n = $children.length; j < n; j++) {
              $child = $($children[j]).detach();
              if (j < i) {
                self.$control_input.before($child)
              } else {
                self.$control.append($child)
              }
            }
          }
          self.caretPos = i
        },
        /**
		 * Disables user input on the control. Used while
		 * items are being asynchronously created.
		 */
        lock: function () {
          this.close();
          this.isLocked = true;
          this.refreshState()
        },
        /**
		 * Re-enables user input on the control.
		 */
        unlock: function () {
          this.isLocked = false;
          this.refreshState()
        },
        /**
		 * Disables user input on the control completely.
		 * While disabled, it cannot receive focus.
		 */
        disable: function () {
          var self = this;
          self.$input.prop('disabled', true);
          self.$control_input.prop('disabled', true).prop('tabindex', -1);
          self.isDisabled = true;
          self.lock()
        },
        /**
		 * Enables the control so that it can respond
		 * to focus and user input.
		 */
        enable: function () {
          var self = this;
          self.$input.prop('disabled', false);
          self.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);
          self.isDisabled = false;
          self.unlock()
        },
        /**
		 * Completely destroys the control and
		 * unbinds all event listeners so that it can
		 * be garbage collected.
		 */
        destroy: function () {
          var self = this;
          var eventNS = self.eventNS;
          var revertSettings = self.revertSettings;
          self.trigger('destroy');
          self.off();
          self.$wrapper.remove();
          self.$dropdown.remove();
          self.$input.html('').append(revertSettings.$children).removeAttr('tabindex').removeClass('selectized').attr({ tabindex: revertSettings.tabindex }).show();
          self.$control_input.removeData('grow');
          self.$input.removeData('selectize');
          $(window).off(eventNS);
          $(document).off(eventNS);
          $(document.body).off(eventNS);
          delete self.$input[0].selectize
        },
        /**
		 * A helper method for rendering "item" and
		 * "option" templates, given the data.
		 *
		 * @param {string} templateName
		 * @param {object} data
		 * @returns {string}
		 */
        render: function (templateName, data) {
          var value, id, label;
          var html = '';
          var cache = false;
          var self = this;
          var regex_tag = /^[\t \r\n]*<([a-z][a-z0-9\-_]*(?:\:[a-z][a-z0-9\-_]*)?)/i;
          if (templateName === 'option' || templateName === 'item') {
            value = hash_key(data[self.settings.valueField]);
            cache = !!value
          }
          // pull markup from cache if it exists
          if (cache) {
            if (!isset(self.renderCache[templateName])) {
              self.renderCache[templateName] = {}
            }
            if (self.renderCache[templateName].hasOwnProperty(value)) {
              return self.renderCache[templateName][value]
            }
          }
          // render markup
          html = $(self.settings.render[templateName].apply(this, [
            data,
            escape_html
          ]));
          // add mandatory attributes
          if (templateName === 'option' || templateName === 'option_create') {
            html.attr('data-selectable', '')
          } else if (templateName === 'optgroup') {
            id = data[self.settings.optgroupValueField] || '';
            html.attr('data-group', id)
          }
          if (templateName === 'option' || templateName === 'item') {
            html.attr('data-value', value || '')
          }
          // update cache
          if (cache) {
            self.renderCache[templateName][value] = html[0]
          }
          return html[0]
        },
        /**
		 * Clears the render cache for a template. If
		 * no template is given, clears all render
		 * caches.
		 *
		 * @param {string} templateName
		 */
        clearCache: function (templateName) {
          var self = this;
          if (typeof templateName === 'undefined') {
            self.renderCache = {}
          } else {
            delete self.renderCache[templateName]
          }
        },
        /**
		 * Determines whether or not to display the
		 * create item prompt, given a user input.
		 *
		 * @param {string} input
		 * @return {boolean}
		 */
        canCreate: function (input) {
          var self = this;
          if (!self.settings.create)
            return false;
          var filter = self.settings.createFilter;
          return input.length && (typeof filter !== 'function' || filter.apply(self, [input])) && (typeof filter !== 'string' || new RegExp(filter).test(input)) && (!(filter instanceof RegExp) || filter.test(input))
        }
      });
      Selectize.count = 0;
      Selectize.defaults = {
        options: [],
        optgroups: [],
        plugins: [],
        delimiter: ',',
        splitOn: null,
        // regexp or string for splitting up values from a paste command
        persist: true,
        diacritics: true,
        create: false,
        createOnBlur: false,
        createFilter: null,
        highlight: true,
        openOnFocus: true,
        maxOptions: 1000,
        maxItems: null,
        hideSelected: null,
        addPrecedence: false,
        selectOnTab: false,
        preload: false,
        allowEmptyOption: false,
        closeAfterSelect: false,
        scrollDuration: 60,
        loadThrottle: 300,
        loadingClass: 'loading',
        dataAttr: 'data-data',
        optgroupField: 'optgroup',
        valueField: 'value',
        labelField: 'text',
        optgroupLabelField: 'label',
        optgroupValueField: 'value',
        lockOptgroupOrder: false,
        sortField: '$order',
        searchField: ['text'],
        searchConjunction: 'and',
        mode: null,
        wrapperClass: 'selectize-control',
        inputClass: 'selectize-input',
        dropdownClass: 'selectize-dropdown',
        dropdownContentClass: 'selectize-dropdown-content',
        dropdownParent: null,
        copyClassesToDropdown: true,
        /*
		load                 : null, // function(query, callback) { ... }
		score                : null, // function(search) { ... }
		onInitialize         : null, // function() { ... }
		onChange             : null, // function(value) { ... }
		onItemAdd            : null, // function(value, $item) { ... }
		onItemRemove         : null, // function(value) { ... }
		onClear              : null, // function() { ... }
		onOptionAdd          : null, // function(value, data) { ... }
		onOptionRemove       : null, // function(value) { ... }
		onOptionClear        : null, // function() { ... }
		onOptionGroupAdd     : null, // function(id, data) { ... }
		onOptionGroupRemove  : null, // function(id) { ... }
		onOptionGroupClear   : null, // function() { ... }
		onDropdownOpen       : null, // function($dropdown) { ... }
		onDropdownClose      : null, // function($dropdown) { ... }
		onType               : null, // function(str) { ... }
		onDelete             : null, // function(values) { ... }
		*/
        render: {}
      };
      $.fn.selectize = function (settings_user) {
        var defaults = $.fn.selectize.defaults;
        var settings = $.extend({}, defaults, settings_user);
        var attr_data = settings.dataAttr;
        var field_label = settings.labelField;
        var field_value = settings.valueField;
        var field_optgroup = settings.optgroupField;
        var field_optgroup_label = settings.optgroupLabelField;
        var field_optgroup_value = settings.optgroupValueField;
        /**
		 * Initializes selectize from a <input type="text"> element.
		 *
		 * @param {object} $input
		 * @param {object} settings_element
		 */
        var init_textbox = function ($input, settings_element) {
          var i, n, values, option;
          var data_raw = $input.attr(attr_data);
          if (!data_raw) {
            var value = $.trim($input.val() || '');
            if (!settings.allowEmptyOption && !value.length)
              return;
            values = value.split(settings.delimiter);
            for (i = 0, n = values.length; i < n; i++) {
              option = {};
              option[field_label] = values[i];
              option[field_value] = values[i];
              settings_element.options.push(option)
            }
            settings_element.items = values
          } else {
            settings_element.options = JSON.parse(data_raw);
            for (i = 0, n = settings_element.options.length; i < n; i++) {
              settings_element.items.push(settings_element.options[i][field_value])
            }
          }
        };
        /**
		 * Initializes selectize from a <select> element.
		 *
		 * @param {object} $input
		 * @param {object} settings_element
		 */
        var init_select = function ($input, settings_element) {
          var i, n, tagName, $children, order = 0;
          var options = settings_element.options;
          var optionsMap = {};
          var readData = function ($el) {
            var data = attr_data && $el.attr(attr_data);
            if (typeof data === 'string' && data.length) {
              return JSON.parse(data)
            }
            return null
          };
          var addOption = function ($option, group) {
            $option = $($option);
            var value = hash_key($option.val());
            if (!value && !settings.allowEmptyOption)
              return;
            // if the option already exists, it's probably been
            // duplicated in another optgroup. in this case, push
            // the current group to the "optgroup" property on the
            // existing option so that it's rendered in both places.
            if (optionsMap.hasOwnProperty(value)) {
              if (group) {
                var arr = optionsMap[value][field_optgroup];
                if (!arr) {
                  optionsMap[value][field_optgroup] = group
                } else if (!$.isArray(arr)) {
                  optionsMap[value][field_optgroup] = [
                    arr,
                    group
                  ]
                } else {
                  arr.push(group)
                }
              }
              return
            }
            var option = readData($option) || {};
            option[field_label] = option[field_label] || $option.text();
            option[field_value] = option[field_value] || value;
            option[field_optgroup] = option[field_optgroup] || group;
            optionsMap[value] = option;
            options.push(option);
            if ($option.is(':selected')) {
              settings_element.items.push(value)
            }
          };
          var addGroup = function ($optgroup) {
            var i, n, id, optgroup, $options;
            $optgroup = $($optgroup);
            id = $optgroup.attr('label');
            if (id) {
              optgroup = readData($optgroup) || {};
              optgroup[field_optgroup_label] = id;
              optgroup[field_optgroup_value] = id;
              settings_element.optgroups.push(optgroup)
            }
            $options = $('option', $optgroup);
            for (i = 0, n = $options.length; i < n; i++) {
              addOption($options[i], id)
            }
          };
          settings_element.maxItems = $input.attr('multiple') ? null : 1;
          $children = $input.children();
          for (i = 0, n = $children.length; i < n; i++) {
            tagName = $children[i].tagName.toLowerCase();
            if (tagName === 'optgroup') {
              addGroup($children[i])
            } else if (tagName === 'option') {
              addOption($children[i])
            }
          }
        };
        return this.each(function () {
          if (this.selectize)
            return;
          var instance;
          var $input = $(this);
          var tag_name = this.tagName.toLowerCase();
          var placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');
          if (!placeholder && !settings.allowEmptyOption) {
            placeholder = $input.children('option[value=""]').text()
          }
          var settings_element = {
            'placeholder': placeholder,
            'options': [],
            'optgroups': [],
            'items': []
          };
          if (tag_name === 'select') {
            init_select($input, settings_element)
          } else {
            init_textbox($input, settings_element)
          }
          instance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user))
        })
      };
      $.fn.selectize.defaults = Selectize.defaults;
      $.fn.selectize.support = { validity: SUPPORTS_VALIDITY_API };
      Selectize.define('drag_drop', function (options) {
        if (!$.fn.sortable)
          throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');
        if (this.settings.mode !== 'multi')
          return;
        var self = this;
        self.lock = function () {
          var original = self.lock;
          return function () {
            var sortable = self.$control.data('sortable');
            if (sortable)
              sortable.disable();
            return original.apply(self, arguments)
          }
        }();
        self.unlock = function () {
          var original = self.unlock;
          return function () {
            var sortable = self.$control.data('sortable');
            if (sortable)
              sortable.enable();
            return original.apply(self, arguments)
          }
        }();
        self.setup = function () {
          var original = self.setup;
          return function () {
            original.apply(this, arguments);
            var $control = self.$control.sortable({
              items: '[data-value]',
              forcePlaceholderSize: true,
              disabled: self.isLocked,
              start: function (e, ui) {
                ui.placeholder.css('width', ui.helper.css('width'));
                $control.css({ overflow: 'visible' })
              },
              stop: function () {
                $control.css({ overflow: 'hidden' });
                var active = self.$activeItems ? self.$activeItems.slice() : null;
                var values = [];
                $control.children('[data-value]').each(function () {
                  values.push($(this).attr('data-value'))
                });
                self.setValue(values);
                self.setActiveItem(active)
              }
            })
          }
        }()
      });
      Selectize.define('dropdown_header', function (options) {
        var self = this;
        options = $.extend({
          title: 'Untitled',
          headerClass: 'selectize-dropdown-header',
          titleRowClass: 'selectize-dropdown-header-title',
          labelClass: 'selectize-dropdown-header-label',
          closeClass: 'selectize-dropdown-header-close',
          html: function (data) {
            return '<div class="' + data.headerClass + '">' + '<div class="' + data.titleRowClass + '">' + '<span class="' + data.labelClass + '">' + data.title + '</span>' + '<a href="javascript:void(0)" class="' + data.closeClass + '">&times;</a>' + '</div>' + '</div>'
          }
        }, options);
        self.setup = function () {
          var original = self.setup;
          return function () {
            original.apply(self, arguments);
            self.$dropdown_header = $(options.html(options));
            self.$dropdown.prepend(self.$dropdown_header)
          }
        }()
      });
      Selectize.define('optgroup_columns', function (options) {
        var self = this;
        options = $.extend({
          equalizeWidth: true,
          equalizeHeight: true
        }, options);
        this.getAdjacentOption = function ($option, direction) {
          var $options = $option.closest('[data-group]').find('[data-selectable]');
          var index = $options.index($option) + direction;
          return index >= 0 && index < $options.length ? $options.eq(index) : $()
        };
        this.onKeyDown = function () {
          var original = self.onKeyDown;
          return function (e) {
            var index, $option, $options, $optgroup;
            if (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {
              self.ignoreHover = true;
              $optgroup = this.$activeOption.closest('[data-group]');
              index = $optgroup.find('[data-selectable]').index(this.$activeOption);
              if (e.keyCode === KEY_LEFT) {
                $optgroup = $optgroup.prev('[data-group]')
              } else {
                $optgroup = $optgroup.next('[data-group]')
              }
              $options = $optgroup.find('[data-selectable]');
              $option = $options.eq(Math.min($options.length - 1, index));
              if ($option.length) {
                this.setActiveOption($option)
              }
              return
            }
            return original.apply(this, arguments)
          }
        }();
        var getScrollbarWidth = function () {
          var div;
          var width = getScrollbarWidth.width;
          var doc = document;
          if (typeof width === 'undefined') {
            div = doc.createElement('div');
            div.innerHTML = '<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>';
            div = div.firstChild;
            doc.body.appendChild(div);
            width = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;
            doc.body.removeChild(div)
          }
          return width
        };
        var equalizeSizes = function () {
          var i, n, height_max, width, width_last, width_parent, $optgroups;
          $optgroups = $('[data-group]', self.$dropdown_content);
          n = $optgroups.length;
          if (!n || !self.$dropdown_content.width())
            return;
          if (options.equalizeHeight) {
            height_max = 0;
            for (i = 0; i < n; i++) {
              height_max = Math.max(height_max, $optgroups.eq(i).height())
            }
            $optgroups.css({ height: height_max })
          }
          if (options.equalizeWidth) {
            width_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();
            width = Math.round(width_parent / n);
            $optgroups.css({ width: width });
            if (n > 1) {
              width_last = width_parent - width * (n - 1);
              $optgroups.eq(n - 1).css({ width: width_last })
            }
          }
        };
        if (options.equalizeHeight || options.equalizeWidth) {
          hook.after(this, 'positionDropdown', equalizeSizes);
          hook.after(this, 'refreshOptions', equalizeSizes)
        }
      });
      Selectize.define('remove_button', function (options) {
        options = $.extend({
          label: '&times;',
          title: 'Remove',
          className: 'remove',
          append: true
        }, options);
        var singleClose = function (thisRef, options) {
          options.className = 'remove-single';
          var self = thisRef;
          var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
          /**
				 * Appends an element as a child (with raw HTML).
				 *
				 * @param {string} html_container
				 * @param {string} html_element
				 * @return {string}
				 */
          var append = function (html_container, html_element) {
            return html_container + html_element
          };
          thisRef.setup = function () {
            var original = self.setup;
            return function () {
              // override the item rendering method to add the button to each
              if (options.append) {
                var id = $(self.$input.context).attr('id');
                var selectizer = $('#' + id);
                var render_item = self.settings.render.item;
                self.settings.render.item = function (data) {
                  return append(render_item.apply(thisRef, arguments), html)
                }
              }
              original.apply(thisRef, arguments);
              // add event listener
              thisRef.$control.on('click', '.' + options.className, function (e) {
                e.preventDefault();
                if (self.isLocked)
                  return;
                self.clear()
              })
            }
          }()
        };
        var multiClose = function (thisRef, options) {
          var self = thisRef;
          var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
          /**
				 * Appends an element as a child (with raw HTML).
				 *
				 * @param {string} html_container
				 * @param {string} html_element
				 * @return {string}
				 */
          var append = function (html_container, html_element) {
            var pos = html_container.search(/(<\/[^>]+>\s*)$/);
            return html_container.substring(0, pos) + html_element + html_container.substring(pos)
          };
          thisRef.setup = function () {
            var original = self.setup;
            return function () {
              // override the item rendering method to add the button to each
              if (options.append) {
                var render_item = self.settings.render.item;
                self.settings.render.item = function (data) {
                  return append(render_item.apply(thisRef, arguments), html)
                }
              }
              original.apply(thisRef, arguments);
              // add event listener
              thisRef.$control.on('click', '.' + options.className, function (e) {
                e.preventDefault();
                if (self.isLocked)
                  return;
                var $item = $(e.currentTarget).parent();
                self.setActiveItem($item);
                if (self.deleteSelection()) {
                  self.setCaret(self.items.length)
                }
              })
            }
          }()
        };
        if (this.settings.mode === 'single') {
          singleClose(this, options);
          return
        } else {
          multiClose(this, options)
        }
      });
      Selectize.define('restore_on_backspace', function (options) {
        var self = this;
        options.text = options.text || function (option) {
          return option[this.settings.labelField]
        };
        this.onKeyDown = function () {
          var original = self.onKeyDown;
          return function (e) {
            var index, option;
            if (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {
              index = this.caretPos - 1;
              if (index >= 0 && index < this.items.length) {
                option = this.options[this.items[index]];
                if (this.deleteSelection(e)) {
                  this.setTextboxValue(options.text.apply(this, [option]));
                  this.refreshOptions(true)
                }
                e.preventDefault();
                return
              }
            }
            return original.apply(this, arguments)
          }
        }()
      });
      return Selectize
    }))
  });
  // source: node_modules/selectize/node_modules/sifter/sifter.js
  rqzt.define('sifter/sifter', function (module, exports, __dirname, __filename, process) {
    /**
 * sifter.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        root.Sifter = factory()
      }
    }(this, function () {
      /**
	 * Textually searches arrays and hashes of objects
	 * by property (or multiple properties). Designed
	 * specifically for autocomplete.
	 *
	 * @constructor
	 * @param {array|object} items
	 * @param {object} items
	 */
      var Sifter = function (items, settings) {
        this.items = items;
        this.settings = settings || { diacritics: true }
      };
      /**
	 * Splits a search string into an array of individual
	 * regexps to be used to match results.
	 *
	 * @param {string} query
	 * @returns {array}
	 */
      Sifter.prototype.tokenize = function (query) {
        query = trim(String(query || '').toLowerCase());
        if (!query || !query.length)
          return [];
        var i, n, regex, letter;
        var tokens = [];
        var words = query.split(/ +/);
        for (i = 0, n = words.length; i < n; i++) {
          regex = escape_regex(words[i]);
          if (this.settings.diacritics) {
            for (letter in DIACRITICS) {
              if (DIACRITICS.hasOwnProperty(letter)) {
                regex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter])
              }
            }
          }
          tokens.push({
            string: words[i],
            regex: new RegExp(regex, 'i')
          })
        }
        return tokens
      };
      /**
	 * Iterates over arrays and hashes.
	 *
	 * ```
	 * this.iterator(this.items, function(item, id) {
	 *    // invoked for each item
	 * });
	 * ```
	 *
	 * @param {array|object} object
	 */
      Sifter.prototype.iterator = function (object, callback) {
        var iterator;
        if (is_array(object)) {
          iterator = Array.prototype.forEach || function (callback) {
            for (var i = 0, n = this.length; i < n; i++) {
              callback(this[i], i, this)
            }
          }
        } else {
          iterator = function (callback) {
            for (var key in this) {
              if (this.hasOwnProperty(key)) {
                callback(this[key], key, this)
              }
            }
          }
        }
        iterator.apply(object, [callback])
      };
      /**
	 * Returns a function to be used to score individual results.
	 *
	 * Good matches will have a higher score than poor matches.
	 * If an item is not a match, 0 will be returned by the function.
	 *
	 * @param {object|string} search
	 * @param {object} options (optional)
	 * @returns {function}
	 */
      Sifter.prototype.getScoreFunction = function (search, options) {
        var self, fields, tokens, token_count, nesting;
        self = this;
        search = self.prepareSearch(search, options);
        tokens = search.tokens;
        fields = search.options.fields;
        token_count = tokens.length;
        nesting = search.options.nesting;
        /**
		 * Calculates how close of a match the
		 * given value is against a search token.
		 *
		 * @param {mixed} value
		 * @param {object} token
		 * @return {number}
		 */
        var scoreValue = function (value, token) {
          var score, pos;
          if (!value)
            return 0;
          value = String(value || '');
          pos = value.search(token.regex);
          if (pos === -1)
            return 0;
          score = token.string.length / value.length;
          if (pos === 0)
            score += 0.5;
          return score
        };
        /**
		 * Calculates the score of an object
		 * against the search query.
		 *
		 * @param {object} token
		 * @param {object} data
		 * @return {number}
		 */
        var scoreObject = function () {
          var field_count = fields.length;
          if (!field_count) {
            return function () {
              return 0
            }
          }
          if (field_count === 1) {
            return function (token, data) {
              return scoreValue(getattr(data, fields[0], nesting), token)
            }
          }
          return function (token, data) {
            for (var i = 0, sum = 0; i < field_count; i++) {
              sum += scoreValue(getattr(data, fields[i], nesting), token)
            }
            return sum / field_count
          }
        }();
        if (!token_count) {
          return function () {
            return 0
          }
        }
        if (token_count === 1) {
          return function (data) {
            return scoreObject(tokens[0], data)
          }
        }
        if (search.options.conjunction === 'and') {
          return function (data) {
            var score;
            for (var i = 0, sum = 0; i < token_count; i++) {
              score = scoreObject(tokens[i], data);
              if (score <= 0)
                return 0;
              sum += score
            }
            return sum / token_count
          }
        } else {
          return function (data) {
            for (var i = 0, sum = 0; i < token_count; i++) {
              sum += scoreObject(tokens[i], data)
            }
            return sum / token_count
          }
        }
      };
      /**
	 * Returns a function that can be used to compare two
	 * results, for sorting purposes. If no sorting should
	 * be performed, `null` will be returned.
	 *
	 * @param {string|object} search
	 * @param {object} options
	 * @return function(a,b)
	 */
      Sifter.prototype.getSortFunction = function (search, options) {
        var i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;
        self = this;
        search = self.prepareSearch(search, options);
        sort = !search.query && options.sort_empty || options.sort;
        /**
		 * Fetches the specified sort field value
		 * from a search result item.
		 *
		 * @param  {string} name
		 * @param  {object} result
		 * @return {mixed}
		 */
        get_field = function (name, result) {
          if (name === '$score')
            return result.score;
          return getattr(self.items[result.id], name, options.nesting)
        };
        // parse options
        fields = [];
        if (sort) {
          for (i = 0, n = sort.length; i < n; i++) {
            if (search.query || sort[i].field !== '$score') {
              fields.push(sort[i])
            }
          }
        }
        // the "$score" field is implied to be the primary
        // sort field, unless it's manually specified
        if (search.query) {
          implicit_score = true;
          for (i = 0, n = fields.length; i < n; i++) {
            if (fields[i].field === '$score') {
              implicit_score = false;
              break
            }
          }
          if (implicit_score) {
            fields.unshift({
              field: '$score',
              direction: 'desc'
            })
          }
        } else {
          for (i = 0, n = fields.length; i < n; i++) {
            if (fields[i].field === '$score') {
              fields.splice(i, 1);
              break
            }
          }
        }
        multipliers = [];
        for (i = 0, n = fields.length; i < n; i++) {
          multipliers.push(fields[i].direction === 'desc' ? -1 : 1)
        }
        // build function
        fields_count = fields.length;
        if (!fields_count) {
          return null
        } else if (fields_count === 1) {
          field = fields[0].field;
          multiplier = multipliers[0];
          return function (a, b) {
            return multiplier * cmp(get_field(field, a), get_field(field, b))
          }
        } else {
          return function (a, b) {
            var i, result, a_value, b_value, field;
            for (i = 0; i < fields_count; i++) {
              field = fields[i].field;
              result = multipliers[i] * cmp(get_field(field, a), get_field(field, b));
              if (result)
                return result
            }
            return 0
          }
        }
      };
      /**
	 * Parses a search query and returns an object
	 * with tokens and fields ready to be populated
	 * with results.
	 *
	 * @param {string} query
	 * @param {object} options
	 * @returns {object}
	 */
      Sifter.prototype.prepareSearch = function (query, options) {
        if (typeof query === 'object')
          return query;
        options = extend({}, options);
        var option_fields = options.fields;
        var option_sort = options.sort;
        var option_sort_empty = options.sort_empty;
        if (option_fields && !is_array(option_fields))
          options.fields = [option_fields];
        if (option_sort && !is_array(option_sort))
          options.sort = [option_sort];
        if (option_sort_empty && !is_array(option_sort_empty))
          options.sort_empty = [option_sort_empty];
        return {
          options: options,
          query: String(query || '').toLowerCase(),
          tokens: this.tokenize(query),
          total: 0,
          items: []
        }
      };
      /**
	 * Searches through all items and returns a sorted array of matches.
	 *
	 * The `options` parameter can contain:
	 *
	 *   - fields {string|array}
	 *   - sort {array}
	 *   - score {function}
	 *   - filter {bool}
	 *   - limit {integer}
	 *
	 * Returns an object containing:
	 *
	 *   - options {object}
	 *   - query {string}
	 *   - tokens {array}
	 *   - total {int}
	 *   - items {array}
	 *
	 * @param {string} query
	 * @param {object} options
	 * @returns {object}
	 */
      Sifter.prototype.search = function (query, options) {
        var self = this, value, score, search, calculateScore;
        var fn_sort;
        var fn_score;
        search = this.prepareSearch(query, options);
        options = search.options;
        query = search.query;
        // generate result scoring function
        fn_score = options.score || self.getScoreFunction(search);
        // perform search and sort
        if (query.length) {
          self.iterator(self.items, function (item, id) {
            score = fn_score(item);
            if (options.filter === false || score > 0) {
              search.items.push({
                'score': score,
                'id': id
              })
            }
          })
        } else {
          self.iterator(self.items, function (item, id) {
            search.items.push({
              'score': 1,
              'id': id
            })
          })
        }
        fn_sort = self.getSortFunction(search, options);
        if (fn_sort)
          search.items.sort(fn_sort);
        // apply limits
        search.total = search.items.length;
        if (typeof options.limit === 'number') {
          search.items = search.items.slice(0, options.limit)
        }
        return search
      };
      // utilities
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      var cmp = function (a, b) {
        if (typeof a === 'number' && typeof b === 'number') {
          return a > b ? 1 : a < b ? -1 : 0
        }
        a = asciifold(String(a || ''));
        b = asciifold(String(b || ''));
        if (a > b)
          return 1;
        if (b > a)
          return -1;
        return 0
      };
      var extend = function (a, b) {
        var i, n, k, object;
        for (i = 1, n = arguments.length; i < n; i++) {
          object = arguments[i];
          if (!object)
            continue;
          for (k in object) {
            if (object.hasOwnProperty(k)) {
              a[k] = object[k]
            }
          }
        }
        return a
      };
      /**
	 * A property getter resolving dot-notation
	 * @param  {Object}  obj     The root object to fetch property on
	 * @param  {String}  name    The optionally dotted property name to fetch
	 * @param  {Boolean} nesting Handle nesting or not
	 * @return {Object}          The resolved property value
	 */
      var getattr = function (obj, name, nesting) {
        if (!obj || !name)
          return;
        if (!nesting)
          return obj[name];
        var names = name.split('.');
        while (names.length && (obj = obj[names.shift()]));
        return obj
      };
      var trim = function (str) {
        return (str + '').replace(/^\s+|\s+$|/g, '')
      };
      var escape_regex = function (str) {
        return (str + '').replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1')
      };
      var is_array = Array.isArray || typeof $ !== 'undefined' && $.isArray || function (object) {
        return Object.prototype.toString.call(object) === '[object Array]'
      };
      var DIACRITICS = {
        'a': '[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]',
        'b': '[b␢βΒB฿𐌁ᛒ]',
        'c': '[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]',
        'd': '[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]',
        'e': '[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]',
        'f': '[fƑƒḞḟ]',
        'g': '[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]',
        'h': '[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]',
        'i': '[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]',
        'j': '[jȷĴĵɈɉʝɟʲ]',
        'k': '[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]',
        'l': '[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]',
        'n': '[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]',
        'o': '[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]',
        'p': '[pṔṕṖṗⱣᵽƤƥᵱ]',
        'q': '[qꝖꝗʠɊɋꝘꝙq̃]',
        'r': '[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]',
        's': '[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]',
        't': '[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]',
        'u': '[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]',
        'v': '[vṼṽṾṿƲʋꝞꝟⱱʋ]',
        'w': '[wẂẃẀẁŴŵẄẅẆẇẈẉ]',
        'x': '[xẌẍẊẋχ]',
        'y': '[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]',
        'z': '[zŹźẐẑŽžŻżẒẓẔẕƵƶ]'
      };
      var asciifold = function () {
        var i, n, k, chunk;
        var foreignletters = '';
        var lookup = {};
        for (k in DIACRITICS) {
          if (DIACRITICS.hasOwnProperty(k)) {
            chunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);
            foreignletters += chunk;
            for (i = 0, n = chunk.length; i < n; i++) {
              lookup[chunk.charAt(i)] = k
            }
          }
        }
        var regexp = new RegExp('[' + foreignletters + ']', 'g');
        return function (str) {
          return str.replace(regexp, function (foreignletter) {
            return lookup[foreignletter]
          }).toLowerCase()
        }
      }();
      // export
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      return Sifter
    }))
  });
  // source: node_modules/selectize/node_modules/microplugin/src/microplugin.js
  rqzt.define('microplugin/src/microplugin', function (module, exports, __dirname, __filename, process) {
    /**
 * microplugin.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        root.MicroPlugin = factory()
      }
    }(this, function () {
      var MicroPlugin = {};
      MicroPlugin.mixin = function (Interface) {
        Interface.plugins = {};
        /**
		 * Initializes the listed plugins (with options).
		 * Acceptable formats:
		 *
		 * List (without options):
		 *   ['a', 'b', 'c']
		 *
		 * List (with options):
		 *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]
		 *
		 * Hash (with options):
		 *   {'a': { ... }, 'b': { ... }, 'c': { ... }}
		 *
		 * @param {mixed} plugins
		 */
        Interface.prototype.initializePlugins = function (plugins) {
          var i, n, key;
          var self = this;
          var queue = [];
          self.plugins = {
            names: [],
            settings: {},
            requested: {},
            loaded: {}
          };
          if (utils.isArray(plugins)) {
            for (i = 0, n = plugins.length; i < n; i++) {
              if (typeof plugins[i] === 'string') {
                queue.push(plugins[i])
              } else {
                self.plugins.settings[plugins[i].name] = plugins[i].options;
                queue.push(plugins[i].name)
              }
            }
          } else if (plugins) {
            for (key in plugins) {
              if (plugins.hasOwnProperty(key)) {
                self.plugins.settings[key] = plugins[key];
                queue.push(key)
              }
            }
          }
          while (queue.length) {
            self.require(queue.shift())
          }
        };
        Interface.prototype.loadPlugin = function (name) {
          var self = this;
          var plugins = self.plugins;
          var plugin = Interface.plugins[name];
          if (!Interface.plugins.hasOwnProperty(name)) {
            throw new Error('Unable to find "' + name + '" plugin')
          }
          plugins.requested[name] = true;
          plugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);
          plugins.names.push(name)
        };
        /**
		 * Initializes a plugin.
		 *
		 * @param {string} name
		 */
        Interface.prototype.require = function (name) {
          var self = this;
          var plugins = self.plugins;
          if (!self.plugins.loaded.hasOwnProperty(name)) {
            if (plugins.requested[name]) {
              throw new Error('Plugin has circular dependency ("' + name + '")')
            }
            self.loadPlugin(name)
          }
          return plugins.loaded[name]
        };
        /**
		 * Registers a plugin.
		 *
		 * @param {string} name
		 * @param {function} fn
		 */
        Interface.define = function (name, fn) {
          Interface.plugins[name] = {
            'name': name,
            'fn': fn
          }
        }
      };
      var utils = {
        isArray: Array.isArray || function (vArg) {
          return Object.prototype.toString.call(vArg) === '[object Array]'
        }
      };
      return MicroPlugin
    }))
  });
  // source: node_modules/hanzo.js/lib/browser.js
  rqzt.define('hanzo.js/lib/browser', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Api, Client;
    if (global.Hanzo == null) {
      global.Hanzo = {}
    }
    Api = rqzt('hanzo.js/lib/api');
    Client = rqzt('hanzo.js/lib/client/xhr');
    Api.CLIENT = Client;
    Api.BLUEPRINTS = rqzt('hanzo.js/lib/blueprints/browser');
    Hanzo.Api = Api;
    Hanzo.Client = Client;
    module.exports = Hanzo  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/hanzo.js/lib/api.js
  rqzt.define('hanzo.js/lib/api', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Api, isFunction, isString, newError, ref, statusOk;
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, isString = ref.isString, newError = ref.newError, statusOk = ref.statusOk;
    module.exports = Api = function () {
      Api.BLUEPRINTS = {};
      Api.CLIENT = null;
      function Api(opts) {
        var blueprints, client, debug, endpoint, k, key, v;
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof Api)) {
          return new Api(opts)
        }
        endpoint = opts.endpoint, debug = opts.debug, key = opts.key, client = opts.client, blueprints = opts.blueprints;
        this.debug = debug;
        if (blueprints == null) {
          blueprints = this.constructor.BLUEPRINTS
        }
        if (client) {
          this.client = client
        } else {
          this.client = new this.constructor.CLIENT({
            debug: debug,
            endpoint: endpoint,
            key: key
          })
        }
        for (k in blueprints) {
          v = blueprints[k];
          this.addBlueprints(k, v)
        }
      }
      Api.prototype.addBlueprints = function (api, blueprints) {
        var bp, fn, name;
        if (this[api] == null) {
          this[api] = {}
        }
        fn = function (_this) {
          return function (name, bp) {
            var method;
            if (isFunction(bp)) {
              return _this[api][name] = function () {
                return bp.apply(_this, arguments)
              }
            }
            if (bp.expects == null) {
              bp.expects = statusOk
            }
            if (bp.method == null) {
              bp.method = 'POST'
            }
            method = function (data, cb) {
              var key;
              key = void 0;
              if (bp.useCustomerToken) {
                key = _this.client.getCustomerToken()
              }
              return _this.client.request(bp, data, key).then(function (res) {
                var ref1, ref2;
                if (((ref1 = res.data) != null ? ref1.error : void 0) != null) {
                  throw newError(data, res)
                }
                if (!bp.expects(res)) {
                  throw newError(data, res)
                }
                if (bp.process != null) {
                  bp.process.call(_this, res)
                }
                return (ref2 = res.data) != null ? ref2 : res.body
              }).callback(cb)
            };
            return _this[api][name] = method
          }
        }(this);
        for (name in blueprints) {
          bp = blueprints[name];
          fn(name, bp)
        }
      };
      Api.prototype.setKey = function (key) {
        return this.client.setKey(key)
      };
      Api.prototype.setCustomerToken = function (key) {
        return this.client.setCustomerToken(key)
      };
      Api.prototype.deleteCustomerToken = function () {
        return this.client.deleteCustomerToken()
      };
      Api.prototype.setStore = function (id) {
        this.storeId = id;
        return this.client.setStore(id)
      };
      return Api
    }()  //# sourceMappingURL=api.js.map
  });
  // source: node_modules/hanzo.js/lib/utils.js
  rqzt.define('hanzo.js/lib/utils', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var updateParam;
    exports.isFunction = function (fn) {
      return typeof fn === 'function'
    };
    exports.isString = function (s) {
      return typeof s === 'string'
    };
    exports.statusOk = function (res) {
      return res.status === 200
    };
    exports.statusCreated = function (res) {
      return res.status === 201
    };
    exports.statusNoContent = function (res) {
      return res.status === 204
    };
    exports.newError = function (data, res, err) {
      var message, ref, ref1, ref2, ref3, ref4;
      if (res == null) {
        res = {}
      }
      message = (ref = res != null ? (ref1 = res.data) != null ? (ref2 = ref1.error) != null ? ref2.message : void 0 : void 0 : void 0) != null ? ref : 'Request failed';
      if (err == null) {
        err = new Error(message);
        err.message = message
      }
      err.req = data;
      err.data = res.data;
      err.responseText = res.data;
      err.status = res.status;
      err.type = (ref3 = res.data) != null ? (ref4 = ref3.error) != null ? ref4.type : void 0 : void 0;
      return err
    };
    updateParam = function (url, key, value) {
      var hash, re, separator;
      re = new RegExp('([?&])' + key + '=.*?(&|#|$)(.*)', 'gi');
      if (re.test(url)) {
        if (value != null) {
          return url.replace(re, '$1' + key + '=' + value + '$2$3')
        } else {
          hash = url.split('#');
          url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        }
      } else {
        if (value != null) {
          separator = url.indexOf('?') !== -1 ? '&' : '?';
          hash = url.split('#');
          url = hash[0] + separator + key + '=' + value;
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        } else {
          return url
        }
      }
    };
    exports.updateQuery = function (url, data) {
      var k, v;
      if (typeof data !== 'object') {
        return url
      }
      for (k in data) {
        v = data[k];
        url = updateParam(url, k, v)
      }
      return url
    }  //# sourceMappingURL=utils.js.map
  });
  // source: node_modules/hanzo.js/lib/client/xhr.js
  rqzt.define('hanzo.js/lib/client/xhr', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Xhr, XhrClient, cookie, isFunction, newError, ref, updateQuery;
    Xhr = rqzt('xhr-promise-es6/lib');
    Xhr.Promise = rqzt('broken/lib');
    cookie = rqzt('js-cookie/src/js.cookie');
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, newError = ref.newError, updateQuery = ref.updateQuery;
    module.exports = XhrClient = function () {
      XhrClient.prototype.debug = false;
      XhrClient.prototype.endpoint = 'https://api.hanzo.io';
      XhrClient.prototype.sessionName = 'hnzo';
      function XhrClient(opts) {
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof XhrClient)) {
          return new XhrClient(opts)
        }
        this.key = opts.key, this.debug = opts.debug;
        if (opts.endpoint) {
          this.setEndpoint(opts.endpoint)
        }
        this.getCustomerToken()
      }
      XhrClient.prototype.setEndpoint = function (endpoint) {
        return this.endpoint = endpoint.replace(/\/$/, '')
      };
      XhrClient.prototype.setStore = function (id) {
        return this.storeId = id
      };
      XhrClient.prototype.setKey = function (key) {
        return this.key = key
      };
      XhrClient.prototype.getKey = function () {
        return this.key || this.constructor.KEY
      };
      XhrClient.prototype.getCustomerToken = function () {
        var session;
        if ((session = cookie.getJSON(this.sessionName)) != null) {
          if (session.customerToken != null) {
            this.customerToken = session.customerToken
          }
        }
        return this.customerToken
      };
      XhrClient.prototype.setCustomerToken = function (key) {
        cookie.set(this.sessionName, { customerToken: key }, { expires: 7 * 24 * 3600 * 1000 });
        return this.customerToken = key
      };
      XhrClient.prototype.deleteCustomerToken = function () {
        cookie.set(this.sessionName, { customerToken: null }, { expires: 7 * 24 * 3600 * 1000 });
        return this.customerToken = null
      };
      XhrClient.prototype.getUrl = function (url, data, key) {
        if (isFunction(url)) {
          url = url.call(this, data)
        }
        return updateQuery(this.endpoint + url, { token: key })
      };
      XhrClient.prototype.request = function (blueprint, data, key) {
        var opts;
        if (data == null) {
          data = {}
        }
        if (key == null) {
          key = this.getKey()
        }
        opts = {
          url: this.getUrl(blueprint.url, data, key),
          method: blueprint.method
        };
        if (blueprint.method !== 'GET') {
          opts.headers = { 'Content-Type': 'application/json' }
        }
        if (blueprint.method === 'GET') {
          opts.url = updateQuery(opts.url, data)
        } else {
          opts.data = JSON.stringify(data)
        }
        if (this.debug) {
          void 0;
          void 0;
          void 0;
          void 0
        }
        return new Xhr().send(opts).then(function (res) {
          if (this.debug) {
            void 0;
            void 0
          }
          res.data = res.responseText;
          return res
        })['catch'](function (res) {
          var err, error, ref1;
          try {
            res.data = (ref1 = res.responseText) != null ? ref1 : JSON.parse(res.xhr.responseText)
          } catch (error) {
            err = error
          }
          err = newError(data, res);
          if (this.debug) {
            void 0;
            void 0;
            void 0
          }
          throw err
        })
      };
      return XhrClient
    }()  //# sourceMappingURL=xhr.js.map
  });
  // source: node_modules/xhr-promise-es6/lib/index.js
  rqzt.define('xhr-promise-es6/lib', function (module, exports, __dirname, __filename, process) {
    /*
 * Copyright 2015 Scott Brady
 * MIT License
 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
 */
    var ParseHeaders, XMLHttpRequestPromise, objectAssign;
    ParseHeaders = rqzt('parse-headers/parse-headers');
    objectAssign = rqzt('object-assign');
    /*
 * Module to wrap an XMLHttpRequest in a promise.
 */
    module.exports = XMLHttpRequestPromise = function () {
      function XMLHttpRequestPromise() {
      }
      XMLHttpRequestPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';
      XMLHttpRequestPromise.Promise = global.Promise;
      /*
   * XMLHttpRequestPromise.send(options) -> Promise
   * - options (Object): URL, method, data, etc.
   *
   * Create the XHR object and wire up event handlers to use a promise.
   */
      XMLHttpRequestPromise.prototype.send = function (options) {
        var defaults;
        if (options == null) {
          options = {}
        }
        defaults = {
          method: 'GET',
          data: null,
          headers: {},
          async: true,
          username: null,
          password: null
        };
        options = objectAssign({}, defaults, options);
        return new this.constructor.Promise(function (_this) {
          return function (resolve, reject) {
            var e, header, ref, value, xhr;
            if (!XMLHttpRequest) {
              _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
              return
            }
            if (typeof options.url !== 'string' || options.url.length === 0) {
              _this._handleError('url', reject, null, 'URL is a required parameter');
              return
            }
            _this._xhr = xhr = new XMLHttpRequest;
            xhr.onload = function () {
              var responseText;
              _this._detachWindowUnload();
              try {
                responseText = _this._getResponseText()
              } catch (_error) {
                _this._handleError('parse', reject, null, 'invalid JSON response');
                return
              }
              return resolve({
                url: _this._getResponseUrl(),
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: responseText,
                headers: _this._getHeaders(),
                xhr: xhr
              })
            };
            xhr.onerror = function () {
              return _this._handleError('error', reject)
            };
            xhr.ontimeout = function () {
              return _this._handleError('timeout', reject)
            };
            xhr.onabort = function () {
              return _this._handleError('abort', reject)
            };
            _this._attachWindowUnload();
            xhr.open(options.method, options.url, options.async, options.username, options.password);
            if (options.data != null && !options.headers['Content-Type']) {
              options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE
            }
            ref = options.headers;
            for (header in ref) {
              value = ref[header];
              xhr.setRequestHeader(header, value)
            }
            try {
              return xhr.send(options.data)
            } catch (_error) {
              e = _error;
              return _this._handleError('send', reject, null, e.toString())
            }
          }
        }(this))
      };
      /*
   * XMLHttpRequestPromise.getXHR() -> XMLHttpRequest
   */
      XMLHttpRequestPromise.prototype.getXHR = function () {
        return this._xhr
      };
      /*
   * XMLHttpRequestPromise._attachWindowUnload()
   *
   * Fix for IE 9 and IE 10
   * Internet Explorer freezes when you close a webpage during an XHR request
   * https://support.microsoft.com/kb/2856746
   *
   */
      XMLHttpRequestPromise.prototype._attachWindowUnload = function () {
        this._unloadHandler = this._handleWindowUnload.bind(this);
        if (window.attachEvent) {
          return window.attachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._detachWindowUnload()
   */
      XMLHttpRequestPromise.prototype._detachWindowUnload = function () {
        if (window.detachEvent) {
          return window.detachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._getHeaders() -> Object
   */
      XMLHttpRequestPromise.prototype._getHeaders = function () {
        return ParseHeaders(this._xhr.getAllResponseHeaders())
      };
      /*
   * XMLHttpRequestPromise._getResponseText() -> Mixed
   *
   * Parses response text JSON if present.
   */
      XMLHttpRequestPromise.prototype._getResponseText = function () {
        var responseText;
        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
        switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '')
        }
        return responseText
      };
      /*
   * XMLHttpRequestPromise._getResponseUrl() -> String
   *
   * Actual response URL after following redirects.
   */
      XMLHttpRequestPromise.prototype._getResponseUrl = function () {
        if (this._xhr.responseURL != null) {
          return this._xhr.responseURL
        }
        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
          return this._xhr.getResponseHeader('X-Request-URL')
        }
        return ''
      };
      /*
   * XMLHttpRequestPromise._handleError(reason, reject, status, statusText)
   * - reason (String)
   * - reject (Function)
   * - status (String)
   * - statusText (String)
   */
      XMLHttpRequestPromise.prototype._handleError = function (reason, reject, status, statusText) {
        this._detachWindowUnload();
        return reject({
          reason: reason,
          status: status || this._xhr.status,
          statusText: statusText || this._xhr.statusText,
          xhr: this._xhr
        })
      };
      /*
   * XMLHttpRequestPromise._handleWindowUnload()
   */
      XMLHttpRequestPromise.prototype._handleWindowUnload = function () {
        return this._xhr.abort()
      };
      return XMLHttpRequestPromise
    }()
  });
  // source: node_modules/parse-headers/parse-headers.js
  rqzt.define('parse-headers/parse-headers', function (module, exports, __dirname, __filename, process) {
    var trim = rqzt('trim'), forEach = rqzt('for-each'), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]'
      };
    module.exports = function (headers) {
      if (!headers)
        return {};
      var result = {};
      forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [
            result[key],
            value
          ]
        }
      });
      return result
    }
  });
  // source: node_modules/trim/index.js
  rqzt.define('trim', function (module, exports, __dirname, __filename, process) {
    exports = module.exports = trim;
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function (str) {
      return str.replace(/^\s*/, '')
    };
    exports.right = function (str) {
      return str.replace(/\s*$/, '')
    }
  });
  // source: node_modules/for-each/index.js
  rqzt.define('for-each', function (module, exports, __dirname, __filename, process) {
    var isFunction = rqzt('is-function');
    module.exports = forEach;
    var toString = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
      }
      if (arguments.length < 3) {
        context = this
      }
      if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
      else if (typeof list === 'string')
        forEachString(list, iterator, context);
      else
        forEachObject(list, iterator, context)
    }
    function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array)
        }
      }
    }
    function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
      }
    }
    function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object)
        }
      }
    }
  });
  // source: node_modules/is-function/index.js
  rqzt.define('is-function', function (module, exports, __dirname, __filename, process) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/object-assign/index.js
  rqzt.define('object-assign', function (module, exports, __dirname, __filename, process) {
    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/
    'use strict';
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined')
      }
      return Object(val)
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false
        }
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc');
        // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2['_' + String.fromCharCode(i)] = i
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
          return test2[n]
        });
        if (order2.join('') !== '0123456789') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
          test3[letter] = letter
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
          return false
        }
        return true
      } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key]
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]]
            }
          }
        }
      }
      return to
    }
  });
  // source: node_modules/broken/lib/index.js
  rqzt.define('broken/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Promise, PromiseInspection;
    Promise = rqzt('zousan/zousan-min');
    Promise.suppressUncaughtRejectionError = false;
    PromiseInspection = function () {
      function PromiseInspection(arg) {
        this.state = arg.state, this.value = arg.value, this.reason = arg.reason
      }
      PromiseInspection.prototype.isFulfilled = function () {
        return this.state === 'fulfilled'
      };
      PromiseInspection.prototype.isRejected = function () {
        return this.state === 'rejected'
      };
      return PromiseInspection
    }();
    Promise.reflect = function (promise) {
      return new Promise(function (resolve, reject) {
        return promise.then(function (value) {
          return resolve(new PromiseInspection({
            state: 'fulfilled',
            value: value
          }))
        })['catch'](function (err) {
          return resolve(new PromiseInspection({
            state: 'rejected',
            reason: err
          }))
        })
      })
    };
    Promise.settle = function (promises) {
      return Promise.all(promises.map(Promise.reflect))
    };
    Promise.prototype.callback = function (cb) {
      if (typeof cb === 'function') {
        this.then(function (value) {
          return cb(null, value)
        });
        this['catch'](function (error) {
          return cb(error, null)
        })
      }
      return this
    };
    module.exports = Promise  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/zousan/zousan-min.js
  rqzt.define('zousan/zousan-min', function (module, exports, __dirname, __filename, process) {
    !function (t) {
      'use strict';
      function e(t) {
        if (t) {
          var e = this;
          t(function (t) {
            e.resolve(t)
          }, function (t) {
            e.reject(t)
          })
        }
      }
      function n(t, e) {
        if ('function' == typeof t.y)
          try {
            var n = t.y.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.resolve(e)
      }
      function o(t, e) {
        if ('function' == typeof t.n)
          try {
            var n = t.n.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.reject(e)
      }
      var r, i, c = 'fulfilled', u = 'rejected', s = 'undefined', f = function () {
          function t() {
            for (; e.length - n;)
              e[n](), e[n++] = i, n == o && (e.splice(0, o), n = 0)
          }
          var e = [], n = 0, o = 1024, r = function () {
              if (typeof MutationObserver !== s) {
                var e = document.createElement('div'), n = new MutationObserver(t);
                return n.observe(e, { attributes: !0 }), function () {
                  e.setAttribute('a', 0)
                }
              }
              return typeof setImmediate !== s ? function () {
                setImmediate(t)
              } : function () {
                setTimeout(t, 0)
              }
            }();
          return function (t) {
            e.push(t), e.length - n == 1 && r()
          }
        }();
      e.prototype = {
        resolve: function (t) {
          if (this.state === r) {
            if (t === this)
              return this.reject(new TypeError('Attempt to resolve promise with self'));
            var e = this;
            if (t && ('function' == typeof t || 'object' == typeof t))
              try {
                var o = !0, i = t.then;
                if ('function' == typeof i)
                  return void i.call(t, function (t) {
                    o && (o = !1, e.resolve(t))
                  }, function (t) {
                    o && (o = !1, e.reject(t))
                  })
              } catch (u) {
                return void (o && this.reject(u))
              }
            this.state = c, this.v = t, e.c && f(function () {
              for (var o = 0, r = e.c.length; r > o; o++)
                n(e.c[o], t)
            })
          }
        },
        reject: function (t) {
          if (this.state === r) {
            this.state = u, this.v = t;
            var n = this.c;
            n ? f(function () {
              for (var e = 0, r = n.length; r > e; e++)
                o(n[e], t)
            }) : e.suppressUncaughtRejectionError || void 0
          }
        },
        then: function (t, i) {
          var u = new e, s = {
              y: t,
              n: i,
              p: u
            };
          if (this.state === r)
            this.c ? this.c.push(s) : this.c = [s];
          else {
            var l = this.state, a = this.v;
            f(function () {
              l === c ? n(s, a) : o(s, a)
            })
          }
          return u
        },
        'catch': function (t) {
          return this.then(null, t)
        },
        'finally': function (t) {
          return this.then(t, t)
        },
        timeout: function (t, n) {
          n = n || 'Timeout';
          var o = this;
          return new e(function (e, r) {
            setTimeout(function () {
              r(Error(n))
            }, t), o.then(function (t) {
              e(t)
            }, function (t) {
              r(t)
            })
          })
        }
      }, e.resolve = function (t) {
        var n = new e;
        return n.resolve(t), n
      }, e.reject = function (t) {
        var n = new e;
        return n.reject(t), n
      }, e.all = function (t) {
        function n(n, c) {
          'function' != typeof n.then && (n = e.resolve(n)), n.then(function (e) {
            o[c] = e, r++, r == t.length && i.resolve(o)
          }, function (t) {
            i.reject(t)
          })
        }
        for (var o = [], r = 0, i = new e, c = 0; c < t.length; c++)
          n(t[c], c);
        return t.length || i.resolve(o), i
      }, typeof module != s && module.exports && (module.exports = e), t.Zousan = e, e.soon = f
    }('undefined' != typeof global ? global : this)
  });
  // source: node_modules/hanzo.js/node_modules/js-cookie/src/js.cookie.js
  rqzt.define('js-cookie/src/js.cookie', function (module, exports, __dirname, __filename, process) {
    /*!
 * JavaScript Cookie v2.1.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        var _OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function () {
          window.Cookies = _OldCookies;
          return api
        }
      }
    }(function () {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key]
          }
        }
        return result
      }
      function init(converter) {
        function api(key, value, attributes) {
          var result;
          // Write
          if (arguments.length > 1) {
            attributes = extend({ path: '/' }, api.defaults, attributes);
            if (typeof attributes.expires === 'number') {
              var expires = new Date;
              expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 86400000);
              attributes.expires = expires
            }
            try {
              result = JSON.stringify(value);
              if (/^[\{\[]/.test(result)) {
                value = result
              }
            } catch (e) {
            }
            if (!converter.write) {
              value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
            } else {
              value = converter.write(value, key)
            }
            key = encodeURIComponent(String(key));
            key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
            key = key.replace(/[\(\)]/g, escape);
            return document.cookie = [
              key,
              '=',
              value,
              attributes.expires && '; expires=' + attributes.expires.toUTCString(),
              // use expires attribute, max-age is not supported by IE
              attributes.path && '; path=' + attributes.path,
              attributes.domain && '; domain=' + attributes.domain,
              attributes.secure ? '; secure' : ''
            ].join('')
          }
          // Read
          if (!key) {
            result = {}
          }
          // To prevent the for loop in the first place assign an empty array
          // in case there are no cookies at all. Also prevents odd result when
          // calling "get()"
          var cookies = document.cookie ? document.cookie.split('; ') : [];
          var rdecode = /(%[0-9A-Z]{2})+/g;
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split('=');
            var name = parts[0].replace(rdecode, decodeURIComponent);
            var cookie = parts.slice(1).join('=');
            if (cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1)
            }
            try {
              cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
              if (this.json) {
                try {
                  cookie = JSON.parse(cookie)
                } catch (e) {
                }
              }
              if (key === name) {
                result = cookie;
                break
              }
              if (!key) {
                result[name] = cookie
              }
            } catch (e) {
            }
          }
          return result
        }
        api.get = api.set = api;
        api.getJSON = function () {
          return api.apply({ json: true }, [].slice.call(arguments))
        };
        api.defaults = {};
        api.remove = function (key, attributes) {
          api(key, '', extend(attributes, { expires: -1 }))
        };
        api.withConverter = init;
        return api
      }
      return init(function () {
      })
    }))
  });
  // source: node_modules/hanzo.js/lib/blueprints/browser.js
  rqzt.define('hanzo.js/lib/blueprints/browser', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var blueprints, byId, createBlueprint, fn, i, isFunction, len, model, models, ref, ref1, statusCreated, statusNoContent, statusOk, storePrefixed;
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, statusCreated = ref.statusCreated, statusNoContent = ref.statusNoContent, statusOk = ref.statusOk;
    ref1 = rqzt('hanzo.js/lib/blueprints/url'), byId = ref1.byId, storePrefixed = ref1.storePrefixed;
    createBlueprint = function (name) {
      var endpoint;
      endpoint = '/' + name;
      return {
        list: {
          url: endpoint,
          method: 'GET',
          expects: statusOk
        },
        get: {
          url: byId(name),
          method: 'GET',
          expects: statusOk
        }
      }
    };
    blueprints = {
      account: {
        get: {
          url: '/account',
          method: 'GET',
          expects: statusOk,
          useCustomerToken: true
        },
        update: {
          url: '/account',
          method: 'PATCH',
          expects: statusOk,
          useCustomerToken: true
        },
        exists: {
          url: function (x) {
            var ref2, ref3, ref4;
            return '/account/exists/' + ((ref2 = (ref3 = (ref4 = x.email) != null ? ref4 : x.username) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk,
          process: function (res) {
            return res.data.exists
          }
        },
        create: {
          url: '/account/create',
          method: 'POST',
          expects: statusCreated
        },
        enable: {
          url: function (x) {
            var ref2;
            return '/account/enable/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk
        },
        login: {
          url: '/account/login',
          method: 'POST',
          expects: statusOk,
          process: function (res) {
            this.setCustomerToken(res.data.token);
            return res
          }
        },
        logout: function () {
          return this.deleteCustomerToken()
        },
        reset: {
          url: '/account/reset',
          method: 'POST',
          expects: statusOk,
          useCustomerToken: true
        },
        updateOrder: {
          url: function (x) {
            var ref2, ref3;
            return '/account/order/' + ((ref2 = (ref3 = x.orderId) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'PATCH',
          expects: statusOk,
          useCustomerToken: true
        },
        confirm: {
          url: function (x) {
            var ref2;
            return '/account/confirm/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk,
          useCustomerToken: true
        }
      },
      cart: {
        create: {
          url: '/cart',
          method: 'POST',
          expects: statusCreated
        },
        update: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'PATCH',
          expects: statusOk
        },
        discard: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x) + '/discard'
          },
          method: 'POST',
          expects: statusOk
        },
        set: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x) + '/set'
          },
          method: 'POST',
          expects: statusOk
        }
      },
      review: {
        create: {
          url: '/review',
          method: 'POST',
          expects: statusCreated
        },
        get: {
          url: function (x) {
            var ref2;
            return '/review/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk
        }
      },
      checkout: {
        authorize: {
          url: storePrefixed('/checkout/authorize'),
          method: 'POST',
          expects: statusOk
        },
        capture: {
          url: storePrefixed(function (x) {
            var ref2;
            return '/checkout/capture/' + ((ref2 = x.orderId) != null ? ref2 : x)
          }),
          method: 'POST',
          expects: statusOk
        },
        charge: {
          url: storePrefixed('/checkout/charge'),
          method: 'POST',
          expects: statusOk
        },
        paypal: {
          url: storePrefixed('/checkout/paypal'),
          method: 'POST',
          expects: statusOk
        }
      },
      referrer: {
        create: {
          url: '/referrer',
          method: 'POST',
          expects: statusCreated
        },
        get: {
          url: function (x) {
            var ref2;
            return '/referrer/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk
        }
      }
    };
    models = [
      'collection',
      'coupon',
      'product',
      'variant'
    ];
    fn = function (model) {
      return blueprints[model] = createBlueprint(model)
    };
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      fn(model)
    }
    module.exports = blueprints  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/hanzo.js/lib/blueprints/url.js
  rqzt.define('hanzo.js/lib/blueprints/url', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var isFunction, sp;
    isFunction = rqzt('hanzo.js/lib/utils').isFunction;
    exports.storePrefixed = sp = function (u) {
      return function (x) {
        var url;
        if (isFunction(u)) {
          url = u(x)
        } else {
          url = u
        }
        if (this.storeId != null) {
          return '/store/' + this.storeId + url
        } else {
          return url
        }
      }
    };
    exports.byId = function (name) {
      switch (name) {
      case 'coupon':
        return sp(function (x) {
          var ref;
          return '/coupon/' + ((ref = x.code) != null ? ref : x)
        });
      case 'collection':
        return sp(function (x) {
          var ref;
          return '/collection/' + ((ref = x.slug) != null ? ref : x)
        });
      case 'product':
        return sp(function (x) {
          var ref, ref1;
          return '/product/' + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x)
        });
      case 'variant':
        return sp(function (x) {
          var ref, ref1;
          return '/variant/' + ((ref = (ref1 = x.id) != null ? ref1 : x.sku) != null ? ref : x)
        });
      case 'site':
        return function (x) {
          var ref, ref1;
          return '/site/' + ((ref = (ref1 = x.id) != null ? ref1 : x.name) != null ? ref : x)
        };
      default:
        return function (x) {
          var ref;
          return '/' + name + '/' + ((ref = x.id) != null ? ref : x)
        }
      }
    }  //# sourceMappingURL=url.js.map
  });
  // source: src/blueprints.coffee
  rqzt.define('./blueprints', function (module, exports, __dirname, __filename, process) {
    var blueprints, byId, createBlueprint, fn, i, len, model, models, sp;
    sp = function (u) {
      return function (x) {
        var url;
        if (isFunction(u)) {
          url = u(x)
        } else {
          url = u
        }
        if (this.storeId != null) {
          return '/store/' + this.storeId + url
        } else {
          return url
        }
      }
    };
    byId = function (name) {
      switch (name) {
      case 'coupon':
        return sp(function (x) {
          var ref;
          return '/coupon/' + ((ref = x.code) != null ? ref : x)
        });
      case 'product':
        return sp(function (x) {
          var ref, ref1;
          return '/product/' + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x)
        });
      case 'user':
        return sp(function (x) {
          var ref, ref1;
          return '/user/' + ((ref = (ref1 = x.id) != null ? ref1 : x.email) != null ? ref : x)
        });
      default:
        return function (x) {
          var ref;
          return '/' + name + '/' + ((ref = x.id) != null ? ref : x)
        }
      }
    };
    createBlueprint = function (name) {
      var endpoint;
      endpoint = '/' + name;
      return {
        list: {
          url: endpoint,
          method: 'GET'
        },
        get: {
          url: byId(name),
          method: 'GET'
        },
        create: {
          url: byId(name),
          method: 'POST'
        },
        update: {
          url: byId(name),
          method: 'PATCH'
        }
      }
    };
    blueprints = {
      oauth: {
        auth: {
          method: 'POST',
          url: '/auth'
        }
      },
      account: {
        organization: {
          method: 'GET',
          url: '/_/account/organizations'
        }
      },
      dashv2: {
        login: {
          method: 'POST',
          url: '/dashv2/login'
        }
      },
      counter: {
        search: {
          method: 'POST',
          url: '/counter'
        }
      }
    };
    models = ['user'];
    fn = function (model) {
      return blueprints[model] = createBlueprint(model)
    };
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      fn(model)
    }
    module.exports = blueprints
  });
  // source: node_modules/riot/riot.js
  rqzt.define('riot/riot', function (module, exports, __dirname, __filename, process) {
    /* Riot v3.3.0, @license MIT */
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.riot = global.riot || {})
    }(this, function (exports) {
      'use strict';
      var __TAGS_CACHE = [];
      var __TAG_IMPL = {};
      var GLOBAL_MIXIN = '__global_mixin';
      var ATTRS_PREFIX = 'riot-';
      var REF_DIRECTIVES = [
        'ref',
        'data-ref'
      ];
      var IS_DIRECTIVE = 'data-is';
      var CONDITIONAL_DIRECTIVE = 'if';
      var LOOP_DIRECTIVE = 'each';
      var LOOP_NO_REORDER_DIRECTIVE = 'no-reorder';
      var SHOW_DIRECTIVE = 'show';
      var HIDE_DIRECTIVE = 'hide';
      var T_STRING = 'string';
      var T_OBJECT = 'object';
      var T_UNDEF = 'undefined';
      var T_FUNCTION = 'function';
      var XLINK_NS = 'http://www.w3.org/1999/xlink';
      var XLINK_REGEX = /^xlink:(\w+)/;
      var WIN = typeof window === T_UNDEF ? undefined : window;
      var RE_SPECIAL_TAGS = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/;
      var RE_SPECIAL_TAGS_NO_OPTION = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;
      var RE_RESERVED_NAMES = /^(?:_(?:item|id|parent)|update|root|(?:un)?mount|mixin|is(?:Mounted|Loop)|tags|refs|parent|opts|trigger|o(?:n|ff|ne))$/;
      var RE_SVG_TAGS = /^(altGlyph|animate(?:Color)?|circle|clipPath|defs|ellipse|fe(?:Blend|ColorMatrix|ComponentTransfer|Composite|ConvolveMatrix|DiffuseLighting|DisplacementMap|Flood|GaussianBlur|Image|Merge|Morphology|Offset|SpecularLighting|Tile|Turbulence)|filter|font|foreignObject|g(?:lyph)?(?:Ref)?|image|line(?:arGradient)?|ma(?:rker|sk)|missing-glyph|path|pattern|poly(?:gon|line)|radialGradient|rect|stop|svg|switch|symbol|text(?:Path)?|tref|tspan|use)$/;
      var RE_HTML_ATTRS = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
      var CASE_SENSITIVE_ATTRIBUTES = { 'viewbox': 'viewBox' };
      var RE_BOOL_ATTRS = /^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/;
      var IE_VERSION = (WIN && WIN.document || {}).documentMode | 0;
      /**
 * Check whether a DOM node must be considered a part of an svg document
 * @param   { String } name -
 * @returns { Boolean } -
 */
      function isSVGTag(name) {
        return RE_SVG_TAGS.test(name)
      }
      /**
 * Check Check if the passed argument is undefined
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isBoolAttr(value) {
        return RE_BOOL_ATTRS.test(value)
      }
      /**
 * Check if passed argument is a function
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isFunction(value) {
        return typeof value === T_FUNCTION
      }
      /**
 * Check if passed argument is an object, exclude null
 * NOTE: use isObject(x) && !isArray(x) to excludes arrays.
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isObject(value) {
        return value && typeof value === T_OBJECT  // typeof null is 'object'
      }
      /**
 * Check if passed argument is undefined
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isUndefined(value) {
        return typeof value === T_UNDEF
      }
      /**
 * Check if passed argument is a string
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isString(value) {
        return typeof value === T_STRING
      }
      /**
 * Check if passed argument is empty. Different from falsy, because we dont consider 0 or false to be blank
 * @param { * } value -
 * @returns { Boolean } -
 */
      function isBlank(value) {
        return isUndefined(value) || value === null || value === ''
      }
      /**
 * Check if passed argument is a kind of array
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isArray(value) {
        return Array.isArray(value) || value instanceof Array
      }
      /**
 * Check whether object's property could be overridden
 * @param   { Object }  obj - source object
 * @param   { String }  key - object property
 * @returns { Boolean } -
 */
      function isWritable(obj, key) {
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        return isUndefined(obj[key]) || descriptor && descriptor.writable
      }
      /**
 * Check if passed argument is a reserved name
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isReservedName(value) {
        return RE_RESERVED_NAMES.test(value)
      }
      var check = Object.freeze({
        isSVGTag: isSVGTag,
        isBoolAttr: isBoolAttr,
        isFunction: isFunction,
        isObject: isObject,
        isUndefined: isUndefined,
        isString: isString,
        isBlank: isBlank,
        isArray: isArray,
        isWritable: isWritable,
        isReservedName: isReservedName
      });
      /**
 * Shorter and fast way to select multiple nodes in the DOM
 * @param   { String } selector - DOM selector
 * @param   { Object } ctx - DOM node where the targets of our search will is located
 * @returns { Object } dom nodes found
 */
      function $$(selector, ctx) {
        return (ctx || document).querySelectorAll(selector)
      }
      /**
 * Shorter and fast way to select a single node in the DOM
 * @param   { String } selector - unique dom selector
 * @param   { Object } ctx - DOM node where the target of our search will is located
 * @returns { Object } dom node found
 */
      function $(selector, ctx) {
        return (ctx || document).querySelector(selector)
      }
      /**
 * Create a document fragment
 * @returns { Object } document fragment
 */
      function createFrag() {
        return document.createDocumentFragment()
      }
      /**
 * Create a document text node
 * @returns { Object } create a text node to use as placeholder
 */
      function createDOMPlaceholder() {
        return document.createTextNode('')
      }
      /**
 * Create a generic DOM node
 * @param   { String } name - name of the DOM node we want to create
 * @param   { Boolean } isSvg - should we use a SVG as parent node?
 * @returns { Object } DOM node just created
 */
      function mkEl(name, isSvg) {
        return isSvg ? document.createElementNS('http://www.w3.org/2000/svg', 'svg') : document.createElement(name)
      }
      /**
 * Get the outer html of any DOM node SVGs included
 * @param   { Object } el - DOM node to parse
 * @returns { String } el.outerHTML
 */
      function getOuterHTML(el) {
        if (el.outerHTML) {
          return el.outerHTML
        }  // some browsers do not support outerHTML on the SVGs tags
        else {
          var container = mkEl('div');
          container.appendChild(el.cloneNode(true));
          return container.innerHTML
        }
      }
      /**
 * Set the inner html of any DOM node SVGs included
 * @param { Object } container - DOM node where we'll inject new html
 * @param { String } html - html to inject
 */
      function setInnerHTML(container, html) {
        if (!isUndefined(container.innerHTML)) {
          container.innerHTML = html
        }  // some browsers do not support innerHTML on the SVGs tags
        else {
          var doc = new DOMParser().parseFromString(html, 'application/xml');
          var node = container.ownerDocument.importNode(doc.documentElement, true);
          container.appendChild(node)
        }
      }
      /**
 * Remove any DOM attribute from a node
 * @param   { Object } dom - DOM node we want to update
 * @param   { String } name - name of the property we want to remove
 */
      function remAttr(dom, name) {
        dom.removeAttribute(name)
      }
      /**
 * Get the value of any DOM attribute on a node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { String } name - name of the attribute we want to get
 * @returns { String | undefined } name of the node attribute whether it exists
 */
      function getAttr(dom, name) {
        return dom.getAttribute(name)
      }
      /**
 * Set any DOM attribute
 * @param { Object } dom - DOM node we want to update
 * @param { String } name - name of the property we want to set
 * @param { String } val - value of the property we want to set
 */
      function setAttr(dom, name, val) {
        var xlink = XLINK_REGEX.exec(name);
        if (xlink && xlink[1]) {
          dom.setAttributeNS(XLINK_NS, xlink[1], val)
        } else {
          dom.setAttribute(name, val)
        }
      }
      /**
 * Insert safely a tag to fix #1962 #1649
 * @param   { HTMLElement } root - children container
 * @param   { HTMLElement } curr - node to insert
 * @param   { HTMLElement } next - node that should preceed the current node inserted
 */
      function safeInsert(root, curr, next) {
        root.insertBefore(curr, next.parentNode && next)
      }
      /**
 * Minimize risk: only zero or one _space_ between attr & value
 * @param   { String }   html - html string we want to parse
 * @param   { Function } fn - callback function to apply on any attribute found
 */
      function walkAttrs(html, fn) {
        if (!html) {
          return
        }
        var m;
        while (m = RE_HTML_ATTRS.exec(html)) {
          fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
        }
      }
      /**
 * Walk down recursively all the children tags starting dom node
 * @param   { Object }   dom - starting node where we will start the recursion
 * @param   { Function } fn - callback to transform the child node just found
 * @param   { Object }   context - fn can optionally return an object, which is passed to children
 */
      function walkNodes(dom, fn, context) {
        if (dom) {
          var res = fn(dom, context);
          var next;
          // stop the recursion
          if (res === false) {
            return
          }
          dom = dom.firstChild;
          while (dom) {
            next = dom.nextSibling;
            walkNodes(dom, fn, res);
            dom = next
          }
        }
      }
      var dom = Object.freeze({
        $$: $$,
        $: $,
        createFrag: createFrag,
        createDOMPlaceholder: createDOMPlaceholder,
        mkEl: mkEl,
        getOuterHTML: getOuterHTML,
        setInnerHTML: setInnerHTML,
        remAttr: remAttr,
        getAttr: getAttr,
        setAttr: setAttr,
        safeInsert: safeInsert,
        walkAttrs: walkAttrs,
        walkNodes: walkNodes
      });
      var styleNode;
      var cssTextProp;
      var byName = {};
      var remainder = [];
      var needsInject = false;
      // skip the following code on the server
      if (WIN) {
        styleNode = function () {
          // create a new style element with the correct type
          var newNode = mkEl('style');
          setAttr(newNode, 'type', 'text/css');
          // replace any user node or insert the new one into the head
          var userNode = $('style[type=riot]');
          if (userNode) {
            if (userNode.id) {
              newNode.id = userNode.id
            }
            userNode.parentNode.replaceChild(newNode, userNode)
          } else {
            document.getElementsByTagName('head')[0].appendChild(newNode)
          }
          return newNode
        }();
        cssTextProp = styleNode.styleSheet
      }
      /**
 * Object that will be used to inject and manage the css of every tag instance
 */
      var styleManager = {
        styleNode: styleNode,
        /**
   * Save a tag style to be later injected into DOM
   * @param { String } css - css string
   * @param { String } name - if it's passed we will map the css to a tagname
   */
        add: function add(css, name) {
          if (name) {
            byName[name] = css
          } else {
            remainder.push(css)
          }
          needsInject = true
        },
        /**
   * Inject all previously saved tag styles into DOM
   * innerHTML seems slow: http://jsperf.com/riot-insert-style
   */
        inject: function inject() {
          if (!WIN || !needsInject) {
            return
          }
          needsInject = false;
          var style = Object.keys(byName).map(function (k) {
            return byName[k]
          }).concat(remainder).join('\n');
          if (cssTextProp) {
            cssTextProp.cssText = style
          } else {
            styleNode.innerHTML = style
          }
        }
      };
      /**
 * The riot template engine
 * @version v3.0.2
 */
      /**
 * riot.util.brackets
 *
 * - `brackets    ` - Returns a string or regex based on its parameter
 * - `brackets.set` - Change the current riot brackets
 *
 * @module
 */
      /* global riot */
      var brackets = function (UNDEF) {
        var REGLOB = 'g', R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g, R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, S_QBLOCKS = R_STRINGS.source + '|' + /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' + /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source, UNSUPPORTED = RegExp('[\\' + 'x00-\\x1F<>a-zA-Z0-9\'",;\\\\]'), NEED_ESCAPE = /(?=[[\]()*+?.^$|])/g, FINDBRACES = {
            '(': RegExp('([()])|' + S_QBLOCKS, REGLOB),
            '[': RegExp('([[\\]])|' + S_QBLOCKS, REGLOB),
            '{': RegExp('([{}])|' + S_QBLOCKS, REGLOB)
          }, DEFAULT = '{ }';
        var _pairs = [
          '{',
          '}',
          '{',
          '}',
          /{[^}]*}/,
          /\\([{}])/g,
          /\\({)|{/g,
          RegExp('\\\\(})|([[({])|(})|' + S_QBLOCKS, REGLOB),
          DEFAULT,
          /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
          /(^|[^\\]){=[\S\s]*?}/
        ];
        var cachedBrackets = UNDEF, _regex, _cache = [], _settings;
        function _loopback(re) {
          return re
        }
        function _rewrite(re, bp) {
          if (!bp) {
            bp = _cache
          }
          return new RegExp(re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : '')
        }
        function _create(pair) {
          if (pair === DEFAULT) {
            return _pairs
          }
          var arr = pair.split(' ');
          if (arr.length !== 2 || UNSUPPORTED.test(pair)) {
            throw new Error('Unsupported brackets "' + pair + '"')
          }
          arr = arr.concat(pair.replace(NEED_ESCAPE, '\\').split(' '));
          arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
          arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
          arr[6] = _rewrite(_pairs[6], arr);
          arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCKS, REGLOB);
          arr[8] = pair;
          return arr
        }
        function _brackets(reOrIdx) {
          return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
        }
        _brackets.split = function split(str, tmpl, _bp) {
          // istanbul ignore next: _bp is for the compiler
          if (!_bp) {
            _bp = _cache
          }
          var parts = [], match, isexpr, start, pos, re = _bp[6];
          isexpr = start = re.lastIndex = 0;
          while (match = re.exec(str)) {
            pos = match.index;
            if (isexpr) {
              if (match[2]) {
                re.lastIndex = skipBraces(str, match[2], re.lastIndex);
                continue
              }
              if (!match[3]) {
                continue
              }
            }
            if (!match[1]) {
              unescapeStr(str.slice(start, pos));
              start = re.lastIndex;
              re = _bp[6 + (isexpr ^= 1)];
              re.lastIndex = start
            }
          }
          if (str && start < str.length) {
            unescapeStr(str.slice(start))
          }
          return parts;
          function unescapeStr(s) {
            if (tmpl || isexpr) {
              parts.push(s && s.replace(_bp[5], '$1'))
            } else {
              parts.push(s)
            }
          }
          function skipBraces(s, ch, ix) {
            var match, recch = FINDBRACES[ch];
            recch.lastIndex = ix;
            ix = 1;
            while (match = recch.exec(s)) {
              if (match[1] && !(match[1] === ch ? ++ix : --ix)) {
                break
              }
            }
            return ix ? s.length : recch.lastIndex
          }
        };
        _brackets.hasExpr = function hasExpr(str) {
          return _cache[4].test(str)
        };
        _brackets.loopKeys = function loopKeys(expr) {
          var m = expr.match(_cache[9]);
          return m ? {
            key: m[1],
            pos: m[2],
            val: _cache[0] + m[3].trim() + _cache[1]
          } : { val: expr.trim() }
        };
        _brackets.array = function array(pair) {
          return pair ? _create(pair) : _cache
        };
        function _reset(pair) {
          if ((pair || (pair = DEFAULT)) !== _cache[8]) {
            _cache = _create(pair);
            _regex = pair === DEFAULT ? _loopback : _rewrite;
            _cache[9] = _regex(_pairs[9])
          }
          cachedBrackets = pair
        }
        function _setSettings(o) {
          var b;
          o = o || {};
          b = o.brackets;
          Object.defineProperty(o, 'brackets', {
            set: _reset,
            get: function () {
              return cachedBrackets
            },
            enumerable: true
          });
          _settings = o;
          _reset(b)
        }
        Object.defineProperty(_brackets, 'settings', {
          set: _setSettings,
          get: function () {
            return _settings
          }
        });
        /* istanbul ignore next: in the browser riot is always in the scope */
        _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
        _brackets.set = _reset;
        _brackets.R_STRINGS = R_STRINGS;
        _brackets.R_MLCOMMS = R_MLCOMMS;
        _brackets.S_QBLOCKS = S_QBLOCKS;
        return _brackets
      }();
      /**
 * @module tmpl
 *
 * tmpl          - Root function, returns the template value, render with data
 * tmpl.hasExpr  - Test the existence of a expression inside a string
 * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
 */
      var tmpl = function () {
        var _cache = {};
        function _tmpl(str, data) {
          if (!str) {
            return str
          }
          return (_cache[str] || (_cache[str] = _create(str))).call(data, _logErr)
        }
        _tmpl.hasExpr = brackets.hasExpr;
        _tmpl.loopKeys = brackets.loopKeys;
        // istanbul ignore next
        _tmpl.clearCache = function () {
          _cache = {}
        };
        _tmpl.errorHandler = null;
        function _logErr(err, ctx) {
          err.riotData = {
            tagName: ctx && ctx.__ && ctx.__.tagName,
            _riot_id: ctx && ctx._riot_id
          };
          if (_tmpl.errorHandler) {
            _tmpl.errorHandler(err)
          } else if (typeof console !== 'undefined' && typeof console.error === 'function') {
            if (err.riotData.tagName) {
              void 0
            }
            void 0
          }
        }
        function _create(str) {
          var expr = _getTmpl(str);
          if (expr.slice(0, 11) !== 'try{return ') {
            expr = 'return ' + expr
          }
          return new Function('E', expr + ';')  // eslint-disable-line no-new-func
        }
        var CH_IDEXPR = String.fromCharCode(8279), RE_CSNAME = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/, RE_QBLOCK = RegExp(brackets.S_QBLOCKS, 'g'), RE_DQUOTE = /\u2057/g, RE_QBMARK = /\u2057(\d+)~/g;
        function _getTmpl(str) {
          var qstr = [], expr, parts = brackets.split(str.replace(RE_DQUOTE, '"'), 1);
          if (parts.length > 2 || parts[0]) {
            var i, j, list = [];
            for (i = j = 0; i < parts.length; ++i) {
              expr = parts[i];
              if (expr && (expr = i & 1 ? _parseExpr(expr, 1, qstr) : '"' + expr.replace(/\\/g, '\\\\').replace(/\r\n?|\n/g, '\\n').replace(/"/g, '\\"') + '"')) {
                list[j++] = expr
              }
            }
            expr = j < 2 ? list[0] : '[' + list.join(',') + '].join("")'
          } else {
            expr = _parseExpr(parts[1], 0, qstr)
          }
          if (qstr[0]) {
            expr = expr.replace(RE_QBMARK, function (_, pos) {
              return qstr[pos].replace(/\r/g, '\\r').replace(/\n/g, '\\n')
            })
          }
          return expr
        }
        var RE_BREND = {
          '(': /[()]/g,
          '[': /[[\]]/g,
          '{': /[{}]/g
        };
        function _parseExpr(expr, asText, qstr) {
          expr = expr.replace(RE_QBLOCK, function (s, div) {
            return s.length > 2 && !div ? CH_IDEXPR + (qstr.push(s) - 1) + '~' : s
          }).replace(/\s+/g, ' ').trim().replace(/\ ?([[\({},?\.:])\ ?/g, '$1');
          if (expr) {
            var list = [], cnt = 0, match;
            while (expr && (match = expr.match(RE_CSNAME)) && !match.index) {
              var key, jsb, re = /,|([[{(])|$/g;
              expr = RegExp.rightContext;
              key = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];
              while (jsb = (match = re.exec(expr))[1]) {
                skipBraces(jsb, re)
              }
              jsb = expr.slice(0, match.index);
              expr = RegExp.rightContext;
              list[cnt++] = _wrapExpr(jsb, 1, key)
            }
            expr = !cnt ? _wrapExpr(expr, asText) : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0]
          }
          return expr;
          function skipBraces(ch, re) {
            var mm, lv = 1, ir = RE_BREND[ch];
            ir.lastIndex = re.lastIndex;
            while (mm = ir.exec(expr)) {
              if (mm[0] === ch) {
                ++lv
              } else if (!--lv) {
                break
              }
            }
            re.lastIndex = lv ? expr.length : ir.lastIndex
          }
        }
        // istanbul ignore next: not both
        var
          // eslint-disable-next-line max-len
          JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').', JS_VARNAME = /[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g, JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;
        function _wrapExpr(expr, asText, key) {
          var tb;
          expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
            if (mvar) {
              pos = tb ? 0 : pos + match.length;
              if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
                match = p + '("' + mvar + JS_CONTEXT + mvar;
                if (pos) {
                  tb = (s = s[pos]) === '.' || s === '(' || s === '['
                }
              } else if (pos) {
                tb = !JS_NOPROPS.test(s.slice(pos))
              }
            }
            return match
          });
          if (tb) {
            expr = 'try{return ' + expr + '}catch(e){E(e,this)}'
          }
          if (key) {
            expr = (tb ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')') + '?"' + key + '":""'
          } else if (asText) {
            expr = 'function(v){' + (tb ? expr.replace('return ', 'v=') : 'v=(' + expr + ')') + ';return v||v===0?v:""}.call(this)'
          }
          return expr
        }
        _tmpl.version = brackets.version = 'v3.0.2';
        return _tmpl
      }();
      var observable$1 = function (el) {
        /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
        el = el || {};
        /**
   * Private variables
   */
        var callbacks = {}, slice = Array.prototype.slice;
        /**
   * Public Api
   */
        // extend the el object adding the observable methods
        Object.defineProperties(el, {
          /**
     * Listen to the given `event` ands
     * execute the `callback` each time an event is triggered.
     * @param  { String } event - event id
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
          on: {
            value: function (event, fn) {
              if (typeof fn == 'function') {
                (callbacks[event] = callbacks[event] || []).push(fn)
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Removes the given `event` listeners
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          off: {
            value: function (event, fn) {
              if (event == '*' && !fn) {
                callbacks = {}
              } else {
                if (fn) {
                  var arr = callbacks[event];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn) {
                      arr.splice(i--, 1)
                    }
                  }
                } else {
                  delete callbacks[event]
                }
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Listen to the given `event` and
     * execute the `callback` at most once
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          one: {
            value: function (event, fn) {
              function on() {
                el.off(event, on);
                fn.apply(el, arguments)
              }
              return el.on(event, on)
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Execute all callback functions that listen to
     * the given `event`
     * @param   { String } event - event id
     * @returns { Object } el
     */
          trigger: {
            value: function (event) {
              var arguments$1 = arguments;
              // getting the arguments
              var arglen = arguments.length - 1, args = new Array(arglen), fns, fn, i;
              for (i = 0; i < arglen; i++) {
                args[i] = arguments$1[i + 1]  // skip first argument
              }
              fns = slice.call(callbacks[event] || [], 0);
              for (i = 0; fn = fns[i]; ++i) {
                fn.apply(el, args)
              }
              if (callbacks['*'] && event != '*') {
                el.trigger.apply(el, [
                  '*',
                  event
                ].concat(args))
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          }
        });
        return el
      };
      /**
 * Specialized function for looping an array-like collection with `each={}`
 * @param   { Array } list - collection of items
 * @param   {Function} fn - callback function
 * @returns { Array } the array looped
 */
      function each(list, fn) {
        var len = list ? list.length : 0;
        for (var i = 0, el; i < len; ++i) {
          el = list[i];
          // return false -> current item was removed by fn during the loop
          if (fn(el, i) === false) {
            i--
          }
        }
        return list
      }
      /**
 * Check whether an array contains an item
 * @param   { Array } array - target array
 * @param   { * } item - item to test
 * @returns { Boolean } -
 */
      function contains(array, item) {
        return array.indexOf(item) !== -1
      }
      /**
 * Convert a string containing dashes to camel case
 * @param   { String } str - input string
 * @returns { String } my-string -> myString
 */
      function toCamel(str) {
        return str.replace(/-(\w)/g, function (_, c) {
          return c.toUpperCase()
        })
      }
      /**
 * Faster String startsWith alternative
 * @param   { String } str - source string
 * @param   { String } value - test string
 * @returns { Boolean } -
 */
      function startsWith(str, value) {
        return str.slice(0, value.length) === value
      }
      /**
 * Helper function to set an immutable property
 * @param   { Object } el - object where the new property will be set
 * @param   { String } key - object key where the new property will be stored
 * @param   { * } value - value of the new property
 * @param   { Object } options - set the propery overriding the default options
 * @returns { Object } - the initial object
 */
      function defineProperty(el, key, value, options) {
        Object.defineProperty(el, key, extend({
          value: value,
          enumerable: false,
          writable: false,
          configurable: true
        }, options));
        return el
      }
      /**
 * Extend any object with other properties
 * @param   { Object } src - source object
 * @returns { Object } the resulting extended object
 *
 * var obj = { foo: 'baz' }
 * extend(obj, {bar: 'bar', foo: 'bar'})
 * console.log(obj) => {bar: 'bar', foo: 'bar'}
 *
 */
      function extend(src) {
        var obj, args = arguments;
        for (var i = 1; i < args.length; ++i) {
          if (obj = args[i]) {
            for (var key in obj) {
              // check if this property of the source object could be overridden
              if (isWritable(src, key)) {
                src[key] = obj[key]
              }
            }
          }
        }
        return src
      }
      var misc = Object.freeze({
        each: each,
        contains: contains,
        toCamel: toCamel,
        startsWith: startsWith,
        defineProperty: defineProperty,
        extend: extend
      });
      var settings$1 = extend(Object.create(brackets.settings), { skipAnonymousTags: true });
      var EVENTS_PREFIX_REGEX = /^on/;
      /**
 * Trigger DOM events
 * @param   { HTMLElement } dom - dom element target of the event
 * @param   { Function } handler - user function
 * @param   { Object } e - event object
 */
      function handleEvent(dom, handler, e) {
        var ptag = this.__.parent, item = this.__.item;
        if (!item) {
          while (ptag && !item) {
            item = ptag.__.item;
            ptag = ptag.__.parent
          }
        }
        // override the event properties
        if (isWritable(e, 'currentTarget')) {
          e.currentTarget = dom
        }
        if (isWritable(e, 'target')) {
          e.target = e.srcElement
        }
        if (isWritable(e, 'which')) {
          e.which = e.charCode || e.keyCode
        }
        e.item = item;
        handler.call(this, e);
        if (!e.preventUpdate) {
          var p = getImmediateCustomParentTag(this);
          // fixes #2083
          if (p.isMounted) {
            p.update()
          }
        }
      }
      /**
 * Attach an event to a DOM node
 * @param { String } name - event name
 * @param { Function } handler - event callback
 * @param { Object } dom - dom node
 * @param { Tag } tag - tag instance
 */
      function setEventHandler(name, handler, dom, tag) {
        var eventName, cb = handleEvent.bind(tag, dom, handler);
        if (!dom.addEventListener) {
          dom[name] = cb;
          return
        }
        // avoid to bind twice the same event
        dom[name] = null;
        // normalize event name
        eventName = name.replace(EVENTS_PREFIX_REGEX, '');
        // cache the callback directly on the DOM node
        if (!dom._riotEvents) {
          dom._riotEvents = {}
        }
        if (dom._riotEvents[name]) {
          dom.removeEventListener(eventName, dom._riotEvents[name])
        }
        dom._riotEvents[name] = cb;
        dom.addEventListener(eventName, cb, false)
      }
      /**
 * Update dynamically created data-is tags with changing expressions
 * @param { Object } expr - expression tag and expression info
 * @param { Tag } parent - parent for tag creation
 */
      function updateDataIs(expr, parent) {
        var tagName = tmpl(expr.value, parent), conf, isVirtual, head, ref;
        if (expr.tag && expr.tagName === tagName) {
          expr.tag.update();
          return
        }
        isVirtual = expr.dom.tagName === 'VIRTUAL';
        // sync _parent to accommodate changing tagnames
        if (expr.tag) {
          // need placeholder before unmount
          if (isVirtual) {
            head = expr.tag.__.head;
            ref = createDOMPlaceholder();
            head.parentNode.insertBefore(ref, head)
          }
          expr.tag.unmount(true)
        }
        expr.impl = __TAG_IMPL[tagName];
        conf = {
          root: expr.dom,
          parent: parent,
          hasImpl: true,
          tagName: tagName
        };
        expr.tag = initChildTag(expr.impl, conf, expr.dom.innerHTML, parent);
        each(expr.attrs, function (a) {
          return setAttr(expr.tag.root, a.name, a.value)
        });
        expr.tagName = tagName;
        expr.tag.mount();
        if (isVirtual) {
          makeReplaceVirtual(expr.tag, ref || expr.tag.root)
        }
        // root exist first time, after use placeholder
        // parent is the placeholder tag, not the dynamic tag so clean up
        parent.__.onUnmount = function () {
          var delName = expr.tag.opts.dataIs, tags = expr.tag.parent.tags, _tags = expr.tag.__.parent.tags;
          arrayishRemove(tags, delName, expr.tag);
          arrayishRemove(_tags, delName, expr.tag);
          expr.tag.unmount()
        }
      }
      /**
 * Update on single tag expression
 * @this Tag
 * @param { Object } expr - expression logic
 * @returns { undefined }
 */
      function updateExpression(expr) {
        if (this.root && getAttr(this.root, 'virtualized')) {
          return
        }
        var dom = expr.dom, attrName = expr.attr, isToggle = contains([
            SHOW_DIRECTIVE,
            HIDE_DIRECTIVE
          ], attrName), value = tmpl(expr.expr, this), isValueAttr = attrName === 'riot-value', isVirtual = expr.root && expr.root.tagName === 'VIRTUAL', parent = dom && (expr.parent || dom.parentNode), old;
        if (expr.bool) {
          value = value ? attrName : false
        } else if (isUndefined(value) || value === null) {
          value = ''
        }
        if (expr._riot_id) {
          // if it's a tag
          if (expr.isMounted) {
            expr.update()  // if it hasn't been mounted yet, do that now.
          } else {
            expr.mount();
            if (isVirtual) {
              makeReplaceVirtual(expr, expr.root)
            }
          }
          return
        }
        old = expr.value;
        expr.value = value;
        if (expr.update) {
          expr.update();
          return
        }
        if (expr.isRtag && value) {
          return updateDataIs(expr, this)
        }
        if (old === value) {
          return
        }
        // no change, so nothing more to do
        if (isValueAttr && dom.value === value) {
          return
        }
        // textarea and text nodes have no attribute name
        if (!attrName) {
          // about #815 w/o replace: the browser converts the value to a string,
          // the comparison by "==" does too, but not in the server
          value += '';
          // test for parent avoids error with invalid assignment to nodeValue
          if (parent) {
            // cache the parent node because somehow it will become null on IE
            // on the next iteration
            expr.parent = parent;
            if (parent.tagName === 'TEXTAREA') {
              parent.value = value;
              // #1113
              if (!IE_VERSION) {
                dom.nodeValue = value
              }  // #1625 IE throws here, nodeValue
            }  // will be available on 'updated'
            else {
              dom.nodeValue = value
            }
          }
          return
        }
        // remove original attribute
        if (!expr.isAttrRemoved || !value) {
          remAttr(dom, attrName);
          expr.isAttrRemoved = true
        }
        // event handler
        if (isFunction(value)) {
          setEventHandler(attrName, value, dom, this)  // show / hide
        } else if (isToggle) {
          if (attrName === HIDE_DIRECTIVE) {
            value = !value
          }
          dom.style.display = value ? '' : 'none'  // field value
        } else if (isValueAttr) {
          dom.value = value  // <img src="{ expr }">
        } else if (startsWith(attrName, ATTRS_PREFIX) && attrName !== IS_DIRECTIVE) {
          attrName = attrName.slice(ATTRS_PREFIX.length);
          if (CASE_SENSITIVE_ATTRIBUTES[attrName]) {
            attrName = CASE_SENSITIVE_ATTRIBUTES[attrName]
          }
          if (value != null) {
            setAttr(dom, attrName, value)
          }
        } else {
          if (expr.bool) {
            dom[attrName] = value;
            if (!value) {
              return
            }
          }
          if (value === 0 || value && typeof value !== T_OBJECT) {
            setAttr(dom, attrName, value)
          }
        }
      }
      /**
 * Update all the expressions in a Tag instance
 * @this Tag
 * @param { Array } expressions - expression that must be re evaluated
 */
      function updateAllExpressions(expressions) {
        each(expressions, updateExpression.bind(this))
      }
      var IfExpr = {
        init: function init(dom, tag, expr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE);
          this.tag = tag;
          this.expr = expr;
          this.stub = document.createTextNode('');
          this.pristine = dom;
          var p = dom.parentNode;
          p.insertBefore(this.stub, dom);
          p.removeChild(dom);
          return this
        },
        update: function update() {
          var newValue = tmpl(this.expr, this.tag);
          if (newValue && !this.current) {
            // insert
            this.current = this.pristine.cloneNode(true);
            this.stub.parentNode.insertBefore(this.current, this.stub);
            this.expressions = [];
            parseExpressions.apply(this.tag, [
              this.current,
              this.expressions,
              true
            ])
          } else if (!newValue && this.current) {
            // remove
            unmountAll(this.expressions);
            if (this.current._tag) {
              this.current._tag.unmount()
            } else if (this.current.parentNode) {
              this.current.parentNode.removeChild(this.current)
            }
            this.current = null;
            this.expressions = []
          }
          if (newValue) {
            updateAllExpressions.call(this.tag, this.expressions)
          }
        },
        unmount: function unmount() {
          unmountAll(this.expressions || []);
          delete this.pristine;
          delete this.parentNode;
          delete this.stub
        }
      };
      var RefExpr = {
        init: function init(dom, parent, attrName, attrValue) {
          this.dom = dom;
          this.attr = attrName;
          this.rawValue = attrValue;
          this.parent = parent;
          this.hasExp = tmpl.hasExpr(attrValue);
          this.firstRun = true;
          return this
        },
        update: function update() {
          var value = this.rawValue;
          if (this.hasExp) {
            value = tmpl(this.rawValue, this.parent)
          }
          // if nothing changed, we're done
          if (!this.firstRun && value === this.value) {
            return
          }
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          // if the referenced element is a custom tag, then we set the tag itself, rather than DOM
          var tagOrDom = this.tag || this.dom;
          // the name changed, so we need to remove it from the old key (if present)
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          if (isBlank(value)) {
            // if the value is blank, we remove it
            remAttr(this.dom, this.attr)
          } else {
            // add it to the refs of parent tag (this behavior was changed >=3.0)
            if (customParent) {
              arrayishAdd(customParent.refs, value, tagOrDom, // use an array if it's a looped node and the ref is not an expression
              null, this.parent.__.index)
            }
            // set the actual DOM attr
            setAttr(this.dom, this.attr, value)
          }
          this.value = value;
          this.firstRun = false
        },
        unmount: function unmount() {
          var tagOrDom = this.tag || this.dom;
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          delete this.dom;
          delete this.parent
        }
      };
      /**
 * Convert the item looped into an object used to extend the child tag properties
 * @param   { Object } expr - object containing the keys used to extend the children tags
 * @param   { * } key - value to assign to the new object returned
 * @param   { * } val - value containing the position of the item in the array
 * @param   { Object } base - prototype object for the new item
 * @returns { Object } - new object containing the values of the original item
 *
 * The variables 'key' and 'val' are arbitrary.
 * They depend on the collection type looped (Array, Object)
 * and on the expression used on the each tag
 *
 */
      function mkitem(expr, key, val, base) {
        var item = base ? Object.create(base) : {};
        item[expr.key] = key;
        if (expr.pos) {
          item[expr.pos] = val
        }
        return item
      }
      /**
 * Unmount the redundant tags
 * @param   { Array } items - array containing the current items to loop
 * @param   { Array } tags - array containing all the children tags
 */
      function unmountRedundant(items, tags) {
        var i = tags.length, j = items.length;
        while (i > j) {
          i--;
          remove.apply(tags[i], [
            tags,
            i
          ])
        }
      }
      /**
 * Remove a child tag
 * @this Tag
 * @param   { Array } tags - tags collection
 * @param   { Number } i - index of the tag to remove
 */
      function remove(tags, i) {
        tags.splice(i, 1);
        this.unmount();
        arrayishRemove(this.parent, this, this.__.tagName, true)
      }
      /**
 * Move the nested custom tags in non custom loop tags
 * @this Tag
 * @param   { Number } i - current position of the loop tag
 */
      function moveNestedTags(i) {
        var this$1 = this;
        each(Object.keys(this.tags), function (tagName) {
          var tag = this$1.tags[tagName];
          if (isArray(tag)) {
            each(tag, function (t) {
              moveChildTag.apply(t, [
                tagName,
                i
              ])
            })
          } else {
            moveChildTag.apply(tag, [
              tagName,
              i
            ])
          }
        })
      }
      /**
 * Move a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to move
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function move(root, nextTag, isVirtual) {
        if (isVirtual) {
          moveVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Insert and mount a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to insert
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function insert(root, nextTag, isVirtual) {
        if (isVirtual) {
          makeVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Append a new tag into the DOM
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function append(root, isVirtual) {
        if (isVirtual) {
          makeVirtual.call(this, root)
        } else {
          root.appendChild(this.root)
        }
      }
      /**
 * Manage tags having the 'each'
 * @param   { HTMLElement } dom - DOM node we need to loop
 * @param   { Tag } parent - parent tag instance where the dom node is contained
 * @param   { String } expr - string contained in the 'each' attribute
 * @returns { Object } expression object for this each loop
 */
      function _each(dom, parent, expr) {
        // remove the each property from the original tag
        remAttr(dom, LOOP_DIRECTIVE);
        var mustReorder = typeof getAttr(dom, LOOP_NO_REORDER_DIRECTIVE) !== T_STRING || remAttr(dom, LOOP_NO_REORDER_DIRECTIVE), tagName = getTagName(dom), impl = __TAG_IMPL[tagName], parentNode = dom.parentNode, placeholder = createDOMPlaceholder(), child = getTag(dom), ifExpr = getAttr(dom, CONDITIONAL_DIRECTIVE), tags = [], oldItems = [], hasKeys, isLoop = true, isAnonymous = !__TAG_IMPL[tagName], isVirtual = dom.tagName === 'VIRTUAL';
        // parse the each expression
        expr = tmpl.loopKeys(expr);
        expr.isLoop = true;
        if (ifExpr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE)
        }
        // insert a marked where the loop tags will be injected
        parentNode.insertBefore(placeholder, dom);
        parentNode.removeChild(dom);
        expr.update = function updateEach() {
          // get the new items collection
          var items = tmpl(expr.val, parent), frag = createFrag(), isObject$$1 = !isArray(items) && !isString(items), root = placeholder.parentNode;
          // object loop. any changes cause full redraw
          if (isObject$$1) {
            hasKeys = items || false;
            items = hasKeys ? Object.keys(items).map(function (key) {
              return mkitem(expr, items[key], key)
            }) : []
          } else {
            hasKeys = false
          }
          if (ifExpr) {
            items = items.filter(function (item, i) {
              if (expr.key && !isObject$$1) {
                return !!tmpl(ifExpr, mkitem(expr, item, i, parent))
              }
              return !!tmpl(ifExpr, extend(Object.create(parent), item))
            })
          }
          // loop all the new items
          each(items, function (item, i) {
            // reorder only if the items are objects
            var doReorder = mustReorder && typeof item === T_OBJECT && !hasKeys, oldPos = oldItems.indexOf(item), isNew = oldPos === -1, pos = !isNew && doReorder ? oldPos : i,
              // does a tag exist in this position?
              tag = tags[pos], mustAppend = i >= oldItems.length, mustCreate = doReorder && isNew || !doReorder && !tag;
            item = !hasKeys && expr.key ? mkitem(expr, item, i) : item;
            // new tag
            if (mustCreate) {
              tag = new Tag$1(impl, {
                parent: parent,
                isLoop: isLoop,
                isAnonymous: isAnonymous,
                tagName: tagName,
                root: dom.cloneNode(isAnonymous),
                item: item,
                index: i
              }, dom.innerHTML);
              // mount the tag
              tag.mount();
              if (mustAppend) {
                append.apply(tag, [
                  frag || root,
                  isVirtual
                ])
              } else {
                insert.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ])
              }
              if (!mustAppend) {
                oldItems.splice(i, 0, item)
              }
              tags.splice(i, 0, tag);
              if (child) {
                arrayishAdd(parent.tags, tagName, tag, true)
              }
            } else if (pos !== i && doReorder) {
              // move
              if (contains(items, oldItems[pos])) {
                move.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ]);
                // move the old tag instance
                tags.splice(i, 0, tags.splice(pos, 1)[0]);
                // move the old item
                oldItems.splice(i, 0, oldItems.splice(pos, 1)[0])
              } else {
                // remove
                remove.apply(tags[i], [
                  tags,
                  i
                ]);
                oldItems.splice(i, 1)
              }
              // update the position attribute if it exists
              if (expr.pos) {
                tag[expr.pos] = i
              }
              // if the loop tags are not custom
              // we need to move all their custom tags into the right position
              if (!child && tag.tags) {
                moveNestedTags.call(tag, i)
              }
            }
            // cache the original item to use it in the events bound to this node
            // and its children
            tag.__.item = item;
            tag.__.index = i;
            tag.__.parent = parent;
            if (!mustCreate) {
              tag.update(item)
            }
          });
          // remove the redundant tags
          unmountRedundant(items, tags);
          // clone the items array
          oldItems = items.slice();
          root.insertBefore(frag, placeholder)
        };
        expr.unmount = function () {
          each(tags, function (t) {
            t.unmount()
          })
        };
        return expr
      }
      /**
 * Walk the tag DOM to detect the expressions to evaluate
 * @this Tag
 * @param   { HTMLElement } root - root tag where we will start digging the expressions
 * @param   { Array } expressions - empty array where the expressions will be added
 * @param   { Boolean } mustIncludeRoot - flag to decide whether the root must be parsed as well
 * @returns { Object } an object containing the root noode and the dom tree
 */
      function parseExpressions(root, expressions, mustIncludeRoot) {
        var this$1 = this;
        var tree = { parent: { children: expressions } };
        walkNodes(root, function (dom, ctx) {
          var type = dom.nodeType, parent = ctx.parent, attr, expr, tagImpl;
          if (!mustIncludeRoot && dom === root) {
            return { parent: parent }
          }
          // text node
          if (type === 3 && dom.parentNode.tagName !== 'STYLE' && tmpl.hasExpr(dom.nodeValue)) {
            parent.children.push({
              dom: dom,
              expr: dom.nodeValue
            })
          }
          if (type !== 1) {
            return ctx
          }
          // not an element
          var isVirtual = dom.tagName === 'VIRTUAL';
          // loop. each does it's own thing (for now)
          if (attr = getAttr(dom, LOOP_DIRECTIVE)) {
            if (isVirtual) {
              setAttr(dom, 'loopVirtual', true)
            }
            // ignore here, handled in _each
            parent.children.push(_each(dom, this$1, attr));
            return false
          }
          // if-attrs become the new parent. Any following expressions (either on the current
          // element, or below it) become children of this expression.
          if (attr = getAttr(dom, CONDITIONAL_DIRECTIVE)) {
            parent.children.push(Object.create(IfExpr).init(dom, this$1, attr));
            return false
          }
          if (expr = getAttr(dom, IS_DIRECTIVE)) {
            if (tmpl.hasExpr(expr)) {
              parent.children.push({
                isRtag: true,
                expr: expr,
                dom: dom,
                attrs: [].slice.call(dom.attributes)
              });
              return false
            }
          }
          // if this is a tag, stop traversing here.
          // we ignore the root, since parseExpressions is called while we're mounting that root
          tagImpl = getTag(dom);
          if (isVirtual) {
            if (getAttr(dom, 'virtualized')) {
              dom.parentElement.removeChild(dom)
            }
            // tag created, remove from dom
            if (!tagImpl && !getAttr(dom, 'virtualized') && !getAttr(dom, 'loopVirtual'))
              // ok to create virtual tag
              {
                tagImpl = { tmpl: dom.outerHTML }
              }
          }
          if (tagImpl && (dom !== root || mustIncludeRoot)) {
            if (isVirtual && !getAttr(dom, IS_DIRECTIVE)) {
              // handled in update
              // can not remove attribute like directives
              // so flag for removal after creation to prevent maximum stack error
              setAttr(dom, 'virtualized', true);
              var tag = new Tag$1({ tmpl: dom.outerHTML }, {
                root: dom,
                parent: this$1
              }, dom.innerHTML);
              parent.children.push(tag)  // no return, anonymous tag, keep parsing
            } else {
              var conf = {
                root: dom,
                parent: this$1,
                hasImpl: true
              };
              parent.children.push(initChildTag(tagImpl, conf, dom.innerHTML, this$1));
              return false
            }
          }
          // attribute expressions
          parseAttributes.apply(this$1, [
            dom,
            dom.attributes,
            function (attr, expr) {
              if (!expr) {
                return
              }
              parent.children.push(expr)
            }
          ]);
          // whatever the parent is, all child elements get the same parent.
          // If this element had an if-attr, that's the parent for all child elements
          return { parent: parent }
        }, tree);
        return {
          tree: tree,
          root: root
        }
      }
      /**
 * Calls `fn` for every attribute on an element. If that attr has an expression,
 * it is also passed to fn.
 * @this Tag
 * @param   { HTMLElement } dom - dom node to parse
 * @param   { Array } attrs - array of attributes
 * @param   { Function } fn - callback to exec on any iteration
 */
      function parseAttributes(dom, attrs, fn) {
        var this$1 = this;
        each(attrs, function (attr) {
          var name = attr.name, bool = isBoolAttr(name), expr;
          if (contains(REF_DIRECTIVES, name)) {
            expr = Object.create(RefExpr).init(dom, this$1, name, attr.value)
          } else if (tmpl.hasExpr(attr.value)) {
            expr = {
              dom: dom,
              expr: attr.value,
              attr: attr.name,
              bool: bool
            }
          }
          fn(attr, expr)
        })
      }
      /*
  Includes hacks needed for the Internet Explorer version 9 and below
  See: http://kangax.github.io/compat-table/es5/#ie8
       http://codeplanet.io/dropping-ie8/
*/
      var reHasYield = /<yield\b/i;
      var reYieldAll = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi;
      var reYieldSrc = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi;
      var reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi;
      var rootEls = {
        tr: 'tbody',
        th: 'tr',
        td: 'tr',
        col: 'colgroup'
      };
      var tblTags = IE_VERSION && IE_VERSION < 10 ? RE_SPECIAL_TAGS : RE_SPECIAL_TAGS_NO_OPTION;
      var GENERIC = 'div';
      /*
  Creates the root element for table or select child elements:
  tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
*/
      function specialTags(el, tmpl, tagName) {
        var select = tagName[0] === 'o', parent = select ? 'select>' : 'table>';
        // trim() is important here, this ensures we don't have artifacts,
        // so we can check if we have only one element inside the parent
        el.innerHTML = '<' + parent + tmpl.trim() + '</' + parent;
        parent = el.firstChild;
        // returns the immediate parent if tr/th/td/col is the only element, if not
        // returns the whole tree, as this can include additional elements
        if (select) {
          parent.selectedIndex = -1  // for IE9, compatible w/current riot behavior
        } else {
          // avoids insertion of cointainer inside container (ex: tbody inside tbody)
          var tname = rootEls[tagName];
          if (tname && parent.childElementCount === 1) {
            parent = $(tname, parent)
          }
        }
        return parent
      }
      /*
  Replace the yield tag from any tag template with the innerHTML of the
  original tag in the page
*/
      function replaceYield(tmpl, html) {
        // do nothing if no yield
        if (!reHasYield.test(tmpl)) {
          return tmpl
        }
        // be careful with #1343 - string on the source having `$1`
        var src = {};
        html = html && html.replace(reYieldSrc, function (_, ref, text) {
          src[ref] = src[ref] || text;
          // preserve first definition
          return ''
        }).trim();
        return tmpl.replace(reYieldDest, function (_, ref, def) {
          // yield with from - to attrs
          return src[ref] || def || ''
        }).replace(reYieldAll, function (_, def) {
          // yield without any "from"
          return html || def || ''
        })
      }
      /**
 * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
 * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
 *
 * @param   { String } tmpl  - The template coming from the custom tag definition
 * @param   { String } html - HTML content that comes from the DOM element where you
 *           will mount the tag, mostly the original tag in the page
 * @param   { Boolean } checkSvg - flag needed to know if we need to force the svg rendering in case of loop nodes
 * @returns { HTMLElement } DOM element with _tmpl_ merged through `YIELD` with the _html_.
 */
      function mkdom(tmpl, html, checkSvg) {
        var match = tmpl && tmpl.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), el = mkEl(GENERIC, checkSvg && isSVGTag(tagName));
        // replace all the yield tags with the tag inner html
        tmpl = replaceYield(tmpl, html);
        /* istanbul ignore next */
        if (tblTags.test(tagName)) {
          el = specialTags(el, tmpl, tagName)
        } else {
          setInnerHTML(el, tmpl)
        }
        return el
      }
      /**
 * Another way to create a riot tag a bit more es6 friendly
 * @param { HTMLElement } el - tag DOM selector or DOM node/s
 * @param { Object } opts - tag logic
 * @returns { Tag } new riot tag instance
 */
      function Tag$2(el, opts) {
        // get the tag properties from the class constructor
        var ref = this;
        var name = ref.name;
        var tmpl = ref.tmpl;
        var css = ref.css;
        var attrs = ref.attrs;
        var onCreate = ref.onCreate;
        // register a new tag and cache the class prototype
        if (!__TAG_IMPL[name]) {
          tag$1(name, tmpl, css, attrs, onCreate);
          // cache the class constructor
          __TAG_IMPL[name].class = this.constructor
        }
        // mount the tag using the class instance
        mountTo(el, name, opts, this);
        // inject the component css
        if (css) {
          styleManager.inject()
        }
        return this
      }
      /**
 * Create a new riot tag implementation
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag$1(name, tmpl, css, attrs, fn) {
        if (isFunction(attrs)) {
          fn = attrs;
          if (/^[\w\-]+\s?=/.test(css)) {
            attrs = css;
            css = ''
          } else {
            attrs = ''
          }
        }
        if (css) {
          if (isFunction(css)) {
            fn = css
          } else {
            styleManager.add(css)
          }
        }
        name = name.toLowerCase();
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        return name
      }
      /**
 * Create a new riot tag implementation (for use by the compiler)
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag2$1(name, tmpl, css, attrs, fn) {
        if (css) {
          styleManager.add(css, name)
        }
        var exists = !!__TAG_IMPL[name];
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        if (exists && util.hotReloader) {
          util.hotReloader(name)
        }
        return name
      }
      /**
 * Mount a tag using a specific tag implementation
 * @param   { * } selector - tag DOM selector or DOM node/s
 * @param   { String } tagName - tag implementation name
 * @param   { Object } opts - tag logic
 * @returns { Array } new tags instances
 */
      function mount$1(selector, tagName, opts) {
        var tags = [];
        function pushTagsTo(root) {
          if (root.tagName) {
            var riotTag = getAttr(root, IS_DIRECTIVE);
            // have tagName? force riot-tag to be the same
            if (tagName && riotTag !== tagName) {
              riotTag = tagName;
              setAttr(root, IS_DIRECTIVE, tagName)
            }
            var tag$$1 = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);
            if (tag$$1) {
              tags.push(tag$$1)
            }
          } else if (root.length) {
            each(root, pushTagsTo)
          }  // assume nodeList
        }
        // inject styles into DOM
        styleManager.inject();
        if (isObject(tagName)) {
          opts = tagName;
          tagName = 0
        }
        var elem;
        var allTags;
        // crawl the DOM to find the tag
        if (isString(selector)) {
          selector = selector === '*' ? // select all registered tags
          // & tags found with the riot-tag attribute set
          allTags = selectTags() : // or just the ones named like the selector
          selector + selectTags(selector.split(/, */));
          // make sure to pass always a selector
          // to the querySelectorAll function
          elem = selector ? $$(selector) : []
        } else
          // probably you have passed already a tag or a NodeList
          {
            elem = selector
          }
        // select all the registered and mount them inside their root elements
        if (tagName === '*') {
          // get all custom tags
          tagName = allTags || selectTags();
          // if the root els it's just a single tag
          if (elem.tagName) {
            elem = $$(tagName, elem)
          } else {
            // select all the children for all the different root elements
            var nodeList = [];
            each(elem, function (_el) {
              return nodeList.push($$(tagName, _el))
            });
            elem = nodeList
          }
          // get rid of the tagName
          tagName = 0
        }
        pushTagsTo(elem);
        return tags
      }
      // Create a mixin that could be globally shared across all the tags
      var mixins = {};
      var globals = mixins[GLOBAL_MIXIN] = {};
      var _id = 0;
      /**
 * Create/Return a mixin by its name
 * @param   { String }  name - mixin name (global mixin if object)
 * @param   { Object }  mix - mixin logic
 * @param   { Boolean } g - is global?
 * @returns { Object }  the mixin logic
 */
      function mixin$1(name, mix, g) {
        // Unnamed global
        if (isObject(name)) {
          mixin$1('__unnamed_' + _id++, name, true);
          return
        }
        var store = g ? globals : mixins;
        // Getter
        if (!mix) {
          if (isUndefined(store[name])) {
            throw new Error('Unregistered mixin: ' + name)
          }
          return store[name]
        }
        // Setter
        store[name] = isFunction(mix) ? extend(mix.prototype, store[name] || {}) && mix : extend(store[name] || {}, mix)
      }
      /**
 * Update all the tags instances created
 * @returns { Array } all the tags instances
 */
      function update$1() {
        return each(__TAGS_CACHE, function (tag$$1) {
          return tag$$1.update()
        })
      }
      function unregister$1(name) {
        delete __TAG_IMPL[name]
      }
      var core = Object.freeze({
        Tag: Tag$2,
        tag: tag$1,
        tag2: tag2$1,
        mount: mount$1,
        mixin: mixin$1,
        update: update$1,
        unregister: unregister$1
      });
      // counter to give a unique id to all the Tag instances
      var __uid = 0;
      /**
 * We need to update opts for this tag. That requires updating the expressions
 * in any attributes on the tag, and then copying the result onto opts.
 * @this Tag
 * @param   {Boolean} isLoop - is it a loop tag?
 * @param   { Tag }  parent - parent tag node
 * @param   { Boolean }  isAnonymous - is it a tag without any impl? (a tag not registered)
 * @param   { Object }  opts - tag options
 * @param   { Array }  instAttrs - tag attributes array
 */
      function updateOpts(isLoop, parent, isAnonymous, opts, instAttrs) {
        // isAnonymous `each` tags treat `dom` and `root` differently. In this case
        // (and only this case) we don't need to do updateOpts, because the regular parse
        // will update those attrs. Plus, isAnonymous tags don't need opts anyway
        if (isLoop && isAnonymous) {
          return
        }
        var ctx = !isAnonymous && isLoop ? this : parent || this;
        each(instAttrs, function (attr) {
          if (attr.expr) {
            updateAllExpressions.call(ctx, [attr.expr])
          }
          opts[toCamel(attr.name)] = attr.expr ? attr.expr.value : attr.value
        })
      }
      /**
 * Tag class
 * @constructor
 * @param { Object } impl - it contains the tag template, and logic
 * @param { Object } conf - tag options
 * @param { String } innerHTML - html that eventually we need to inject in the tag
 */
      function Tag$1(impl, conf, innerHTML) {
        if (impl === void 0)
          impl = {};
        if (conf === void 0)
          conf = {};
        var opts = extend({}, conf.opts), parent = conf.parent, isLoop = conf.isLoop, isAnonymous = !!conf.isAnonymous, skipAnonymous = settings$1.skipAnonymousTags && isAnonymous, item = cleanUpData(conf.item), index = conf.index,
          // available only for the looped nodes
          instAttrs = [],
          // All attributes on the Tag when it's first parsed
          implAttrs = [],
          // expressions on this type of Tag
          expressions = [], root = conf.root, tagName = conf.tagName || getTagName(root), isVirtual = tagName === 'virtual', propsInSyncWithParent = [], dom;
        // make this tag observable
        if (!skipAnonymous) {
          observable$1(this)
        }
        // only call unmount if we have a valid __TAG_IMPL (has name property)
        if (impl.name && root._tag) {
          root._tag.unmount(true)
        }
        // not yet mounted
        this.isMounted = false;
        defineProperty(this, '__', {
          isAnonymous: isAnonymous,
          instAttrs: instAttrs,
          innerHTML: innerHTML,
          tagName: tagName,
          index: index,
          isLoop: isLoop,
          // these vars will be needed only for the virtual tags
          virts: [],
          tail: null,
          head: null,
          parent: null,
          item: null
        });
        // create a unique id to this tag
        // it could be handy to use it also to improve the virtual dom rendering speed
        defineProperty(this, '_riot_id', ++__uid);
        // base 1 allows test !t._riot_id
        defineProperty(this, 'root', root);
        extend(this, { opts: opts }, item);
        // protect the "tags" and "refs" property from being overridden
        defineProperty(this, 'parent', parent || null);
        defineProperty(this, 'tags', {});
        defineProperty(this, 'refs', {});
        dom = isLoop && isAnonymous ? root : mkdom(impl.tmpl, innerHTML, isLoop);
        /**
   * Update the tag expressions and options
   * @param   { * }  data - data we want to use to extend the tag properties
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'update', function tagUpdate(data) {
          var nextOpts = {};
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            nextOpts,
            instAttrs
          ]);
          if (isFunction(this.shouldUpdate) && !this.shouldUpdate(data, nextOpts)) {
            return this
          }
          var canTrigger = this.isMounted && !skipAnonymous;
          // make sure the data passed will not override
          // the component core methods
          data = cleanUpData(data);
          // inherit properties from the parent, but only for isAnonymous tags
          if (isLoop && isAnonymous) {
            inheritFrom.apply(this, [
              this.parent,
              propsInSyncWithParent
            ])
          }
          extend(this, data);
          extend(opts, nextOpts);
          if (canTrigger) {
            this.trigger('update', data)
          }
          updateAllExpressions.call(this, expressions);
          if (canTrigger) {
            this.trigger('updated')
          }
          return this
        }.bind(this));
        /**
   * Add a mixin to this tag
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mixin', function tagMixin() {
          var this$1 = this;
          each(arguments, function (mix) {
            var instance, props = [], obj;
            mix = isString(mix) ? mixin$1(mix) : mix;
            // check if the mixin is a function
            if (isFunction(mix)) {
              // create the new mixin instance
              instance = new mix
            } else {
              instance = mix
            }
            var proto = Object.getPrototypeOf(instance);
            // build multilevel prototype inheritance chain property list
            do {
              props = props.concat(Object.getOwnPropertyNames(obj || instance))
            } while (obj = Object.getPrototypeOf(obj || instance));
            // loop the keys in the function prototype or the all object keys
            each(props, function (key) {
              // bind methods to this
              // allow mixins to override other properties/parent mixins
              if (key !== 'init') {
                // check for getters/setters
                var descriptor = Object.getOwnPropertyDescriptor(instance, key) || Object.getOwnPropertyDescriptor(proto, key);
                var hasGetterSetter = descriptor && (descriptor.get || descriptor.set);
                // apply method only if it does not already exist on the instance
                if (!this$1.hasOwnProperty(key) && hasGetterSetter) {
                  Object.defineProperty(this$1, key, descriptor)
                } else {
                  this$1[key] = isFunction(instance[key]) ? instance[key].bind(this$1) : instance[key]
                }
              }
            });
            // init method will be called automatically
            if (instance.init) {
              instance.init.bind(this$1)()
            }
          });
          return this
        }.bind(this));
        /**
   * Mount the current tag instance
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mount', function tagMount() {
          var this$1 = this;
          var _parent = this.__.parent;
          root._tag = this;
          // keep a reference to the tag just created
          // Read all the attrs on this instance. This give us the info we need for updateOpts
          parseAttributes.apply(parent, [
            root,
            root.attributes,
            function (attr, expr) {
              if (!isAnonymous && RefExpr.isPrototypeOf(expr)) {
                expr.tag = this$1
              }
              attr.expr = expr;
              instAttrs.push(attr)
            }
          ]);
          // update the root adding custom attributes coming from the compiler
          implAttrs = [];
          walkAttrs(impl.attrs, function (k, v) {
            implAttrs.push({
              name: k,
              value: v
            })
          });
          parseAttributes.apply(this, [
            root,
            implAttrs,
            function (attr, expr) {
              if (expr) {
                expressions.push(expr)
              } else {
                setAttr(root, attr.name, attr.value)
              }
            }
          ]);
          // children in loop should inherit from true parent
          if (_parent && isAnonymous) {
            inheritFrom.apply(this, [
              _parent,
              propsInSyncWithParent
            ])
          }
          // initialiation
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            opts,
            instAttrs
          ]);
          // add global mixins
          var globalMixin = mixin$1(GLOBAL_MIXIN);
          if (globalMixin && !skipAnonymous) {
            for (var i in globalMixin) {
              if (globalMixin.hasOwnProperty(i)) {
                this$1.mixin(globalMixin[i])
              }
            }
          }
          if (impl.fn) {
            impl.fn.call(this, opts)
          }
          if (!skipAnonymous) {
            this.trigger('before-mount')
          }
          // parse layout after init. fn may calculate args for nested custom tags
          parseExpressions.apply(this, [
            dom,
            expressions,
            isAnonymous
          ]);
          this.update(item);
          if (!isAnonymous) {
            while (dom.firstChild) {
              root.appendChild(dom.firstChild)
            }
          }
          defineProperty(this, 'root', root);
          defineProperty(this, 'isMounted', true);
          if (skipAnonymous) {
            return
          }
          // if it's not a child tag we can trigger its mount event
          if (!this.parent) {
            this.trigger('mount')
          }  // otherwise we need to wait that the parent "mount" or "updated" event gets triggered
          else {
            var p = getImmediateCustomParentTag(this.parent);
            p.one(!p.isMounted ? 'mount' : 'updated', function () {
              this$1.trigger('mount')
            })
          }
          return this
        }.bind(this));
        /**
   * Unmount the tag instance
   * @param { Boolean } mustKeepRoot - if it's true the root node will not be removed
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'unmount', function tagUnmount(mustKeepRoot) {
          var this$1 = this;
          var el = this.root, p = el.parentNode, ptag, tagIndex = __TAGS_CACHE.indexOf(this);
          if (!skipAnonymous) {
            this.trigger('before-unmount')
          }
          // clear all attributes coming from the mounted tag
          walkAttrs(impl.attrs, function (name) {
            if (startsWith(name, ATTRS_PREFIX)) {
              name = name.slice(ATTRS_PREFIX.length)
            }
            remAttr(root, name)
          });
          // remove this tag instance from the global virtualDom variable
          if (tagIndex !== -1) {
            __TAGS_CACHE.splice(tagIndex, 1)
          }
          if (p || isVirtual) {
            if (parent) {
              ptag = getImmediateCustomParentTag(parent);
              if (isVirtual) {
                Object.keys(this.tags).forEach(function (tagName) {
                  arrayishRemove(ptag.tags, tagName, this$1.tags[tagName])
                })
              } else {
                arrayishRemove(ptag.tags, tagName, this);
                if (parent !== ptag)
                  // remove from _parent too
                  {
                    arrayishRemove(parent.tags, tagName, this)
                  }
              }
            } else {
              while (el.firstChild) {
                el.removeChild(el.firstChild)
              }
            }
            if (p) {
              if (!mustKeepRoot) {
                p.removeChild(el)
              } else {
                // the riot-tag and the data-is attributes aren't needed anymore, remove them
                remAttr(p, IS_DIRECTIVE)
              }
            }
          }
          if (this.__.virts) {
            each(this.__.virts, function (v) {
              if (v.parentNode) {
                v.parentNode.removeChild(v)
              }
            })
          }
          // allow expressions to unmount themselves
          unmountAll(expressions);
          each(instAttrs, function (a) {
            return a.expr && a.expr.unmount && a.expr.unmount()
          });
          // custom internal unmount function to avoid relying on the observable
          if (this.__.onUnmount) {
            this.__.onUnmount()
          }
          if (!skipAnonymous) {
            this.trigger('unmount');
            this.off('*')
          }
          defineProperty(this, 'isMounted', false);
          delete this.root._tag;
          return this
        }.bind(this))
      }
      /**
 * Detect the tag implementation by a DOM node
 * @param   { Object } dom - DOM node we need to parse to get its tag implementation
 * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
 */
      function getTag(dom) {
        return dom.tagName && __TAG_IMPL[getAttr(dom, IS_DIRECTIVE) || getAttr(dom, IS_DIRECTIVE) || dom.tagName.toLowerCase()]
      }
      /**
 * Inherit properties from a target tag instance
 * @this Tag
 * @param   { Tag } target - tag where we will inherit properties
 * @param   { Array } propsInSyncWithParent - array of properties to sync with the target
 */
      function inheritFrom(target, propsInSyncWithParent) {
        var this$1 = this;
        each(Object.keys(target), function (k) {
          // some properties must be always in sync with the parent tag
          var mustSync = !isReservedName(k) && contains(propsInSyncWithParent, k);
          if (isUndefined(this$1[k]) || mustSync) {
            // track the property to keep in sync
            // so we can keep it updated
            if (!mustSync) {
              propsInSyncWithParent.push(k)
            }
            this$1[k] = target[k]
          }
        })
      }
      /**
 * Move the position of a custom tag in its parent tag
 * @this Tag
 * @param   { String } tagName - key where the tag was stored
 * @param   { Number } newPos - index where the new tag will be stored
 */
      function moveChildTag(tagName, newPos) {
        var parent = this.parent, tags;
        // no parent no move
        if (!parent) {
          return
        }
        tags = parent.tags[tagName];
        if (isArray(tags)) {
          tags.splice(newPos, 0, tags.splice(tags.indexOf(this), 1)[0])
        } else {
          arrayishAdd(parent.tags, tagName, this)
        }
      }
      /**
 * Create a new child tag including it correctly into its parent
 * @param   { Object } child - child tag implementation
 * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
 * @param   { String } innerHTML - inner html of the child node
 * @param   { Object } parent - instance of the parent tag including the child custom tag
 * @returns { Object } instance of the new child tag just created
 */
      function initChildTag(child, opts, innerHTML, parent) {
        var tag = new Tag$1(child, opts, innerHTML), tagName = opts.tagName || getTagName(opts.root, true), ptag = getImmediateCustomParentTag(parent);
        // fix for the parent attribute in the looped elements
        defineProperty(tag, 'parent', ptag);
        // store the real parent tag
        // in some cases this could be different from the custom parent tag
        // for example in nested loops
        tag.__.parent = parent;
        // add this tag to the custom parent tag
        arrayishAdd(ptag.tags, tagName, tag);
        // and also to the real parent tag
        if (ptag !== parent) {
          arrayishAdd(parent.tags, tagName, tag)
        }
        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        opts.root.innerHTML = '';
        return tag
      }
      /**
 * Loop backward all the parents tree to detect the first custom parent tag
 * @param   { Object } tag - a Tag instance
 * @returns { Object } the instance of the first custom parent tag found
 */
      function getImmediateCustomParentTag(tag) {
        var ptag = tag;
        while (ptag.__.isAnonymous) {
          if (!ptag.parent) {
            break
          }
          ptag = ptag.parent
        }
        return ptag
      }
      /**
 * Trigger the unmount method on all the expressions
 * @param   { Array } expressions - DOM expressions
 */
      function unmountAll(expressions) {
        each(expressions, function (expr) {
          if (expr instanceof Tag$1) {
            expr.unmount(true)
          } else if (expr.unmount) {
            expr.unmount()
          }
        })
      }
      /**
 * Get the tag name of any DOM node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { Boolean } skipDataIs - hack to ignore the data-is attribute when attaching to parent
 * @returns { String } name to identify this dom node in riot
 */
      function getTagName(dom, skipDataIs) {
        var child = getTag(dom), namedTag = !skipDataIs && getAttr(dom, IS_DIRECTIVE);
        return namedTag && !tmpl.hasExpr(namedTag) ? namedTag : child ? child.name : dom.tagName.toLowerCase()
      }
      /**
 * With this function we avoid that the internal Tag methods get overridden
 * @param   { Object } data - options we want to use to extend the tag instance
 * @returns { Object } clean object without containing the riot internal reserved words
 */
      function cleanUpData(data) {
        if (!(data instanceof Tag$1) && !(data && isFunction(data.trigger))) {
          return data
        }
        var o = {};
        for (var key in data) {
          if (!RE_RESERVED_NAMES.test(key)) {
            o[key] = data[key]
          }
        }
        return o
      }
      /**
 * Set the property of an object for a given key. If something already
 * exists there, then it becomes an array containing both the old and new value.
 * @param { Object } obj - object on which to set the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be set
 * @param { Boolean } ensureArray - ensure that the property remains an array
 * @param { Number } index - add the new item in a certain array position
 */
      function arrayishAdd(obj, key, value, ensureArray, index) {
        var dest = obj[key];
        var isArr = isArray(dest);
        var hasIndex = !isUndefined(index);
        if (dest && dest === value) {
          return
        }
        // if the key was never set, set it once
        if (!dest && ensureArray) {
          obj[key] = [value]
        } else if (!dest) {
          obj[key] = value
        }  // if it was an array and not yet set
        else {
          if (isArr) {
            var oldIndex = dest.indexOf(value);
            // this item never changed its position
            if (oldIndex === index) {
              return
            }
            // remove the item from its old position
            if (oldIndex !== -1) {
              dest.splice(oldIndex, 1)
            }
            // move or add the item
            if (hasIndex) {
              dest.splice(index, 0, value)
            } else {
              dest.push(value)
            }
          } else {
            obj[key] = [
              dest,
              value
            ]
          }
        }
      }
      /**
 * Removes an item from an object at a given key. If the key points to an array,
 * then the item is just removed from the array.
 * @param { Object } obj - object on which to remove the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be removed
 * @param { Boolean } ensureArray - ensure that the property remains an array
*/
      function arrayishRemove(obj, key, value, ensureArray) {
        if (isArray(obj[key])) {
          var index = obj[key].indexOf(value);
          if (index !== -1) {
            obj[key].splice(index, 1)
          }
          if (!obj[key].length) {
            delete obj[key]
          } else if (obj[key].length === 1 && !ensureArray) {
            obj[key] = obj[key][0]
          }
        } else {
          delete obj[key]
        }  // otherwise just delete the key
      }
      /**
 * Check whether a DOM node is in stub mode, useful for the riot 'if' directive
 * @param   { Object }  dom - DOM node we want to parse
 * @returns { Boolean } -
 */
      function isInStub(dom) {
        while (dom) {
          if (dom.inStub) {
            return true
          }
          dom = dom.parentNode
        }
        return false
      }
      /**
 * Mount a tag creating new Tag instance
 * @param   { Object } root - dom node where the tag will be mounted
 * @param   { String } tagName - name of the riot tag we want to mount
 * @param   { Object } opts - options to pass to the Tag instance
 * @param   { Object } ctx - optional context that will be used to extend an existing class ( used in riot.Tag )
 * @returns { Tag } a new Tag instance
 */
      function mountTo(root, tagName, opts, ctx) {
        var impl = __TAG_IMPL[tagName], implClass = __TAG_IMPL[tagName].class, tag = ctx || (implClass ? Object.create(implClass.prototype) : {}),
          // cache the inner HTML to fix #855
          innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
        // clear the inner html
        root.innerHTML = '';
        var conf = {
          root: root,
          opts: opts
        };
        if (opts && opts.parent) {
          conf.parent = opts.parent
        }
        if (impl && root) {
          Tag$1.apply(tag, [
            impl,
            conf,
            innerHTML
          ])
        }
        if (tag && tag.mount) {
          tag.mount(true);
          // add this tag to the virtualDom variable
          if (!contains(__TAGS_CACHE, tag)) {
            __TAGS_CACHE.push(tag)
          }
        }
        return tag
      }
      /**
 * makes a tag virtual and replaces a reference in the dom
 * @this Tag
 * @param { tag } the tag to make virtual
 * @param { ref } the dom reference location
 */
      function makeReplaceVirtual(tag, ref) {
        var frag = createFrag();
        makeVirtual.call(tag, frag);
        ref.parentNode.replaceChild(frag, ref)
      }
      /**
 * Adds the elements for a virtual tag
 * @this Tag
 * @param { Node } src - the node that will do the inserting or appending
 * @param { Tag } target - only if inserting, insert before this tag's first child
 */
      function makeVirtual(src, target) {
        var this$1 = this;
        var head = createDOMPlaceholder(), tail = createDOMPlaceholder(), frag = createFrag(), sib, el;
        this.__.head = this.root.insertBefore(head, this.root.firstChild);
        this.__.tail = this.root.appendChild(tail);
        el = this.__.head;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          this$1.__.virts.push(el);
          // hold for unmounting
          el = sib
        }
        if (target) {
          src.insertBefore(frag, target.__.head)
        } else {
          src.appendChild(frag)
        }
      }
      /**
 * Move virtual tag and all child nodes
 * @this Tag
 * @param { Node } src  - the node that will do the inserting
 * @param { Tag } target - insert before this tag's first child
 */
      function moveVirtual(src, target) {
        var this$1 = this;
        var el = this.__.head, frag = createFrag(), sib;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          el = sib;
          if (el === this$1.__.tail) {
            frag.appendChild(el);
            src.insertBefore(frag, target.__.head);
            break
          }
        }
      }
      /**
 * Get selectors for tags
 * @param   { Array } tags - tag names to select
 * @returns { String } selector
 */
      function selectTags(tags) {
        // select all tags
        if (!tags) {
          var keys = Object.keys(__TAG_IMPL);
          return keys + selectTags(keys)
        }
        return tags.filter(function (t) {
          return !/[^-\w]/.test(t)
        }).reduce(function (list, t) {
          var name = t.trim().toLowerCase();
          return list + ',[' + IS_DIRECTIVE + '="' + name + '"]'
        }, '')
      }
      var tags = Object.freeze({
        getTag: getTag,
        inheritFrom: inheritFrom,
        moveChildTag: moveChildTag,
        initChildTag: initChildTag,
        getImmediateCustomParentTag: getImmediateCustomParentTag,
        unmountAll: unmountAll,
        getTagName: getTagName,
        cleanUpData: cleanUpData,
        arrayishAdd: arrayishAdd,
        arrayishRemove: arrayishRemove,
        isInStub: isInStub,
        mountTo: mountTo,
        makeReplaceVirtual: makeReplaceVirtual,
        makeVirtual: makeVirtual,
        moveVirtual: moveVirtual,
        selectTags: selectTags
      });
      /**
 * Riot public api
 */
      var settings = settings$1;
      var util = {
        tmpl: tmpl,
        brackets: brackets,
        styleManager: styleManager,
        vdom: __TAGS_CACHE,
        styleNode: styleManager.styleNode,
        // export the riot internal utils as well
        dom: dom,
        check: check,
        misc: misc,
        tags: tags
      };
      // export the core props/methods
      var Tag$$1 = Tag$2;
      var tag$$1 = tag$1;
      var tag2$$1 = tag2$1;
      var mount$$1 = mount$1;
      var mixin$$1 = mixin$1;
      var update$$1 = update$1;
      var unregister$$1 = unregister$1;
      var observable = observable$1;
      var riot$1 = extend({}, core, {
        observable: observable$1,
        settings: settings,
        util: util
      });
      exports.settings = settings;
      exports.util = util;
      exports.Tag = Tag$$1;
      exports.tag = tag$$1;
      exports.tag2 = tag2$$1;
      exports.mount = mount$$1;
      exports.mixin = mixin$$1;
      exports.update = update$$1;
      exports.unregister = unregister$$1;
      exports.observable = observable;
      exports['default'] = riot$1;
      Object.defineProperty(exports, '__esModule', { value: true })
    }))
  });
  // source: node_modules/riot-observable/dist/observable.js
  rqzt.define('riot-observable/dist/observable', function (module, exports, __dirname, __filename, process) {
    ;
    (function (window, undefined) {
      var observable = function (el) {
        /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
        el = el || {};
        /**
   * Private variables
   */
        var callbacks = {}, slice = Array.prototype.slice;
        /**
   * Public Api
   */
        // extend the el object adding the observable methods
        Object.defineProperties(el, {
          /**
     * Listen to the given `event` ands
     * execute the `callback` each time an event is triggered.
     * @param  { String } event - event id
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
          on: {
            value: function (event, fn) {
              if (typeof fn == 'function')
                (callbacks[event] = callbacks[event] || []).push(fn);
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Removes the given `event` listeners
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          off: {
            value: function (event, fn) {
              if (event == '*' && !fn)
                callbacks = {};
              else {
                if (fn) {
                  var arr = callbacks[event];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn)
                      arr.splice(i--, 1)
                  }
                } else
                  delete callbacks[event]
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Listen to the given `event` and
     * execute the `callback` at most once
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          one: {
            value: function (event, fn) {
              function on() {
                el.off(event, on);
                fn.apply(el, arguments)
              }
              return el.on(event, on)
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Execute all callback functions that listen to
     * the given `event`
     * @param   { String } event - event id
     * @returns { Object } el
     */
          trigger: {
            value: function (event) {
              // getting the arguments
              var arglen = arguments.length - 1, args = new Array(arglen), fns, fn, i;
              for (i = 0; i < arglen; i++) {
                args[i] = arguments[i + 1]  // skip first argument
              }
              fns = slice.call(callbacks[event] || [], 0);
              for (i = 0; fn = fns[i]; ++i) {
                fn.apply(el, args)
              }
              if (callbacks['*'] && event != '*')
                el.trigger.apply(el, [
                  '*',
                  event
                ].concat(args));
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          }
        });
        return el
      };
      /* istanbul ignore next */
      // support CommonJS, AMD & browser
      if (typeof exports === 'object')
        module.exports = observable;
      else if (typeof define === 'function' && define.amd)
        define(function () {
          return observable
        });
      else
        window.observable = observable
    }(typeof window != 'undefined' ? window : undefined))
  });
  // source: node_modules/raf/index.js
  rqzt.define('raf', function (module, exports, __dirname, __filename, process) {
    var now = rqzt('performance-now/lib/performance-now'), root = typeof window === 'undefined' ? global : window, vendors = [
        'moz',
        'webkit'
      ], suffix = 'AnimationFrame', raf = root['request' + suffix], caf = root['cancel' + suffix] || root['cancelRequest' + suffix];
    for (var i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + 'Request' + suffix];
      caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix]
    }
    // Some versions of FF have rAF but not cAF
    if (!raf || !caf) {
      var last = 0, id = 0, queue = [], frameDuration = 1000 / 60;
      raf = function (callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function () {
            var cp = queue.slice(0);
            // Clear queue here to prevent
            // callbacks from appending listeners
            // to the current frame's queue
            queue.length = 0;
            for (var i = 0; i < cp.length; i++) {
              if (!cp[i].cancelled) {
                try {
                  cp[i].callback(last)
                } catch (e) {
                  setTimeout(function () {
                    throw e
                  }, 0)
                }
              }
            }
          }, Math.round(next))
        }
        queue.push({
          handle: ++id,
          callback: callback,
          cancelled: false
        });
        return id
      };
      caf = function (handle) {
        for (var i = 0; i < queue.length; i++) {
          if (queue[i].handle === handle) {
            queue[i].cancelled = true
          }
        }
      }
    }
    module.exports = function (fn) {
      // Wrap in a new function to prevent
      // `cancel` potentially being assigned
      // to the native rAF function
      return raf.call(root, fn)
    };
    module.exports.cancel = function () {
      caf.apply(root, arguments)
    };
    module.exports.polyfill = function () {
      root.requestAnimationFrame = raf;
      root.cancelAnimationFrame = caf
    }
  });
  // source: node_modules/performance-now/lib/performance-now.js
  rqzt.define('performance-now/lib/performance-now', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.7.1
    (function () {
      var getNanoSeconds, hrtime, loadTime;
      if (typeof performance !== 'undefined' && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now()
        }
      } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - loadTime) / 1000000
        };
        hrtime = process.hrtime;
        getNanoSeconds = function () {
          var hr;
          hr = hrtime();
          return hr[0] * 1000000000 + hr[1]
        };
        loadTime = getNanoSeconds()
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime
        };
        loadTime = Date.now()
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime
        };
        loadTime = new Date().getTime()
      }
    }.call(this))
  });
  // source: node_modules/crowdcontrol/lib/index.js
  rqzt.define('crowdcontrol/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var CrowdControl, r, riot;
    r = rqzt('crowdcontrol/lib/riot');
    riot = r();
    CrowdControl = {
      Views: rqzt('crowdcontrol/lib/views'),
      tags: [],
      start: function (opts) {
        return this.tags = riot.mount('*', opts)
      },
      update: function () {
        var i, len, ref, results, tag;
        ref = this.tags;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          tag = ref[i];
          results.push(tag.update())
        }
        return results
      },
      riot: r
    };
    if (module.exports != null) {
      module.exports = CrowdControl
    }
    if (typeof window !== 'undefined' && window !== null) {
      if (window.Crowdstart != null) {
        window.Crowdstart.Crowdcontrol = CrowdControl
      } else {
        window.Crowdstart = { CrowdControl: CrowdControl }
      }
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/riot.js
  rqzt.define('crowdcontrol/lib/riot', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var r;
    r = function () {
      return this.riot
    };
    r.set = function (riot) {
      this.riot = riot
    };
    r.riot = typeof window !== 'undefined' && window !== null ? window.riot : void 0;
    module.exports = r  //# sourceMappingURL=riot.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/index.js
  rqzt.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      Form: rqzt('crowdcontrol/lib/views/form'),
      Input: rqzt('crowdcontrol/lib/views/input'),
      View: rqzt('crowdcontrol/lib/views/view')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/form.js
  rqzt.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    inputify = rqzt('crowdcontrol/lib/views/inputify');
    observable = rqzt('crowdcontrol/lib/riot')().observable;
    Promise = rqzt('broken/lib');
    settle = rqzt('promise-settle');
    Form = function (superClass) {
      extend(Form, superClass);
      function Form() {
        return Form.__super__.constructor.apply(this, arguments)
      }
      Form.prototype.configs = null;
      Form.prototype.inputs = null;
      Form.prototype.data = null;
      Form.prototype.initInputs = function () {
        var input, name, ref, results1;
        this.inputs = {};
        if (this.configs != null) {
          this.inputs = inputify(this.data, this.configs);
          ref = this.inputs;
          results1 = [];
          for (name in ref) {
            input = ref[name];
            results1.push(observable(input))
          }
          return results1
        }
      };
      Form.prototype.init = function () {
        return this.initInputs()
      };
      Form.prototype.submit = function (e) {
        var input, name, pRef, ps, ref;
        ps = [];
        ref = this.inputs;
        for (name in ref) {
          input = ref[name];
          pRef = {};
          input.trigger('validate', pRef);
          ps.push(pRef.p)
        }
        settle(ps).then(function (_this) {
          return function (results) {
            var i, len, result;
            for (i = 0, len = results.length; i < len; i++) {
              result = results[i];
              if (!result.isFulfilled()) {
                return
              }
            }
            return _this._submit.apply(_this, arguments)
          }
        }(this));
        if (e != null) {
          e.preventDefault();
          e.stopPropagation()
        }
        return false
      };
      Form.prototype._submit = function () {
      };
      return Form
    }(View);
    module.exports = Form  //# sourceMappingURL=form.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/view.js
  rqzt.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
    riot = rqzt('crowdcontrol/lib/riot')();
    objectAssign = rqzt('object-assign');
    setPrototypeOf = function () {
      var mixinProperties, setProtoOf;
      setProtoOf = function (obj, proto) {
        return obj.__proto__ = proto
      };
      mixinProperties = function (obj, proto) {
        var prop, results;
        results = [];
        for (prop in proto) {
          if (obj[prop] == null) {
            results.push(obj[prop] = proto[prop])
          } else {
            results.push(void 0)
          }
        }
        return results
      };
      if (Object.setPrototypeOf || { __proto__: [] } instanceof Array) {
        return setProtoOf
      } else {
        return mixinProperties
      }
    }();
    isFunction = rqzt('is-function');
    collapsePrototype = function (collapse, proto) {
      var parentProto;
      if (proto === View.prototype) {
        return
      }
      parentProto = Object.getPrototypeOf(proto);
      collapsePrototype(collapse, parentProto);
      return objectAssign(collapse, parentProto)
    };
    View = function () {
      View.register = function () {
        return new this
      };
      View.prototype.tag = '';
      View.prototype.html = '';
      View.prototype.css = '';
      View.prototype.attrs = '';
      View.prototype.events = null;
      function View() {
        var newProto;
        newProto = collapsePrototype({}, this);
        this.beforeInit();
        riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
          var fn, handler, k, name, parent, proto, ref, ref1, self, v;
          if (newProto != null) {
            for (k in newProto) {
              v = newProto[k];
              if (isFunction(v)) {
                (function (_this) {
                  return function (v) {
                    var oldFn;
                    if (_this[k] != null) {
                      oldFn = _this[k];
                      return _this[k] = function () {
                        oldFn.apply(_this, arguments);
                        return v.apply(_this, arguments)
                      }
                    } else {
                      return _this[k] = function () {
                        return v.apply(_this, arguments)
                      }
                    }
                  }
                }(this)(v))
              } else {
                this[k] = v
              }
            }
          }
          self = this;
          parent = (ref = self.parent) != null ? ref : opts.parent;
          proto = Object.getPrototypeOf(self);
          while (parent && parent !== proto) {
            setPrototypeOf(self, parent);
            self = parent;
            parent = self.parent;
            proto = Object.getPrototypeOf(self)
          }
          if (opts != null) {
            for (k in opts) {
              v = opts[k];
              this[k] = v
            }
          }
          if (this.events != null) {
            ref1 = this.events;
            fn = function (_this) {
              return function (name, handler) {
                if (typeof handler === 'string') {
                  return _this.on(name, function () {
                    return _this[handler].apply(_this, arguments)
                  })
                } else {
                  return _this.on(name, function () {
                    return handler.apply(_this, arguments)
                  })
                }
              }
            }(this);
            for (name in ref1) {
              handler = ref1[name];
              fn(name, handler)
            }
          }
          return this.init(opts)
        })
      }
      View.prototype.beforeInit = function () {
      };
      View.prototype.init = function () {
      };
      return View
    }();
    module.exports = View  //# sourceMappingURL=view.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/inputify.js
  rqzt.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Promise, inputify, isFunction, isRef, refer;
    Promise = rqzt('broken/lib');
    isFunction = rqzt('is-function');
    refer = rqzt('referential/lib');
    isRef = function (o) {
      return o != null && isFunction(o.ref)
    };
    inputify = function (data, configs) {
      var config, fn, inputs, name, ref;
      ref = data;
      if (!isRef(ref)) {
        ref = refer(data)
      }
      inputs = {};
      fn = function (name, config) {
        var fn1, i, input, len, middleware, middlewareFn, validate;
        middleware = [];
        if (config && config.length > 0) {
          fn1 = function (name, middlewareFn) {
            return middleware.push(function (pair) {
              ref = pair[0], name = pair[1];
              return Promise.resolve(pair).then(function (pair) {
                return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
              }).then(function (v) {
                ref.set(name, v);
                return pair
              })
            })
          };
          for (i = 0, len = config.length; i < len; i++) {
            middlewareFn = config[i];
            fn1(name, middlewareFn)
          }
        }
        middleware.push(function (pair) {
          ref = pair[0], name = pair[1];
          return Promise.resolve(ref.get(name))
        });
        validate = function (ref, name) {
          var j, len1, p;
          p = Promise.resolve([
            ref,
            name
          ]);
          for (j = 0, len1 = middleware.length; j < len1; j++) {
            middlewareFn = middleware[j];
            p = p.then(middlewareFn)
          }
          return p
        };
        input = {
          name: name,
          ref: ref,
          config: config,
          validate: validate
        };
        return inputs[name] = input
      };
      for (name in configs) {
        config = configs[name];
        fn(name, config)
      }
      return inputs
    };
    module.exports = inputify  //# sourceMappingURL=inputify.js.map
  });
  // source: node_modules/referential/lib/index.js
  rqzt.define('referential/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var refer;
    refer = rqzt('referential/lib/refer');
    refer.Ref = rqzt('referential/lib/ref');
    module.exports = refer  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/referential/lib/refer.js
  rqzt.define('referential/lib/refer', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Ref, refer;
    Ref = rqzt('referential/lib/ref');
    module.exports = refer = function (state, ref) {
      var fn, i, len, method, ref1, wrapper;
      if (ref == null) {
        ref = null
      }
      if (ref == null) {
        ref = new Ref(state)
      }
      wrapper = function (key) {
        return ref.get(key)
      };
      ref1 = [
        'value',
        'get',
        'set',
        'extend',
        'index',
        'ref'
      ];
      fn = function (method) {
        return wrapper[method] = function () {
          return ref[method].apply(ref, arguments)
        }
      };
      for (i = 0, len = ref1.length; i < len; i++) {
        method = ref1[i];
        fn(method)
      }
      wrapper.refer = function (key) {
        return refer(null, ref.ref(key))
      };
      wrapper.clone = function (key) {
        return refer(null, ref.clone(key))
      };
      return wrapper
    }  //# sourceMappingURL=refer.js.map
  });
  // source: node_modules/referential/lib/ref.js
  rqzt.define('referential/lib/ref', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Ref, extend, isArray, isNumber, isObject, isString;
    extend = rqzt('node.extend');
    isArray = rqzt('is-array');
    isNumber = rqzt('is-number');
    isObject = rqzt('is-object');
    isString = rqzt('is-string');
    module.exports = Ref = function () {
      function Ref(_value, parent, key1) {
        this._value = _value;
        this.parent = parent;
        this.key = key1;
        this._cache = {}
      }
      Ref.prototype._mutate = function () {
        return this._cache = {}
      };
      Ref.prototype.value = function (state) {
        if (!this.parent) {
          if (state != null) {
            this._value = state
          }
          return this._value
        }
        if (state != null) {
          return this.parent.set(this.key, state)
        } else {
          return this.parent.get(this.key)
        }
      };
      Ref.prototype.ref = function (key) {
        if (!key) {
          return this
        }
        return new Ref(null, this, key)
      };
      Ref.prototype.get = function (key) {
        if (!key) {
          return this.value()
        } else {
          if (this._cache[key]) {
            return this._cache[key]
          }
          return this._cache[key] = this.index(key)
        }
      };
      Ref.prototype.set = function (key, value) {
        this._mutate();
        if (value == null) {
          this.value(extend(this.value(), key))
        } else {
          this.index(key, value)
        }
        return this
      };
      Ref.prototype.extend = function (key, value) {
        var clone;
        this._mutate();
        if (value == null) {
          this.value(extend(true, this.value(), key))
        } else {
          if (isObject(value)) {
            this.value(extend(true, this.ref(key).get(), value))
          } else {
            clone = this.clone();
            this.set(key, value);
            this.value(extend(true, clone.get(), this.value()))
          }
        }
        return this
      };
      Ref.prototype.clone = function (key) {
        return new Ref(extend(true, {}, this.get(key)))
      };
      Ref.prototype.index = function (key, value, obj, prev) {
        var next, prop, props;
        if (obj == null) {
          obj = this.value()
        }
        if (this.parent) {
          return this.parent.index(this.key + '.' + key, value)
        }
        if (isNumber(key)) {
          key = String(key)
        }
        props = key.split('.');
        if (value == null) {
          while (prop = props.shift()) {
            if (!props.length) {
              return obj != null ? obj[prop] : void 0
            }
            obj = obj != null ? obj[prop] : void 0
          }
          return
        }
        while (prop = props.shift()) {
          if (!props.length) {
            return obj[prop] = value
          } else {
            next = props[0];
            if (obj[next] == null) {
              if (isNumber(next)) {
                if (obj[prop] == null) {
                  obj[prop] = []
                }
              } else {
                if (obj[prop] == null) {
                  obj[prop] = {}
                }
              }
            }
          }
          obj = obj[prop]
        }
      };
      return Ref
    }()  //# sourceMappingURL=ref.js.map
  });
  // source: node_modules/node.extend/index.js
  rqzt.define('node.extend', function (module, exports, __dirname, __filename, process) {
    module.exports = rqzt('node.extend/lib/extend')
  });
  // source: node_modules/node.extend/lib/extend.js
  rqzt.define('node.extend/lib/extend', function (module, exports, __dirname, __filename, process) {
    /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
    var is = rqzt('is');
    function extend() {
      var target = arguments[0] || {};
      var i = 1;
      var length = arguments.length;
      var deep = false;
      var options, name, src, copy, copy_is_array, clone;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      }
      // Handle case when target is a string or something (possible in deep copy)
      if (typeof target !== 'object' && !is.fn(target)) {
        target = {}
      }
      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        options = arguments[i];
        if (options != null) {
          if (typeof options === 'string') {
            options = options.split('')
          }
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
              if (copy_is_array) {
                copy_is_array = false;
                clone = src && is.array(src) ? src : []
              } else {
                clone = src && is.hash(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    }
    ;
    /**
 * @public
 */
    extend.version = '1.1.3';
    /**
 * Exports module.
 */
    module.exports = extend
  });
  // source: node_modules/is/index.js
  rqzt.define('is', function (module, exports, __dirname, __filename, process) {
    /* globals window, HTMLElement */
    'use strict';
    /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
    var objProto = Object.prototype;
    var owns = objProto.hasOwnProperty;
    var toStr = objProto.toString;
    var symbolValueOf;
    if (typeof Symbol === 'function') {
      symbolValueOf = Symbol.prototype.valueOf
    }
    var isActualNaN = function (value) {
      return value !== value
    };
    var NON_HOST_TYPES = {
      'boolean': 1,
      number: 1,
      string: 1,
      undefined: 1
    };
    var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
    var hexRegex = /^[A-Fa-f0-9]+$/;
    /**
 * Expose `is`
 */
    var is = {};
    /**
 * Test general.
 */
    /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
    is.a = is.type = function (value, type) {
      return typeof value === type
    };
    /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
    is.defined = function (value) {
      return typeof value !== 'undefined'
    };
    /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
    is.empty = function (value) {
      var type = toStr.call(value);
      var key;
      if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
        return value.length === 0
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (owns.call(value, key)) {
            return false
          }
        }
        return true
      }
      return !value
    };
    /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
    is.equal = function equal(value, other) {
      if (value === other) {
        return true
      }
      var type = toStr.call(value);
      var key;
      if (type !== toStr.call(other)) {
        return false
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (!is.equal(value[key], other[key]) || !(key in other)) {
            return false
          }
        }
        for (key in other) {
          if (!is.equal(value[key], other[key]) || !(key in value)) {
            return false
          }
        }
        return true
      }
      if (type === '[object Array]') {
        key = value.length;
        if (key !== other.length) {
          return false
        }
        while (key--) {
          if (!is.equal(value[key], other[key])) {
            return false
          }
        }
        return true
      }
      if (type === '[object Function]') {
        return value.prototype === other.prototype
      }
      if (type === '[object Date]') {
        return value.getTime() === other.getTime()
      }
      return false
    };
    /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
    is.hosted = function (value, host) {
      var type = typeof host[value];
      return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
    };
    /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
    is.instance = is['instanceof'] = function (value, constructor) {
      return value instanceof constructor
    };
    /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
    is.nil = is['null'] = function (value) {
      return value === null
    };
    /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
    is.undef = is.undefined = function (value) {
      return typeof value === 'undefined'
    };
    /**
 * Test arguments.
 */
    /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.args = is.arguments = function (value) {
      var isStandardArguments = toStr.call(value) === '[object Arguments]';
      var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
      return isStandardArguments || isOldArguments
    };
    /**
 * Test array.
 */
    /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
    is.array = Array.isArray || function (value) {
      return toStr.call(value) === '[object Array]'
    };
    /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
    is.args.empty = function (value) {
      return is.args(value) && value.length === 0
    };
    /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
    is.array.empty = function (value) {
      return is.array(value) && value.length === 0
    };
    /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.arraylike = function (value) {
      return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
    };
    /**
 * Test boolean.
 */
    /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
    is.bool = is['boolean'] = function (value) {
      return toStr.call(value) === '[object Boolean]'
    };
    /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
    is['false'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === false
    };
    /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
    is['true'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === true
    };
    /**
 * Test date.
 */
    /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
    is.date = function (value) {
      return toStr.call(value) === '[object Date]'
    };
    /**
 * is.date.valid
 * Test if `value` is a valid date.
 *
 * @param {Mixed} value value to test
 * @returns {Boolean} true if `value` is a valid date, false otherwise
 */
    is.date.valid = function (value) {
      return is.date(value) && !isNaN(Number(value))
    };
    /**
 * Test element.
 */
    /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
    is.element = function (value) {
      return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
    };
    /**
 * Test error.
 */
    /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
    is.error = function (value) {
      return toStr.call(value) === '[object Error]'
    };
    /**
 * Test function.
 */
    /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
    is.fn = is['function'] = function (value) {
      var isAlert = typeof window !== 'undefined' && value === window.alert;
      return isAlert || toStr.call(value) === '[object Function]'
    };
    /**
 * Test number.
 */
    /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
    is.number = function (value) {
      return toStr.call(value) === '[object Number]'
    };
    /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
    is.infinite = function (value) {
      return value === Infinity || value === -Infinity
    };
    /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
    is.decimal = function (value) {
      return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
    };
    /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
    is.divisibleBy = function (value, n) {
      var isDividendInfinite = is.infinite(value);
      var isDivisorInfinite = is.infinite(n);
      var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
      return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
    };
    /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
    is.integer = is['int'] = function (value) {
      return is.number(value) && !isActualNaN(value) && value % 1 === 0
    };
    /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
    is.maximum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value < others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
    is.minimum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value > others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
    is.nan = function (value) {
      return !is.number(value) || value !== value
    };
    /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
    is.even = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
    };
    /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
    is.odd = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
    };
    /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.ge = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value >= other
    };
    /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.gt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value > other
    };
    /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
    is.le = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value <= other
    };
    /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
    is.lt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value < other
    };
    /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
    is.within = function (value, start, finish) {
      if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
        throw new TypeError('all arguments must be numbers')
      }
      var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
      return isAnyInfinite || value >= start && value <= finish
    };
    /**
 * Test object.
 */
    /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
    is.object = function (value) {
      return toStr.call(value) === '[object Object]'
    };
    /**
 * is.primitive
 * Test if `value` is a primitive.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a primitive, false otherwise
 * @api public
 */
    is.primitive = function isPrimitive(value) {
      if (!value) {
        return true
      }
      if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {
        return false
      }
      return true
    };
    /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
    is.hash = function (value) {
      return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
    };
    /**
 * Test regexp.
 */
    /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
    is.regexp = function (value) {
      return toStr.call(value) === '[object RegExp]'
    };
    /**
 * Test string.
 */
    /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
    is.string = function (value) {
      return toStr.call(value) === '[object String]'
    };
    /**
 * Test base64 string.
 */
    /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
    is.base64 = function (value) {
      return is.string(value) && (!value.length || base64Regex.test(value))
    };
    /**
 * Test base64 string.
 */
    /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
    is.hex = function (value) {
      return is.string(value) && (!value.length || hexRegex.test(value))
    };
    /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
    is.symbol = function (value) {
      return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
    };
    module.exports = is
  });
  // source: node_modules/is-array/index.js
  rqzt.define('is-array', function (module, exports, __dirname, __filename, process) {
    /**
 * isArray
 */
    var isArray = Array.isArray;
    /**
 * toString
 */
    var str = Object.prototype.toString;
    /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
    module.exports = isArray || function (val) {
      return !!val && '[object Array]' == str.call(val)
    }
  });
  // source: node_modules/is-number/index.js
  rqzt.define('is-number', function (module, exports, __dirname, __filename, process) {
    /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
    'use strict';
    var typeOf = rqzt('kind-of');
    module.exports = function isNumber(num) {
      var type = typeOf(num);
      if (type !== 'number' && type !== 'string') {
        return false
      }
      var n = +num;
      return n - n + 1 >= 0 && num !== ''
    }
  });
  // source: node_modules/kind-of/index.js
  rqzt.define('kind-of', function (module, exports, __dirname, __filename, process) {
    var isBuffer = rqzt('is-buffer');
    var toString = Object.prototype.toString;
    /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
    module.exports = function kindOf(val) {
      // primitivies
      if (typeof val === 'undefined') {
        return 'undefined'
      }
      if (val === null) {
        return 'null'
      }
      if (val === true || val === false || val instanceof Boolean) {
        return 'boolean'
      }
      if (typeof val === 'string' || val instanceof String) {
        return 'string'
      }
      if (typeof val === 'number' || val instanceof Number) {
        return 'number'
      }
      // functions
      if (typeof val === 'function' || val instanceof Function) {
        return 'function'
      }
      // array
      if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
        return 'array'
      }
      // check for instances of RegExp and Date before calling `toString`
      if (val instanceof RegExp) {
        return 'regexp'
      }
      if (val instanceof Date) {
        return 'date'
      }
      // other objects
      var type = toString.call(val);
      if (type === '[object RegExp]') {
        return 'regexp'
      }
      if (type === '[object Date]') {
        return 'date'
      }
      if (type === '[object Arguments]') {
        return 'arguments'
      }
      if (type === '[object Error]') {
        return 'error'
      }
      // buffer
      if (typeof Buffer !== 'undefined' && isBuffer(val)) {
        return 'buffer'
      }
      // es6: Map, WeakMap, Set, WeakSet
      if (type === '[object Set]') {
        return 'set'
      }
      if (type === '[object WeakSet]') {
        return 'weakset'
      }
      if (type === '[object Map]') {
        return 'map'
      }
      if (type === '[object WeakMap]') {
        return 'weakmap'
      }
      if (type === '[object Symbol]') {
        return 'symbol'
      }
      // typed arrays
      if (type === '[object Int8Array]') {
        return 'int8array'
      }
      if (type === '[object Uint8Array]') {
        return 'uint8array'
      }
      if (type === '[object Uint8ClampedArray]') {
        return 'uint8clampedarray'
      }
      if (type === '[object Int16Array]') {
        return 'int16array'
      }
      if (type === '[object Uint16Array]') {
        return 'uint16array'
      }
      if (type === '[object Int32Array]') {
        return 'int32array'
      }
      if (type === '[object Uint32Array]') {
        return 'uint32array'
      }
      if (type === '[object Float32Array]') {
        return 'float32array'
      }
      if (type === '[object Float64Array]') {
        return 'float64array'
      }
      // must be a plain object
      return 'object'
    }
  });
  // source: node_modules/is-buffer/index.js
  rqzt.define('is-buffer', function (module, exports, __dirname, __filename, process) {
    /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }
    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }
  });
  // source: node_modules/is-object/index.js
  rqzt.define('is-object', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: node_modules/is-string/index.js
  rqzt.define('is-string', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject(value) {
      try {
        strValue.call(value);
        return true
      } catch (e) {
        return false
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = '[object String]';
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
    module.exports = function isString(value) {
      if (typeof value === 'string') {
        return true
      }
      if (typeof value !== 'object') {
        return false
      }
      return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
    }
  });
  // source: node_modules/promise-settle/index.js
  rqzt.define('promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = rqzt('promise-settle/lib/promise-settle')
  });
  // source: node_modules/promise-settle/lib/promise-settle.js
  rqzt.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = settle;
    function settle(promises) {
      return Promise.resolve().then(function () {
        return promises
      }).then(function (promises) {
        if (!Array.isArray(promises))
          throw new TypeError('Expected an array of Promises');
        var promiseResults = promises.map(function (promise) {
          return Promise.resolve().then(function () {
            return promise
          }).then(function (result) {
            return promiseResult(result)
          }).catch(function (err) {
            return promiseResult(null, err)
          })
        });
        return Promise.all(promiseResults)
      })
    }
    function promiseResult(result, err) {
      var isFulfilled = typeof err === 'undefined';
      var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
      var isRejected = !isFulfilled;
      var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
      return {
        isFulfilled: returns.bind(isFulfilled),
        isRejected: returns.bind(isRejected),
        value: value,
        reason: reason
      }
    }
    function returns() {
      return this
    }
    function throws() {
      throw this
    }
  });
  // source: node_modules/crowdcontrol/lib/views/input.js
  rqzt.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Input, View, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    Input = function (superClass) {
      extend(Input, superClass);
      function Input() {
        return Input.__super__.constructor.apply(this, arguments)
      }
      Input.prototype.input = null;
      Input.prototype.valid = false;
      Input.prototype.errorMessage = '';
      Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
      Input.prototype.beforeInit = function () {
        return this.html += this.errorHtml
      };
      Input.prototype.init = function () {
        return this.input.on('validate', function (_this) {
          return function (pRef) {
            return _this.validate(pRef)
          }
        }(this))
      };
      Input.prototype.getValue = function (event) {
        return event.target.value
      };
      Input.prototype.change = function (event) {
        var name, ref, ref1, value;
        ref1 = this.input, ref = ref1.ref, name = ref1.name;
        value = this.getValue(event);
        if (value === ref.get(name)) {
          return
        }
        this.input.ref.set(name, value);
        this.clearError();
        return this.validate()
      };
      Input.prototype.error = function (err) {
        var ref1;
        return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
      };
      Input.prototype.changed = function () {
      };
      Input.prototype.clearError = function () {
        return this.errorMessage = ''
      };
      Input.prototype.validate = function (pRef) {
        var p;
        p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
          return function (value) {
            _this.changed(value);
            _this.valid = true;
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.error(err);
            _this.valid = false;
            _this.update();
            throw err
          }
        }(this));
        if (pRef != null) {
          pRef.p = p
        }
        return p
      };
      return Input
    }(View);
    module.exports = Input  //# sourceMappingURL=input.js.map
  });
  // source: node_modules/tween.js/src/Tween.js
  rqzt.define('tween.js/src/Tween', function (module, exports, __dirname, __filename, process) {
    /**
 * Tween.js - Licensed under the MIT license
 * https://github.com/tweenjs/tween.js
 * ----------------------------------------------
 *
 * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
 * Thank you all, you're awesome!
 */
    var TWEEN = TWEEN || function () {
      var _tweens = [];
      return {
        getAll: function () {
          return _tweens
        },
        removeAll: function () {
          _tweens = []
        },
        add: function (tween) {
          _tweens.push(tween)
        },
        remove: function (tween) {
          var i = _tweens.indexOf(tween);
          if (i !== -1) {
            _tweens.splice(i, 1)
          }
        },
        update: function (time, preserve) {
          if (_tweens.length === 0) {
            return false
          }
          var i = 0;
          time = time !== undefined ? time : TWEEN.now();
          while (i < _tweens.length) {
            if (_tweens[i].update(time) || preserve) {
              i++
            } else {
              _tweens.splice(i, 1)
            }
          }
          return true
        }
      }
    }();
    // Include a performance.now polyfill.
    // In node.js, use process.hrtime.
    if (typeof window === 'undefined' && typeof process !== 'undefined') {
      TWEEN.now = function () {
        var time = process.hrtime();
        // Convert [seconds, nanoseconds] to milliseconds.
        return time[0] * 1000 + time[1] / 1000000
      }
    }  // In a browser, use window.performance.now if it is available.
    else if (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {
      // This must be bound, because directly assigning this function
      // leads to an invocation exception in Chrome.
      TWEEN.now = window.performance.now.bind(window.performance)
    }  // Use Date.now if it is available.
    else if (Date.now !== undefined) {
      TWEEN.now = Date.now
    }  // Otherwise, use 'new Date().getTime()'.
    else {
      TWEEN.now = function () {
        return new Date().getTime()
      }
    }
    TWEEN.Tween = function (object) {
      var _object = object;
      var _valuesStart = {};
      var _valuesEnd = {};
      var _valuesStartRepeat = {};
      var _duration = 1000;
      var _repeat = 0;
      var _repeatDelayTime;
      var _yoyo = false;
      var _isPlaying = false;
      var _reversed = false;
      var _delayTime = 0;
      var _startTime = null;
      var _easingFunction = TWEEN.Easing.Linear.None;
      var _interpolationFunction = TWEEN.Interpolation.Linear;
      var _chainedTweens = [];
      var _onStartCallback = null;
      var _onStartCallbackFired = false;
      var _onUpdateCallback = null;
      var _onCompleteCallback = null;
      var _onStopCallback = null;
      this.to = function (properties, duration) {
        _valuesEnd = properties;
        if (duration !== undefined) {
          _duration = duration
        }
        return this
      };
      this.start = function (time) {
        TWEEN.add(this);
        _isPlaying = true;
        _onStartCallbackFired = false;
        _startTime = time !== undefined ? time : TWEEN.now();
        _startTime += _delayTime;
        for (var property in _valuesEnd) {
          // Check if an Array was provided as property value
          if (_valuesEnd[property] instanceof Array) {
            if (_valuesEnd[property].length === 0) {
              continue
            }
            // Create a local copy of the Array with the start value at the front
            _valuesEnd[property] = [_object[property]].concat(_valuesEnd[property])
          }
          // If `to()` specifies a property that doesn't exist in the source object,
          // we should not set that property in the object
          if (_object[property] === undefined) {
            continue
          }
          // Save the starting value.
          _valuesStart[property] = _object[property];
          if (_valuesStart[property] instanceof Array === false) {
            _valuesStart[property] *= 1  // Ensures we're using numbers, not strings
          }
          _valuesStartRepeat[property] = _valuesStart[property] || 0
        }
        return this
      };
      this.stop = function () {
        if (!_isPlaying) {
          return this
        }
        TWEEN.remove(this);
        _isPlaying = false;
        if (_onStopCallback !== null) {
          _onStopCallback.call(_object, _object)
        }
        this.stopChainedTweens();
        return this
      };
      this.end = function () {
        this.update(_startTime + _duration);
        return this
      };
      this.stopChainedTweens = function () {
        for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
          _chainedTweens[i].stop()
        }
      };
      this.delay = function (amount) {
        _delayTime = amount;
        return this
      };
      this.repeat = function (times) {
        _repeat = times;
        return this
      };
      this.repeatDelay = function (amount) {
        _repeatDelayTime = amount;
        return this
      };
      this.yoyo = function (yoyo) {
        _yoyo = yoyo;
        return this
      };
      this.easing = function (easing) {
        _easingFunction = easing;
        return this
      };
      this.interpolation = function (interpolation) {
        _interpolationFunction = interpolation;
        return this
      };
      this.chain = function () {
        _chainedTweens = arguments;
        return this
      };
      this.onStart = function (callback) {
        _onStartCallback = callback;
        return this
      };
      this.onUpdate = function (callback) {
        _onUpdateCallback = callback;
        return this
      };
      this.onComplete = function (callback) {
        _onCompleteCallback = callback;
        return this
      };
      this.onStop = function (callback) {
        _onStopCallback = callback;
        return this
      };
      this.update = function (time) {
        var property;
        var elapsed;
        var value;
        if (time < _startTime) {
          return true
        }
        if (_onStartCallbackFired === false) {
          if (_onStartCallback !== null) {
            _onStartCallback.call(_object, _object)
          }
          _onStartCallbackFired = true
        }
        elapsed = (time - _startTime) / _duration;
        elapsed = elapsed > 1 ? 1 : elapsed;
        value = _easingFunction(elapsed);
        for (property in _valuesEnd) {
          // Don't update properties that do not exist in the source object
          if (_valuesStart[property] === undefined) {
            continue
          }
          var start = _valuesStart[property] || 0;
          var end = _valuesEnd[property];
          if (end instanceof Array) {
            _object[property] = _interpolationFunction(end, value)
          } else {
            // Parses relative end values with start as base (e.g.: +10, -3)
            if (typeof end === 'string') {
              if (end.charAt(0) === '+' || end.charAt(0) === '-') {
                end = start + parseFloat(end)
              } else {
                end = parseFloat(end)
              }
            }
            // Protect against non numeric properties.
            if (typeof end === 'number') {
              _object[property] = start + (end - start) * value
            }
          }
        }
        if (_onUpdateCallback !== null) {
          _onUpdateCallback.call(_object, value)
        }
        if (elapsed === 1) {
          if (_repeat > 0) {
            if (isFinite(_repeat)) {
              _repeat--
            }
            // Reassign starting values, restart by making startTime = now
            for (property in _valuesStartRepeat) {
              if (typeof _valuesEnd[property] === 'string') {
                _valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property])
              }
              if (_yoyo) {
                var tmp = _valuesStartRepeat[property];
                _valuesStartRepeat[property] = _valuesEnd[property];
                _valuesEnd[property] = tmp
              }
              _valuesStart[property] = _valuesStartRepeat[property]
            }
            if (_yoyo) {
              _reversed = !_reversed
            }
            if (_repeatDelayTime !== undefined) {
              _startTime = time + _repeatDelayTime
            } else {
              _startTime = time + _delayTime
            }
            return true
          } else {
            if (_onCompleteCallback !== null) {
              _onCompleteCallback.call(_object, _object)
            }
            for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
              // Make the chained tweens start exactly at the time they should,
              // even if the `update()` method was called way past the duration of the tween
              _chainedTweens[i].start(_startTime + _duration)
            }
            return false
          }
        }
        return true
      }
    };
    TWEEN.Easing = {
      Linear: {
        None: function (k) {
          return k
        }
      },
      Quadratic: {
        In: function (k) {
          return k * k
        },
        Out: function (k) {
          return k * (2 - k)
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k
          }
          return -0.5 * (--k * (k - 2) - 1)
        }
      },
      Cubic: {
        In: function (k) {
          return k * k * k
        },
        Out: function (k) {
          return --k * k * k + 1
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k * k
          }
          return 0.5 * ((k -= 2) * k * k + 2)
        }
      },
      Quartic: {
        In: function (k) {
          return k * k * k * k
        },
        Out: function (k) {
          return 1 - --k * k * k * k
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k * k * k
          }
          return -0.5 * ((k -= 2) * k * k * k - 2)
        }
      },
      Quintic: {
        In: function (k) {
          return k * k * k * k * k
        },
        Out: function (k) {
          return --k * k * k * k * k + 1
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k * k * k * k
          }
          return 0.5 * ((k -= 2) * k * k * k * k + 2)
        }
      },
      Sinusoidal: {
        In: function (k) {
          return 1 - Math.cos(k * Math.PI / 2)
        },
        Out: function (k) {
          return Math.sin(k * Math.PI / 2)
        },
        InOut: function (k) {
          return 0.5 * (1 - Math.cos(Math.PI * k))
        }
      },
      Exponential: {
        In: function (k) {
          return k === 0 ? 0 : Math.pow(1024, k - 1)
        },
        Out: function (k) {
          return k === 1 ? 1 : 1 - Math.pow(2, -10 * k)
        },
        InOut: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          if ((k *= 2) < 1) {
            return 0.5 * Math.pow(1024, k - 1)
          }
          return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2)
        }
      },
      Circular: {
        In: function (k) {
          return 1 - Math.sqrt(1 - k * k)
        },
        Out: function (k) {
          return Math.sqrt(1 - --k * k)
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return -0.5 * (Math.sqrt(1 - k * k) - 1)
          }
          return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1)
        }
      },
      Elastic: {
        In: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
        },
        Out: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1
        },
        InOut: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          k *= 2;
          if (k < 1) {
            return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
          }
          return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1
        }
      },
      Back: {
        In: function (k) {
          var s = 1.70158;
          return k * k * ((s + 1) * k - s)
        },
        Out: function (k) {
          var s = 1.70158;
          return --k * k * ((s + 1) * k + s) + 1
        },
        InOut: function (k) {
          var s = 1.70158 * 1.525;
          if ((k *= 2) < 1) {
            return 0.5 * (k * k * ((s + 1) * k - s))
          }
          return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2)
        }
      },
      Bounce: {
        In: function (k) {
          return 1 - TWEEN.Easing.Bounce.Out(1 - k)
        },
        Out: function (k) {
          if (k < 1 / 2.75) {
            return 7.5625 * k * k
          } else if (k < 2 / 2.75) {
            return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75
          } else if (k < 2.5 / 2.75) {
            return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375
          } else {
            return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375
          }
        },
        InOut: function (k) {
          if (k < 0.5) {
            return TWEEN.Easing.Bounce.In(k * 2) * 0.5
          }
          return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5
        }
      }
    };
    TWEEN.Interpolation = {
      Linear: function (v, k) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = TWEEN.Interpolation.Utils.Linear;
        if (k < 0) {
          return fn(v[0], v[1], f)
        }
        if (k > 1) {
          return fn(v[m], v[m - 1], m - f)
        }
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i)
      },
      Bezier: function (v, k) {
        var b = 0;
        var n = v.length - 1;
        var pw = Math.pow;
        var bn = TWEEN.Interpolation.Utils.Bernstein;
        for (var i = 0; i <= n; i++) {
          b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i)
        }
        return b
      },
      CatmullRom: function (v, k) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = TWEEN.Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
          if (k < 0) {
            i = Math.floor(f = m * (1 + k))
          }
          return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i)
        } else {
          if (k < 0) {
            return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0])
          }
          if (k > 1) {
            return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m])
          }
          return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i)
        }
      },
      Utils: {
        Linear: function (p0, p1, t) {
          return (p1 - p0) * t + p0
        },
        Bernstein: function (n, i) {
          var fc = TWEEN.Interpolation.Utils.Factorial;
          return fc(n) / fc(i) / fc(n - i)
        },
        Factorial: function () {
          var a = [1];
          return function (n) {
            var s = 1;
            if (a[n]) {
              return a[n]
            }
            for (var i = n; i > 1; i--) {
              s *= i
            }
            a[n] = s;
            return s
          }
        }(),
        CatmullRom: function (p0, p1, p2, p3, t) {
          var v0 = (p2 - p0) * 0.5;
          var v1 = (p3 - p1) * 0.5;
          var t2 = t * t;
          var t3 = t * t2;
          return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1
        }
      }
    };
    // UMD (Universal Module Definition)
    (function (root) {
      if (typeof define === 'function' && define.amd) {
        // AMD
        define([], function () {
          return TWEEN
        })
      } else if (typeof module !== 'undefined' && typeof exports === 'object') {
        // Node.js
        module.exports = TWEEN
      } else if (root !== undefined) {
        // Global variable
        root.TWEEN = TWEEN
      }
    }(this))
  });
  // source: src/views/index.coffee
  rqzt.define('./views', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Controls: rqzt('./views/controls'),
      Graphics: rqzt('./views/graphics'),
      List: rqzt('./views/list'),
      ListItem: rqzt('./views/list-item'),
      Login: rqzt('./views/login'),
      Main: rqzt('./views/main'),
      Menu: rqzt('./views/menu'),
      register: function () {
        this.Controls.register();
        this.Graphics.register();
        this.List.register();
        this.ListItem.register();
        this.Login.register();
        this.Main.register();
        return this.Menu.register()
      }
    }
  });
  // source: src/views/controls/index.coffee
  rqzt.define('./views/controls', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Checkbox: rqzt('./views/controls/checkbox'),
      Password: rqzt('./views/controls/password'),
      Select: rqzt('./views/controls/select'),
      SelectCountry: rqzt('./views/controls/select-country'),
      SelectState: rqzt('./views/controls/select-state'),
      Text: rqzt('./views/controls/text'),
      TextArea: rqzt('./views/controls/textarea'),
      register: function () {
        this.Checkbox.register();
        this.Password.register();
        this.Select.register();
        this.SelectCountry.register();
        this.SelectState.register();
        this.Text.register();
        return this.TextArea.register()
      }
    }
  });
  // source: src/views/controls/checkbox.coffee
  rqzt.define('./views/controls/checkbox', function (module, exports, __dirname, __filename, process) {
    var Checkbox, Control, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./views/controls/control');
    module.exports = Checkbox = function (superClass) {
      extend(Checkbox, superClass);
      function Checkbox() {
        return Checkbox.__super__.constructor.apply(this, arguments)
      }
      Checkbox.prototype.tag = 'checkbox-control';
      Checkbox.prototype.html = rqzt('./templates/controls/checkbox');
      Checkbox.prototype.getValue = function (event) {
        return event.target.checked
      };
      return Checkbox
    }(Control)
  });
  // source: src/views/controls/control.coffee
  rqzt.define('./views/controls/control', function (module, exports, __dirname, __filename, process) {
    var Control, CrowdControl, Events, m, riot, scrolling, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    riot = rqzt('riot/riot');
    scrolling = false;
    module.exports = Control = function (superClass) {
      extend(Control, superClass);
      function Control() {
        return Control.__super__.constructor.apply(this, arguments)
      }
      Control.prototype.init = function () {
        if (this.input == null && this.inputs != null) {
          this.input = this.inputs[this.lookup]
        }
        if (this.input != null) {
          return Control.__super__.init.apply(this, arguments)
        }
      };
      Control.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim() : void 0
      };
      Control.prototype.error = function (err) {
        if (err instanceof DOMException) {
          void 0;
          return
        }
        Control.__super__.error.apply(this, arguments);
        if (!scrolling) {
          scrolling = true;
          $('html, body').animate({ scrollTop: $(this.root).offset().top - $(window).height() / 2 }, {
            complete: function () {
              return scrolling = false
            },
            duration: 500
          })
        }
        return m.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.change = function () {
        Control.__super__.change.apply(this, arguments);
        return m.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.changed = function (value) {
        m.trigger(Events.ChangeSuccess, this.input.name, value);
        return riot.update()
      };
      Control.prototype.value = function () {
        return this.input.ref(this.input.name)
      };
      return Control
    }(CrowdControl.Views.Input)
  });
  // source: src/mediator.coffee
  rqzt.define('./mediator', function (module, exports, __dirname, __filename, process) {
    var riot;
    riot = rqzt('riot/riot');
    module.exports = riot.observable({})
  });
  // source: src/events.coffee
  rqzt.define('./events', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Change: 'daisho.change',
      ChangeSuccess: 'daisho.change.success',
      ChangeFailed: 'daisho.change.failed',
      Login: 'daisho.login',
      LoginSuccess: 'daisho.login.success',
      LoginFailed: 'daisho.login.failed',
      Logout: 'daisho.logout'
    }
  });
  // source: src/templates/controls/checkbox.pug
  rqzt.define('./templates/controls/checkbox', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="checkbox" onchange="{ change }" onblur="{ change }" checked="{ input.ref(input.name) }"/>\n<yield></yield>'
  });
  // source: src/views/controls/password.coffee
  rqzt.define('./views/controls/password', function (module, exports, __dirname, __filename, process) {
    var Password, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    module.exports = Password = function (superClass) {
      extend(Password, superClass);
      function Password() {
        return Password.__super__.constructor.apply(this, arguments)
      }
      Password.prototype.tag = 'password-control';
      Password.prototype.type = 'password';
      return Password
    }(Text)
  });
  // source: src/views/controls/text.coffee
  rqzt.define('./views/controls/text', function (module, exports, __dirname, __filename, process) {
    var Control, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./views/controls/control');
    module.exports = Text = function (superClass) {
      extend(Text, superClass);
      function Text() {
        return Text.__super__.constructor.apply(this, arguments)
      }
      Text.prototype.tag = 'text-control';
      Text.prototype.html = rqzt('./templates/controls/text');
      Text.prototype.type = 'text';
      Text.prototype.formElement = 'input';
      Text.prototype.autoComplete = 'on';
      Text.prototype.init = function () {
        Text.__super__.init.apply(this, arguments);
        return this.on('updated', function (_this) {
          return function () {
            var el;
            return el = _this.root.getElementsByTagName(_this.formElement)[0]
          }
        }(this))
      };
      return Text
    }(Control)
  });
  // source: src/templates/controls/text.pug
  rqzt.define('./templates/controls/text', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="{ type }" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref(input.name) }" placeholder="{ placeholder }" autocomplete="{ autoComplete }"/>\n<yield></yield>'
  });
  // source: src/views/controls/select.coffee
  rqzt.define('./views/controls/select', function (module, exports, __dirname, __filename, process) {
    var Select, Text, coolDown, isABrokenBrowser, isObject, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    riot = rqzt('riot/riot');
    isObject = rqzt('is-object');
    isABrokenBrowser = window.navigator.userAgent.indexOf('MSIE') > 0 || window.navigator.userAgent.indexOf('Trident') > 0;
    coolDown = -1;
    module.exports = Select = function (superClass) {
      extend(Select, superClass);
      function Select() {
        return Select.__super__.constructor.apply(this, arguments)
      }
      Select.prototype.tag = 'select-control';
      Select.prototype.html = rqzt('./templates/controls/select');
      Select.prototype.tags = false;
      Select.prototype.min = 10;
      Select.prototype.selectOptions = {};
      Select.prototype.options = function () {
        return this.selectOptions
      };
      Select.prototype.readOnly = false;
      Select.prototype.ignore = false;
      Select.prototype.events = {
        updated: function () {
          return this.onUpdated()
        },
        mount: function () {
          return this.onUpdated()
        }
      };
      Select.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim().toLowerCase() : void 0
      };
      Select.prototype.change = function () {
        Select.__super__.change.apply(this, arguments);
        return riot.update()
      };
      Select.prototype.initSelect = function ($select) {
        var $input, invertedOptions, name, options, ref, select, value;
        options = [];
        invertedOptions = {};
        ref = this.options();
        for (value in ref) {
          name = ref[value];
          options.push({
            text: name,
            value: value
          });
          invertedOptions[name] = value
        }
        $select.selectize({ dropdownParent: 'body' }).on('change', function (_this) {
          return function (event) {
            if (coolDown !== -1) {
              return
            }
            coolDown = setTimeout(function () {
              return coolDown = -1
            }, 100);
            _this.change(event);
            event.preventDefault();
            event.stopPropagation();
            return false
          }
        }(this));
        select = $select[0];
        select.selectize.addOption(options);
        select.selectize.addItem([this.input.ref.get(this.input.name)] || [], true);
        select.selectize.refreshOptions(false);
        $input = $select.parent().find('.selectize-input input:first');
        $input.on('change', function (event) {
          var val;
          val = $(event.target).val();
          if (invertedOptions[val] != null) {
            return $select[0].selectize.setValue(invertedOptions[val])
          }
        });
        if (this.readOnly) {
          return $input.attr('readonly', true)
        }
      };
      Select.prototype.init = function (opts) {
        Select.__super__.init.apply(this, arguments);
        return this.style = this.style || 'width:100%'
      };
      Select.prototype.onUpdated = function () {
        var $control, $select, select, v;
        if (this.input == null) {
          return
        }
        $select = $(this.root).find('select');
        select = $select[0];
        if (select != null) {
          v = this.input.ref.get(this.input.name);
          if (!this.initialized) {
            return requestAnimationFrame(function (_this) {
              return function () {
                _this.initSelect($select);
                return _this.initialized = true
              }
            }(this))
          } else if (select.selectize != null && v !== select.selectize.getValue()) {
            select.selectize.clear(true);
            return select.selectize.addItem(v, true)
          }
        } else {
          $control = $(this.root).find('.selectize-control');
          if ($control[0] == null) {
            return requestAnimationFrame(function (_this) {
              return function () {
                return _this.update()
              }
            }(this))
          }
        }
      };
      return Select
    }(Text)
  });
  // source: src/templates/controls/select.pug
  rqzt.define('./templates/controls/select', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<select class="{invalid: errorMessage, valid: valid}" id="{ input.name }" style="{ style };" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/views/controls/select-country.coffee
  rqzt.define('./views/controls/select-country', function (module, exports, __dirname, __filename, process) {
    var Select, SelectCountry, countries, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./views/controls/select');
    countries = rqzt('./data/countries');
    module.exports = SelectCountry = function (superClass) {
      extend(SelectCountry, superClass);
      function SelectCountry() {
        return SelectCountry.__super__.constructor.apply(this, arguments)
      }
      SelectCountry.prototype.tag = 'select-country-control';
      SelectCountry.prototype.options = function () {
        return countries.data
      };
      SelectCountry.prototype.lookup = 'country';
      SelectCountry.prototype.init = function () {
        SelectCountry.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var country, k, ref, v;
            country = _this.input.ref.get(_this.lookup);
            if (country) {
              country = country.toLowerCase();
              if (country.length === 2) {
                return _this.input.ref.set(_this.lookup, country)
              } else {
                ref = countries.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === country) {
                    _this.input.ref.set(_this.lookup, k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      return SelectCountry
    }(Select)
  });
  // source: src/data/countries.coffee
  rqzt.define('./data/countries', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        af: 'Afghanistan',
        ax: 'Åland Islands',
        al: 'Albania',
        dz: 'Algeria',
        as: 'American Samoa',
        ad: 'Andorra',
        ao: 'Angola',
        ai: 'Anguilla',
        aq: 'Antarctica',
        ag: 'Antigua and Barbuda',
        ar: 'Argentina',
        am: 'Armenia',
        aw: 'Aruba',
        au: 'Australia',
        at: 'Austria',
        az: 'Azerbaijan',
        bs: 'Bahamas',
        bh: 'Bahrain',
        bd: 'Bangladesh',
        bb: 'Barbados',
        by: 'Belarus',
        be: 'Belgium',
        bz: 'Belize',
        bj: 'Benin',
        bm: 'Bermuda',
        bt: 'Bhutan',
        bo: 'Bolivia',
        bq: 'Bonaire, Sint Eustatius and Saba',
        ba: 'Bosnia and Herzegovina',
        bw: 'Botswana',
        bv: 'Bouvet Island',
        br: 'Brazil',
        io: 'British Indian Ocean Territory',
        bn: 'Brunei Darussalam',
        bg: 'Bulgaria',
        bf: 'Burkina Faso',
        bi: 'Burundi',
        kh: 'Cambodia',
        cm: 'Cameroon',
        ca: 'Canada',
        cv: 'Cabo Verde',
        ky: 'Cayman Islands',
        cf: 'Central African Republic',
        td: 'Chad',
        cl: 'Chile',
        cn: 'China',
        cx: 'Christmas Island',
        cc: 'Cocos (Keeling) Islands',
        co: 'Colombia',
        km: 'Comoros',
        cg: 'Congo',
        cd: 'Congo (Democratic Republic)',
        ck: 'Cook Islands',
        cr: 'Costa Rica',
        ci: "Côte d'Ivoire",
        hr: 'Croatia',
        cu: 'Cuba',
        cw: 'Curaçao',
        cy: 'Cyprus',
        cz: 'Czech Republic',
        dk: 'Denmark',
        dj: 'Djibouti',
        dm: 'Dominica',
        'do': 'Dominican Republic',
        ec: 'Ecuador',
        eg: 'Egypt',
        sv: 'El Salvador',
        gq: 'Equatorial Guinea',
        er: 'Eritrea',
        ee: 'Estonia',
        et: 'Ethiopia',
        fk: 'Falkland Islands',
        fo: 'Faroe Islands',
        fj: 'Fiji',
        fi: 'Finland',
        fr: 'France',
        gf: 'French Guiana',
        pf: 'French Polynesia',
        tf: 'French Southern Territories',
        ga: 'Gabon',
        gm: 'Gambia',
        ge: 'Georgia',
        de: 'Germany',
        gh: 'Ghana',
        gi: 'Gibraltar',
        gr: 'Greece',
        gl: 'Greenland',
        gd: 'Grenada',
        gp: 'Guadeloupe',
        gu: 'Guam',
        gt: 'Guatemala',
        gg: 'Guernsey',
        gn: 'Guinea',
        gw: 'Guinea-Bissau',
        gy: 'Guyana',
        ht: 'Haiti',
        hm: 'Heard Island and McDonald Islands',
        va: 'Holy See',
        hn: 'Honduras',
        hk: 'Hong Kong',
        hu: 'Hungary',
        is: 'Iceland',
        'in': 'India',
        id: 'Indonesia',
        ir: 'Iran',
        iq: 'Iraq',
        ie: 'Ireland',
        im: 'Isle of Man',
        il: 'Israel',
        it: 'Italy',
        jm: 'Jamaica',
        jp: 'Japan',
        je: 'Jersey',
        jo: 'Jordan',
        kz: 'Kazakhstan',
        ke: 'Kenya',
        ki: 'Kiribati',
        kp: "Korea (Democratic People's Republic of)",
        kr: 'Korea (Republic of)',
        kw: 'Kuwait',
        kg: 'Kyrgyzstan',
        la: "Lao People's Democratic Republic",
        lv: 'Latvia',
        lb: 'Lebanon',
        ls: 'Lesotho',
        lr: 'Liberia',
        ly: 'Libya',
        li: 'Liechtenstein',
        lt: 'Lithuania',
        lu: 'Luxembourg',
        mo: 'Macao',
        mk: 'Macedonia',
        mg: 'Madagascar',
        mw: 'Malawi',
        my: 'Malaysia',
        mv: 'Maldives',
        ml: 'Mali',
        mt: 'Malta',
        mh: 'Marshall Islands',
        mq: 'Martinique',
        mr: 'Mauritania',
        mu: 'Mauritius',
        yt: 'Mayotte',
        mx: 'Mexico',
        fm: 'Micronesia',
        md: 'Moldova',
        mc: 'Monaco',
        mn: 'Mongolia',
        me: 'Montenegro',
        ms: 'Montserrat',
        ma: 'Morocco',
        mz: 'Mozambique',
        mm: 'Myanmar',
        na: 'Namibia',
        nr: 'Nauru',
        np: 'Nepal',
        nl: 'Netherlands',
        nc: 'New Caledonia',
        nz: 'New Zealand',
        ni: 'Nicaragua',
        ne: 'Niger',
        ng: 'Nigeria',
        nu: 'Niue',
        nf: 'Norfolk Island',
        mp: 'Northern Mariana Islands',
        no: 'Norway',
        om: 'Oman',
        pk: 'Pakistan',
        pw: 'Palau',
        ps: 'Palestine',
        pa: 'Panama',
        pg: 'Papua New Guinea',
        py: 'Paraguay',
        pe: 'Peru',
        ph: 'Philippines',
        pn: 'Pitcairn',
        pl: 'Poland',
        pt: 'Portugal',
        pr: 'Puerto Rico',
        qa: 'Qatar',
        re: 'Réunion',
        ro: 'Romania',
        ru: 'Russian Federation',
        rw: 'Rwanda',
        bl: 'Saint Barthélemy',
        sh: 'Saint Helena, Ascension and Tristan da Cunha',
        kn: 'Saint Kitts and Nevis',
        lc: 'Saint Lucia',
        mf: 'Saint Martin (French)',
        pm: 'Saint Pierre and Miquelon',
        vc: 'Saint Vincent and the Grenadines',
        ws: 'Samoa',
        sm: 'San Marino',
        st: 'Sao Tome and Principe',
        sa: 'Saudi Arabia',
        sn: 'Senegal',
        rs: 'Serbia',
        sc: 'Seychelles',
        sl: 'Sierra Leone',
        sg: 'Singapore',
        sx: 'Sint Maarten (Dutch)',
        sk: 'Slovakia',
        si: 'Slovenia',
        sb: 'Solomon Islands',
        so: 'Somalia',
        za: 'South Africa',
        gs: 'South Georgia and the South Sandwich Islands',
        ss: 'South Sudan',
        es: 'Spain',
        lk: 'Sri Lanka',
        sd: 'Sudan',
        sr: 'Suriname',
        sj: 'Svalbard and Jan Mayen',
        sz: 'Swaziland',
        se: 'Sweden',
        ch: 'Switzerland',
        sy: 'Syrian Arab Republic',
        tw: 'Taiwan',
        tj: 'Tajikistan',
        tz: 'Tanzania',
        th: 'Thailand',
        tl: 'Timor-Leste',
        tg: 'Togo',
        tk: 'Tokelau',
        to: 'Tonga',
        tt: 'Trinidad and Tobago',
        tn: 'Tunisia',
        tr: 'Turkey',
        tm: 'Turkmenistan',
        tc: 'Turks and Caicos Islands',
        tv: 'Tuvalu',
        ug: 'Uganda',
        ua: 'Ukraine',
        ae: 'United Arab Emirates',
        gb: 'United Kingdom of Great Britain and Northern Ireland',
        us: 'United States of America',
        um: 'United States Minor Outlying Islands',
        uy: 'Uruguay',
        uz: 'Uzbekistan',
        vu: 'Vanuatu',
        ve: 'Venezuela',
        vn: 'Viet Nam',
        vg: 'Virgin Islands (British)',
        vi: 'Virgin Islands (U.S.)',
        wf: 'Wallis and Futuna',
        eh: 'Western Sahara',
        ye: 'Yemen',
        zm: 'Zambia',
        zw: 'Zimbabwe'
      }
    }
  });
  // source: src/views/controls/select-state.coffee
  rqzt.define('./views/controls/select-state', function (module, exports, __dirname, __filename, process) {
    var Select, SelectState, states, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./views/controls/select');
    states = rqzt('./data/states');
    module.exports = SelectState = function (superClass) {
      extend(SelectState, superClass);
      function SelectState() {
        return SelectState.__super__.constructor.apply(this, arguments)
      }
      SelectState.prototype.tag = 'select-state-control';
      SelectState.prototype.html = rqzt('./templates/controls/select-state');
      SelectState.prototype.options = function () {
        return states.data
      };
      SelectState.prototype.countryField = 'country';
      SelectState.prototype.lookup = 'state';
      SelectState.prototype.init = function () {
        SelectState.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var k, ref, state, v;
            if (_this.input == null) {
              return
            }
            state = _this.input.ref.get(_this.lookup);
            if (state) {
              state = state.toLowerCase();
              if (state.length === 2) {
                return _this.input.ref.set(_this.lookup, state)
              } else {
                ref = states.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === state) {
                    _this.input.ref.set(_this.lookup, k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      SelectState.prototype.onUpdated = function () {
        var value;
        if (this.input == null) {
          return
        }
        if (this.input.ref.get(this.countryField) === 'us') {
          $(this.root).find('.selectize-control').show()
        } else {
          $(this.root).find('.selectize-control').hide();
          value = this.input.ref.get(this.input.name);
          if (value) {
            this.input.ref.set(this.input.name, value.toUpperCase())
          }
        }
        return SelectState.__super__.onUpdated.apply(this, arguments)
      };
      return SelectState
    }(Select)
  });
  // source: src/data/states.coffee
  rqzt.define('./data/states', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        ak: 'Alaska',
        al: 'Alabama',
        ar: 'Arkansas',
        az: 'Arizona',
        ca: 'California',
        co: 'Colorado',
        ct: 'Connecticut',
        dc: 'District of Columbia',
        de: 'Delaware',
        fl: 'Florida',
        ga: 'Georgia',
        hi: 'Hawaii',
        ia: 'Iowa',
        id: 'Idaho',
        il: 'Illinois',
        'in': 'Indiana',
        ks: 'Kansas',
        ky: 'Kentucky',
        la: 'Louisiana',
        ma: 'Massachusetts',
        md: 'Maryland',
        me: 'Maine',
        mi: 'Michigan',
        mn: 'Minnesota',
        mo: 'Missouri',
        ms: 'Mississippi',
        mt: 'Montana',
        nc: 'North Carolina',
        nd: 'North Dakota',
        ne: 'Nebraska',
        nh: 'New Hampshire',
        nj: 'New Jersey',
        nm: 'New Mexico',
        nv: 'Nevada',
        ny: 'New York',
        oh: 'Ohio',
        ok: 'Oklahoma',
        or: 'Oregon',
        pa: 'Pennsylvania',
        ri: 'Rhode Island',
        sc: 'South Carolina',
        sd: 'South Dakota',
        tn: 'Tennessee',
        tx: 'Texas',
        ut: 'Utah',
        va: 'Virginia',
        vt: 'Vermont',
        wa: 'Washington',
        wi: 'Wisconsin',
        wv: 'West Virginia',
        wy: 'Wyoming',
        aa: 'U.S. Armed Forces – Americas',
        ae: 'U.S. Armed Forces – Europe',
        ap: 'U.S. Armed Forces – Pacific'
      }
    }
  });
  // source: src/templates/controls/select-state.pug
  rqzt.define('./templates/controls/select-state', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" if="{ input.ref(countryField) !== &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" type="text" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref(input.name) }" placeholder="{ placeholder }"/>\n<select class="{invalid: errorMessage, valid: valid}" if="{ input.ref(countryField) == &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" data-placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/views/controls/textarea.coffee
  rqzt.define('./views/controls/textarea', function (module, exports, __dirname, __filename, process) {
    var Text, TextArea, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    module.exports = TextArea = function (superClass) {
      extend(TextArea, superClass);
      function TextArea() {
        return TextArea.__super__.constructor.apply(this, arguments)
      }
      TextArea.prototype.tag = 'textarea-control';
      TextArea.prototype.html = rqzt('./templates/controls/textarea');
      TextArea.prototype.formElement = 'textarea';
      return TextArea
    }(Text)
  });
  // source: src/templates/controls/textarea.pug
  rqzt.define('./templates/controls/textarea', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<textarea class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" rows="{ rows }" cols="{ cols }" type="text" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }">{ input.ref(input.name) }</textarea>\n<yield></yield>'
  });
  // source: src/views/graphics/index.coffee
  rqzt.define('./views/graphics', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Model: rqzt('./views/graphics/model'),
      Chart: rqzt('./views/graphics/chart'),
      Counter: rqzt('./views/graphics/counter'),
      register: function () {
        this.Chart.register();
        return this.Counter.register()
      }
    }
  });
  // source: src/views/graphics/model.coffee
  rqzt.define('./views/graphics/model', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      'new': function () {
        return [this.newSeries()]
      },
      newSeries: function () {
        return {
          series: '',
          xs: [],
          ys: [],
          fmt: {
            x: function (n) {
              return n
            },
            y: function (n) {
              return n
            }
          },
          axis: {
            x: {
              name: '',
              fmt: function (n) {
                return n
              },
              scale: null,
              ticks: function (n) {
                return n
              }
            },
            y: {
              name: '',
              fmt: function (n) {
                return n
              },
              scale: null,
              ticks: function (n) {
                return n
              }
            }
          }
        }
      }
    }
  });
  // source: src/views/graphics/chart.coffee
  rqzt.define('./views/graphics/chart', function (module, exports, __dirname, __filename, process) {
    var Chart, CrowdControl, Tween, d3, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    Tween = rqzt('tween.js/src/Tween');
    d3 = rqzt('d3/build/d3');
    module.exports = Chart = function (superClass) {
      extend(Chart, superClass);
      function Chart() {
        return Chart.__super__.constructor.apply(this, arguments)
      }
      Chart.prototype.tag = 'daisho-graphics-chart';
      Chart.prototype.html = rqzt('./templates/graphics/chart');
      Chart.prototype.margin = {
        top: 40,
        right: 40,
        bottom: 50,
        left: 70
      };
      Chart.prototype.width = 0;
      Chart.prototype.height = 400;
      Chart.prototype.svg = null;
      Chart.prototype.chart = null;
      Chart.prototype.xAxis = null;
      Chart.prototype.yAxis = null;
      Chart.prototype.lines = null;
      Chart.prototype.init = function () {
        Chart.__super__.init.apply(this, arguments);
        this.on('mount', function (_this) {
          return function () {
            var chart, svg;
            _this.svg = svg = d3.select(_this.root).select('svg');
            _this.parseTime = d3.timeParse('%Y-%m-%dT%H:%M:%S%Z');
            _this.chart = chart = svg.append('g').attr('transform', 'translate(' + _this.margin.left + ',' + _this.margin.top + ')');
            _this.lines = [];
            _this.xAxis = chart.append('g').classed('axis', true).classed('x-axis', true);
            _this.xAxis.append('text');
            _this.yAxis = chart.append('g').classed('axis', true).classed('y-axis', true);
            _this.yAxis.append('text');
            _this.xScale = d3.scaleTime();
            return _this.yScale = d3.scaleLinear()
          }
        }(this));
        return this.on('updated', function (_this) {
          return function () {
            var height, i, line, lineFn, lines, series, serieses, width, xScale, xs, xys, yScale, ys;
            serieses = _this.data.get();
            if (!serieses[0]) {
              return
            }
            width = _this.width || $(_this.root).parent().width();
            height = _this.height;
            _this.svg.attr('width', width).attr('height', height);
            width -= _this.margin.left + _this.margin.right;
            height -= _this.margin.top + _this.margin.bottom;
            xs = [];
            ys = [];
            xScale = _this.xScale;
            yScale = _this.yScale;
            xScale.rangeRound([
              0,
              width
            ]).ticks(d3.timeDay.every(1));
            yScale.rangeRound([
              height,
              0
            ]);
            lines = _this.lines;
            for (i in serieses) {
              series = serieses[i];
              if (lines[i]) {
                lines[i].remove()
              }
              xs = xs.concat(series.xs);
              ys = ys.concat(series.ys)
            }
            _this.lines = lines = [];
            xScale.domain(d3.extent(xs.map(series.fmt.x), function (x) {
              return _this.parseTime(x)
            }));
            yScale.domain(d3.extent(ys.map(series.fmt.y), function (y) {
              return y
            }));
            _this.xAxis.call(d3.axisBottom(_this.xScale)).attr('transform', 'translate(0,' + height + ')').select('text').attr('fill', '#000').attr('x', width).attr('y', -12).attr('dy', '0.71em').attr('text-anchor', 'end').text(series.axis.x.name);
            _this.yAxis.call(d3.axisLeft(_this.yScale).tickFormat(serieses[0].axis.y.ticks)).select('text').attr('fill', '#000').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '0.71em').attr('text-anchor', 'end').text(series.axis.y.name);
            for (i in serieses) {
              series = serieses[i];
              if (series.xs.length === 0 || series.ys.length === 0) {
                return
              }
              xys = series.xs.map(function (x, j) {
                return [
                  x,
                  series.ys[j]
                ]
              });
              lineFn = d3.line().x(function (d) {
                return xScale(_this.parseTime(series.fmt.x(d[0] || 0)))
              }).y(function (d) {
                return yScale(series.fmt.y(d[1] || 0))
              });
              line = _this.chart.append('path').classed('line', true).classed('series', true).datum(xys).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-linejoin', 'round').attr('stroke-linecap', 'round').attr('stroke-width', 1.5).attr('d', lineFn);
              lines.push(line)
            }
          }
        }(this))
      };
      return Chart
    }(CrowdControl.Views.View)
  });
  // source: node_modules/d3/build/d3.js
  rqzt.define('d3/build/d3', function (module, exports, __dirname, __filename, process) {
    // https://d3js.org Version 4.6.0. Copyright 2017 Mike Bostock.
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {})
    }(this, function (exports) {
      'use strict';
      var version = '4.6.0';
      var ascending = function (a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
      };
      var bisector = function (compare) {
        if (compare.length === 1)
          compare = ascendingComparator(compare);
        return {
          left: function (a, x, lo, hi) {
            if (lo == null)
              lo = 0;
            if (hi == null)
              hi = a.length;
            while (lo < hi) {
              var mid = lo + hi >>> 1;
              if (compare(a[mid], x) < 0)
                lo = mid + 1;
              else
                hi = mid
            }
            return lo
          },
          right: function (a, x, lo, hi) {
            if (lo == null)
              lo = 0;
            if (hi == null)
              hi = a.length;
            while (lo < hi) {
              var mid = lo + hi >>> 1;
              if (compare(a[mid], x) > 0)
                hi = mid;
              else
                lo = mid + 1
            }
            return lo
          }
        }
      };
      function ascendingComparator(f) {
        return function (d, x) {
          return ascending(f(d), x)
        }
      }
      var ascendingBisect = bisector(ascending);
      var bisectRight = ascendingBisect.right;
      var bisectLeft = ascendingBisect.left;
      var descending = function (a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN
      };
      var number = function (x) {
        return x === null ? NaN : +x
      };
      var variance = function (array, f) {
        var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
        if (f == null) {
          while (++i < n) {
            if (!isNaN(a = number(array[i]))) {
              d = a - m;
              m += d / ++j;
              s += d * (a - m)
            }
          }
        } else {
          while (++i < n) {
            if (!isNaN(a = number(f(array[i], i, array)))) {
              d = a - m;
              m += d / ++j;
              s += d * (a - m)
            }
          }
        }
        if (j > 1)
          return s / (j - 1)
      };
      var deviation = function (array, f) {
        var v = variance(array, f);
        return v ? Math.sqrt(v) : v
      };
      var extent = function (array, f) {
        var i = -1, n = array.length, a, b, c;
        if (f == null) {
          while (++i < n)
            if ((b = array[i]) != null && b >= b) {
              a = c = b;
              break
            }
          while (++i < n)
            if ((b = array[i]) != null) {
              if (a > b)
                a = b;
              if (c < b)
                c = b
            }
        } else {
          while (++i < n)
            if ((b = f(array[i], i, array)) != null && b >= b) {
              a = c = b;
              break
            }
          while (++i < n)
            if ((b = f(array[i], i, array)) != null) {
              if (a > b)
                a = b;
              if (c < b)
                c = b
            }
        }
        return [
          a,
          c
        ]
      };
      var array = Array.prototype;
      var slice = array.slice;
      var map = array.map;
      var constant = function (x) {
        return function () {
          return x
        }
      };
      var identity = function (x) {
        return x
      };
      var sequence = function (start, stop, step) {
        start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
        var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
        while (++i < n) {
          range[i] = start + i * step
        }
        return range
      };
      var e10 = Math.sqrt(50);
      var e5 = Math.sqrt(10);
      var e2 = Math.sqrt(2);
      var ticks = function (start, stop, count) {
        var step = tickStep(start, stop, count);
        return sequence(Math.ceil(start / step) * step, Math.floor(stop / step) * step + step / 2, // inclusive
        step)
      };
      function tickStep(start, stop, count) {
        var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
        if (error >= e10)
          step1 *= 10;
        else if (error >= e5)
          step1 *= 5;
        else if (error >= e2)
          step1 *= 2;
        return stop < start ? -step1 : step1
      }
      var sturges = function (values) {
        return Math.ceil(Math.log(values.length) / Math.LN2) + 1
      };
      var histogram = function () {
        var value = identity, domain = extent, threshold = sturges;
        function histogram(data) {
          var i, n = data.length, x, values = new Array(n);
          for (i = 0; i < n; ++i) {
            values[i] = value(data[i], i, data)
          }
          var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
          // Convert number of thresholds into uniform thresholds.
          if (!Array.isArray(tz))
            tz = ticks(x0, x1, tz);
          // Remove any thresholds outside the domain.
          var m = tz.length;
          while (tz[0] <= x0)
            tz.shift(), --m;
          while (tz[m - 1] >= x1)
            tz.pop(), --m;
          var bins = new Array(m + 1), bin;
          // Initialize bins.
          for (i = 0; i <= m; ++i) {
            bin = bins[i] = [];
            bin.x0 = i > 0 ? tz[i - 1] : x0;
            bin.x1 = i < m ? tz[i] : x1
          }
          // Assign data to bins by value, ignoring any outside the domain.
          for (i = 0; i < n; ++i) {
            x = values[i];
            if (x0 <= x && x <= x1) {
              bins[bisectRight(tz, x, 0, m)].push(data[i])
            }
          }
          return bins
        }
        histogram.value = function (_) {
          return arguments.length ? (value = typeof _ === 'function' ? _ : constant(_), histogram) : value
        };
        histogram.domain = function (_) {
          return arguments.length ? (domain = typeof _ === 'function' ? _ : constant([
            _[0],
            _[1]
          ]), histogram) : domain
        };
        histogram.thresholds = function (_) {
          return arguments.length ? (threshold = typeof _ === 'function' ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold
        };
        return histogram
      };
      var threshold = function (array, p, f) {
        if (f == null)
          f = number;
        if (!(n = array.length))
          return;
        if ((p = +p) <= 0 || n < 2)
          return +f(array[0], 0, array);
        if (p >= 1)
          return +f(array[n - 1], n - 1, array);
        var n, h = (n - 1) * p, i = Math.floor(h), a = +f(array[i], i, array), b = +f(array[i + 1], i + 1, array);
        return a + (b - a) * (h - i)
      };
      var freedmanDiaconis = function (values, min, max) {
        values = map.call(values, number).sort(ascending);
        return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)))
      };
      var scott = function (values, min, max) {
        return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)))
      };
      var max = function (array, f) {
        var i = -1, n = array.length, a, b;
        if (f == null) {
          while (++i < n)
            if ((b = array[i]) != null && b >= b) {
              a = b;
              break
            }
          while (++i < n)
            if ((b = array[i]) != null && b > a)
              a = b
        } else {
          while (++i < n)
            if ((b = f(array[i], i, array)) != null && b >= b) {
              a = b;
              break
            }
          while (++i < n)
            if ((b = f(array[i], i, array)) != null && b > a)
              a = b
        }
        return a
      };
      var mean = function (array, f) {
        var s = 0, n = array.length, a, i = -1, j = n;
        if (f == null) {
          while (++i < n)
            if (!isNaN(a = number(array[i])))
              s += a;
            else
              --j
        } else {
          while (++i < n)
            if (!isNaN(a = number(f(array[i], i, array))))
              s += a;
            else
              --j
        }
        if (j)
          return s / j
      };
      var median = function (array, f) {
        var numbers = [], n = array.length, a, i = -1;
        if (f == null) {
          while (++i < n)
            if (!isNaN(a = number(array[i])))
              numbers.push(a)
        } else {
          while (++i < n)
            if (!isNaN(a = number(f(array[i], i, array))))
              numbers.push(a)
        }
        return threshold(numbers.sort(ascending), 0.5)
      };
      var merge = function (arrays) {
        var n = arrays.length, m, i = -1, j = 0, merged, array;
        while (++i < n)
          j += arrays[i].length;
        merged = new Array(j);
        while (--n >= 0) {
          array = arrays[n];
          m = array.length;
          while (--m >= 0) {
            merged[--j] = array[m]
          }
        }
        return merged
      };
      var min = function (array, f) {
        var i = -1, n = array.length, a, b;
        if (f == null) {
          while (++i < n)
            if ((b = array[i]) != null && b >= b) {
              a = b;
              break
            }
          while (++i < n)
            if ((b = array[i]) != null && a > b)
              a = b
        } else {
          while (++i < n)
            if ((b = f(array[i], i, array)) != null && b >= b) {
              a = b;
              break
            }
          while (++i < n)
            if ((b = f(array[i], i, array)) != null && a > b)
              a = b
        }
        return a
      };
      var pairs = function (array) {
        var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
        while (i < n)
          pairs[i] = [
            p,
            p = array[++i]
          ];
        return pairs
      };
      var permute = function (array, indexes) {
        var i = indexes.length, permutes = new Array(i);
        while (i--)
          permutes[i] = array[indexes[i]];
        return permutes
      };
      var scan = function (array, compare) {
        if (!(n = array.length))
          return;
        var i = 0, n, j = 0, xi, xj = array[j];
        if (!compare)
          compare = ascending;
        while (++i < n)
          if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0)
            xj = xi, j = i;
        if (compare(xj, xj) === 0)
          return j
      };
      var shuffle = function (array, i0, i1) {
        var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0), t, i;
        while (m) {
          i = Math.random() * m-- | 0;
          t = array[m + i0];
          array[m + i0] = array[i + i0];
          array[i + i0] = t
        }
        return array
      };
      var sum = function (array, f) {
        var s = 0, n = array.length, a, i = -1;
        if (f == null) {
          while (++i < n)
            if (a = +array[i])
              s += a  // Note: zero and null are equivalent.
        } else {
          while (++i < n)
            if (a = +f(array[i], i, array))
              s += a
        }
        return s
      };
      var transpose = function (matrix) {
        if (!(n = matrix.length))
          return [];
        for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
          for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
            row[j] = matrix[j][i]
          }
        }
        return transpose
      };
      function length(d) {
        return d.length
      }
      var zip = function () {
        return transpose(arguments)
      };
      var slice$1 = Array.prototype.slice;
      var identity$1 = function (x) {
        return x
      };
      var top = 1;
      var right = 2;
      var bottom = 3;
      var left = 4;
      var epsilon = 0.000001;
      function translateX(scale0, scale1, d) {
        var x = scale0(d);
        return 'translate(' + (isFinite(x) ? x : scale1(d)) + ',0)'
      }
      function translateY(scale0, scale1, d) {
        var y = scale0(d);
        return 'translate(0,' + (isFinite(y) ? y : scale1(d)) + ')'
      }
      function center(scale) {
        var offset = scale.bandwidth() / 2;
        if (scale.round())
          offset = Math.round(offset);
        return function (d) {
          return scale(d) + offset
        }
      }
      function entering() {
        return !this.__axis
      }
      function axis(orient, scale) {
        var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3;
        function axis(context) {
          var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1 : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, transform = orient === top || orient === bottom ? translateX : translateY, range = scale.range(), range0 = range[0] + 0.5, range1 = range[range.length - 1] + 0.5, position = (scale.bandwidth ? center : identity$1)(scale.copy()), selection = context.selection ? context.selection() : context, path = selection.selectAll('.domain').data([null]), tick = selection.selectAll('.tick').data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append('g').attr('class', 'tick'), line = tick.select('line'), text = tick.select('text'), k = orient === top || orient === left ? -1 : 1, x, y = orient === left || orient === right ? (x = 'x', 'y') : (x = 'y', 'x');
          path = path.merge(path.enter().insert('path', '.tick').attr('class', 'domain').attr('stroke', '#000'));
          tick = tick.merge(tickEnter);
          line = line.merge(tickEnter.append('line').attr('stroke', '#000').attr(x + '2', k * tickSizeInner).attr(y + '1', 0.5).attr(y + '2', 0.5));
          text = text.merge(tickEnter.append('text').attr('fill', '#000').attr(x, k * spacing).attr(y, 0.5).attr('dy', orient === top ? '0em' : orient === bottom ? '0.71em' : '0.32em'));
          if (context !== selection) {
            path = path.transition(context);
            tick = tick.transition(context);
            line = line.transition(context);
            text = text.transition(context);
            tickExit = tickExit.transition(context).attr('opacity', epsilon).attr('transform', function (d) {
              return transform(position, this.parentNode.__axis || position, d)
            });
            tickEnter.attr('opacity', epsilon).attr('transform', function (d) {
              return transform(this.parentNode.__axis || position, position, d)
            })
          }
          tickExit.remove();
          path.attr('d', orient === left || orient == right ? 'M' + k * tickSizeOuter + ',' + range0 + 'H0.5V' + range1 + 'H' + k * tickSizeOuter : 'M' + range0 + ',' + k * tickSizeOuter + 'V0.5H' + range1 + 'V' + k * tickSizeOuter);
          tick.attr('opacity', 1).attr('transform', function (d) {
            return transform(position, position, d)
          });
          line.attr(x + '2', k * tickSizeInner);
          text.attr(x, k * spacing).text(format);
          selection.filter(entering).attr('fill', 'none').attr('font-size', 10).attr('font-family', 'sans-serif').attr('text-anchor', orient === right ? 'start' : orient === left ? 'end' : 'middle');
          selection.each(function () {
            this.__axis = position
          })
        }
        axis.scale = function (_) {
          return arguments.length ? (scale = _, axis) : scale
        };
        axis.ticks = function () {
          return tickArguments = slice$1.call(arguments), axis
        };
        axis.tickArguments = function (_) {
          return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice()
        };
        axis.tickValues = function (_) {
          return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice()
        };
        axis.tickFormat = function (_) {
          return arguments.length ? (tickFormat = _, axis) : tickFormat
        };
        axis.tickSize = function (_) {
          return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner
        };
        axis.tickSizeInner = function (_) {
          return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner
        };
        axis.tickSizeOuter = function (_) {
          return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter
        };
        axis.tickPadding = function (_) {
          return arguments.length ? (tickPadding = +_, axis) : tickPadding
        };
        return axis
      }
      function axisTop(scale) {
        return axis(top, scale)
      }
      function axisRight(scale) {
        return axis(right, scale)
      }
      function axisBottom(scale) {
        return axis(bottom, scale)
      }
      function axisLeft(scale) {
        return axis(left, scale)
      }
      var noop = {
        value: function () {
        }
      };
      function dispatch() {
        for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
          if (!(t = arguments[i] + '') || t in _)
            throw new Error('illegal type: ' + t);
          _[t] = []
        }
        return new Dispatch(_)
      }
      function Dispatch(_) {
        this._ = _
      }
      function parseTypenames(typenames, types) {
        return typenames.trim().split(/^|\s+/).map(function (t) {
          var name = '', i = t.indexOf('.');
          if (i >= 0)
            name = t.slice(i + 1), t = t.slice(0, i);
          if (t && !types.hasOwnProperty(t))
            throw new Error('unknown type: ' + t);
          return {
            type: t,
            name: name
          }
        })
      }
      Dispatch.prototype = dispatch.prototype = {
        constructor: Dispatch,
        on: function (typename, callback) {
          var _ = this._, T = parseTypenames(typename + '', _), t, i = -1, n = T.length;
          // If no callback was specified, return the callback of the given type and name.
          if (arguments.length < 2) {
            while (++i < n)
              if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
                return t;
            return
          }
          // If a type was specified, set the callback for the given type and name.
          // Otherwise, if a null callback was specified, remove callbacks of the given name.
          if (callback != null && typeof callback !== 'function')
            throw new Error('invalid callback: ' + callback);
          while (++i < n) {
            if (t = (typename = T[i]).type)
              _[t] = set(_[t], typename.name, callback);
            else if (callback == null)
              for (t in _)
                _[t] = set(_[t], typename.name, null)
          }
          return this
        },
        copy: function () {
          var copy = {}, _ = this._;
          for (var t in _)
            copy[t] = _[t].slice();
          return new Dispatch(copy)
        },
        call: function (type, that) {
          if ((n = arguments.length - 2) > 0)
            for (var args = new Array(n), i = 0, n, t; i < n; ++i)
              args[i] = arguments[i + 2];
          if (!this._.hasOwnProperty(type))
            throw new Error('unknown type: ' + type);
          for (t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args)
        },
        apply: function (type, that, args) {
          if (!this._.hasOwnProperty(type))
            throw new Error('unknown type: ' + type);
          for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args)
        }
      };
      function get(type, name) {
        for (var i = 0, n = type.length, c; i < n; ++i) {
          if ((c = type[i]).name === name) {
            return c.value
          }
        }
      }
      function set(type, name, callback) {
        for (var i = 0, n = type.length; i < n; ++i) {
          if (type[i].name === name) {
            type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
            break
          }
        }
        if (callback != null)
          type.push({
            name: name,
            value: callback
          });
        return type
      }
      var xhtml = 'http://www.w3.org/1999/xhtml';
      var namespaces = {
        svg: 'http://www.w3.org/2000/svg',
        xhtml: xhtml,
        xlink: 'http://www.w3.org/1999/xlink',
        xml: 'http://www.w3.org/XML/1998/namespace',
        xmlns: 'http://www.w3.org/2000/xmlns/'
      };
      var namespace = function (name) {
        var prefix = name += '', i = prefix.indexOf(':');
        if (i >= 0 && (prefix = name.slice(0, i)) !== 'xmlns')
          name = name.slice(i + 1);
        return namespaces.hasOwnProperty(prefix) ? {
          space: namespaces[prefix],
          local: name
        } : name
      };
      function creatorInherit(name) {
        return function () {
          var document = this.ownerDocument, uri = this.namespaceURI;
          return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name)
        }
      }
      function creatorFixed(fullname) {
        return function () {
          return this.ownerDocument.createElementNS(fullname.space, fullname.local)
        }
      }
      var creator = function (name) {
        var fullname = namespace(name);
        return (fullname.local ? creatorFixed : creatorInherit)(fullname)
      };
      var nextId = 0;
      function local$1() {
        return new Local
      }
      function Local() {
        this._ = '@' + (++nextId).toString(36)
      }
      Local.prototype = local$1.prototype = {
        constructor: Local,
        get: function (node) {
          var id = this._;
          while (!(id in node))
            if (!(node = node.parentNode))
              return;
          return node[id]
        },
        set: function (node, value) {
          return node[this._] = value
        },
        remove: function (node) {
          return this._ in node && delete node[this._]
        },
        toString: function () {
          return this._
        }
      };
      var matcher = function (selector) {
        return function () {
          return this.matches(selector)
        }
      };
      if (typeof document !== 'undefined') {
        var element = document.documentElement;
        if (!element.matches) {
          var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
          matcher = function (selector) {
            return function () {
              return vendorMatches.call(this, selector)
            }
          }
        }
      }
      var matcher$1 = matcher;
      var filterEvents = {};
      exports.event = null;
      if (typeof document !== 'undefined') {
        var element$1 = document.documentElement;
        if (!('onmouseenter' in element$1)) {
          filterEvents = {
            mouseenter: 'mouseover',
            mouseleave: 'mouseout'
          }
        }
      }
      function filterContextListener(listener, index, group) {
        listener = contextListener(listener, index, group);
        return function (event) {
          var related = event.relatedTarget;
          if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
            listener.call(this, event)
          }
        }
      }
      function contextListener(listener, index, group) {
        return function (event1) {
          var event0 = exports.event;
          // Events can be reentrant (e.g., focus).
          exports.event = event1;
          try {
            listener.call(this, this.__data__, index, group)
          } finally {
            exports.event = event0
          }
        }
      }
      function parseTypenames$1(typenames) {
        return typenames.trim().split(/^|\s+/).map(function (t) {
          var name = '', i = t.indexOf('.');
          if (i >= 0)
            name = t.slice(i + 1), t = t.slice(0, i);
          return {
            type: t,
            name: name
          }
        })
      }
      function onRemove(typename) {
        return function () {
          var on = this.__on;
          if (!on)
            return;
          for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
            if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
              this.removeEventListener(o.type, o.listener, o.capture)
            } else {
              on[++i] = o
            }
          }
          if (++i)
            on.length = i;
          else
            delete this.__on
        }
      }
      function onAdd(typename, value, capture) {
        var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
        return function (d, i, group) {
          var on = this.__on, o, listener = wrap(value, i, group);
          if (on)
            for (var j = 0, m = on.length; j < m; ++j) {
              if ((o = on[j]).type === typename.type && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.capture);
                this.addEventListener(o.type, o.listener = listener, o.capture = capture);
                o.value = value;
                return
              }
            }
          this.addEventListener(typename.type, listener, capture);
          o = {
            type: typename.type,
            name: typename.name,
            value: value,
            listener: listener,
            capture: capture
          };
          if (!on)
            this.__on = [o];
          else
            on.push(o)
        }
      }
      var selection_on = function (typename, value, capture) {
        var typenames = parseTypenames$1(typename + ''), i, n = typenames.length, t;
        if (arguments.length < 2) {
          var on = this.node().__on;
          if (on)
            for (var j = 0, m = on.length, o; j < m; ++j) {
              for (i = 0, o = on[j]; i < n; ++i) {
                if ((t = typenames[i]).type === o.type && t.name === o.name) {
                  return o.value
                }
              }
            }
          return
        }
        on = value ? onAdd : onRemove;
        if (capture == null)
          capture = false;
        for (i = 0; i < n; ++i)
          this.each(on(typenames[i], value, capture));
        return this
      };
      function customEvent(event1, listener, that, args) {
        var event0 = exports.event;
        event1.sourceEvent = exports.event;
        exports.event = event1;
        try {
          return listener.apply(that, args)
        } finally {
          exports.event = event0
        }
      }
      var sourceEvent = function () {
        var current = exports.event, source;
        while (source = current.sourceEvent)
          current = source;
        return current
      };
      var point = function (node, event) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
          var point = svg.createSVGPoint();
          point.x = event.clientX, point.y = event.clientY;
          point = point.matrixTransform(node.getScreenCTM().inverse());
          return [
            point.x,
            point.y
          ]
        }
        var rect = node.getBoundingClientRect();
        return [
          event.clientX - rect.left - node.clientLeft,
          event.clientY - rect.top - node.clientTop
        ]
      };
      var mouse = function (node) {
        var event = sourceEvent();
        if (event.changedTouches)
          event = event.changedTouches[0];
        return point(node, event)
      };
      function none() {
      }
      var selector = function (selector) {
        return selector == null ? none : function () {
          return this.querySelector(selector)
        }
      };
      var selection_select = function (select) {
        if (typeof select !== 'function')
          select = selector(select);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
            if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
              if ('__data__' in node)
                subnode.__data__ = node.__data__;
              subgroup[i] = subnode
            }
          }
        }
        return new Selection(subgroups, this._parents)
      };
      function empty$1() {
        return []
      }
      var selectorAll = function (selector) {
        return selector == null ? empty$1 : function () {
          return this.querySelectorAll(selector)
        }
      };
      var selection_selectAll = function (select) {
        if (typeof select !== 'function')
          select = selectorAll(select);
        for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
              subgroups.push(select.call(node, node.__data__, i, group));
              parents.push(node)
            }
          }
        }
        return new Selection(subgroups, parents)
      };
      var selection_filter = function (match) {
        if (typeof match !== 'function')
          match = matcher$1(match);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
            if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
              subgroup.push(node)
            }
          }
        }
        return new Selection(subgroups, this._parents)
      };
      var sparse = function (update) {
        return new Array(update.length)
      };
      var selection_enter = function () {
        return new Selection(this._enter || this._groups.map(sparse), this._parents)
      };
      function EnterNode(parent, datum) {
        this.ownerDocument = parent.ownerDocument;
        this.namespaceURI = parent.namespaceURI;
        this._next = null;
        this._parent = parent;
        this.__data__ = datum
      }
      EnterNode.prototype = {
        constructor: EnterNode,
        appendChild: function (child) {
          return this._parent.insertBefore(child, this._next)
        },
        insertBefore: function (child, next) {
          return this._parent.insertBefore(child, next)
        },
        querySelector: function (selector) {
          return this._parent.querySelector(selector)
        },
        querySelectorAll: function (selector) {
          return this._parent.querySelectorAll(selector)
        }
      };
      var constant$1 = function (x) {
        return function () {
          return x
        }
      };
      var keyPrefix = '$';
      // Protect against keys like “__proto__”.
      function bindIndex(parent, group, enter, update, exit, data) {
        var i = 0, node, groupLength = group.length, dataLength = data.length;
        // Put any non-null nodes that fit into update.
        // Put any null nodes into enter.
        // Put any remaining data into enter.
        for (; i < dataLength; ++i) {
          if (node = group[i]) {
            node.__data__ = data[i];
            update[i] = node
          } else {
            enter[i] = new EnterNode(parent, data[i])
          }
        }
        // Put any non-null nodes that don’t fit into exit.
        for (; i < groupLength; ++i) {
          if (node = group[i]) {
            exit[i] = node
          }
        }
      }
      function bindKey(parent, group, enter, update, exit, data, key) {
        var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
        // Compute the key for each node.
        // If multiple nodes have the same key, the duplicates are added to exit.
        for (i = 0; i < groupLength; ++i) {
          if (node = group[i]) {
            keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
            if (keyValue in nodeByKeyValue) {
              exit[i] = node
            } else {
              nodeByKeyValue[keyValue] = node
            }
          }
        }
        // Compute the key for each datum.
        // If there a node associated with this key, join and add it to update.
        // If there is not (or the key is a duplicate), add it to enter.
        for (i = 0; i < dataLength; ++i) {
          keyValue = keyPrefix + key.call(parent, data[i], i, data);
          if (node = nodeByKeyValue[keyValue]) {
            update[i] = node;
            node.__data__ = data[i];
            nodeByKeyValue[keyValue] = null
          } else {
            enter[i] = new EnterNode(parent, data[i])
          }
        }
        // Add any remaining nodes that were not bound to data to exit.
        for (i = 0; i < groupLength; ++i) {
          if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
            exit[i] = node
          }
        }
      }
      var selection_data = function (value, key) {
        if (!value) {
          data = new Array(this.size()), j = -1;
          this.each(function (d) {
            data[++j] = d
          });
          return data
        }
        var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
        if (typeof value !== 'function')
          value = constant$1(value);
        for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
          var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
          bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
          // Now connect the enter nodes to their following update node, such that
          // appendChild can insert the materialized enter node before this node,
          // rather than at the end of the parent node.
          for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
            if (previous = enterGroup[i0]) {
              if (i0 >= i1)
                i1 = i0 + 1;
              while (!(next = updateGroup[i1]) && ++i1 < dataLength);
              previous._next = next || null
            }
          }
        }
        update = new Selection(update, parents);
        update._enter = enter;
        update._exit = exit;
        return update
      };
      var selection_exit = function () {
        return new Selection(this._exit || this._groups.map(sparse), this._parents)
      };
      var selection_merge = function (selection) {
        for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
          for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
            if (node = group0[i] || group1[i]) {
              merge[i] = node
            }
          }
        }
        for (; j < m0; ++j) {
          merges[j] = groups0[j]
        }
        return new Selection(merges, this._parents)
      };
      var selection_order = function () {
        for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
          for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
            if (node = group[i]) {
              if (next && next !== node.nextSibling)
                next.parentNode.insertBefore(node, next);
              next = node
            }
          }
        }
        return this
      };
      var selection_sort = function (compare) {
        if (!compare)
          compare = ascending$1;
        function compareNode(a, b) {
          return a && b ? compare(a.__data__, b.__data__) : !a - !b
        }
        for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
            if (node = group[i]) {
              sortgroup[i] = node
            }
          }
          sortgroup.sort(compareNode)
        }
        return new Selection(sortgroups, this._parents).order()
      };
      function ascending$1(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
      }
      var selection_call = function () {
        var callback = arguments[0];
        arguments[0] = this;
        callback.apply(null, arguments);
        return this
      };
      var selection_nodes = function () {
        var nodes = new Array(this.size()), i = -1;
        this.each(function () {
          nodes[++i] = this
        });
        return nodes
      };
      var selection_node = function () {
        for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
          for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
            var node = group[i];
            if (node)
              return node
          }
        }
        return null
      };
      var selection_size = function () {
        var size = 0;
        this.each(function () {
          ++size
        });
        return size
      };
      var selection_empty = function () {
        return !this.node()
      };
      var selection_each = function (callback) {
        for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
          for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
            if (node = group[i])
              callback.call(node, node.__data__, i, group)
          }
        }
        return this
      };
      function attrRemove(name) {
        return function () {
          this.removeAttribute(name)
        }
      }
      function attrRemoveNS(fullname) {
        return function () {
          this.removeAttributeNS(fullname.space, fullname.local)
        }
      }
      function attrConstant(name, value) {
        return function () {
          this.setAttribute(name, value)
        }
      }
      function attrConstantNS(fullname, value) {
        return function () {
          this.setAttributeNS(fullname.space, fullname.local, value)
        }
      }
      function attrFunction(name, value) {
        return function () {
          var v = value.apply(this, arguments);
          if (v == null)
            this.removeAttribute(name);
          else
            this.setAttribute(name, v)
        }
      }
      function attrFunctionNS(fullname, value) {
        return function () {
          var v = value.apply(this, arguments);
          if (v == null)
            this.removeAttributeNS(fullname.space, fullname.local);
          else
            this.setAttributeNS(fullname.space, fullname.local, v)
        }
      }
      var selection_attr = function (name, value) {
        var fullname = namespace(name);
        if (arguments.length < 2) {
          var node = this.node();
          return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname)
        }
        return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === 'function' ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value))
      };
      var window = function (node) {
        return node.ownerDocument && node.ownerDocument.defaultView || node.document && node  // node is a Window
|| node.defaultView  // node is a Document
      };
      function styleRemove(name) {
        return function () {
          this.style.removeProperty(name)
        }
      }
      function styleConstant(name, value, priority) {
        return function () {
          this.style.setProperty(name, value, priority)
        }
      }
      function styleFunction(name, value, priority) {
        return function () {
          var v = value.apply(this, arguments);
          if (v == null)
            this.style.removeProperty(name);
          else
            this.style.setProperty(name, v, priority)
        }
      }
      var selection_style = function (name, value, priority) {
        var node;
        return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === 'function' ? styleFunction : styleConstant)(name, value, priority == null ? '' : priority)) : window(node = this.node()).getComputedStyle(node, null).getPropertyValue(name)
      };
      function propertyRemove(name) {
        return function () {
          delete this[name]
        }
      }
      function propertyConstant(name, value) {
        return function () {
          this[name] = value
        }
      }
      function propertyFunction(name, value) {
        return function () {
          var v = value.apply(this, arguments);
          if (v == null)
            delete this[name];
          else
            this[name] = v
        }
      }
      var selection_property = function (name, value) {
        return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === 'function' ? propertyFunction : propertyConstant)(name, value)) : this.node()[name]
      };
      function classArray(string) {
        return string.trim().split(/^|\s+/)
      }
      function classList(node) {
        return node.classList || new ClassList(node)
      }
      function ClassList(node) {
        this._node = node;
        this._names = classArray(node.getAttribute('class') || '')
      }
      ClassList.prototype = {
        add: function (name) {
          var i = this._names.indexOf(name);
          if (i < 0) {
            this._names.push(name);
            this._node.setAttribute('class', this._names.join(' '))
          }
        },
        remove: function (name) {
          var i = this._names.indexOf(name);
          if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute('class', this._names.join(' '))
          }
        },
        contains: function (name) {
          return this._names.indexOf(name) >= 0
        }
      };
      function classedAdd(node, names) {
        var list = classList(node), i = -1, n = names.length;
        while (++i < n)
          list.add(names[i])
      }
      function classedRemove(node, names) {
        var list = classList(node), i = -1, n = names.length;
        while (++i < n)
          list.remove(names[i])
      }
      function classedTrue(names) {
        return function () {
          classedAdd(this, names)
        }
      }
      function classedFalse(names) {
        return function () {
          classedRemove(this, names)
        }
      }
      function classedFunction(names, value) {
        return function () {
          (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names)
        }
      }
      var selection_classed = function (name, value) {
        var names = classArray(name + '');
        if (arguments.length < 2) {
          var list = classList(this.node()), i = -1, n = names.length;
          while (++i < n)
            if (!list.contains(names[i]))
              return false;
          return true
        }
        return this.each((typeof value === 'function' ? classedFunction : value ? classedTrue : classedFalse)(names, value))
      };
      function textRemove() {
        this.textContent = ''
      }
      function textConstant(value) {
        return function () {
          this.textContent = value
        }
      }
      function textFunction(value) {
        return function () {
          var v = value.apply(this, arguments);
          this.textContent = v == null ? '' : v
        }
      }
      var selection_text = function (value) {
        return arguments.length ? this.each(value == null ? textRemove : (typeof value === 'function' ? textFunction : textConstant)(value)) : this.node().textContent
      };
      function htmlRemove() {
        this.innerHTML = ''
      }
      function htmlConstant(value) {
        return function () {
          this.innerHTML = value
        }
      }
      function htmlFunction(value) {
        return function () {
          var v = value.apply(this, arguments);
          this.innerHTML = v == null ? '' : v
        }
      }
      var selection_html = function (value) {
        return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === 'function' ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML
      };
      function raise() {
        if (this.nextSibling)
          this.parentNode.appendChild(this)
      }
      var selection_raise = function () {
        return this.each(raise)
      };
      function lower() {
        if (this.previousSibling)
          this.parentNode.insertBefore(this, this.parentNode.firstChild)
      }
      var selection_lower = function () {
        return this.each(lower)
      };
      var selection_append = function (name) {
        var create = typeof name === 'function' ? name : creator(name);
        return this.select(function () {
          return this.appendChild(create.apply(this, arguments))
        })
      };
      function constantNull() {
        return null
      }
      var selection_insert = function (name, before) {
        var create = typeof name === 'function' ? name : creator(name), select = before == null ? constantNull : typeof before === 'function' ? before : selector(before);
        return this.select(function () {
          return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null)
        })
      };
      function remove() {
        var parent = this.parentNode;
        if (parent)
          parent.removeChild(this)
      }
      var selection_remove = function () {
        return this.each(remove)
      };
      var selection_datum = function (value) {
        return arguments.length ? this.property('__data__', value) : this.node().__data__
      };
      function dispatchEvent(node, type, params) {
        var window$$1 = window(node), event = window$$1.CustomEvent;
        if (event) {
          event = new event(type, params)
        } else {
          event = window$$1.document.createEvent('Event');
          if (params)
            event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
          else
            event.initEvent(type, false, false)
        }
        node.dispatchEvent(event)
      }
      function dispatchConstant(type, params) {
        return function () {
          return dispatchEvent(this, type, params)
        }
      }
      function dispatchFunction(type, params) {
        return function () {
          return dispatchEvent(this, type, params.apply(this, arguments))
        }
      }
      var selection_dispatch = function (type, params) {
        return this.each((typeof params === 'function' ? dispatchFunction : dispatchConstant)(type, params))
      };
      var root = [null];
      function Selection(groups, parents) {
        this._groups = groups;
        this._parents = parents
      }
      function selection() {
        return new Selection([[document.documentElement]], root)
      }
      Selection.prototype = selection.prototype = {
        constructor: Selection,
        select: selection_select,
        selectAll: selection_selectAll,
        filter: selection_filter,
        data: selection_data,
        enter: selection_enter,
        exit: selection_exit,
        merge: selection_merge,
        order: selection_order,
        sort: selection_sort,
        call: selection_call,
        nodes: selection_nodes,
        node: selection_node,
        size: selection_size,
        empty: selection_empty,
        each: selection_each,
        attr: selection_attr,
        style: selection_style,
        property: selection_property,
        classed: selection_classed,
        text: selection_text,
        html: selection_html,
        raise: selection_raise,
        lower: selection_lower,
        append: selection_append,
        insert: selection_insert,
        remove: selection_remove,
        datum: selection_datum,
        on: selection_on,
        dispatch: selection_dispatch
      };
      var select = function (selector) {
        return typeof selector === 'string' ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root)
      };
      var selectAll = function (selector) {
        return typeof selector === 'string' ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector == null ? [] : selector], root)
      };
      var touch = function (node, touches, identifier) {
        if (arguments.length < 3)
          identifier = touches, touches = sourceEvent().changedTouches;
        for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
          if ((touch = touches[i]).identifier === identifier) {
            return point(node, touch)
          }
        }
        return null
      };
      var touches = function (node, touches) {
        if (touches == null)
          touches = sourceEvent().touches;
        for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
          points[i] = point(node, touches[i])
        }
        return points
      };
      function nopropagation() {
        exports.event.stopImmediatePropagation()
      }
      var noevent = function () {
        exports.event.preventDefault();
        exports.event.stopImmediatePropagation()
      };
      var dragDisable = function (view) {
        var root = view.document.documentElement, selection$$1 = select(view).on('dragstart.drag', noevent, true);
        if ('onselectstart' in root) {
          selection$$1.on('selectstart.drag', noevent, true)
        } else {
          root.__noselect = root.style.MozUserSelect;
          root.style.MozUserSelect = 'none'
        }
      };
      function yesdrag(view, noclick) {
        var root = view.document.documentElement, selection$$1 = select(view).on('dragstart.drag', null);
        if (noclick) {
          selection$$1.on('click.drag', noevent, true);
          setTimeout(function () {
            selection$$1.on('click.drag', null)
          }, 0)
        }
        if ('onselectstart' in root) {
          selection$$1.on('selectstart.drag', null)
        } else {
          root.style.MozUserSelect = root.__noselect;
          delete root.__noselect
        }
      }
      var constant$2 = function (x) {
        return function () {
          return x
        }
      };
      function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
        this.target = target;
        this.type = type;
        this.subject = subject;
        this.identifier = id;
        this.active = active;
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
        this._ = dispatch
      }
      DragEvent.prototype.on = function () {
        var value = this._.on.apply(this._, arguments);
        return value === this._ ? this : value
      };
      // Ignore right-click, since that should open the context menu.
      function defaultFilter$1() {
        return !exports.event.button
      }
      function defaultContainer() {
        return this.parentNode
      }
      function defaultSubject(d) {
        return d == null ? {
          x: exports.event.x,
          y: exports.event.y
        } : d
      }
      var drag = function () {
        var filter = defaultFilter$1, container = defaultContainer, subject = defaultSubject, gestures = {}, listeners = dispatch('start', 'drag', 'end'), active = 0, mousemoving, touchending;
        function drag(selection$$1) {
          selection$$1.on('mousedown.drag', mousedowned).on('touchstart.drag', touchstarted).on('touchmove.drag', touchmoved).on('touchend.drag touchcancel.drag', touchended).style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)')
        }
        function mousedowned() {
          if (touchending || !filter.apply(this, arguments))
            return;
          var gesture = beforestart('mouse', container.apply(this, arguments), mouse, this, arguments);
          if (!gesture)
            return;
          select(exports.event.view).on('mousemove.drag', mousemoved, true).on('mouseup.drag', mouseupped, true);
          dragDisable(exports.event.view);
          nopropagation();
          mousemoving = false;
          gesture('start')
        }
        function mousemoved() {
          noevent();
          mousemoving = true;
          gestures.mouse('drag')
        }
        function mouseupped() {
          select(exports.event.view).on('mousemove.drag mouseup.drag', null);
          yesdrag(exports.event.view, mousemoving);
          noevent();
          gestures.mouse('end')
        }
        function touchstarted() {
          if (!filter.apply(this, arguments))
            return;
          var touches$$1 = exports.event.changedTouches, c = container.apply(this, arguments), n = touches$$1.length, i, gesture;
          for (i = 0; i < n; ++i) {
            if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {
              nopropagation();
              gesture('start')
            }
          }
        }
        function touchmoved() {
          var touches$$1 = exports.event.changedTouches, n = touches$$1.length, i, gesture;
          for (i = 0; i < n; ++i) {
            if (gesture = gestures[touches$$1[i].identifier]) {
              noevent();
              gesture('drag')
            }
          }
        }
        function touchended() {
          var touches$$1 = exports.event.changedTouches, n = touches$$1.length, i, gesture;
          if (touchending)
            clearTimeout(touchending);
          touchending = setTimeout(function () {
            touchending = null
          }, 500);
          // Ghost clicks are delayed!
          for (i = 0; i < n; ++i) {
            if (gesture = gestures[touches$$1[i].identifier]) {
              nopropagation();
              gesture('end')
            }
          }
        }
        function beforestart(id, container, point, that, args) {
          var p = point(container, id), s, dx, dy, sublisteners = listeners.copy();
          if (!customEvent(new DragEvent(drag, 'beforestart', s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
              if ((exports.event.subject = s = subject.apply(that, args)) == null)
                return false;
              dx = s.x - p[0] || 0;
              dy = s.y - p[1] || 0;
              return true
            }))
            return;
          return function gesture(type) {
            var p0 = p, n;
            switch (type) {
            case 'start':
              gestures[id] = gesture, n = active++;
              break;
            case 'end':
              delete gestures[id], --active;
            // nobreak
            case 'drag':
              p = point(container, id), n = active;
              break
            }
            customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [
              type,
              that,
              args
            ])
          }
        }
        drag.filter = function (_) {
          return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$2(!!_), drag) : filter
        };
        drag.container = function (_) {
          return arguments.length ? (container = typeof _ === 'function' ? _ : constant$2(_), drag) : container
        };
        drag.subject = function (_) {
          return arguments.length ? (subject = typeof _ === 'function' ? _ : constant$2(_), drag) : subject
        };
        drag.on = function () {
          var value = listeners.on.apply(listeners, arguments);
          return value === listeners ? drag : value
        };
        return drag
      };
      var define = function (constructor, factory, prototype) {
        constructor.prototype = factory.prototype = prototype;
        prototype.constructor = constructor
      };
      function extend(parent, definition) {
        var prototype = Object.create(parent.prototype);
        for (var key in definition)
          prototype[key] = definition[key];
        return prototype
      }
      function Color() {
      }
      var darker = 0.7;
      var brighter = 1 / darker;
      var reI = '\\s*([+-]?\\d+)\\s*';
      var reN = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*';
      var reP = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*';
      var reHex3 = /^#([0-9a-f]{3})$/;
      var reHex6 = /^#([0-9a-f]{6})$/;
      var reRgbInteger = new RegExp('^rgb\\(' + [
        reI,
        reI,
        reI
      ] + '\\)$');
      var reRgbPercent = new RegExp('^rgb\\(' + [
        reP,
        reP,
        reP
      ] + '\\)$');
      var reRgbaInteger = new RegExp('^rgba\\(' + [
        reI,
        reI,
        reI,
        reN
      ] + '\\)$');
      var reRgbaPercent = new RegExp('^rgba\\(' + [
        reP,
        reP,
        reP,
        reN
      ] + '\\)$');
      var reHslPercent = new RegExp('^hsl\\(' + [
        reN,
        reP,
        reP
      ] + '\\)$');
      var reHslaPercent = new RegExp('^hsla\\(' + [
        reN,
        reP,
        reP,
        reN
      ] + '\\)$');
      var named = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
      };
      define(Color, color, {
        displayable: function () {
          return this.rgb().displayable()
        },
        toString: function () {
          return this.rgb() + ''
        }
      });
      function color(format) {
        var m;
        format = (format + '').trim().toLowerCase();
        return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1)) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16))  // #ff0000
 : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1)  // rgb(255, 0, 0)
 : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1)  // rgb(100%, 0%, 0%)
 : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4])  // rgba(255, 0, 0, 1)
 : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4])  // rgb(100%, 0%, 0%, 1)
 : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1)  // hsl(120, 50%, 50%)
 : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4])  // hsla(120, 50%, 50%, 1)
 : named.hasOwnProperty(format) ? rgbn(named[format]) : format === 'transparent' ? new Rgb(NaN, NaN, NaN, 0) : null
      }
      function rgbn(n) {
        return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1)
      }
      function rgba(r, g, b, a) {
        if (a <= 0)
          r = g = b = NaN;
        return new Rgb(r, g, b, a)
      }
      function rgbConvert(o) {
        if (!(o instanceof Color))
          o = color(o);
        if (!o)
          return new Rgb;
        o = o.rgb();
        return new Rgb(o.r, o.g, o.b, o.opacity)
      }
      function rgb(r, g, b, opacity) {
        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity)
      }
      function Rgb(r, g, b, opacity) {
        this.r = +r;
        this.g = +g;
        this.b = +b;
        this.opacity = +opacity
      }
      define(Rgb, rgb, extend(Color, {
        brighter: function (k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity)
        },
        darker: function (k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity)
        },
        rgb: function () {
          return this
        },
        displayable: function () {
          return 0 <= this.r && this.r <= 255 && (0 <= this.g && this.g <= 255) && (0 <= this.b && this.b <= 255) && (0 <= this.opacity && this.opacity <= 1)
        },
        toString: function () {
          var a = this.opacity;
          a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
          return (a === 1 ? 'rgb(' : 'rgba(') + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ')' : ', ' + a + ')')
        }
      }));
      function hsla(h, s, l, a) {
        if (a <= 0)
          h = s = l = NaN;
        else if (l <= 0 || l >= 1)
          h = s = NaN;
        else if (s <= 0)
          h = NaN;
        return new Hsl(h, s, l, a)
      }
      function hslConvert(o) {
        if (o instanceof Hsl)
          return new Hsl(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Color))
          o = color(o);
        if (!o)
          return new Hsl;
        if (o instanceof Hsl)
          return o;
        o = o.rgb();
        var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
        if (s) {
          if (r === max)
            h = (g - b) / s + (g < b) * 6;
          else if (g === max)
            h = (b - r) / s + 2;
          else
            h = (r - g) / s + 4;
          s /= l < 0.5 ? max + min : 2 - max - min;
          h *= 60
        } else {
          s = l > 0 && l < 1 ? 0 : h
        }
        return new Hsl(h, s, l, o.opacity)
      }
      function hsl(h, s, l, opacity) {
        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity)
      }
      function Hsl(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity
      }
      define(Hsl, hsl, extend(Color, {
        brighter: function (k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity)
        },
        darker: function (k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity)
        },
        rgb: function () {
          var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
          return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity)
        },
        displayable: function () {
          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1)
        }
      }));
      /* From FvD 13.37, CSS Color Module Level 3 */
      function hsl2rgb(h, m1, m2) {
        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255
      }
      var deg2rad = Math.PI / 180;
      var rad2deg = 180 / Math.PI;
      var Kn = 18;
      var Xn = 0.95047;
      var Yn = 1;
      var Zn = 1.08883;
      var t0 = 4 / 29;
      var t1 = 6 / 29;
      var t2 = 3 * t1 * t1;
      var t3 = t1 * t1 * t1;
      function labConvert(o) {
        if (o instanceof Lab)
          return new Lab(o.l, o.a, o.b, o.opacity);
        if (o instanceof Hcl) {
          var h = o.h * deg2rad;
          return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity)
        }
        if (!(o instanceof Rgb))
          o = rgbConvert(o);
        var b = rgb2xyz(o.r), a = rgb2xyz(o.g), l = rgb2xyz(o.b), x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn), y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn), z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn);
        return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity)
      }
      function lab(l, a, b, opacity) {
        return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity)
      }
      function Lab(l, a, b, opacity) {
        this.l = +l;
        this.a = +a;
        this.b = +b;
        this.opacity = +opacity
      }
      define(Lab, lab, extend(Color, {
        brighter: function (k) {
          return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity)
        },
        darker: function (k) {
          return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity)
        },
        rgb: function () {
          var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
          y = Yn * lab2xyz(y);
          x = Xn * lab2xyz(x);
          z = Zn * lab2xyz(z);
          return new Rgb(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
          xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity)
        }
      }));
      function xyz2lab(t) {
        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0
      }
      function lab2xyz(t) {
        return t > t1 ? t * t * t : t2 * (t - t0)
      }
      function xyz2rgb(x) {
        return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055)
      }
      function rgb2xyz(x) {
        return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4)
      }
      function hclConvert(o) {
        if (o instanceof Hcl)
          return new Hcl(o.h, o.c, o.l, o.opacity);
        if (!(o instanceof Lab))
          o = labConvert(o);
        var h = Math.atan2(o.b, o.a) * rad2deg;
        return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity)
      }
      function hcl(h, c, l, opacity) {
        return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity)
      }
      function Hcl(h, c, l, opacity) {
        this.h = +h;
        this.c = +c;
        this.l = +l;
        this.opacity = +opacity
      }
      define(Hcl, hcl, extend(Color, {
        brighter: function (k) {
          return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity)
        },
        darker: function (k) {
          return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity)
        },
        rgb: function () {
          return labConvert(this).rgb()
        }
      }));
      var A = -0.14861;
      var B = +1.78277;
      var C = -0.29227;
      var D = -0.90649;
      var E = +1.97294;
      var ED = E * D;
      var EB = E * B;
      var BC_DA = B * C - D * A;
      function cubehelixConvert(o) {
        if (o instanceof Cubehelix)
          return new Cubehelix(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Rgb))
          o = rgbConvert(o);
        var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
          // NaN if l=0 or l=1
          h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity)
      }
      function cubehelix(h, s, l, opacity) {
        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity)
      }
      function Cubehelix(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity
      }
      define(Cubehelix, cubehelix, extend(Color, {
        brighter: function (k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Cubehelix(this.h, this.s, this.l * k, this.opacity)
        },
        darker: function (k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Cubehelix(this.h, this.s, this.l * k, this.opacity)
        },
        rgb: function () {
          var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
          return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity)
        }
      }));
      function basis(t1, v0, v1, v2, v3) {
        var t2 = t1 * t1, t3 = t2 * t1;
        return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6
      }
      var basis$1 = function (values) {
        var n = values.length - 1;
        return function (t) {
          var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
          return basis((t - i / n) * n, v0, v1, v2, v3)
        }
      };
      var basisClosed = function (values) {
        var n = values.length;
        return function (t) {
          var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
          return basis((t - i / n) * n, v0, v1, v2, v3)
        }
      };
      var constant$3 = function (x) {
        return function () {
          return x
        }
      };
      function linear(a, d) {
        return function (t) {
          return a + t * d
        }
      }
      function exponential(a, b, y) {
        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
          return Math.pow(a + t * b, y)
        }
      }
      function hue(a, b) {
        var d = b - a;
        return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a)
      }
      function gamma(y) {
        return (y = +y) === 1 ? nogamma : function (a, b) {
          return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a)
        }
      }
      function nogamma(a, b) {
        var d = b - a;
        return d ? linear(a, d) : constant$3(isNaN(a) ? b : a)
      }
      var interpolateRgb = function rgbGamma(y) {
        var color$$1 = gamma(y);
        function rgb$$1(start, end) {
          var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r), g = color$$1(start.g, end.g), b = color$$1(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
          return function (t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + ''
          }
        }
        rgb$$1.gamma = rgbGamma;
        return rgb$$1
      }(1);
      function rgbSpline(spline) {
        return function (colors) {
          var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color$$1;
          for (i = 0; i < n; ++i) {
            color$$1 = rgb(colors[i]);
            r[i] = color$$1.r || 0;
            g[i] = color$$1.g || 0;
            b[i] = color$$1.b || 0
          }
          r = spline(r);
          g = spline(g);
          b = spline(b);
          color$$1.opacity = 1;
          return function (t) {
            color$$1.r = r(t);
            color$$1.g = g(t);
            color$$1.b = b(t);
            return color$$1 + ''
          }
        }
      }
      var rgbBasis = rgbSpline(basis$1);
      var rgbBasisClosed = rgbSpline(basisClosed);
      var array$1 = function (a, b) {
        var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(nb), c = new Array(nb), i;
        for (i = 0; i < na; ++i)
          x[i] = interpolateValue(a[i], b[i]);
        for (; i < nb; ++i)
          c[i] = b[i];
        return function (t) {
          for (i = 0; i < na; ++i)
            c[i] = x[i](t);
          return c
        }
      };
      var date = function (a, b) {
        var d = new Date;
        return a = +a, b -= a, function (t) {
          return d.setTime(a + b * t), d
        }
      };
      var reinterpolate = function (a, b) {
        return a = +a, b -= a, function (t) {
          return a + b * t
        }
      };
      var object = function (a, b) {
        var i = {}, c = {}, k;
        if (a === null || typeof a !== 'object')
          a = {};
        if (b === null || typeof b !== 'object')
          b = {};
        for (k in b) {
          if (k in a) {
            i[k] = interpolateValue(a[k], b[k])
          } else {
            c[k] = b[k]
          }
        }
        return function (t) {
          for (k in i)
            c[k] = i[k](t);
          return c
        }
      };
      var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
      var reB = new RegExp(reA.source, 'g');
      function zero(b) {
        return function () {
          return b
        }
      }
      function one(b) {
        return function (t) {
          return b(t) + ''
        }
      }
      var interpolateString = function (a, b) {
        var bi = reA.lastIndex = reB.lastIndex = 0,
          // scan index for next number in b
          am,
          // current match in a
          bm,
          // current match in b
          bs,
          // string preceding current number in b, if any
          i = -1,
          // index in s
          s = [],
          // string constants and placeholders
          q = [];
        // number interpolators
        // Coerce inputs to strings.
        a = a + '', b = b + '';
        // Interpolate pairs of numbers in a & b.
        while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
          if ((bs = bm.index) > bi) {
            // a string precedes the next number in b
            bs = b.slice(bi, bs);
            if (s[i])
              s[i] += bs;  // coalesce with previous string
            else
              s[++i] = bs
          }
          if ((am = am[0]) === (bm = bm[0])) {
            // numbers in a & b match
            if (s[i])
              s[i] += bm;  // coalesce with previous string
            else
              s[++i] = bm
          } else {
            // interpolate non-matching numbers
            s[++i] = null;
            q.push({
              i: i,
              x: reinterpolate(am, bm)
            })
          }
          bi = reB.lastIndex
        }
        // Add remains of b.
        if (bi < b.length) {
          bs = b.slice(bi);
          if (s[i])
            s[i] += bs;  // coalesce with previous string
          else
            s[++i] = bs
        }
        // Special optimization for only a single match.
        // Otherwise, interpolate each of the numbers and rejoin the string.
        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
          for (var i = 0, o; i < b; ++i)
            s[(o = q[i]).i] = o.x(t);
          return s.join('')
        })
      };
      var interpolateValue = function (a, b) {
        var t = typeof b, c;
        return b == null || t === 'boolean' ? constant$3(b) : (t === 'number' ? reinterpolate : t === 'string' ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : Array.isArray(b) ? array$1 : isNaN(b) ? object : reinterpolate)(a, b)
      };
      var interpolateRound = function (a, b) {
        return a = +a, b -= a, function (t) {
          return Math.round(a + b * t)
        }
      };
      var degrees = 180 / Math.PI;
      var identity$2 = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
      };
      var decompose = function (a, b, c, d, e, f) {
        var scaleX, scaleY, skewX;
        if (scaleX = Math.sqrt(a * a + b * b))
          a /= scaleX, b /= scaleX;
        if (skewX = a * c + b * d)
          c -= a * skewX, d -= b * skewX;
        if (scaleY = Math.sqrt(c * c + d * d))
          c /= scaleY, d /= scaleY, skewX /= scaleY;
        if (a * d < b * c)
          a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
        return {
          translateX: e,
          translateY: f,
          rotate: Math.atan2(b, a) * degrees,
          skewX: Math.atan(skewX) * degrees,
          scaleX: scaleX,
          scaleY: scaleY
        }
      };
      var cssNode;
      var cssRoot;
      var cssView;
      var svgNode;
      function parseCss(value) {
        if (value === 'none')
          return identity$2;
        if (!cssNode)
          cssNode = document.createElement('DIV'), cssRoot = document.documentElement, cssView = document.defaultView;
        cssNode.style.transform = value;
        value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue('transform');
        cssRoot.removeChild(cssNode);
        value = value.slice(7, -1).split(',');
        return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5])
      }
      function parseSvg(value) {
        if (value == null)
          return identity$2;
        if (!svgNode)
          svgNode = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        svgNode.setAttribute('transform', value);
        if (!(value = svgNode.transform.baseVal.consolidate()))
          return identity$2;
        value = value.matrix;
        return decompose(value.a, value.b, value.c, value.d, value.e, value.f)
      }
      function interpolateTransform(parse, pxComma, pxParen, degParen) {
        function pop(s) {
          return s.length ? s.pop() + ' ' : ''
        }
        function translate(xa, ya, xb, yb, s, q) {
          if (xa !== xb || ya !== yb) {
            var i = s.push('translate(', null, pxComma, null, pxParen);
            q.push({
              i: i - 4,
              x: reinterpolate(xa, xb)
            }, {
              i: i - 2,
              x: reinterpolate(ya, yb)
            })
          } else if (xb || yb) {
            s.push('translate(' + xb + pxComma + yb + pxParen)
          }
        }
        function rotate(a, b, s, q) {
          if (a !== b) {
            if (a - b > 180)
              b += 360;
            else if (b - a > 180)
              a += 360;
            // shortest path
            q.push({
              i: s.push(pop(s) + 'rotate(', null, degParen) - 2,
              x: reinterpolate(a, b)
            })
          } else if (b) {
            s.push(pop(s) + 'rotate(' + b + degParen)
          }
        }
        function skewX(a, b, s, q) {
          if (a !== b) {
            q.push({
              i: s.push(pop(s) + 'skewX(', null, degParen) - 2,
              x: reinterpolate(a, b)
            })
          } else if (b) {
            s.push(pop(s) + 'skewX(' + b + degParen)
          }
        }
        function scale(xa, ya, xb, yb, s, q) {
          if (xa !== xb || ya !== yb) {
            var i = s.push(pop(s) + 'scale(', null, ',', null, ')');
            q.push({
              i: i - 4,
              x: reinterpolate(xa, xb)
            }, {
              i: i - 2,
              x: reinterpolate(ya, yb)
            })
          } else if (xb !== 1 || yb !== 1) {
            s.push(pop(s) + 'scale(' + xb + ',' + yb + ')')
          }
        }
        return function (a, b) {
          var s = [],
            // string constants and placeholders
            q = [];
          // number interpolators
          a = parse(a), b = parse(b);
          translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
          rotate(a.rotate, b.rotate, s, q);
          skewX(a.skewX, b.skewX, s, q);
          scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
          a = b = null;
          // gc
          return function (t) {
            var i = -1, n = q.length, o;
            while (++i < n)
              s[(o = q[i]).i] = o.x(t);
            return s.join('')
          }
        }
      }
      var interpolateTransformCss = interpolateTransform(parseCss, 'px, ', 'px)', 'deg)');
      var interpolateTransformSvg = interpolateTransform(parseSvg, ', ', ')', ')');
      var rho = Math.SQRT2;
      var rho2 = 2;
      var rho4 = 4;
      var epsilon2 = 1e-12;
      function cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2
      }
      function sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2
      }
      function tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1)
      }
      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      var interpolateZoom = function (p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
          S = Math.log(w1 / w0) / rho;
          i = function (t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S)
            ]
          }
        }  // General case.
        else {
          var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / rho;
          i = function (t) {
            var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh(rho * s + r0)
            ]
          }
        }
        i.duration = S * 1000;
        return i
      };
      function hsl$1(hue$$1) {
        return function (start, end) {
          var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
          return function (t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + ''
          }
        }
      }
      var hsl$2 = hsl$1(hue);
      var hslLong = hsl$1(nogamma);
      function lab$1(start, end) {
        var l = nogamma((start = lab(start)).l, (end = lab(end)).l), a = nogamma(start.a, end.a), b = nogamma(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
        return function (t) {
          start.l = l(t);
          start.a = a(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + ''
        }
      }
      function hcl$1(hue$$1) {
        return function (start, end) {
          var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
          return function (t) {
            start.h = h(t);
            start.c = c(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + ''
          }
        }
      }
      var hcl$2 = hcl$1(hue);
      var hclLong = hcl$1(nogamma);
      function cubehelix$1(hue$$1) {
        return function cubehelixGamma(y) {
          y = +y;
          function cubehelix$$1(start, end) {
            var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
            return function (t) {
              start.h = h(t);
              start.s = s(t);
              start.l = l(Math.pow(t, y));
              start.opacity = opacity(t);
              return start + ''
            }
          }
          cubehelix$$1.gamma = cubehelixGamma;
          return cubehelix$$1
        }(1)
      }
      var cubehelix$2 = cubehelix$1(hue);
      var cubehelixLong = cubehelix$1(nogamma);
      var quantize = function (interpolator, n) {
        var samples = new Array(n);
        for (var i = 0; i < n; ++i)
          samples[i] = interpolator(i / (n - 1));
        return samples
      };
      var frame = 0;
      var timeout = 0;
      var interval = 0;
      var pokeDelay = 1000;
      var taskHead;
      var taskTail;
      var clockLast = 0;
      var clockNow = 0;
      var clockSkew = 0;
      var clock = typeof performance === 'object' && performance.now ? performance : Date;
      var setFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : function (f) {
        setTimeout(f, 17)
      };
      function now() {
        return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew)
      }
      function clearNow() {
        clockNow = 0
      }
      function Timer() {
        this._call = this._time = this._next = null
      }
      Timer.prototype = timer.prototype = {
        constructor: Timer,
        restart: function (callback, delay, time) {
          if (typeof callback !== 'function')
            throw new TypeError('callback is not a function');
          time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
          if (!this._next && taskTail !== this) {
            if (taskTail)
              taskTail._next = this;
            else
              taskHead = this;
            taskTail = this
          }
          this._call = callback;
          this._time = time;
          sleep()
        },
        stop: function () {
          if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep()
          }
        }
      };
      function timer(callback, delay, time) {
        var t = new Timer;
        t.restart(callback, delay, time);
        return t
      }
      function timerFlush() {
        now();
        // Get the current time, if not already set.
        ++frame;
        // Pretend we’ve set an alarm, if we haven’t already.
        var t = taskHead, e;
        while (t) {
          if ((e = clockNow - t._time) >= 0)
            t._call.call(null, e);
          t = t._next
        }
        --frame
      }
      function wake() {
        clockNow = (clockLast = clock.now()) + clockSkew;
        frame = timeout = 0;
        try {
          timerFlush()
        } finally {
          frame = 0;
          nap();
          clockNow = 0
        }
      }
      function poke() {
        var now = clock.now(), delay = now - clockLast;
        if (delay > pokeDelay)
          clockSkew -= delay, clockLast = now
      }
      function nap() {
        var t0, t1 = taskHead, t2, time = Infinity;
        while (t1) {
          if (t1._call) {
            if (time > t1._time)
              time = t1._time;
            t0 = t1, t1 = t1._next
          } else {
            t2 = t1._next, t1._next = null;
            t1 = t0 ? t0._next = t2 : taskHead = t2
          }
        }
        taskTail = t0;
        sleep(time)
      }
      function sleep(time) {
        if (frame)
          return;
        // Soonest alarm already set, or will be.
        if (timeout)
          timeout = clearTimeout(timeout);
        var delay = time - clockNow;
        if (delay > 24) {
          if (time < Infinity)
            timeout = setTimeout(wake, delay);
          if (interval)
            interval = clearInterval(interval)
        } else {
          if (!interval)
            clockLast = clockNow, interval = setInterval(poke, pokeDelay);
          frame = 1, setFrame(wake)
        }
      }
      var timeout$1 = function (callback, delay, time) {
        var t = new Timer;
        delay = delay == null ? 0 : +delay;
        t.restart(function (elapsed) {
          t.stop();
          callback(elapsed + delay)
        }, delay, time);
        return t
      };
      var interval$1 = function (callback, delay, time) {
        var t = new Timer, total = delay;
        if (delay == null)
          return t.restart(callback, delay, time), t;
        delay = +delay, time = time == null ? now() : +time;
        t.restart(function tick(elapsed) {
          elapsed += total;
          t.restart(tick, total += delay, time);
          callback(elapsed)
        }, delay, time);
        return t
      };
      var emptyOn = dispatch('start', 'end', 'interrupt');
      var emptyTween = [];
      var CREATED = 0;
      var SCHEDULED = 1;
      var STARTING = 2;
      var STARTED = 3;
      var RUNNING = 4;
      var ENDING = 5;
      var ENDED = 6;
      var schedule = function (node, name, id, index, group, timing) {
        var schedules = node.__transition;
        if (!schedules)
          node.__transition = {};
        else if (id in schedules)
          return;
        create(node, id, {
          name: name,
          index: index,
          // For context during callback.
          group: group,
          // For context during callback.
          on: emptyOn,
          tween: emptyTween,
          time: timing.time,
          delay: timing.delay,
          duration: timing.duration,
          ease: timing.ease,
          timer: null,
          state: CREATED
        })
      };
      function init(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED)
          throw new Error('too late');
        return schedule
      }
      function set$1(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING)
          throw new Error('too late');
        return schedule
      }
      function get$1(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id]))
          throw new Error('too late');
        return schedule
      }
      function create(node, id, self) {
        var schedules = node.__transition, tween;
        // Initialize the self timer when the transition is created.
        // Note the actual delay is not known until the first callback!
        schedules[id] = self;
        self.timer = timer(schedule, 0, self.time);
        function schedule(elapsed) {
          self.state = SCHEDULED;
          self.timer.restart(start, self.delay, self.time);
          // If the elapsed delay is less than our first sleep, start immediately.
          if (self.delay <= elapsed)
            start(elapsed - self.delay)
        }
        function start(elapsed) {
          var i, j, n, o;
          // If the state is not SCHEDULED, then we previously errored on start.
          if (self.state !== SCHEDULED)
            return stop();
          for (i in schedules) {
            o = schedules[i];
            if (o.name !== self.name)
              continue;
            // While this element already has a starting transition during this frame,
            // defer starting an interrupting transition until that transition has a
            // chance to tick (and possibly end); see d3/d3-transition#54!
            if (o.state === STARTED)
              return timeout$1(start);
            // Interrupt the active transition, if any.
            // Dispatch the interrupt event.
            if (o.state === RUNNING) {
              o.state = ENDED;
              o.timer.stop();
              o.on.call('interrupt', node, node.__data__, o.index, o.group);
              delete schedules[i]
            }  // Cancel any pre-empted transitions. No interrupt event is dispatched
               // because the cancelled transitions never started. Note that this also
               // removes this transition from the pending list!
            else if (+i < id) {
              o.state = ENDED;
              o.timer.stop();
              delete schedules[i]
            }
          }
          // Defer the first tick to end of the current frame; see d3/d3#1576.
          // Note the transition may be canceled after start and before the first tick!
          // Note this must be scheduled before the start event; see d3/d3-transition#16!
          // Assuming this is successful, subsequent callbacks go straight to tick.
          timeout$1(function () {
            if (self.state === STARTED) {
              self.state = RUNNING;
              self.timer.restart(tick, self.delay, self.time);
              tick(elapsed)
            }
          });
          // Dispatch the start event.
          // Note this must be done before the tween are initialized.
          self.state = STARTING;
          self.on.call('start', node, node.__data__, self.index, self.group);
          if (self.state !== STARTING)
            return;
          // interrupted
          self.state = STARTED;
          // Initialize the tween, deleting null tween.
          tween = new Array(n = self.tween.length);
          for (i = 0, j = -1; i < n; ++i) {
            if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
              tween[++j] = o
            }
          }
          tween.length = j + 1
        }
        function tick(elapsed) {
          var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
          while (++i < n) {
            tween[i].call(null, t)
          }
          // Dispatch the end event.
          if (self.state === ENDING) {
            self.on.call('end', node, node.__data__, self.index, self.group);
            stop()
          }
        }
        function stop() {
          self.state = ENDED;
          self.timer.stop();
          delete schedules[id];
          for (var i in schedules)
            return;
          // eslint-disable-line no-unused-vars
          delete node.__transition
        }
      }
      var interrupt = function (node, name) {
        var schedules = node.__transition, schedule, active, empty = true, i;
        if (!schedules)
          return;
        name = name == null ? null : name + '';
        for (i in schedules) {
          if ((schedule = schedules[i]).name !== name) {
            empty = false;
            continue
          }
          active = schedule.state > STARTING && schedule.state < ENDING;
          schedule.state = ENDED;
          schedule.timer.stop();
          if (active)
            schedule.on.call('interrupt', node, node.__data__, schedule.index, schedule.group);
          delete schedules[i]
        }
        if (empty)
          delete node.__transition
      };
      var selection_interrupt = function (name) {
        return this.each(function () {
          interrupt(this, name)
        })
      };
      function tweenRemove(id, name) {
        var tween0, tween1;
        return function () {
          var schedule = set$1(this, id), tween = schedule.tween;
          // If this node shared tween with the previous node,
          // just assign the updated shared tween and we’re done!
          // Otherwise, copy-on-write.
          if (tween !== tween0) {
            tween1 = tween0 = tween;
            for (var i = 0, n = tween1.length; i < n; ++i) {
              if (tween1[i].name === name) {
                tween1 = tween1.slice();
                tween1.splice(i, 1);
                break
              }
            }
          }
          schedule.tween = tween1
        }
      }
      function tweenFunction(id, name, value) {
        var tween0, tween1;
        if (typeof value !== 'function')
          throw new Error;
        return function () {
          var schedule = set$1(this, id), tween = schedule.tween;
          // If this node shared tween with the previous node,
          // just assign the updated shared tween and we’re done!
          // Otherwise, copy-on-write.
          if (tween !== tween0) {
            tween1 = (tween0 = tween).slice();
            for (var t = {
                  name: name,
                  value: value
                }, i = 0, n = tween1.length; i < n; ++i) {
              if (tween1[i].name === name) {
                tween1[i] = t;
                break
              }
            }
            if (i === n)
              tween1.push(t)
          }
          schedule.tween = tween1
        }
      }
      var transition_tween = function (name, value) {
        var id = this._id;
        name += '';
        if (arguments.length < 2) {
          var tween = get$1(this.node(), id).tween;
          for (var i = 0, n = tween.length, t; i < n; ++i) {
            if ((t = tween[i]).name === name) {
              return t.value
            }
          }
          return null
        }
        return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value))
      };
      function tweenValue(transition, name, value) {
        var id = transition._id;
        transition.each(function () {
          var schedule = set$1(this, id);
          (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments)
        });
        return function (node) {
          return get$1(node, id).value[name]
        }
      }
      var interpolate$$1 = function (a, b) {
        var c;
        return (typeof b === 'number' ? reinterpolate : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b)
      };
      function attrRemove$1(name) {
        return function () {
          this.removeAttribute(name)
        }
      }
      function attrRemoveNS$1(fullname) {
        return function () {
          this.removeAttributeNS(fullname.space, fullname.local)
        }
      }
      function attrConstant$1(name, interpolate$$1, value1) {
        var value00, interpolate0;
        return function () {
          var value0 = this.getAttribute(name);
          return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1)
        }
      }
      function attrConstantNS$1(fullname, interpolate$$1, value1) {
        var value00, interpolate0;
        return function () {
          var value0 = this.getAttributeNS(fullname.space, fullname.local);
          return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1)
        }
      }
      function attrFunction$1(name, interpolate$$1, value) {
        var value00, value10, interpolate0;
        return function () {
          var value0, value1 = value(this);
          if (value1 == null)
            return void this.removeAttribute(name);
          value0 = this.getAttribute(name);
          return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1)
        }
      }
      function attrFunctionNS$1(fullname, interpolate$$1, value) {
        var value00, value10, interpolate0;
        return function () {
          var value0, value1 = value(this);
          if (value1 == null)
            return void this.removeAttributeNS(fullname.space, fullname.local);
          value0 = this.getAttributeNS(fullname.space, fullname.local);
          return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1)
        }
      }
      var transition_attr = function (name, value) {
        var fullname = namespace(name), i = fullname === 'transform' ? interpolateTransformSvg : interpolate$$1;
        return this.attrTween(name, typeof value === 'function' ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, 'attr.' + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value))
      };
      function attrTweenNS(fullname, value) {
        function tween() {
          var node = this, i = value.apply(node, arguments);
          return i && function (t) {
            node.setAttributeNS(fullname.space, fullname.local, i(t))
          }
        }
        tween._value = value;
        return tween
      }
      function attrTween(name, value) {
        function tween() {
          var node = this, i = value.apply(node, arguments);
          return i && function (t) {
            node.setAttribute(name, i(t))
          }
        }
        tween._value = value;
        return tween
      }
      var transition_attrTween = function (name, value) {
        var key = 'attr.' + name;
        if (arguments.length < 2)
          return (key = this.tween(key)) && key._value;
        if (value == null)
          return this.tween(key, null);
        if (typeof value !== 'function')
          throw new Error;
        var fullname = namespace(name);
        return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value))
      };
      function delayFunction(id, value) {
        return function () {
          init(this, id).delay = +value.apply(this, arguments)
        }
      }
      function delayConstant(id, value) {
        return value = +value, function () {
          init(this, id).delay = value
        }
      }
      var transition_delay = function (value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === 'function' ? delayFunction : delayConstant)(id, value)) : get$1(this.node(), id).delay
      };
      function durationFunction(id, value) {
        return function () {
          set$1(this, id).duration = +value.apply(this, arguments)
        }
      }
      function durationConstant(id, value) {
        return value = +value, function () {
          set$1(this, id).duration = value
        }
      }
      var transition_duration = function (value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === 'function' ? durationFunction : durationConstant)(id, value)) : get$1(this.node(), id).duration
      };
      function easeConstant(id, value) {
        if (typeof value !== 'function')
          throw new Error;
        return function () {
          set$1(this, id).ease = value
        }
      }
      var transition_ease = function (value) {
        var id = this._id;
        return arguments.length ? this.each(easeConstant(id, value)) : get$1(this.node(), id).ease
      };
      var transition_filter = function (match) {
        if (typeof match !== 'function')
          match = matcher$1(match);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
            if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
              subgroup.push(node)
            }
          }
        }
        return new Transition(subgroups, this._parents, this._name, this._id)
      };
      var transition_merge = function (transition) {
        if (transition._id !== this._id)
          throw new Error;
        for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
          for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
            if (node = group0[i] || group1[i]) {
              merge[i] = node
            }
          }
        }
        for (; j < m0; ++j) {
          merges[j] = groups0[j]
        }
        return new Transition(merges, this._parents, this._name, this._id)
      };
      function start(name) {
        return (name + '').trim().split(/^|\s+/).every(function (t) {
          var i = t.indexOf('.');
          if (i >= 0)
            t = t.slice(0, i);
          return !t || t === 'start'
        })
      }
      function onFunction(id, name, listener) {
        var on0, on1, sit = start(name) ? init : set$1;
        return function () {
          var schedule = sit(this, id), on = schedule.on;
          // If this node shared a dispatch with the previous node,
          // just assign the updated shared dispatch and we’re done!
          // Otherwise, copy-on-write.
          if (on !== on0)
            (on1 = (on0 = on).copy()).on(name, listener);
          schedule.on = on1
        }
      }
      var transition_on = function (name, listener) {
        var id = this._id;
        return arguments.length < 2 ? get$1(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener))
      };
      function removeFunction(id) {
        return function () {
          var parent = this.parentNode;
          for (var i in this.__transition)
            if (+i !== id)
              return;
          if (parent)
            parent.removeChild(this)
        }
      }
      var transition_remove = function () {
        return this.on('end.remove', removeFunction(this._id))
      };
      var transition_select = function (select$$1) {
        var name = this._name, id = this._id;
        if (typeof select$$1 !== 'function')
          select$$1 = selector(select$$1);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
            if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
              if ('__data__' in node)
                subnode.__data__ = node.__data__;
              subgroup[i] = subnode;
              schedule(subgroup[i], name, id, i, subgroup, get$1(node, id))
            }
          }
        }
        return new Transition(subgroups, this._parents, name, id)
      };
      var transition_selectAll = function (select$$1) {
        var name = this._name, id = this._id;
        if (typeof select$$1 !== 'function')
          select$$1 = selectorAll(select$$1);
        for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
              for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
                if (child = children[k]) {
                  schedule(child, name, id, k, children, inherit)
                }
              }
              subgroups.push(children);
              parents.push(node)
            }
          }
        }
        return new Transition(subgroups, parents, name, id)
      };
      var Selection$1 = selection.prototype.constructor;
      var transition_selection = function () {
        return new Selection$1(this._groups, this._parents)
      };
      function styleRemove$1(name, interpolate$$2) {
        var value00, value10, interpolate0;
        return function () {
          var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
          return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$2(value00 = value0, value10 = value1)
        }
      }
      function styleRemoveEnd(name) {
        return function () {
          this.style.removeProperty(name)
        }
      }
      function styleConstant$1(name, interpolate$$2, value1) {
        var value00, interpolate0;
        return function () {
          var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
          return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$2(value00 = value0, value1)
        }
      }
      function styleFunction$1(name, interpolate$$2, value) {
        var value00, value10, interpolate0;
        return function () {
          var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = value(this);
          if (value1 == null)
            value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
          return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$2(value00 = value0, value10 = value1)
        }
      }
      var transition_style = function (name, value, priority) {
        var i = (name += '') === 'transform' ? interpolateTransformCss : interpolate$$1;
        return value == null ? this.styleTween(name, styleRemove$1(name, i)).on('end.style.' + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === 'function' ? styleFunction$1(name, i, tweenValue(this, 'style.' + name, value)) : styleConstant$1(name, i, value), priority)
      };
      function styleTween(name, value, priority) {
        function tween() {
          var node = this, i = value.apply(node, arguments);
          return i && function (t) {
            node.style.setProperty(name, i(t), priority)
          }
        }
        tween._value = value;
        return tween
      }
      var transition_styleTween = function (name, value, priority) {
        var key = 'style.' + (name += '');
        if (arguments.length < 2)
          return (key = this.tween(key)) && key._value;
        if (value == null)
          return this.tween(key, null);
        if (typeof value !== 'function')
          throw new Error;
        return this.tween(key, styleTween(name, value, priority == null ? '' : priority))
      };
      function textConstant$1(value) {
        return function () {
          this.textContent = value
        }
      }
      function textFunction$1(value) {
        return function () {
          var value1 = value(this);
          this.textContent = value1 == null ? '' : value1
        }
      }
      var transition_text = function (value) {
        return this.tween('text', typeof value === 'function' ? textFunction$1(tweenValue(this, 'text', value)) : textConstant$1(value == null ? '' : value + ''))
      };
      var transition_transition = function () {
        var name = this._name, id0 = this._id, id1 = newId();
        for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
              var inherit = get$1(node, id0);
              schedule(node, name, id1, i, group, {
                time: inherit.time + inherit.delay + inherit.duration,
                delay: 0,
                duration: inherit.duration,
                ease: inherit.ease
              })
            }
          }
        }
        return new Transition(groups, this._parents, name, id1)
      };
      var id = 0;
      function Transition(groups, parents, name, id) {
        this._groups = groups;
        this._parents = parents;
        this._name = name;
        this._id = id
      }
      function transition(name) {
        return selection().transition(name)
      }
      function newId() {
        return ++id
      }
      var selection_prototype = selection.prototype;
      Transition.prototype = transition.prototype = {
        constructor: Transition,
        select: transition_select,
        selectAll: transition_selectAll,
        filter: transition_filter,
        merge: transition_merge,
        selection: transition_selection,
        transition: transition_transition,
        call: selection_prototype.call,
        nodes: selection_prototype.nodes,
        node: selection_prototype.node,
        size: selection_prototype.size,
        empty: selection_prototype.empty,
        each: selection_prototype.each,
        on: transition_on,
        attr: transition_attr,
        attrTween: transition_attrTween,
        style: transition_style,
        styleTween: transition_styleTween,
        text: transition_text,
        remove: transition_remove,
        tween: transition_tween,
        delay: transition_delay,
        duration: transition_duration,
        ease: transition_ease
      };
      function linear$1(t) {
        return +t
      }
      function quadIn(t) {
        return t * t
      }
      function quadOut(t) {
        return t * (2 - t)
      }
      function quadInOut(t) {
        return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2
      }
      function cubicIn(t) {
        return t * t * t
      }
      function cubicOut(t) {
        return --t * t * t + 1
      }
      function cubicInOut(t) {
        return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2
      }
      var exponent = 3;
      var polyIn = function custom(e) {
        e = +e;
        function polyIn(t) {
          return Math.pow(t, e)
        }
        polyIn.exponent = custom;
        return polyIn
      }(exponent);
      var polyOut = function custom(e) {
        e = +e;
        function polyOut(t) {
          return 1 - Math.pow(1 - t, e)
        }
        polyOut.exponent = custom;
        return polyOut
      }(exponent);
      var polyInOut = function custom(e) {
        e = +e;
        function polyInOut(t) {
          return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2
        }
        polyInOut.exponent = custom;
        return polyInOut
      }(exponent);
      var pi = Math.PI;
      var halfPi = pi / 2;
      function sinIn(t) {
        return 1 - Math.cos(t * halfPi)
      }
      function sinOut(t) {
        return Math.sin(t * halfPi)
      }
      function sinInOut(t) {
        return (1 - Math.cos(pi * t)) / 2
      }
      function expIn(t) {
        return Math.pow(2, 10 * t - 10)
      }
      function expOut(t) {
        return 1 - Math.pow(2, -10 * t)
      }
      function expInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2
      }
      function circleIn(t) {
        return 1 - Math.sqrt(1 - t * t)
      }
      function circleOut(t) {
        return Math.sqrt(1 - --t * t)
      }
      function circleInOut(t) {
        return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2
      }
      var b1 = 4 / 11;
      var b2 = 6 / 11;
      var b3 = 8 / 11;
      var b4 = 3 / 4;
      var b5 = 9 / 11;
      var b6 = 10 / 11;
      var b7 = 15 / 16;
      var b8 = 21 / 22;
      var b9 = 63 / 64;
      var b0 = 1 / b1 / b1;
      function bounceIn(t) {
        return 1 - bounceOut(1 - t)
      }
      function bounceOut(t) {
        return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9
      }
      function bounceInOut(t) {
        return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2
      }
      var overshoot = 1.70158;
      var backIn = function custom(s) {
        s = +s;
        function backIn(t) {
          return t * t * ((s + 1) * t - s)
        }
        backIn.overshoot = custom;
        return backIn
      }(overshoot);
      var backOut = function custom(s) {
        s = +s;
        function backOut(t) {
          return --t * t * ((s + 1) * t + s) + 1
        }
        backOut.overshoot = custom;
        return backOut
      }(overshoot);
      var backInOut = function custom(s) {
        s = +s;
        function backInOut(t) {
          return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2
        }
        backInOut.overshoot = custom;
        return backInOut
      }(overshoot);
      var tau = 2 * Math.PI;
      var amplitude = 1;
      var period = 0.3;
      var elasticIn = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticIn(t) {
          return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p)
        }
        elasticIn.amplitude = function (a) {
          return custom(a, p * tau)
        };
        elasticIn.period = function (p) {
          return custom(a, p)
        };
        return elasticIn
      }(amplitude, period);
      var elasticOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticOut(t) {
          return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p)
        }
        elasticOut.amplitude = function (a) {
          return custom(a, p * tau)
        };
        elasticOut.period = function (p) {
          return custom(a, p)
        };
        return elasticOut
      }(amplitude, period);
      var elasticInOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticInOut(t) {
          return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2
        }
        elasticInOut.amplitude = function (a) {
          return custom(a, p * tau)
        };
        elasticInOut.period = function (p) {
          return custom(a, p)
        };
        return elasticInOut
      }(amplitude, period);
      var defaultTiming = {
        time: null,
        // Set on use.
        delay: 0,
        duration: 250,
        ease: cubicInOut
      };
      function inherit(node, id) {
        var timing;
        while (!(timing = node.__transition) || !(timing = timing[id])) {
          if (!(node = node.parentNode)) {
            return defaultTiming.time = now(), defaultTiming
          }
        }
        return timing
      }
      var selection_transition = function (name) {
        var id, timing;
        if (name instanceof Transition) {
          id = name._id, name = name._name
        } else {
          id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + ''
        }
        for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
          for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
              schedule(node, name, id, i, group, timing || inherit(node, id))
            }
          }
        }
        return new Transition(groups, this._parents, name, id)
      };
      selection.prototype.interrupt = selection_interrupt;
      selection.prototype.transition = selection_transition;
      var root$1 = [null];
      var active = function (node, name) {
        var schedules = node.__transition, schedule, i;
        if (schedules) {
          name = name == null ? null : name + '';
          for (i in schedules) {
            if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
              return new Transition([[node]], root$1, name, +i)
            }
          }
        }
        return null
      };
      var constant$4 = function (x) {
        return function () {
          return x
        }
      };
      var BrushEvent = function (target, type, selection) {
        this.target = target;
        this.type = type;
        this.selection = selection
      };
      function nopropagation$1() {
        exports.event.stopImmediatePropagation()
      }
      var noevent$1 = function () {
        exports.event.preventDefault();
        exports.event.stopImmediatePropagation()
      };
      var MODE_DRAG = { name: 'drag' };
      var MODE_SPACE = { name: 'space' };
      var MODE_HANDLE = { name: 'handle' };
      var MODE_CENTER = { name: 'center' };
      var X = {
        name: 'x',
        handles: [
          'e',
          'w'
        ].map(type),
        input: function (x, e) {
          return x && [
            [
              x[0],
              e[0][1]
            ],
            [
              x[1],
              e[1][1]
            ]
          ]
        },
        output: function (xy) {
          return xy && [
            xy[0][0],
            xy[1][0]
          ]
        }
      };
      var Y = {
        name: 'y',
        handles: [
          'n',
          's'
        ].map(type),
        input: function (y, e) {
          return y && [
            [
              e[0][0],
              y[0]
            ],
            [
              e[1][0],
              y[1]
            ]
          ]
        },
        output: function (xy) {
          return xy && [
            xy[0][1],
            xy[1][1]
          ]
        }
      };
      var XY = {
        name: 'xy',
        handles: [
          'n',
          'e',
          's',
          'w',
          'nw',
          'ne',
          'se',
          'sw'
        ].map(type),
        input: function (xy) {
          return xy
        },
        output: function (xy) {
          return xy
        }
      };
      var cursors = {
        overlay: 'crosshair',
        selection: 'move',
        n: 'ns-resize',
        e: 'ew-resize',
        s: 'ns-resize',
        w: 'ew-resize',
        nw: 'nwse-resize',
        ne: 'nesw-resize',
        se: 'nwse-resize',
        sw: 'nesw-resize'
      };
      var flipX = {
        e: 'w',
        w: 'e',
        nw: 'ne',
        ne: 'nw',
        se: 'sw',
        sw: 'se'
      };
      var flipY = {
        n: 's',
        s: 'n',
        nw: 'sw',
        ne: 'se',
        se: 'ne',
        sw: 'nw'
      };
      var signsX = {
        overlay: +1,
        selection: +1,
        n: null,
        e: +1,
        s: null,
        w: -1,
        nw: -1,
        ne: +1,
        se: +1,
        sw: -1
      };
      var signsY = {
        overlay: +1,
        selection: +1,
        n: -1,
        e: null,
        s: +1,
        w: null,
        nw: -1,
        ne: -1,
        se: +1,
        sw: +1
      };
      function type(t) {
        return { type: t }
      }
      // Ignore right-click, since that should open the context menu.
      function defaultFilter() {
        return !exports.event.button
      }
      function defaultExtent() {
        var svg = this.ownerSVGElement || this;
        return [
          [
            0,
            0
          ],
          [
            svg.width.baseVal.value,
            svg.height.baseVal.value
          ]
        ]
      }
      // Like d3.local, but with the name “__brush” rather than auto-generated.
      function local$$1(node) {
        while (!node.__brush)
          if (!(node = node.parentNode))
            return;
        return node.__brush
      }
      function empty(extent) {
        return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1]
      }
      function brushSelection(node) {
        var state = node.__brush;
        return state ? state.dim.output(state.selection) : null
      }
      function brushX() {
        return brush$1(X)
      }
      function brushY() {
        return brush$1(Y)
      }
      var brush = function () {
        return brush$1(XY)
      };
      function brush$1(dim) {
        var extent = defaultExtent, filter = defaultFilter, listeners = dispatch(brush, 'start', 'brush', 'end'), handleSize = 6, touchending;
        function brush(group) {
          var overlay = group.property('__brush', initialize).selectAll('.overlay').data([type('overlay')]);
          overlay.enter().append('rect').attr('class', 'overlay').attr('pointer-events', 'all').attr('cursor', cursors.overlay).merge(overlay).each(function () {
            var extent = local$$1(this).extent;
            select(this).attr('x', extent[0][0]).attr('y', extent[0][1]).attr('width', extent[1][0] - extent[0][0]).attr('height', extent[1][1] - extent[0][1])
          });
          group.selectAll('.selection').data([type('selection')]).enter().append('rect').attr('class', 'selection').attr('cursor', cursors.selection).attr('fill', '#777').attr('fill-opacity', 0.3).attr('stroke', '#fff').attr('shape-rendering', 'crispEdges');
          var handle = group.selectAll('.handle').data(dim.handles, function (d) {
            return d.type
          });
          handle.exit().remove();
          handle.enter().append('rect').attr('class', function (d) {
            return 'handle handle--' + d.type
          }).attr('cursor', function (d) {
            return cursors[d.type]
          });
          group.each(redraw).attr('fill', 'none').attr('pointer-events', 'all').style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').on('mousedown.brush touchstart.brush', started)
        }
        brush.move = function (group, selection$$1) {
          if (group.selection) {
            group.on('start.brush', function () {
              emitter(this, arguments).beforestart().start()
            }).on('interrupt.brush end.brush', function () {
              emitter(this, arguments).end()
            }).tween('brush', function () {
              var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection$$1 === 'function' ? selection$$1.apply(this, arguments) : selection$$1, state.extent), i = interpolateValue(selection0, selection1);
              function tween(t) {
                state.selection = t === 1 && empty(selection1) ? null : i(t);
                redraw.call(that);
                emit.brush()
              }
              return selection0 && selection1 ? tween : tween(1)
            })
          } else {
            group.each(function () {
              var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection$$1 === 'function' ? selection$$1.apply(that, args) : selection$$1, state.extent), emit = emitter(that, args).beforestart();
              interrupt(that);
              state.selection = selection1 == null || empty(selection1) ? null : selection1;
              redraw.call(that);
              emit.start().brush().end()
            })
          }
        };
        function redraw() {
          var group = select(this), selection$$1 = local$$1(this).selection;
          if (selection$$1) {
            group.selectAll('.selection').style('display', null).attr('x', selection$$1[0][0]).attr('y', selection$$1[0][1]).attr('width', selection$$1[1][0] - selection$$1[0][0]).attr('height', selection$$1[1][1] - selection$$1[0][1]);
            group.selectAll('.handle').style('display', null).attr('x', function (d) {
              return d.type[d.type.length - 1] === 'e' ? selection$$1[1][0] - handleSize / 2 : selection$$1[0][0] - handleSize / 2
            }).attr('y', function (d) {
              return d.type[0] === 's' ? selection$$1[1][1] - handleSize / 2 : selection$$1[0][1] - handleSize / 2
            }).attr('width', function (d) {
              return d.type === 'n' || d.type === 's' ? selection$$1[1][0] - selection$$1[0][0] + handleSize : handleSize
            }).attr('height', function (d) {
              return d.type === 'e' || d.type === 'w' ? selection$$1[1][1] - selection$$1[0][1] + handleSize : handleSize
            })
          } else {
            group.selectAll('.selection,.handle').style('display', 'none').attr('x', null).attr('y', null).attr('width', null).attr('height', null)
          }
        }
        function emitter(that, args) {
          return that.__brush.emitter || new Emitter(that, args)
        }
        function Emitter(that, args) {
          this.that = that;
          this.args = args;
          this.state = that.__brush;
          this.active = 0
        }
        Emitter.prototype = {
          beforestart: function () {
            if (++this.active === 1)
              this.state.emitter = this, this.starting = true;
            return this
          },
          start: function () {
            if (this.starting)
              this.starting = false, this.emit('start');
            return this
          },
          brush: function () {
            this.emit('brush');
            return this
          },
          end: function () {
            if (--this.active === 0)
              delete this.state.emitter, this.emit('end');
            return this
          },
          emit: function (type) {
            customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [
              type,
              this.that,
              this.args
            ])
          }
        };
        function started() {
          if (exports.event.touches) {
            if (exports.event.changedTouches.length < exports.event.touches.length)
              return noevent$1()
          } else if (touchending)
            return;
          if (!filter.apply(this, arguments))
            return;
          var that = this, type = exports.event.target.__data__.type, mode = (exports.event.metaKey ? type = 'overlay' : type) === 'selection' ? MODE_DRAG : exports.event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type], signY = dim === X ? null : signsY[type], state = local$$1(that), extent = state.extent, selection$$1 = state.selection, W = extent[0][0], w0, w1, N = extent[0][1], n0, n1, E = extent[1][0], e0, e1, S = extent[1][1], s0, s1, dx, dy, moving, shifting = signX && signY && exports.event.shiftKey, lockX, lockY, point0 = mouse(that), point = point0, emit = emitter(that, arguments).beforestart();
          if (type === 'overlay') {
            state.selection = selection$$1 = [
              [
                w0 = dim === Y ? W : point0[0],
                n0 = dim === X ? N : point0[1]
              ],
              [
                e0 = dim === Y ? E : w0,
                s0 = dim === X ? S : n0
              ]
            ]
          } else {
            w0 = selection$$1[0][0];
            n0 = selection$$1[0][1];
            e0 = selection$$1[1][0];
            s0 = selection$$1[1][1]
          }
          w1 = w0;
          n1 = n0;
          e1 = e0;
          s1 = s0;
          var group = select(that).attr('pointer-events', 'none');
          var overlay = group.selectAll('.overlay').attr('cursor', cursors[type]);
          if (exports.event.touches) {
            group.on('touchmove.brush', moved, true).on('touchend.brush touchcancel.brush', ended, true)
          } else {
            var view = select(exports.event.view).on('keydown.brush', keydowned, true).on('keyup.brush', keyupped, true).on('mousemove.brush', moved, true).on('mouseup.brush', ended, true);
            dragDisable(exports.event.view)
          }
          nopropagation$1();
          interrupt(that);
          redraw.call(that);
          emit.start();
          function moved() {
            var point1 = mouse(that);
            if (shifting && !lockX && !lockY) {
              if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1]))
                lockY = true;
              else
                lockX = true
            }
            point = point1;
            moving = true;
            noevent$1();
            move()
          }
          function move() {
            var t;
            dx = point[0] - point0[0];
            dy = point[1] - point0[1];
            switch (mode) {
            case MODE_SPACE:
            case MODE_DRAG: {
                if (signX)
                  dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                if (signY)
                  dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                break
              }
            case MODE_HANDLE: {
                if (signX < 0)
                  dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                else if (signX > 0)
                  dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                if (signY < 0)
                  dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                else if (signY > 0)
                  dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                break
              }
            case MODE_CENTER: {
                if (signX)
                  w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
                if (signY)
                  n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
                break
              }
            }
            if (e1 < w1) {
              signX *= -1;
              t = w0, w0 = e0, e0 = t;
              t = w1, w1 = e1, e1 = t;
              if (type in flipX)
                overlay.attr('cursor', cursors[type = flipX[type]])
            }
            if (s1 < n1) {
              signY *= -1;
              t = n0, n0 = s0, s0 = t;
              t = n1, n1 = s1, s1 = t;
              if (type in flipY)
                overlay.attr('cursor', cursors[type = flipY[type]])
            }
            if (state.selection)
              selection$$1 = state.selection;
            // May be set by brush.move!
            if (lockX)
              w1 = selection$$1[0][0], e1 = selection$$1[1][0];
            if (lockY)
              n1 = selection$$1[0][1], s1 = selection$$1[1][1];
            if (selection$$1[0][0] !== w1 || selection$$1[0][1] !== n1 || selection$$1[1][0] !== e1 || selection$$1[1][1] !== s1) {
              state.selection = [
                [
                  w1,
                  n1
                ],
                [
                  e1,
                  s1
                ]
              ];
              redraw.call(that);
              emit.brush()
            }
          }
          function ended() {
            nopropagation$1();
            if (exports.event.touches) {
              if (exports.event.touches.length)
                return;
              if (touchending)
                clearTimeout(touchending);
              touchending = setTimeout(function () {
                touchending = null
              }, 500);
              // Ghost clicks are delayed!
              group.on('touchmove.brush touchend.brush touchcancel.brush', null)
            } else {
              yesdrag(exports.event.view, moving);
              view.on('keydown.brush keyup.brush mousemove.brush mouseup.brush', null)
            }
            group.attr('pointer-events', 'all');
            overlay.attr('cursor', cursors.overlay);
            if (state.selection)
              selection$$1 = state.selection;
            // May be set by brush.move (on start)!
            if (empty(selection$$1))
              state.selection = null, redraw.call(that);
            emit.end()
          }
          function keydowned() {
            switch (exports.event.keyCode) {
            case 16: {
                // SHIFT
                shifting = signX && signY;
                break
              }
            case 18: {
                // ALT
                if (mode === MODE_HANDLE) {
                  if (signX)
                    e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                  if (signY)
                    s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                  mode = MODE_CENTER;
                  move()
                }
                break
              }
            case 32: {
                // SPACE; takes priority over ALT
                if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                  if (signX < 0)
                    e0 = e1 - dx;
                  else if (signX > 0)
                    w0 = w1 - dx;
                  if (signY < 0)
                    s0 = s1 - dy;
                  else if (signY > 0)
                    n0 = n1 - dy;
                  mode = MODE_SPACE;
                  overlay.attr('cursor', cursors.selection);
                  move()
                }
                break
              }
            default:
              return
            }
            noevent$1()
          }
          function keyupped() {
            switch (exports.event.keyCode) {
            case 16: {
                // SHIFT
                if (shifting) {
                  lockX = lockY = shifting = false;
                  move()
                }
                break
              }
            case 18: {
                // ALT
                if (mode === MODE_CENTER) {
                  if (signX < 0)
                    e0 = e1;
                  else if (signX > 0)
                    w0 = w1;
                  if (signY < 0)
                    s0 = s1;
                  else if (signY > 0)
                    n0 = n1;
                  mode = MODE_HANDLE;
                  move()
                }
                break
              }
            case 32: {
                // SPACE
                if (mode === MODE_SPACE) {
                  if (exports.event.altKey) {
                    if (signX)
                      e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                    if (signY)
                      s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                    mode = MODE_CENTER
                  } else {
                    if (signX < 0)
                      e0 = e1;
                    else if (signX > 0)
                      w0 = w1;
                    if (signY < 0)
                      s0 = s1;
                    else if (signY > 0)
                      n0 = n1;
                    mode = MODE_HANDLE
                  }
                  overlay.attr('cursor', cursors[type]);
                  move()
                }
                break
              }
            default:
              return
            }
            noevent$1()
          }
        }
        function initialize() {
          var state = this.__brush || { selection: null };
          state.extent = extent.apply(this, arguments);
          state.dim = dim;
          return state
        }
        brush.extent = function (_) {
          return arguments.length ? (extent = typeof _ === 'function' ? _ : constant$4([
            [
              +_[0][0],
              +_[0][1]
            ],
            [
              +_[1][0],
              +_[1][1]
            ]
          ]), brush) : extent
        };
        brush.filter = function (_) {
          return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$4(!!_), brush) : filter
        };
        brush.handleSize = function (_) {
          return arguments.length ? (handleSize = +_, brush) : handleSize
        };
        brush.on = function () {
          var value = listeners.on.apply(listeners, arguments);
          return value === listeners ? brush : value
        };
        return brush
      }
      var cos = Math.cos;
      var sin = Math.sin;
      var pi$1 = Math.PI;
      var halfPi$1 = pi$1 / 2;
      var tau$1 = pi$1 * 2;
      var max$1 = Math.max;
      function compareValue(compare) {
        return function (a, b) {
          return compare(a.source.value + a.target.value, b.source.value + b.target.value)
        }
      }
      var chord = function () {
        var padAngle = 0, sortGroups = null, sortSubgroups = null, sortChords = null;
        function chord(matrix) {
          var n = matrix.length, groupSums = [], groupIndex = sequence(n), subgroupIndex = [], chords = [], groups = chords.groups = new Array(n), subgroups = new Array(n * n), k, x, x0, dx, i, j;
          // Compute the sum.
          k = 0, i = -1;
          while (++i < n) {
            x = 0, j = -1;
            while (++j < n) {
              x += matrix[i][j]
            }
            groupSums.push(x);
            subgroupIndex.push(sequence(n));
            k += x
          }
          // Sort groups…
          if (sortGroups)
            groupIndex.sort(function (a, b) {
              return sortGroups(groupSums[a], groupSums[b])
            });
          // Sort subgroups…
          if (sortSubgroups)
            subgroupIndex.forEach(function (d, i) {
              d.sort(function (a, b) {
                return sortSubgroups(matrix[i][a], matrix[i][b])
              })
            });
          // Convert the sum to scaling factor for [0, 2pi].
          // TODO Allow start and end angle to be specified?
          // TODO Allow padding to be specified as percentage?
          k = max$1(0, tau$1 - padAngle * n) / k;
          dx = k ? padAngle : tau$1 / n;
          // Compute the start and end angle for each group and subgroup.
          // Note: Opera has a bug reordering object literal properties!
          x = 0, i = -1;
          while (++i < n) {
            x0 = x, j = -1;
            while (++j < n) {
              var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
              subgroups[dj * n + di] = {
                index: di,
                subindex: dj,
                startAngle: a0,
                endAngle: a1,
                value: v
              }
            }
            groups[di] = {
              index: di,
              startAngle: x0,
              endAngle: x,
              value: groupSums[di]
            };
            x += dx
          }
          // Generate chords for each (non-empty) subgroup-subgroup link.
          i = -1;
          while (++i < n) {
            j = i - 1;
            while (++j < n) {
              var source = subgroups[j * n + i], target = subgroups[i * n + j];
              if (source.value || target.value) {
                chords.push(source.value < target.value ? {
                  source: target,
                  target: source
                } : {
                  source: source,
                  target: target
                })
              }
            }
          }
          return sortChords ? chords.sort(sortChords) : chords
        }
        chord.padAngle = function (_) {
          return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle
        };
        chord.sortGroups = function (_) {
          return arguments.length ? (sortGroups = _, chord) : sortGroups
        };
        chord.sortSubgroups = function (_) {
          return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups
        };
        chord.sortChords = function (_) {
          return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._
        };
        return chord
      };
      var slice$2 = Array.prototype.slice;
      var constant$5 = function (x) {
        return function () {
          return x
        }
      };
      var pi$2 = Math.PI;
      var tau$2 = 2 * pi$2;
      var epsilon$1 = 0.000001;
      var tauEpsilon = tau$2 - epsilon$1;
      function Path() {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null;
        // end of current subpath
        this._ = ''
      }
      function path() {
        return new Path
      }
      Path.prototype = path.prototype = {
        constructor: Path,
        moveTo: function (x, y) {
          this._ += 'M' + (this._x0 = this._x1 = +x) + ',' + (this._y0 = this._y1 = +y)
        },
        closePath: function () {
          if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += 'Z'
          }
        },
        lineTo: function (x, y) {
          this._ += 'L' + (this._x1 = +x) + ',' + (this._y1 = +y)
        },
        quadraticCurveTo: function (x1, y1, x, y) {
          this._ += 'Q' + +x1 + ',' + +y1 + ',' + (this._x1 = +x) + ',' + (this._y1 = +y)
        },
        bezierCurveTo: function (x1, y1, x2, y2, x, y) {
          this._ += 'C' + +x1 + ',' + +y1 + ',' + +x2 + ',' + +y2 + ',' + (this._x1 = +x) + ',' + (this._y1 = +y)
        },
        arcTo: function (x1, y1, x2, y2, r) {
          x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
          var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
          // Is the radius negative? Error.
          if (r < 0)
            throw new Error('negative radius: ' + r);
          // Is this path empty? Move to (x1,y1).
          if (this._x1 === null) {
            this._ += 'M' + (this._x1 = x1) + ',' + (this._y1 = y1)
          }  // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
          else if (!(l01_2 > epsilon$1)) {
          }  // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
             // Equivalently, is (x1,y1) coincident with (x2,y2)?
             // Or, is the radius zero? Line to (x1,y1).
          else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
            this._ += 'L' + (this._x1 = x1) + ',' + (this._y1 = y1)
          }  // Otherwise, draw an arc!
          else {
            var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > epsilon$1) {
              this._ += 'L' + (x1 + t01 * x01) + ',' + (y1 + t01 * y01)
            }
            this._ += 'A' + r + ',' + r + ',0,0,' + +(y01 * x20 > x01 * y20) + ',' + (this._x1 = x1 + t21 * x21) + ',' + (this._y1 = y1 + t21 * y21)
          }
        },
        arc: function (x, y, r, a0, a1, ccw) {
          x = +x, y = +y, r = +r;
          var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
          // Is the radius negative? Error.
          if (r < 0)
            throw new Error('negative radius: ' + r);
          // Is this path empty? Move to (x0,y0).
          if (this._x1 === null) {
            this._ += 'M' + x0 + ',' + y0
          }  // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
          else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
            this._ += 'L' + x0 + ',' + y0
          }
          // Is this arc empty? We’re done.
          if (!r)
            return;
          // Is this a complete circle? Draw two arcs to complete the circle.
          if (da > tauEpsilon) {
            this._ += 'A' + r + ',' + r + ',0,1,' + cw + ',' + (x - dx) + ',' + (y - dy) + 'A' + r + ',' + r + ',0,1,' + cw + ',' + (this._x1 = x0) + ',' + (this._y1 = y0)
          }  // Otherwise, draw an arc!
          else {
            if (da < 0)
              da = da % tau$2 + tau$2;
            this._ += 'A' + r + ',' + r + ',0,' + +(da >= pi$2) + ',' + cw + ',' + (this._x1 = x + r * Math.cos(a1)) + ',' + (this._y1 = y + r * Math.sin(a1))
          }
        },
        rect: function (x, y, w, h) {
          this._ += 'M' + (this._x0 = this._x1 = +x) + ',' + (this._y0 = this._y1 = +y) + 'h' + +w + 'v' + +h + 'h' + -w + 'Z'
        },
        toString: function () {
          return this._
        }
      };
      function defaultSource(d) {
        return d.source
      }
      function defaultTarget(d) {
        return d.target
      }
      function defaultRadius(d) {
        return d.radius
      }
      function defaultStartAngle(d) {
        return d.startAngle
      }
      function defaultEndAngle(d) {
        return d.endAngle
      }
      var ribbon = function () {
        var source = defaultSource, target = defaultTarget, radius = defaultRadius, startAngle = defaultStartAngle, endAngle = defaultEndAngle, context = null;
        function ribbon() {
          var buffer, argv = slice$2.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv), sr = +radius.apply(this, (argv[0] = s, argv)), sa0 = startAngle.apply(this, argv) - halfPi$1, sa1 = endAngle.apply(this, argv) - halfPi$1, sx0 = sr * cos(sa0), sy0 = sr * sin(sa0), tr = +radius.apply(this, (argv[0] = t, argv)), ta0 = startAngle.apply(this, argv) - halfPi$1, ta1 = endAngle.apply(this, argv) - halfPi$1;
          if (!context)
            context = buffer = path();
          context.moveTo(sx0, sy0);
          context.arc(0, 0, sr, sa0, sa1);
          if (sa0 !== ta0 || sa1 !== ta1) {
            // TODO sr !== tr?
            context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
            context.arc(0, 0, tr, ta0, ta1)
          }
          context.quadraticCurveTo(0, 0, sx0, sy0);
          context.closePath();
          if (buffer)
            return context = null, buffer + '' || null
        }
        ribbon.radius = function (_) {
          return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$5(+_), ribbon) : radius
        };
        ribbon.startAngle = function (_) {
          return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$5(+_), ribbon) : startAngle
        };
        ribbon.endAngle = function (_) {
          return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$5(+_), ribbon) : endAngle
        };
        ribbon.source = function (_) {
          return arguments.length ? (source = _, ribbon) : source
        };
        ribbon.target = function (_) {
          return arguments.length ? (target = _, ribbon) : target
        };
        ribbon.context = function (_) {
          return arguments.length ? (context = _ == null ? null : _, ribbon) : context
        };
        return ribbon
      };
      var prefix = '$';
      function Map() {
      }
      Map.prototype = map$1.prototype = {
        constructor: Map,
        has: function (key) {
          return prefix + key in this
        },
        get: function (key) {
          return this[prefix + key]
        },
        set: function (key, value) {
          this[prefix + key] = value;
          return this
        },
        remove: function (key) {
          var property = prefix + key;
          return property in this && delete this[property]
        },
        clear: function () {
          for (var property in this)
            if (property[0] === prefix)
              delete this[property]
        },
        keys: function () {
          var keys = [];
          for (var property in this)
            if (property[0] === prefix)
              keys.push(property.slice(1));
          return keys
        },
        values: function () {
          var values = [];
          for (var property in this)
            if (property[0] === prefix)
              values.push(this[property]);
          return values
        },
        entries: function () {
          var entries = [];
          for (var property in this)
            if (property[0] === prefix)
              entries.push({
                key: property.slice(1),
                value: this[property]
              });
          return entries
        },
        size: function () {
          var size = 0;
          for (var property in this)
            if (property[0] === prefix)
              ++size;
          return size
        },
        empty: function () {
          for (var property in this)
            if (property[0] === prefix)
              return false;
          return true
        },
        each: function (f) {
          for (var property in this)
            if (property[0] === prefix)
              f(this[property], property.slice(1), this)
        }
      };
      function map$1(object, f) {
        var map = new Map;
        // Copy constructor.
        if (object instanceof Map)
          object.each(function (value, key) {
            map.set(key, value)
          });  // Index array by numeric index or specified key function.
        else if (Array.isArray(object)) {
          var i = -1, n = object.length, o;
          if (f == null)
            while (++i < n)
              map.set(i, object[i]);
          else
            while (++i < n)
              map.set(f(o = object[i], i, object), o)
        }  // Convert object to map.
        else if (object)
          for (var key in object)
            map.set(key, object[key]);
        return map
      }
      var nest = function () {
        var keys = [], sortKeys = [], sortValues, rollup, nest;
        function apply(array, depth, createResult, setResult) {
          if (depth >= keys.length)
            return rollup != null ? rollup(array) : sortValues != null ? array.sort(sortValues) : array;
          var i = -1, n = array.length, key = keys[depth++], keyValue, value, valuesByKey = map$1(), values, result = createResult();
          while (++i < n) {
            if (values = valuesByKey.get(keyValue = key(value = array[i]) + '')) {
              values.push(value)
            } else {
              valuesByKey.set(keyValue, [value])
            }
          }
          valuesByKey.each(function (values, key) {
            setResult(result, key, apply(values, depth, createResult, setResult))
          });
          return result
        }
        function entries(map, depth) {
          if (++depth > keys.length)
            return map;
          var array, sortKey = sortKeys[depth - 1];
          if (rollup != null && depth >= keys.length)
            array = map.entries();
          else
            array = [], map.each(function (v, k) {
              array.push({
                key: k,
                values: entries(v, depth)
              })
            });
          return sortKey != null ? array.sort(function (a, b) {
            return sortKey(a.key, b.key)
          }) : array
        }
        return nest = {
          object: function (array) {
            return apply(array, 0, createObject, setObject)
          },
          map: function (array) {
            return apply(array, 0, createMap, setMap)
          },
          entries: function (array) {
            return entries(apply(array, 0, createMap, setMap), 0)
          },
          key: function (d) {
            keys.push(d);
            return nest
          },
          sortKeys: function (order) {
            sortKeys[keys.length - 1] = order;
            return nest
          },
          sortValues: function (order) {
            sortValues = order;
            return nest
          },
          rollup: function (f) {
            rollup = f;
            return nest
          }
        }
      };
      function createObject() {
        return {}
      }
      function setObject(object, key, value) {
        object[key] = value
      }
      function createMap() {
        return map$1()
      }
      function setMap(map, key, value) {
        map.set(key, value)
      }
      function Set() {
      }
      var proto = map$1.prototype;
      Set.prototype = set$2.prototype = {
        constructor: Set,
        has: proto.has,
        add: function (value) {
          value += '';
          this[prefix + value] = value;
          return this
        },
        remove: proto.remove,
        clear: proto.clear,
        values: proto.keys,
        size: proto.size,
        empty: proto.empty,
        each: proto.each
      };
      function set$2(object, f) {
        var set = new Set;
        // Copy constructor.
        if (object instanceof Set)
          object.each(function (value) {
            set.add(value)
          });  // Otherwise, assume it’s an array.
        else if (object) {
          var i = -1, n = object.length;
          if (f == null)
            while (++i < n)
              set.add(object[i]);
          else
            while (++i < n)
              set.add(f(object[i], i, object))
        }
        return set
      }
      var keys = function (map) {
        var keys = [];
        for (var key in map)
          keys.push(key);
        return keys
      };
      var values = function (map) {
        var values = [];
        for (var key in map)
          values.push(map[key]);
        return values
      };
      var entries = function (map) {
        var entries = [];
        for (var key in map)
          entries.push({
            key: key,
            value: map[key]
          });
        return entries
      };
      function objectConverter(columns) {
        return new Function('d', 'return {' + columns.map(function (name, i) {
          return JSON.stringify(name) + ': d[' + i + ']'
        }).join(',') + '}')
      }
      function customConverter(columns, f) {
        var object = objectConverter(columns);
        return function (row, i) {
          return f(object(row), i, columns)
        }
      }
      // Compute unique columns in order of discovery.
      function inferColumns(rows) {
        var columnSet = Object.create(null), columns = [];
        rows.forEach(function (row) {
          for (var column in row) {
            if (!(column in columnSet)) {
              columns.push(columnSet[column] = column)
            }
          }
        });
        return columns
      }
      var dsv = function (delimiter) {
        var reFormat = new RegExp('["' + delimiter + '\n]'), delimiterCode = delimiter.charCodeAt(0);
        function parse(text, f) {
          var convert, columns, rows = parseRows(text, function (row, i) {
              if (convert)
                return convert(row, i - 1);
              columns = row, convert = f ? customConverter(row, f) : objectConverter(row)
            });
          rows.columns = columns;
          return rows
        }
        function parseRows(text, f) {
          var EOL = {},
            // sentinel value for end-of-line
            EOF = {},
            // sentinel value for end-of-file
            rows = [],
            // output rows
            N = text.length, I = 0,
            // current character index
            n = 0,
            // the current line number
            t,
            // the current token
            eol;
          // is the current token followed by EOL?
          function token() {
            if (I >= N)
              return EOF;
            // special case: end of file
            if (eol)
              return eol = false, EOL;
            // special case: end of line
            // special case: quotes
            var j = I, c;
            if (text.charCodeAt(j) === 34) {
              var i = j;
              while (i++ < N) {
                if (text.charCodeAt(i) === 34) {
                  if (text.charCodeAt(i + 1) !== 34)
                    break;
                  ++i
                }
              }
              I = i + 2;
              c = text.charCodeAt(i + 1);
              if (c === 13) {
                eol = true;
                if (text.charCodeAt(i + 2) === 10)
                  ++I
              } else if (c === 10) {
                eol = true
              }
              return text.slice(j + 1, i).replace(/""/g, '"')
            }
            // common case: find next delimiter or newline
            while (I < N) {
              var k = 1;
              c = text.charCodeAt(I++);
              if (c === 10)
                eol = true;  // \n
              else if (c === 13) {
                eol = true;
                if (text.charCodeAt(I) === 10)
                  ++I, ++k
              }  // \r|\r\n
              else if (c !== delimiterCode)
                continue;
              return text.slice(j, I - k)
            }
            // special case: last token before EOF
            return text.slice(j)
          }
          while ((t = token()) !== EOF) {
            var a = [];
            while (t !== EOL && t !== EOF) {
              a.push(t);
              t = token()
            }
            if (f && (a = f(a, n++)) == null)
              continue;
            rows.push(a)
          }
          return rows
        }
        function format(rows, columns) {
          if (columns == null)
            columns = inferColumns(rows);
          return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
            return columns.map(function (column) {
              return formatValue(row[column])
            }).join(delimiter)
          })).join('\n')
        }
        function formatRows(rows) {
          return rows.map(formatRow).join('\n')
        }
        function formatRow(row) {
          return row.map(formatValue).join(delimiter)
        }
        function formatValue(text) {
          return text == null ? '' : reFormat.test(text += '') ? '"' + text.replace(/\"/g, '""') + '"' : text
        }
        return {
          parse: parse,
          parseRows: parseRows,
          format: format,
          formatRows: formatRows
        }
      };
      var csv = dsv(',');
      var csvParse = csv.parse;
      var csvParseRows = csv.parseRows;
      var csvFormat = csv.format;
      var csvFormatRows = csv.formatRows;
      var tsv = dsv('	');
      var tsvParse = tsv.parse;
      var tsvParseRows = tsv.parseRows;
      var tsvFormat = tsv.format;
      var tsvFormatRows = tsv.formatRows;
      var center$1 = function (x, y) {
        var nodes;
        if (x == null)
          x = 0;
        if (y == null)
          y = 0;
        function force() {
          var i, n = nodes.length, node, sx = 0, sy = 0;
          for (i = 0; i < n; ++i) {
            node = nodes[i], sx += node.x, sy += node.y
          }
          for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
            node = nodes[i], node.x -= sx, node.y -= sy
          }
        }
        force.initialize = function (_) {
          nodes = _
        };
        force.x = function (_) {
          return arguments.length ? (x = +_, force) : x
        };
        force.y = function (_) {
          return arguments.length ? (y = +_, force) : y
        };
        return force
      };
      var constant$6 = function (x) {
        return function () {
          return x
        }
      };
      var jiggle = function () {
        return (Math.random() - 0.5) * 0.000001
      };
      var tree_add = function (d) {
        var x = +this._x.call(null, d), y = +this._y.call(null, d);
        return add(this.cover(x, y), x, y, d)
      };
      function add(tree, x, y, d) {
        if (isNaN(x) || isNaN(y))
          return tree;
        // ignore invalid points
        var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
        // If the tree is empty, initialize the root as a leaf.
        if (!node)
          return tree._root = leaf, tree;
        // Find the existing leaf for the new point, or add it.
        while (node.length) {
          if (right = x >= (xm = (x0 + x1) / 2))
            x0 = xm;
          else
            x1 = xm;
          if (bottom = y >= (ym = (y0 + y1) / 2))
            y0 = ym;
          else
            y1 = ym;
          if (parent = node, !(node = node[i = bottom << 1 | right]))
            return parent[i] = leaf, tree
        }
        // Is the new point is exactly coincident with the existing point?
        xp = +tree._x.call(null, node.data);
        yp = +tree._y.call(null, node.data);
        if (x === xp && y === yp)
          return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
        // Otherwise, split the leaf node until the old and new point are separated.
        do {
          parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
          if (right = x >= (xm = (x0 + x1) / 2))
            x0 = xm;
          else
            x1 = xm;
          if (bottom = y >= (ym = (y0 + y1) / 2))
            y0 = ym;
          else
            y1 = ym
        } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
        return parent[j] = node, parent[i] = leaf, tree
      }
      function addAll(data) {
        var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
        // Compute the points and their extent.
        for (i = 0; i < n; ++i) {
          if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)))
            continue;
          xz[i] = x;
          yz[i] = y;
          if (x < x0)
            x0 = x;
          if (x > x1)
            x1 = x;
          if (y < y0)
            y0 = y;
          if (y > y1)
            y1 = y
        }
        // If there were no (valid) points, inherit the existing extent.
        if (x1 < x0)
          x0 = this._x0, x1 = this._x1;
        if (y1 < y0)
          y0 = this._y0, y1 = this._y1;
        // Expand the tree to cover the new points.
        this.cover(x0, y0).cover(x1, y1);
        // Add the new points.
        for (i = 0; i < n; ++i) {
          add(this, xz[i], yz[i], data[i])
        }
        return this
      }
      var tree_cover = function (x, y) {
        if (isNaN(x = +x) || isNaN(y = +y))
          return this;
        // ignore invalid points
        var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
        // If the quadtree has no extent, initialize them.
        // Integer extent are necessary so that if we later double the extent,
        // the existing quadrant boundaries don’t change due to floating point error!
        if (isNaN(x0)) {
          x1 = (x0 = Math.floor(x)) + 1;
          y1 = (y0 = Math.floor(y)) + 1
        }  // Otherwise, double repeatedly to cover.
        else if (x0 > x || x > x1 || y0 > y || y > y1) {
          var z = x1 - x0, node = this._root, parent, i;
          switch (i = (y < (y0 + y1) / 2) << 1 | x < (x0 + x1) / 2) {
          case 0: {
              do
                parent = new Array(4), parent[i] = node, node = parent;
              while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
              break
            }
          case 1: {
              do
                parent = new Array(4), parent[i] = node, node = parent;
              while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
              break
            }
          case 2: {
              do
                parent = new Array(4), parent[i] = node, node = parent;
              while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
              break
            }
          case 3: {
              do
                parent = new Array(4), parent[i] = node, node = parent;
              while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
              break
            }
          }
          if (this._root && this._root.length)
            this._root = node
        }  // If the quadtree covers the point already, just return.
        else
          return this;
        this._x0 = x0;
        this._y0 = y0;
        this._x1 = x1;
        this._y1 = y1;
        return this
      };
      var tree_data = function () {
        var data = [];
        this.visit(function (node) {
          if (!node.length)
            do
              data.push(node.data);
            while (node = node.next)
        });
        return data
      };
      var tree_extent = function (_) {
        return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [
          [
            this._x0,
            this._y0
          ],
          [
            this._x1,
            this._y1
          ]
        ]
      };
      var Quad = function (node, x0, y0, x1, y1) {
        this.node = node;
        this.x0 = x0;
        this.y0 = y0;
        this.x1 = x1;
        this.y1 = y1
      };
      var tree_find = function (x, y, radius) {
        var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
        if (node)
          quads.push(new Quad(node, x0, y0, x3, y3));
        if (radius == null)
          radius = Infinity;
        else {
          x0 = x - radius, y0 = y - radius;
          x3 = x + radius, y3 = y + radius;
          radius *= radius
        }
        while (q = quads.pop()) {
          // Stop searching if this quadrant can’t contain a closer node.
          if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0)
            continue;
          // Bisect the current quadrant.
          if (node.length) {
            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
            quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym));
            // Visit the closest quadrant first.
            if (i = (y >= ym) << 1 | x >= xm) {
              q = quads[quads.length - 1];
              quads[quads.length - 1] = quads[quads.length - 1 - i];
              quads[quads.length - 1 - i] = q
            }
          }  // Visit this point. (Visiting coincident points isn’t necessary!)
          else {
            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
            if (d2 < radius) {
              var d = Math.sqrt(radius = d2);
              x0 = x - d, y0 = y - d;
              x3 = x + d, y3 = y + d;
              data = node.data
            }
          }
        }
        return data
      };
      var tree_remove = function (d) {
        if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)))
          return this;
        // ignore invalid points
        var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
        // If the tree is empty, initialize the root as a leaf.
        if (!node)
          return this;
        // Find the leaf node for the point.
        // While descending, also retain the deepest parent with a non-removed sibling.
        if (node.length)
          while (true) {
            if (right = x >= (xm = (x0 + x1) / 2))
              x0 = xm;
            else
              x1 = xm;
            if (bottom = y >= (ym = (y0 + y1) / 2))
              y0 = ym;
            else
              y1 = ym;
            if (!(parent = node, node = node[i = bottom << 1 | right]))
              return this;
            if (!node.length)
              break;
            if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
              retainer = parent, j = i
          }
        // Find the point to remove.
        while (node.data !== d)
          if (!(previous = node, node = node.next))
            return this;
        if (next = node.next)
          delete node.next;
        // If there are multiple coincident points, remove just the point.
        if (previous)
          return next ? previous.next = next : delete previous.next, this;
        // If this is the root point, remove it.
        if (!parent)
          return this._root = next, this;
        // Remove this leaf.
        next ? parent[i] = next : delete parent[i];
        // If the parent now contains exactly one leaf, collapse superfluous parents.
        if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
          if (retainer)
            retainer[j] = node;
          else
            this._root = node
        }
        return this
      };
      function removeAll(data) {
        for (var i = 0, n = data.length; i < n; ++i)
          this.remove(data[i]);
        return this
      }
      var tree_root = function () {
        return this._root
      };
      var tree_size = function () {
        var size = 0;
        this.visit(function (node) {
          if (!node.length)
            do
              ++size;
            while (node = node.next)
        });
        return size
      };
      var tree_visit = function (callback) {
        var quads = [], q, node = this._root, child, x0, y0, x1, y1;
        if (node)
          quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
        while (q = quads.pop()) {
          if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
            var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
            if (child = node[3])
              quads.push(new Quad(child, xm, ym, x1, y1));
            if (child = node[2])
              quads.push(new Quad(child, x0, ym, xm, y1));
            if (child = node[1])
              quads.push(new Quad(child, xm, y0, x1, ym));
            if (child = node[0])
              quads.push(new Quad(child, x0, y0, xm, ym))
          }
        }
        return this
      };
      var tree_visitAfter = function (callback) {
        var quads = [], next = [], q;
        if (this._root)
          quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
        while (q = quads.pop()) {
          var node = q.node;
          if (node.length) {
            var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
            if (child = node[0])
              quads.push(new Quad(child, x0, y0, xm, ym));
            if (child = node[1])
              quads.push(new Quad(child, xm, y0, x1, ym));
            if (child = node[2])
              quads.push(new Quad(child, x0, ym, xm, y1));
            if (child = node[3])
              quads.push(new Quad(child, xm, ym, x1, y1))
          }
          next.push(q)
        }
        while (q = next.pop()) {
          callback(q.node, q.x0, q.y0, q.x1, q.y1)
        }
        return this
      };
      function defaultX(d) {
        return d[0]
      }
      var tree_x = function (_) {
        return arguments.length ? (this._x = _, this) : this._x
      };
      function defaultY(d) {
        return d[1]
      }
      var tree_y = function (_) {
        return arguments.length ? (this._y = _, this) : this._y
      };
      function quadtree(nodes, x, y) {
        var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
        return nodes == null ? tree : tree.addAll(nodes)
      }
      function Quadtree(x, y, x0, y0, x1, y1) {
        this._x = x;
        this._y = y;
        this._x0 = x0;
        this._y0 = y0;
        this._x1 = x1;
        this._y1 = y1;
        this._root = undefined
      }
      function leaf_copy(leaf) {
        var copy = { data: leaf.data }, next = copy;
        while (leaf = leaf.next)
          next = next.next = { data: leaf.data };
        return copy
      }
      var treeProto = quadtree.prototype = Quadtree.prototype;
      treeProto.copy = function () {
        var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
        if (!node)
          return copy;
        if (!node.length)
          return copy._root = leaf_copy(node), copy;
        nodes = [{
            source: node,
            target: copy._root = new Array(4)
          }];
        while (node = nodes.pop()) {
          for (var i = 0; i < 4; ++i) {
            if (child = node.source[i]) {
              if (child.length)
                nodes.push({
                  source: child,
                  target: node.target[i] = new Array(4)
                });
              else
                node.target[i] = leaf_copy(child)
            }
          }
        }
        return copy
      };
      treeProto.add = tree_add;
      treeProto.addAll = addAll;
      treeProto.cover = tree_cover;
      treeProto.data = tree_data;
      treeProto.extent = tree_extent;
      treeProto.find = tree_find;
      treeProto.remove = tree_remove;
      treeProto.removeAll = removeAll;
      treeProto.root = tree_root;
      treeProto.size = tree_size;
      treeProto.visit = tree_visit;
      treeProto.visitAfter = tree_visitAfter;
      treeProto.x = tree_x;
      treeProto.y = tree_y;
      function x(d) {
        return d.x + d.vx
      }
      function y(d) {
        return d.y + d.vy
      }
      var collide = function (radius) {
        var nodes, radii, strength = 1, iterations = 1;
        if (typeof radius !== 'function')
          radius = constant$6(radius == null ? 1 : +radius);
        function force() {
          var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
          for (var k = 0; k < iterations; ++k) {
            tree = quadtree(nodes, x, y).visitAfter(prepare);
            for (i = 0; i < n; ++i) {
              node = nodes[i];
              ri = radii[node.index], ri2 = ri * ri;
              xi = node.x + node.vx;
              yi = node.y + node.vy;
              tree.visit(apply)
            }
          }
          function apply(quad, x0, y0, x1, y1) {
            var data = quad.data, rj = quad.r, r = ri + rj;
            if (data) {
              if (data.index > node.index) {
                var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;
                if (l < r * r) {
                  if (x === 0)
                    x = jiggle(), l += x * x;
                  if (y === 0)
                    y = jiggle(), l += y * y;
                  l = (r - (l = Math.sqrt(l))) / l * strength;
                  node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                  node.vy += (y *= l) * r;
                  data.vx -= x * (r = 1 - r);
                  data.vy -= y * r
                }
              }
              return
            }
            return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r
          }
        }
        function prepare(quad) {
          if (quad.data)
            return quad.r = radii[quad.data.index];
          for (var i = quad.r = 0; i < 4; ++i) {
            if (quad[i] && quad[i].r > quad.r) {
              quad.r = quad[i].r
            }
          }
        }
        function initialize() {
          if (!nodes)
            return;
          var i, n = nodes.length, node;
          radii = new Array(n);
          for (i = 0; i < n; ++i)
            node = nodes[i], radii[node.index] = +radius(node, i, nodes)
        }
        force.initialize = function (_) {
          nodes = _;
          initialize()
        };
        force.iterations = function (_) {
          return arguments.length ? (iterations = +_, force) : iterations
        };
        force.strength = function (_) {
          return arguments.length ? (strength = +_, force) : strength
        };
        force.radius = function (_) {
          return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : radius
        };
        return force
      };
      function index(d) {
        return d.index
      }
      function find(nodeById, nodeId) {
        var node = nodeById.get(nodeId);
        if (!node)
          throw new Error('missing: ' + nodeId);
        return node
      }
      var link = function (links) {
        var id = index, strength = defaultStrength, strengths, distance = constant$6(30), distances, nodes, count, bias, iterations = 1;
        if (links == null)
          links = [];
        function defaultStrength(link) {
          return 1 / Math.min(count[link.source.index], count[link.target.index])
        }
        function force(alpha) {
          for (var k = 0, n = links.length; k < iterations; ++k) {
            for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
              link = links[i], source = link.source, target = link.target;
              x = target.x + target.vx - source.x - source.vx || jiggle();
              y = target.y + target.vy - source.y - source.vy || jiggle();
              l = Math.sqrt(x * x + y * y);
              l = (l - distances[i]) / l * alpha * strengths[i];
              x *= l, y *= l;
              target.vx -= x * (b = bias[i]);
              target.vy -= y * b;
              source.vx += x * (b = 1 - b);
              source.vy += y * b
            }
          }
        }
        function initialize() {
          if (!nodes)
            return;
          var i, n = nodes.length, m = links.length, nodeById = map$1(nodes, id), link;
          for (i = 0, count = new Array(n); i < m; ++i) {
            link = links[i], link.index = i;
            if (typeof link.source !== 'object')
              link.source = find(nodeById, link.source);
            if (typeof link.target !== 'object')
              link.target = find(nodeById, link.target);
            count[link.source.index] = (count[link.source.index] || 0) + 1;
            count[link.target.index] = (count[link.target.index] || 0) + 1
          }
          for (i = 0, bias = new Array(m); i < m; ++i) {
            link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index])
          }
          strengths = new Array(m), initializeStrength();
          distances = new Array(m), initializeDistance()
        }
        function initializeStrength() {
          if (!nodes)
            return;
          for (var i = 0, n = links.length; i < n; ++i) {
            strengths[i] = +strength(links[i], i, links)
          }
        }
        function initializeDistance() {
          if (!nodes)
            return;
          for (var i = 0, n = links.length; i < n; ++i) {
            distances[i] = +distance(links[i], i, links)
          }
        }
        force.initialize = function (_) {
          nodes = _;
          initialize()
        };
        force.links = function (_) {
          return arguments.length ? (links = _, initialize(), force) : links
        };
        force.id = function (_) {
          return arguments.length ? (id = _, force) : id
        };
        force.iterations = function (_) {
          return arguments.length ? (iterations = +_, force) : iterations
        };
        force.strength = function (_) {
          return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initializeStrength(), force) : strength
        };
        force.distance = function (_) {
          return arguments.length ? (distance = typeof _ === 'function' ? _ : constant$6(+_), initializeDistance(), force) : distance
        };
        return force
      };
      function x$1(d) {
        return d.x
      }
      function y$1(d) {
        return d.y
      }
      var initialRadius = 10;
      var initialAngle = Math.PI * (3 - Math.sqrt(5));
      var simulation = function (nodes) {
        var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = map$1(), stepper = timer(step), event = dispatch('tick', 'end');
        if (nodes == null)
          nodes = [];
        function step() {
          tick();
          event.call('tick', simulation);
          if (alpha < alphaMin) {
            stepper.stop();
            event.call('end', simulation)
          }
        }
        function tick() {
          var i, n = nodes.length, node;
          alpha += (alphaTarget - alpha) * alphaDecay;
          forces.each(function (force) {
            force(alpha)
          });
          for (i = 0; i < n; ++i) {
            node = nodes[i];
            if (node.fx == null)
              node.x += node.vx *= velocityDecay;
            else
              node.x = node.fx, node.vx = 0;
            if (node.fy == null)
              node.y += node.vy *= velocityDecay;
            else
              node.y = node.fy, node.vy = 0
          }
        }
        function initializeNodes() {
          for (var i = 0, n = nodes.length, node; i < n; ++i) {
            node = nodes[i], node.index = i;
            if (isNaN(node.x) || isNaN(node.y)) {
              var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
              node.x = radius * Math.cos(angle);
              node.y = radius * Math.sin(angle)
            }
            if (isNaN(node.vx) || isNaN(node.vy)) {
              node.vx = node.vy = 0
            }
          }
        }
        function initializeForce(force) {
          if (force.initialize)
            force.initialize(nodes);
          return force
        }
        initializeNodes();
        return simulation = {
          tick: tick,
          restart: function () {
            return stepper.restart(step), simulation
          },
          stop: function () {
            return stepper.stop(), simulation
          },
          nodes: function (_) {
            return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes
          },
          alpha: function (_) {
            return arguments.length ? (alpha = +_, simulation) : alpha
          },
          alphaMin: function (_) {
            return arguments.length ? (alphaMin = +_, simulation) : alphaMin
          },
          alphaDecay: function (_) {
            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay
          },
          alphaTarget: function (_) {
            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget
          },
          velocityDecay: function (_) {
            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay
          },
          force: function (name, _) {
            return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name)
          },
          find: function (x, y, radius) {
            var i = 0, n = nodes.length, dx, dy, d2, node, closest;
            if (radius == null)
              radius = Infinity;
            else
              radius *= radius;
            for (i = 0; i < n; ++i) {
              node = nodes[i];
              dx = x - node.x;
              dy = y - node.y;
              d2 = dx * dx + dy * dy;
              if (d2 < radius)
                closest = node, radius = d2
            }
            return closest
          },
          on: function (name, _) {
            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name)
          }
        }
      };
      var manyBody = function () {
        var nodes, node, alpha, strength = constant$6(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
        function force(_) {
          var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);
          for (alpha = _, i = 0; i < n; ++i)
            node = nodes[i], tree.visit(apply)
        }
        function initialize() {
          if (!nodes)
            return;
          var i, n = nodes.length, node;
          strengths = new Array(n);
          for (i = 0; i < n; ++i)
            node = nodes[i], strengths[node.index] = +strength(node, i, nodes)
        }
        function accumulate(quad) {
          var strength = 0, q, c, x$$1, y$$1, i;
          // For internal nodes, accumulate forces from child quadrants.
          if (quad.length) {
            for (x$$1 = y$$1 = i = 0; i < 4; ++i) {
              if ((q = quad[i]) && (c = q.value)) {
                strength += c, x$$1 += c * q.x, y$$1 += c * q.y
              }
            }
            quad.x = x$$1 / strength;
            quad.y = y$$1 / strength
          }  // For leaf nodes, accumulate forces from coincident quadrants.
          else {
            q = quad;
            q.x = q.data.x;
            q.y = q.data.y;
            do
              strength += strengths[q.data.index];
            while (q = q.next)
          }
          quad.value = strength
        }
        function apply(quad, x1, _, x2) {
          if (!quad.value)
            return true;
          var x$$1 = quad.x - node.x, y$$1 = quad.y - node.y, w = x2 - x1, l = x$$1 * x$$1 + y$$1 * y$$1;
          // Apply the Barnes-Hut approximation if possible.
          // Limit forces for very close nodes; randomize direction if coincident.
          if (w * w / theta2 < l) {
            if (l < distanceMax2) {
              if (x$$1 === 0)
                x$$1 = jiggle(), l += x$$1 * x$$1;
              if (y$$1 === 0)
                y$$1 = jiggle(), l += y$$1 * y$$1;
              if (l < distanceMin2)
                l = Math.sqrt(distanceMin2 * l);
              node.vx += x$$1 * quad.value * alpha / l;
              node.vy += y$$1 * quad.value * alpha / l
            }
            return true
          }  // Otherwise, process points directly.
          else if (quad.length || l >= distanceMax2)
            return;
          // Limit forces for very close nodes; randomize direction if coincident.
          if (quad.data !== node || quad.next) {
            if (x$$1 === 0)
              x$$1 = jiggle(), l += x$$1 * x$$1;
            if (y$$1 === 0)
              y$$1 = jiggle(), l += y$$1 * y$$1;
            if (l < distanceMin2)
              l = Math.sqrt(distanceMin2 * l)
          }
          do
            if (quad.data !== node) {
              w = strengths[quad.data.index] * alpha / l;
              node.vx += x$$1 * w;
              node.vy += y$$1 * w
            }
          while (quad = quad.next)
        }
        force.initialize = function (_) {
          nodes = _;
          initialize()
        };
        force.strength = function (_) {
          return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength
        };
        force.distanceMin = function (_) {
          return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2)
        };
        force.distanceMax = function (_) {
          return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2)
        };
        force.theta = function (_) {
          return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2)
        };
        return force
      };
      var x$2 = function (x) {
        var strength = constant$6(0.1), nodes, strengths, xz;
        if (typeof x !== 'function')
          x = constant$6(x == null ? 0 : +x);
        function force(alpha) {
          for (var i = 0, n = nodes.length, node; i < n; ++i) {
            node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha
          }
        }
        function initialize() {
          if (!nodes)
            return;
          var i, n = nodes.length;
          strengths = new Array(n);
          xz = new Array(n);
          for (i = 0; i < n; ++i) {
            strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes)
          }
        }
        force.initialize = function (_) {
          nodes = _;
          initialize()
        };
        force.strength = function (_) {
          return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength
        };
        force.x = function (_) {
          return arguments.length ? (x = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : x
        };
        return force
      };
      var y$2 = function (y) {
        var strength = constant$6(0.1), nodes, strengths, yz;
        if (typeof y !== 'function')
          y = constant$6(y == null ? 0 : +y);
        function force(alpha) {
          for (var i = 0, n = nodes.length, node; i < n; ++i) {
            node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha
          }
        }
        function initialize() {
          if (!nodes)
            return;
          var i, n = nodes.length;
          strengths = new Array(n);
          yz = new Array(n);
          for (i = 0; i < n; ++i) {
            strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes)
          }
        }
        force.initialize = function (_) {
          nodes = _;
          initialize()
        };
        force.strength = function (_) {
          return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength
        };
        force.y = function (_) {
          return arguments.length ? (y = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : y
        };
        return force
      };
      // Computes the decimal coefficient and exponent of the specified number x with
      // significant digits p, where x is positive and p is in [1, 21] or undefined.
      // For example, formatDecimal(1.23) returns ["123", 0].
      var formatDecimal = function (x, p) {
        if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf('e')) < 0)
          return null;
        // NaN, ±Infinity
        var i, coefficient = x.slice(0, i);
        // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
        // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
        return [
          coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
          +x.slice(i + 1)
        ]
      };
      var exponent$1 = function (x) {
        return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN
      };
      var formatGroup = function (grouping, thousands) {
        return function (value, width) {
          var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
          while (i > 0 && g > 0) {
            if (length + g + 1 > width)
              g = Math.max(1, width - length);
            t.push(value.substring(i -= g, i + g));
            if ((length += g + 1) > width)
              break;
            g = grouping[j = (j + 1) % grouping.length]
          }
          return t.reverse().join(thousands)
        }
      };
      var formatDefault = function (x, p) {
        x = x.toPrecision(p);
        out:
          for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
            switch (x[i]) {
            case '.':
              i0 = i1 = i;
              break;
            case '0':
              if (i0 === 0)
                i0 = i;
              i1 = i;
              break;
            case 'e':
              break out;
            default:
              if (i0 > 0)
                i0 = 0;
              break
            }
          }
        return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x
      };
      var prefixExponent;
      var formatPrefixAuto = function (x, p) {
        var d = formatDecimal(x, p);
        if (!d)
          return x + '';
        var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
        return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join('0') : i > 0 ? coefficient.slice(0, i) + '.' + coefficient.slice(i) : '0.' + new Array(1 - i).join('0') + formatDecimal(x, Math.max(0, p + i - 1))[0]  // less than 1y!
      };
      var formatRounded = function (x, p) {
        var d = formatDecimal(x, p);
        if (!d)
          return x + '';
        var coefficient = d[0], exponent = d[1];
        return exponent < 0 ? '0.' + new Array(-exponent).join('0') + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join('0')
      };
      var formatTypes = {
        '': formatDefault,
        '%': function (x, p) {
          return (x * 100).toFixed(p)
        },
        'b': function (x) {
          return Math.round(x).toString(2)
        },
        'c': function (x) {
          return x + ''
        },
        'd': function (x) {
          return Math.round(x).toString(10)
        },
        'e': function (x, p) {
          return x.toExponential(p)
        },
        'f': function (x, p) {
          return x.toFixed(p)
        },
        'g': function (x, p) {
          return x.toPrecision(p)
        },
        'o': function (x) {
          return Math.round(x).toString(8)
        },
        'p': function (x, p) {
          return formatRounded(x * 100, p)
        },
        'r': formatRounded,
        's': formatPrefixAuto,
        'X': function (x) {
          return Math.round(x).toString(16).toUpperCase()
        },
        'x': function (x) {
          return Math.round(x).toString(16)
        }
      };
      // [[fill]align][sign][symbol][0][width][,][.precision][type]
      var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
      var formatSpecifier = function (specifier) {
        return new FormatSpecifier(specifier)
      };
      function FormatSpecifier(specifier) {
        if (!(match = re.exec(specifier)))
          throw new Error('invalid format: ' + specifier);
        var match, fill = match[1] || ' ', align = match[2] || '>', sign = match[3] || '-', symbol = match[4] || '', zero = !!match[5], width = match[6] && +match[6], comma = !!match[7], precision = match[8] && +match[8].slice(1), type = match[9] || '';
        // The "n" type is an alias for ",g".
        if (type === 'n')
          comma = true, type = 'g';  // Map invalid types to the default format.
        else if (!formatTypes[type])
          type = '';
        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || fill === '0' && align === '=')
          zero = true, fill = '0', align = '=';
        this.fill = fill;
        this.align = align;
        this.sign = sign;
        this.symbol = symbol;
        this.zero = zero;
        this.width = width;
        this.comma = comma;
        this.precision = precision;
        this.type = type
      }
      FormatSpecifier.prototype.toString = function () {
        return this.fill + this.align + this.sign + this.symbol + (this.zero ? '0' : '') + (this.width == null ? '' : Math.max(1, this.width | 0)) + (this.comma ? ',' : '') + (this.precision == null ? '' : '.' + Math.max(0, this.precision | 0)) + this.type
      };
      var prefixes = [
        'y',
        'z',
        'a',
        'f',
        'p',
        'n',
        'µ',
        'm',
        '',
        'k',
        'M',
        'G',
        'T',
        'P',
        'E',
        'Z',
        'Y'
      ];
      function identity$3(x) {
        return x
      }
      var formatLocale = function (locale) {
        var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3, currency = locale.currency, decimal = locale.decimal;
        function newFormat(specifier) {
          specifier = formatSpecifier(specifier);
          var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type = specifier.type;
          // Compute the prefix and suffix.
          // For SI-prefix, the suffix is lazily computed.
          var prefix = symbol === '$' ? currency[0] : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '', suffix = symbol === '$' ? currency[1] : /[%p]/.test(type) ? '%' : '';
          // What format function should we use?
          // Is this an integer type?
          // Can this type generate exponential notation?
          var formatType = formatTypes[type], maybeSuffix = !type || /[defgprs%]/.test(type);
          // Set the default precision if not specified,
          // or clamp the specified precision to the supported range.
          // For significant precision, it must be in [1, 21].
          // For fixed precision, it must be in [0, 20].
          precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
          function format(value) {
            var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
            if (type === 'c') {
              valueSuffix = formatType(value) + valueSuffix;
              value = ''
            } else {
              value = +value;
              // Convert negative to positive, and compute the prefix.
              // Note that -0 is not less than 0, but 1 / -0 is!
              var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
              // Perform the initial formatting.
              value = formatType(value, precision);
              // If the original value was negative, it may be rounded to zero during
              // formatting; treat this as (positive) zero.
              if (valueNegative) {
                i = -1, n = value.length;
                valueNegative = false;
                while (++i < n) {
                  if (c = value.charCodeAt(i), 48 < c && c < 58 || type === 'x' && 96 < c && c < 103 || type === 'X' && 64 < c && c < 71) {
                    valueNegative = true;
                    break
                  }
                }
              }
              // Compute the prefix and suffix.
              valuePrefix = (valueNegative ? sign === '(' ? sign : '-' : sign === '-' || sign === '(' ? '' : sign) + valuePrefix;
              valueSuffix = valueSuffix + (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + (valueNegative && sign === '(' ? ')' : '');
              // Break the formatted value into the integer “value” part that can be
              // grouped, and fractional or exponential “suffix” part that is not.
              if (maybeSuffix) {
                i = -1, n = value.length;
                while (++i < n) {
                  if (c = value.charCodeAt(i), 48 > c || c > 57) {
                    valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                    value = value.slice(0, i);
                    break
                  }
                }
              }
            }
            // If the fill character is not "0", grouping is applied before padding.
            if (comma && !zero)
              value = group(value, Infinity);
            // Compute the padding.
            var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : '';
            // If the fill character is "0", grouping is applied after padding.
            if (comma && zero)
              value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = '';
            // Reconstruct the final output based on the desired alignment.
            switch (align) {
            case '<':
              return valuePrefix + value + valueSuffix + padding;
            case '=':
              return valuePrefix + padding + value + valueSuffix;
            case '^':
              return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length)
            }
            return padding + valuePrefix + value + valueSuffix
          }
          format.toString = function () {
            return specifier + ''
          };
          return format
        }
        function formatPrefix(specifier, value) {
          var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = 'f', specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
          return function (value) {
            return f(k * value) + prefix
          }
        }
        return {
          format: newFormat,
          formatPrefix: formatPrefix
        }
      };
      var locale$1;
      defaultLocale({
        decimal: '.',
        thousands: ',',
        grouping: [3],
        currency: [
          '$',
          ''
        ]
      });
      function defaultLocale(definition) {
        locale$1 = formatLocale(definition);
        exports.format = locale$1.format;
        exports.formatPrefix = locale$1.formatPrefix;
        return locale$1
      }
      var precisionFixed = function (step) {
        return Math.max(0, -exponent$1(Math.abs(step)))
      };
      var precisionPrefix = function (step, value) {
        return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)))
      };
      var precisionRound = function (step, max) {
        step = Math.abs(step), max = Math.abs(max) - step;
        return Math.max(0, exponent$1(max) - exponent$1(step)) + 1
      };
      // Adds floating point numbers with twice the normal precision.
      // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
      // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
      // 305–363 (1997).
      // Code adapted from GeographicLib by Charles F. F. Karney,
      // http://geographiclib.sourceforge.net/
      var adder = function () {
        return new Adder
      };
      function Adder() {
        this.reset()
      }
      Adder.prototype = {
        constructor: Adder,
        reset: function () {
          this.s = // rounded value
          this.t = 0  // exact error
        },
        add: function (y) {
          add$1(temp, y, this.t);
          add$1(this, temp.s, this.s);
          if (this.s)
            this.t += temp.t;
          else
            this.s = temp.t
        },
        valueOf: function () {
          return this.s
        }
      };
      var temp = new Adder;
      function add$1(adder, a, b) {
        var x = adder.s = a + b, bv = x - a, av = x - bv;
        adder.t = a - av + (b - bv)
      }
      var epsilon$2 = 0.000001;
      var epsilon2$1 = 1e-12;
      var pi$3 = Math.PI;
      var halfPi$2 = pi$3 / 2;
      var quarterPi = pi$3 / 4;
      var tau$3 = pi$3 * 2;
      var degrees$1 = 180 / pi$3;
      var radians = pi$3 / 180;
      var abs = Math.abs;
      var atan = Math.atan;
      var atan2 = Math.atan2;
      var cos$1 = Math.cos;
      var ceil = Math.ceil;
      var exp = Math.exp;
      var log = Math.log;
      var pow = Math.pow;
      var sin$1 = Math.sin;
      var sign = Math.sign || function (x) {
        return x > 0 ? 1 : x < 0 ? -1 : 0
      };
      var sqrt = Math.sqrt;
      var tan = Math.tan;
      function acos(x) {
        return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x)
      }
      function asin(x) {
        return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x)
      }
      function haversin(x) {
        return (x = sin$1(x / 2)) * x
      }
      function noop$1() {
      }
      function streamGeometry(geometry, stream) {
        if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
          streamGeometryType[geometry.type](geometry, stream)
        }
      }
      var streamObjectType = {
        Feature: function (feature, stream) {
          streamGeometry(feature.geometry, stream)
        },
        FeatureCollection: function (object, stream) {
          var features = object.features, i = -1, n = features.length;
          while (++i < n)
            streamGeometry(features[i].geometry, stream)
        }
      };
      var streamGeometryType = {
        Sphere: function (object, stream) {
          stream.sphere()
        },
        Point: function (object, stream) {
          object = object.coordinates;
          stream.point(object[0], object[1], object[2])
        },
        MultiPoint: function (object, stream) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n)
            object = coordinates[i], stream.point(object[0], object[1], object[2])
        },
        LineString: function (object, stream) {
          streamLine(object.coordinates, stream, 0)
        },
        MultiLineString: function (object, stream) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n)
            streamLine(coordinates[i], stream, 0)
        },
        Polygon: function (object, stream) {
          streamPolygon(object.coordinates, stream)
        },
        MultiPolygon: function (object, stream) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n)
            streamPolygon(coordinates[i], stream)
        },
        GeometryCollection: function (object, stream) {
          var geometries = object.geometries, i = -1, n = geometries.length;
          while (++i < n)
            streamGeometry(geometries[i], stream)
        }
      };
      function streamLine(coordinates, stream, closed) {
        var i = -1, n = coordinates.length - closed, coordinate;
        stream.lineStart();
        while (++i < n)
          coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
        stream.lineEnd()
      }
      function streamPolygon(coordinates, stream) {
        var i = -1, n = coordinates.length;
        stream.polygonStart();
        while (++i < n)
          streamLine(coordinates[i], stream, 1);
        stream.polygonEnd()
      }
      var geoStream = function (object, stream) {
        if (object && streamObjectType.hasOwnProperty(object.type)) {
          streamObjectType[object.type](object, stream)
        } else {
          streamGeometry(object, stream)
        }
      };
      var areaRingSum = adder();
      var areaSum = adder();
      var lambda00;
      var phi00;
      var lambda0;
      var cosPhi0;
      var sinPhi0;
      var areaStream = {
        point: noop$1,
        lineStart: noop$1,
        lineEnd: noop$1,
        polygonStart: function () {
          areaRingSum.reset();
          areaStream.lineStart = areaRingStart;
          areaStream.lineEnd = areaRingEnd
        },
        polygonEnd: function () {
          var areaRing = +areaRingSum;
          areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);
          this.lineStart = this.lineEnd = this.point = noop$1
        },
        sphere: function () {
          areaSum.add(tau$3)
        }
      };
      function areaRingStart() {
        areaStream.point = areaPointFirst
      }
      function areaRingEnd() {
        areaPoint(lambda00, phi00)
      }
      function areaPointFirst(lambda, phi) {
        areaStream.point = areaPoint;
        lambda00 = lambda, phi00 = phi;
        lambda *= radians, phi *= radians;
        lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi)
      }
      function areaPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        phi = phi / 2 + quarterPi;
        // half the angular distance from south pole
        // Spherical excess E for a spherical triangle with vertices: south pole,
        // previous point, current point.  Uses a formula derived from Cagnoli’s
        // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
        var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos$1(phi), sinPhi = sin$1(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * cos$1(adLambda), v = k * sdLambda * sin$1(adLambda);
        areaRingSum.add(atan2(v, u));
        // Advance the previous points.
        lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi
      }
      var area = function (object) {
        areaSum.reset();
        geoStream(object, areaStream);
        return areaSum * 2
      };
      function spherical(cartesian) {
        return [
          atan2(cartesian[1], cartesian[0]),
          asin(cartesian[2])
        ]
      }
      function cartesian(spherical) {
        var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
        return [
          cosPhi * cos$1(lambda),
          cosPhi * sin$1(lambda),
          sin$1(phi)
        ]
      }
      function cartesianDot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
      }
      function cartesianCross(a, b) {
        return [
          a[1] * b[2] - a[2] * b[1],
          a[2] * b[0] - a[0] * b[2],
          a[0] * b[1] - a[1] * b[0]
        ]
      }
      // TODO return a
      function cartesianAddInPlace(a, b) {
        a[0] += b[0], a[1] += b[1], a[2] += b[2]
      }
      function cartesianScale(vector, k) {
        return [
          vector[0] * k,
          vector[1] * k,
          vector[2] * k
        ]
      }
      // TODO return d
      function cartesianNormalizeInPlace(d) {
        var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
        d[0] /= l, d[1] /= l, d[2] /= l
      }
      var lambda0$1;
      var phi0;
      var lambda1;
      var phi1;
      var lambda2;
      var lambda00$1;
      var phi00$1;
      var p0;
      var deltaSum = adder();
      var ranges;
      var range;
      var boundsStream = {
        point: boundsPoint,
        lineStart: boundsLineStart,
        lineEnd: boundsLineEnd,
        polygonStart: function () {
          boundsStream.point = boundsRingPoint;
          boundsStream.lineStart = boundsRingStart;
          boundsStream.lineEnd = boundsRingEnd;
          deltaSum.reset();
          areaStream.polygonStart()
        },
        polygonEnd: function () {
          areaStream.polygonEnd();
          boundsStream.point = boundsPoint;
          boundsStream.lineStart = boundsLineStart;
          boundsStream.lineEnd = boundsLineEnd;
          if (areaRingSum < 0)
            lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
          else if (deltaSum > epsilon$2)
            phi1 = 90;
          else if (deltaSum < -epsilon$2)
            phi0 = -90;
          range[0] = lambda0$1, range[1] = lambda1
        }
      };
      function boundsPoint(lambda, phi) {
        ranges.push(range = [
          lambda0$1 = lambda,
          lambda1 = lambda
        ]);
        if (phi < phi0)
          phi0 = phi;
        if (phi > phi1)
          phi1 = phi
      }
      function linePoint(lambda, phi) {
        var p = cartesian([
          lambda * radians,
          phi * radians
        ]);
        if (p0) {
          var normal = cartesianCross(p0, p), equatorial = [
              normal[1],
              -normal[0],
              0
            ], inflection = cartesianCross(equatorial, normal);
          cartesianNormalizeInPlace(inflection);
          inflection = spherical(inflection);
          var delta = lambda - lambda2, sign$$1 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees$1 * sign$$1, phii, antimeridian = abs(delta) > 180;
          if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
            phii = inflection[1] * degrees$1;
            if (phii > phi1)
              phi1 = phii
          } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
            phii = -inflection[1] * degrees$1;
            if (phii < phi0)
              phi0 = phii
          } else {
            if (phi < phi0)
              phi0 = phi;
            if (phi > phi1)
              phi1 = phi
          }
          if (antimeridian) {
            if (lambda < lambda2) {
              if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                lambda1 = lambda
            } else {
              if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                lambda0$1 = lambda
            }
          } else {
            if (lambda1 >= lambda0$1) {
              if (lambda < lambda0$1)
                lambda0$1 = lambda;
              if (lambda > lambda1)
                lambda1 = lambda
            } else {
              if (lambda > lambda2) {
                if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                  lambda1 = lambda
              } else {
                if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                  lambda0$1 = lambda
              }
            }
          }
        } else {
          ranges.push(range = [
            lambda0$1 = lambda,
            lambda1 = lambda
          ])
        }
        if (phi < phi0)
          phi0 = phi;
        if (phi > phi1)
          phi1 = phi;
        p0 = p, lambda2 = lambda
      }
      function boundsLineStart() {
        boundsStream.point = linePoint
      }
      function boundsLineEnd() {
        range[0] = lambda0$1, range[1] = lambda1;
        boundsStream.point = boundsPoint;
        p0 = null
      }
      function boundsRingPoint(lambda, phi) {
        if (p0) {
          var delta = lambda - lambda2;
          deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta)
        } else {
          lambda00$1 = lambda, phi00$1 = phi
        }
        areaStream.point(lambda, phi);
        linePoint(lambda, phi)
      }
      function boundsRingStart() {
        areaStream.lineStart()
      }
      function boundsRingEnd() {
        boundsRingPoint(lambda00$1, phi00$1);
        areaStream.lineEnd();
        if (abs(deltaSum) > epsilon$2)
          lambda0$1 = -(lambda1 = 180);
        range[0] = lambda0$1, range[1] = lambda1;
        p0 = null
      }
      // Finds the left-right distance between two longitudes.
      // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
      // the distance between ±180° to be 360°.
      function angle(lambda0, lambda1) {
        return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1
      }
      function rangeCompare(a, b) {
        return a[0] - b[0]
      }
      function rangeContains(range, x) {
        return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x
      }
      var bounds = function (feature) {
        var i, n, a, b, merged, deltaMax, delta;
        phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
        ranges = [];
        geoStream(feature, boundsStream);
        // First, sort ranges by their minimum longitudes.
        if (n = ranges.length) {
          ranges.sort(rangeCompare);
          // Then, merge any ranges that overlap.
          for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
            b = ranges[i];
            if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
              if (angle(a[0], b[1]) > angle(a[0], a[1]))
                a[1] = b[1];
              if (angle(b[0], a[1]) > angle(a[0], a[1]))
                a[0] = b[0]
            } else {
              merged.push(a = b)
            }
          }
          // Finally, find the largest gap between the merged ranges.
          // The final bounding box will be the inverse of this gap.
          for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
            b = merged[i];
            if ((delta = angle(a[1], b[0])) > deltaMax)
              deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1]
          }
        }
        ranges = range = null;
        return lambda0$1 === Infinity || phi0 === Infinity ? [
          [
            NaN,
            NaN
          ],
          [
            NaN,
            NaN
          ]
        ] : [
          [
            lambda0$1,
            phi0
          ],
          [
            lambda1,
            phi1
          ]
        ]
      };
      var W0;
      var W1;
      var X0;
      var Y0;
      var Z0;
      var X1;
      var Y1;
      var Z1;
      var X2;
      var Y2;
      var Z2;
      var lambda00$2;
      var phi00$2;
      var x0;
      var y0;
      var z0;
      // previous point
      var centroidStream = {
        sphere: noop$1,
        point: centroidPoint,
        lineStart: centroidLineStart,
        lineEnd: centroidLineEnd,
        polygonStart: function () {
          centroidStream.lineStart = centroidRingStart;
          centroidStream.lineEnd = centroidRingEnd
        },
        polygonEnd: function () {
          centroidStream.lineStart = centroidLineStart;
          centroidStream.lineEnd = centroidLineEnd
        }
      };
      // Arithmetic mean of Cartesian vectors.
      function centroidPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi);
        centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi))
      }
      function centroidPointCartesian(x, y, z) {
        ++W0;
        X0 += (x - X0) / W0;
        Y0 += (y - Y0) / W0;
        Z0 += (z - Z0) / W0
      }
      function centroidLineStart() {
        centroidStream.point = centroidLinePointFirst
      }
      function centroidLinePointFirst(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi);
        x0 = cosPhi * cos$1(lambda);
        y0 = cosPhi * sin$1(lambda);
        z0 = sin$1(phi);
        centroidStream.point = centroidLinePoint;
        centroidPointCartesian(x0, y0, z0)
      }
      function centroidLinePoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi), x = cosPhi * cos$1(lambda), y = cosPhi * sin$1(lambda), z = sin$1(phi), w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
        W1 += w;
        X1 += w * (x0 + (x0 = x));
        Y1 += w * (y0 + (y0 = y));
        Z1 += w * (z0 + (z0 = z));
        centroidPointCartesian(x0, y0, z0)
      }
      function centroidLineEnd() {
        centroidStream.point = centroidPoint
      }
      // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
      // J. Applied Mechanics 42, 239 (1975).
      function centroidRingStart() {
        centroidStream.point = centroidRingPointFirst
      }
      function centroidRingEnd() {
        centroidRingPoint(lambda00$2, phi00$2);
        centroidStream.point = centroidPoint
      }
      function centroidRingPointFirst(lambda, phi) {
        lambda00$2 = lambda, phi00$2 = phi;
        lambda *= radians, phi *= radians;
        centroidStream.point = centroidRingPoint;
        var cosPhi = cos$1(phi);
        x0 = cosPhi * cos$1(lambda);
        y0 = cosPhi * sin$1(lambda);
        z0 = sin$1(phi);
        centroidPointCartesian(x0, y0, z0)
      }
      function centroidRingPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi), x = cosPhi * cos$1(lambda), y = cosPhi * sin$1(lambda), z = sin$1(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -asin(m) / m,
          // area weight
          w = atan2(m, u);
        // line weight
        X2 += v * cx;
        Y2 += v * cy;
        Z2 += v * cz;
        W1 += w;
        X1 += w * (x0 + (x0 = x));
        Y1 += w * (y0 + (y0 = y));
        Z1 += w * (z0 + (z0 = z));
        centroidPointCartesian(x0, y0, z0)
      }
      var centroid = function (object) {
        W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
        geoStream(object, centroidStream);
        var x = X2, y = Y2, z = Z2, m = x * x + y * y + z * z;
        // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
        if (m < epsilon2$1) {
          x = X1, y = Y1, z = Z1;
          // If the feature has zero length, fall back to arithmetic mean of point vectors.
          if (W1 < epsilon$2)
            x = X0, y = Y0, z = Z0;
          m = x * x + y * y + z * z;
          // If the feature still has an undefined ccentroid, then return.
          if (m < epsilon2$1)
            return [
              NaN,
              NaN
            ]
        }
        return [
          atan2(y, x) * degrees$1,
          asin(z / sqrt(m)) * degrees$1
        ]
      };
      var constant$7 = function (x) {
        return function () {
          return x
        }
      };
      var compose = function (a, b) {
        function compose(x, y) {
          return x = a(x, y), b(x[0], x[1])
        }
        if (a.invert && b.invert)
          compose.invert = function (x, y) {
            return x = b.invert(x, y), x && a.invert(x[0], x[1])
          };
        return compose
      };
      function rotationIdentity(lambda, phi) {
        return [
          lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda,
          phi
        ]
      }
      rotationIdentity.invert = rotationIdentity;
      function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
        return (deltaLambda %= tau$3) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity
      }
      function forwardRotationLambda(deltaLambda) {
        return function (lambda, phi) {
          return lambda += deltaLambda, [
            lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda,
            phi
          ]
        }
      }
      function rotationLambda(deltaLambda) {
        var rotation = forwardRotationLambda(deltaLambda);
        rotation.invert = forwardRotationLambda(-deltaLambda);
        return rotation
      }
      function rotationPhiGamma(deltaPhi, deltaGamma) {
        var cosDeltaPhi = cos$1(deltaPhi), sinDeltaPhi = sin$1(deltaPhi), cosDeltaGamma = cos$1(deltaGamma), sinDeltaGamma = sin$1(deltaGamma);
        function rotation(lambda, phi) {
          var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
          return [
            atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
            asin(k * cosDeltaGamma + y * sinDeltaGamma)
          ]
        }
        rotation.invert = function (lambda, phi) {
          var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
          return [
            atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
            asin(k * cosDeltaPhi - x * sinDeltaPhi)
          ]
        };
        return rotation
      }
      var rotation = function (rotate) {
        rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
        function forward(coordinates) {
          coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
          return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates
        }
        forward.invert = function (coordinates) {
          coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
          return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates
        };
        return forward
      };
      // Generates a circle centered at [0°, 0°], with a given radius and precision.
      function circleStream(stream, radius, delta, direction, t0, t1) {
        if (!delta)
          return;
        var cosRadius = cos$1(radius), sinRadius = sin$1(radius), step = direction * delta;
        if (t0 == null) {
          t0 = radius + direction * tau$3;
          t1 = radius - step / 2
        } else {
          t0 = circleRadius(cosRadius, t0);
          t1 = circleRadius(cosRadius, t1);
          if (direction > 0 ? t0 < t1 : t0 > t1)
            t0 += direction * tau$3
        }
        for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
          point = spherical([
            cosRadius,
            -sinRadius * cos$1(t),
            -sinRadius * sin$1(t)
          ]);
          stream.point(point[0], point[1])
        }
      }
      // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
      function circleRadius(cosRadius, point) {
        point = cartesian(point), point[0] -= cosRadius;
        cartesianNormalizeInPlace(point);
        var radius = acos(-point[1]);
        return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3
      }
      var circle = function () {
        var center = constant$7([
            0,
            0
          ]), radius = constant$7(90), precision = constant$7(6), ring, rotate, stream = { point: point };
        function point(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= degrees$1, x[1] *= degrees$1
        }
        function circle() {
          var c = center.apply(this, arguments), r = radius.apply(this, arguments) * radians, p = precision.apply(this, arguments) * radians;
          ring = [];
          rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
          circleStream(stream, r, p, 1);
          c = {
            type: 'Polygon',
            coordinates: [ring]
          };
          ring = rotate = null;
          return c
        }
        circle.center = function (_) {
          return arguments.length ? (center = typeof _ === 'function' ? _ : constant$7([
            +_[0],
            +_[1]
          ]), circle) : center
        };
        circle.radius = function (_) {
          return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$7(+_), circle) : radius
        };
        circle.precision = function (_) {
          return arguments.length ? (precision = typeof _ === 'function' ? _ : constant$7(+_), circle) : precision
        };
        return circle
      };
      var clipBuffer = function () {
        var lines = [], line;
        return {
          point: function (x, y) {
            line.push([
              x,
              y
            ])
          },
          lineStart: function () {
            lines.push(line = [])
          },
          lineEnd: noop$1,
          rejoin: function () {
            if (lines.length > 1)
              lines.push(lines.pop().concat(lines.shift()))
          },
          result: function () {
            var result = lines;
            lines = [];
            line = null;
            return result
          }
        }
      };
      var clipLine = function (a, b, x0, y0, x1, y1) {
        var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
        r = x0 - ax;
        if (!dx && r > 0)
          return;
        r /= dx;
        if (dx < 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        } else if (dx > 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        }
        r = x1 - ax;
        if (!dx && r < 0)
          return;
        r /= dx;
        if (dx < 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        } else if (dx > 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        }
        r = y0 - ay;
        if (!dy && r > 0)
          return;
        r /= dy;
        if (dy < 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        } else if (dy > 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        }
        r = y1 - ay;
        if (!dy && r < 0)
          return;
        r /= dy;
        if (dy < 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        } else if (dy > 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        }
        if (t0 > 0)
          a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
        if (t1 < 1)
          b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
        return true
      };
      var pointEqual = function (a, b) {
        return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2
      };
      function Intersection(point, points, other, entry) {
        this.x = point;
        this.z = points;
        this.o = other;
        // another intersection
        this.e = entry;
        // is an entry?
        this.v = false;
        // visited
        this.n = this.p = null  // next & previous
      }
      // A generalized polygon clipping algorithm: given a polygon that has been cut
      // into its visible line segments, and rejoins the segments by interpolating
      // along the clip edge.
      var clipPolygon = function (segments, compareIntersection, startInside, interpolate, stream) {
        var subject = [], clip = [], i, n;
        segments.forEach(function (segment) {
          if ((n = segment.length - 1) <= 0)
            return;
          var n, p0 = segment[0], p1 = segment[n], x;
          // If the first and last points of a segment are coincident, then treat as a
          // closed ring. TODO if all rings are closed, then the winding order of the
          // exterior ring should be checked.
          if (pointEqual(p0, p1)) {
            stream.lineStart();
            for (i = 0; i < n; ++i)
              stream.point((p0 = segment[i])[0], p0[1]);
            stream.lineEnd();
            return
          }
          subject.push(x = new Intersection(p0, segment, null, true));
          clip.push(x.o = new Intersection(p0, null, x, false));
          subject.push(x = new Intersection(p1, segment, null, false));
          clip.push(x.o = new Intersection(p1, null, x, true))
        });
        if (!subject.length)
          return;
        clip.sort(compareIntersection);
        link$1(subject);
        link$1(clip);
        for (i = 0, n = clip.length; i < n; ++i) {
          clip[i].e = startInside = !startInside
        }
        var start = subject[0], points, point;
        while (1) {
          // Find first unvisited intersection.
          var current = start, isSubject = true;
          while (current.v)
            if ((current = current.n) === start)
              return;
          points = current.z;
          stream.lineStart();
          do {
            current.v = current.o.v = true;
            if (current.e) {
              if (isSubject) {
                for (i = 0, n = points.length; i < n; ++i)
                  stream.point((point = points[i])[0], point[1])
              } else {
                interpolate(current.x, current.n.x, 1, stream)
              }
              current = current.n
            } else {
              if (isSubject) {
                points = current.p.z;
                for (i = points.length - 1; i >= 0; --i)
                  stream.point((point = points[i])[0], point[1])
              } else {
                interpolate(current.x, current.p.x, -1, stream)
              }
              current = current.p
            }
            current = current.o;
            points = current.z;
            isSubject = !isSubject
          } while (!current.v);
          stream.lineEnd()
        }
      };
      function link$1(array) {
        if (!(n = array.length))
          return;
        var n, i = 0, a = array[0], b;
        while (++i < n) {
          a.n = b = array[i];
          b.p = a;
          a = b
        }
        a.n = b = array[0];
        b.p = a
      }
      var clipMax = 1000000000;
      var clipMin = -clipMax;
      // TODO Use d3-polygon’s polygonContains here for the ring check?
      // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?
      function clipExtent(x0, y0, x1, y1) {
        function visible(x, y) {
          return x0 <= x && x <= x1 && y0 <= y && y <= y1
        }
        function interpolate(from, to, direction, stream) {
          var a = 0, a1 = 0;
          if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
            do
              stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
            while ((a = (a + direction + 4) % 4) !== a1)
          } else {
            stream.point(to[0], to[1])
          }
        }
        function corner(p, direction) {
          return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2  // abs(p[1] - y1) < epsilon
        }
        function compareIntersection(a, b) {
          return comparePoint(a.x, b.x)
        }
        function comparePoint(a, b) {
          var ca = corner(a, 1), cb = corner(b, 1);
          return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0]
        }
        return function (stream) {
          var activeStream = stream, bufferStream = clipBuffer(), segments, polygon, ring, x__, y__, v__,
            // first point
            x_, y_, v_,
            // previous point
            first, clean;
          var clipStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: polygonStart,
            polygonEnd: polygonEnd
          };
          function point(x, y) {
            if (visible(x, y))
              activeStream.point(x, y)
          }
          function polygonInside() {
            var winding = 0;
            for (var i = 0, n = polygon.length; i < n; ++i) {
              for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
                a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                if (a1 <= y1) {
                  if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0))
                    ++winding
                } else {
                  if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0))
                    --winding
                }
              }
            }
            return winding
          }
          // Buffer geometry within a polygon and then clip it en masse.
          function polygonStart() {
            activeStream = bufferStream, segments = [], polygon = [], clean = true
          }
          function polygonEnd() {
            var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = merge(segments)).length;
            if (cleanInside || visible) {
              stream.polygonStart();
              if (cleanInside) {
                stream.lineStart();
                interpolate(null, null, 1, stream);
                stream.lineEnd()
              }
              if (visible) {
                clipPolygon(segments, compareIntersection, startInside, interpolate, stream)
              }
              stream.polygonEnd()
            }
            activeStream = stream, segments = polygon = ring = null
          }
          function lineStart() {
            clipStream.point = linePoint;
            if (polygon)
              polygon.push(ring = []);
            first = true;
            v_ = false;
            x_ = y_ = NaN
          }
          // TODO rather than special-case polygons, simply handle them separately.
          // Ideally, coincident intersection points should be jittered to avoid
          // clipping issues.
          function lineEnd() {
            if (segments) {
              linePoint(x__, y__);
              if (v__ && v_)
                bufferStream.rejoin();
              segments.push(bufferStream.result())
            }
            clipStream.point = point;
            if (v_)
              activeStream.lineEnd()
          }
          function linePoint(x, y) {
            var v = visible(x, y);
            if (polygon)
              ring.push([
                x,
                y
              ]);
            if (first) {
              x__ = x, y__ = y, v__ = v;
              first = false;
              if (v) {
                activeStream.lineStart();
                activeStream.point(x, y)
              }
            } else {
              if (v && v_)
                activeStream.point(x, y);
              else {
                var a = [
                    x_ = Math.max(clipMin, Math.min(clipMax, x_)),
                    y_ = Math.max(clipMin, Math.min(clipMax, y_))
                  ], b = [
                    x = Math.max(clipMin, Math.min(clipMax, x)),
                    y = Math.max(clipMin, Math.min(clipMax, y))
                  ];
                if (clipLine(a, b, x0, y0, x1, y1)) {
                  if (!v_) {
                    activeStream.lineStart();
                    activeStream.point(a[0], a[1])
                  }
                  activeStream.point(b[0], b[1]);
                  if (!v)
                    activeStream.lineEnd();
                  clean = false
                } else if (v) {
                  activeStream.lineStart();
                  activeStream.point(x, y);
                  clean = false
                }
              }
            }
            x_ = x, y_ = y, v_ = v
          }
          return clipStream
        }
      }
      var extent$1 = function () {
        var x0 = 0, y0 = 0, x1 = 960, y1 = 500, cache, cacheStream, clip;
        return clip = {
          stream: function (stream) {
            return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream)
          },
          extent: function (_) {
            return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [
              [
                x0,
                y0
              ],
              [
                x1,
                y1
              ]
            ]
          }
        }
      };
      var lengthSum = adder();
      var lambda0$2;
      var sinPhi0$1;
      var cosPhi0$1;
      var lengthStream = {
        sphere: noop$1,
        point: noop$1,
        lineStart: lengthLineStart,
        lineEnd: noop$1,
        polygonStart: noop$1,
        polygonEnd: noop$1
      };
      function lengthLineStart() {
        lengthStream.point = lengthPointFirst;
        lengthStream.lineEnd = lengthLineEnd
      }
      function lengthLineEnd() {
        lengthStream.point = lengthStream.lineEnd = noop$1
      }
      function lengthPointFirst(lambda, phi) {
        lambda *= radians, phi *= radians;
        lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
        lengthStream.point = lengthPoint
      }
      function lengthPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var sinPhi = sin$1(phi), cosPhi = cos$1(phi), delta = abs(lambda - lambda0$2), cosDelta = cos$1(delta), sinDelta = sin$1(delta), x = cosPhi * sinDelta, y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta, z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
        lengthSum.add(atan2(sqrt(x * x + y * y), z));
        lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi
      }
      var length$1 = function (object) {
        lengthSum.reset();
        geoStream(object, lengthStream);
        return +lengthSum
      };
      var coordinates = [
        null,
        null
      ];
      var object$1 = {
        type: 'LineString',
        coordinates: coordinates
      };
      var distance = function (a, b) {
        coordinates[0] = a;
        coordinates[1] = b;
        return length$1(object$1)
      };
      function graticuleX(y0, y1, dy) {
        var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);
        return function (x) {
          return y.map(function (y) {
            return [
              x,
              y
            ]
          })
        }
      }
      function graticuleY(x0, x1, dx) {
        var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);
        return function (y) {
          return x.map(function (x) {
            return [
              x,
              y
            ]
          })
        }
      }
      function graticule() {
        var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
        function graticule() {
          return {
            type: 'MultiLineString',
            coordinates: lines()
          }
        }
        function lines() {
          return sequence(ceil(X0 / DX) * DX, X1, DX).map(X).concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
            return abs(x % DX) > epsilon$2
          }).map(x)).concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
            return abs(y % DY) > epsilon$2
          }).map(y))
        }
        graticule.lines = function () {
          return lines().map(function (coordinates) {
            return {
              type: 'LineString',
              coordinates: coordinates
            }
          })
        };
        graticule.outline = function () {
          return {
            type: 'Polygon',
            coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
          }
        };
        graticule.extent = function (_) {
          if (!arguments.length)
            return graticule.extentMinor();
          return graticule.extentMajor(_).extentMinor(_)
        };
        graticule.extentMajor = function (_) {
          if (!arguments.length)
            return [
              [
                X0,
                Y0
              ],
              [
                X1,
                Y1
              ]
            ];
          X0 = +_[0][0], X1 = +_[1][0];
          Y0 = +_[0][1], Y1 = +_[1][1];
          if (X0 > X1)
            _ = X0, X0 = X1, X1 = _;
          if (Y0 > Y1)
            _ = Y0, Y0 = Y1, Y1 = _;
          return graticule.precision(precision)
        };
        graticule.extentMinor = function (_) {
          if (!arguments.length)
            return [
              [
                x0,
                y0
              ],
              [
                x1,
                y1
              ]
            ];
          x0 = +_[0][0], x1 = +_[1][0];
          y0 = +_[0][1], y1 = +_[1][1];
          if (x0 > x1)
            _ = x0, x0 = x1, x1 = _;
          if (y0 > y1)
            _ = y0, y0 = y1, y1 = _;
          return graticule.precision(precision)
        };
        graticule.step = function (_) {
          if (!arguments.length)
            return graticule.stepMinor();
          return graticule.stepMajor(_).stepMinor(_)
        };
        graticule.stepMajor = function (_) {
          if (!arguments.length)
            return [
              DX,
              DY
            ];
          DX = +_[0], DY = +_[1];
          return graticule
        };
        graticule.stepMinor = function (_) {
          if (!arguments.length)
            return [
              dx,
              dy
            ];
          dx = +_[0], dy = +_[1];
          return graticule
        };
        graticule.precision = function (_) {
          if (!arguments.length)
            return precision;
          precision = +_;
          x = graticuleX(y0, y1, 90);
          y = graticuleY(x0, x1, precision);
          X = graticuleX(Y0, Y1, 90);
          Y = graticuleY(X0, X1, precision);
          return graticule
        };
        return graticule.extentMajor([
          [
            -180,
            -90 + epsilon$2
          ],
          [
            180,
            90 - epsilon$2
          ]
        ]).extentMinor([
          [
            -180,
            -80 - epsilon$2
          ],
          [
            180,
            80 + epsilon$2
          ]
        ])
      }
      function graticule10() {
        return graticule()()
      }
      var interpolate$1 = function (a, b) {
        var x0 = a[0] * radians, y0 = a[1] * radians, x1 = b[0] * radians, y1 = b[1] * radians, cy0 = cos$1(y0), sy0 = sin$1(y0), cy1 = cos$1(y1), sy1 = sin$1(y1), kx0 = cy0 * cos$1(x0), ky0 = cy0 * sin$1(x0), kx1 = cy1 * cos$1(x1), ky1 = cy1 * sin$1(x1), d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))), k = sin$1(d);
        var interpolate = d ? function (t) {
          var B = sin$1(t *= d) / k, A = sin$1(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
          return [
            atan2(y, x) * degrees$1,
            atan2(z, sqrt(x * x + y * y)) * degrees$1
          ]
        } : function () {
          return [
            x0 * degrees$1,
            y0 * degrees$1
          ]
        };
        interpolate.distance = d;
        return interpolate
      };
      var identity$4 = function (x) {
        return x
      };
      var areaSum$1 = adder();
      var areaRingSum$1 = adder();
      var x00;
      var y00;
      var x0$1;
      var y0$1;
      var areaStream$1 = {
        point: noop$1,
        lineStart: noop$1,
        lineEnd: noop$1,
        polygonStart: function () {
          areaStream$1.lineStart = areaRingStart$1;
          areaStream$1.lineEnd = areaRingEnd$1
        },
        polygonEnd: function () {
          areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$1;
          areaSum$1.add(abs(areaRingSum$1));
          areaRingSum$1.reset()
        },
        result: function () {
          var area = areaSum$1 / 2;
          areaSum$1.reset();
          return area
        }
      };
      function areaRingStart$1() {
        areaStream$1.point = areaPointFirst$1
      }
      function areaPointFirst$1(x, y) {
        areaStream$1.point = areaPoint$1;
        x00 = x0$1 = x, y00 = y0$1 = y
      }
      function areaPoint$1(x, y) {
        areaRingSum$1.add(y0$1 * x - x0$1 * y);
        x0$1 = x, y0$1 = y
      }
      function areaRingEnd$1() {
        areaPoint$1(x00, y00)
      }
      var x0$2 = Infinity;
      var y0$2 = x0$2;
      var x1 = -x0$2;
      var y1 = x1;
      var boundsStream$1 = {
        point: boundsPoint$1,
        lineStart: noop$1,
        lineEnd: noop$1,
        polygonStart: noop$1,
        polygonEnd: noop$1,
        result: function () {
          var bounds = [
            [
              x0$2,
              y0$2
            ],
            [
              x1,
              y1
            ]
          ];
          x1 = y1 = -(y0$2 = x0$2 = Infinity);
          return bounds
        }
      };
      function boundsPoint$1(x, y) {
        if (x < x0$2)
          x0$2 = x;
        if (x > x1)
          x1 = x;
        if (y < y0$2)
          y0$2 = y;
        if (y > y1)
          y1 = y
      }
      // TODO Enforce positive area for exterior, negative area for interior?
      var X0$1 = 0;
      var Y0$1 = 0;
      var Z0$1 = 0;
      var X1$1 = 0;
      var Y1$1 = 0;
      var Z1$1 = 0;
      var X2$1 = 0;
      var Y2$1 = 0;
      var Z2$1 = 0;
      var x00$1;
      var y00$1;
      var x0$3;
      var y0$3;
      var centroidStream$1 = {
        point: centroidPoint$1,
        lineStart: centroidLineStart$1,
        lineEnd: centroidLineEnd$1,
        polygonStart: function () {
          centroidStream$1.lineStart = centroidRingStart$1;
          centroidStream$1.lineEnd = centroidRingEnd$1
        },
        polygonEnd: function () {
          centroidStream$1.point = centroidPoint$1;
          centroidStream$1.lineStart = centroidLineStart$1;
          centroidStream$1.lineEnd = centroidLineEnd$1
        },
        result: function () {
          var centroid = Z2$1 ? [
            X2$1 / Z2$1,
            Y2$1 / Z2$1
          ] : Z1$1 ? [
            X1$1 / Z1$1,
            Y1$1 / Z1$1
          ] : Z0$1 ? [
            X0$1 / Z0$1,
            Y0$1 / Z0$1
          ] : [
            NaN,
            NaN
          ];
          X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
          return centroid
        }
      };
      function centroidPoint$1(x, y) {
        X0$1 += x;
        Y0$1 += y;
        ++Z0$1
      }
      function centroidLineStart$1() {
        centroidStream$1.point = centroidPointFirstLine
      }
      function centroidPointFirstLine(x, y) {
        centroidStream$1.point = centroidPointLine;
        centroidPoint$1(x0$3 = x, y0$3 = y)
      }
      function centroidPointLine(x, y) {
        var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
        X1$1 += z * (x0$3 + x) / 2;
        Y1$1 += z * (y0$3 + y) / 2;
        Z1$1 += z;
        centroidPoint$1(x0$3 = x, y0$3 = y)
      }
      function centroidLineEnd$1() {
        centroidStream$1.point = centroidPoint$1
      }
      function centroidRingStart$1() {
        centroidStream$1.point = centroidPointFirstRing
      }
      function centroidRingEnd$1() {
        centroidPointRing(x00$1, y00$1)
      }
      function centroidPointFirstRing(x, y) {
        centroidStream$1.point = centroidPointRing;
        centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y)
      }
      function centroidPointRing(x, y) {
        var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
        X1$1 += z * (x0$3 + x) / 2;
        Y1$1 += z * (y0$3 + y) / 2;
        Z1$1 += z;
        z = y0$3 * x - x0$3 * y;
        X2$1 += z * (x0$3 + x);
        Y2$1 += z * (y0$3 + y);
        Z2$1 += z * 3;
        centroidPoint$1(x0$3 = x, y0$3 = y)
      }
      function PathContext(context) {
        this._context = context
      }
      PathContext.prototype = {
        _radius: 4.5,
        pointRadius: function (_) {
          return this._radius = _, this
        },
        polygonStart: function () {
          this._line = 0
        },
        polygonEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._point = 0
        },
        lineEnd: function () {
          if (this._line === 0)
            this._context.closePath();
          this._point = NaN
        },
        point: function (x, y) {
          switch (this._point) {
          case 0: {
              this._context.moveTo(x, y);
              this._point = 1;
              break
            }
          case 1: {
              this._context.lineTo(x, y);
              break
            }
          default: {
              this._context.moveTo(x + this._radius, y);
              this._context.arc(x, y, this._radius, 0, tau$3);
              break
            }
          }
        },
        result: noop$1
      };
      var lengthSum$1 = adder();
      var lengthRing;
      var x00$2;
      var y00$2;
      var x0$4;
      var y0$4;
      var lengthStream$1 = {
        point: noop$1,
        lineStart: function () {
          lengthStream$1.point = lengthPointFirst$1
        },
        lineEnd: function () {
          if (lengthRing)
            lengthPoint$1(x00$2, y00$2);
          lengthStream$1.point = noop$1
        },
        polygonStart: function () {
          lengthRing = true
        },
        polygonEnd: function () {
          lengthRing = null
        },
        result: function () {
          var length = +lengthSum$1;
          lengthSum$1.reset();
          return length
        }
      };
      function lengthPointFirst$1(x, y) {
        lengthStream$1.point = lengthPoint$1;
        x00$2 = x0$4 = x, y00$2 = y0$4 = y
      }
      function lengthPoint$1(x, y) {
        x0$4 -= x, y0$4 -= y;
        lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
        x0$4 = x, y0$4 = y
      }
      function PathString() {
        this._string = []
      }
      PathString.prototype = {
        _circle: circle$1(4.5),
        pointRadius: function (_) {
          return this._circle = circle$1(_), this
        },
        polygonStart: function () {
          this._line = 0
        },
        polygonEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._point = 0
        },
        lineEnd: function () {
          if (this._line === 0)
            this._string.push('Z');
          this._point = NaN
        },
        point: function (x, y) {
          switch (this._point) {
          case 0: {
              this._string.push('M', x, ',', y);
              this._point = 1;
              break
            }
          case 1: {
              this._string.push('L', x, ',', y);
              break
            }
          default: {
              this._string.push('M', x, ',', y, this._circle);
              break
            }
          }
        },
        result: function () {
          if (this._string.length) {
            var result = this._string.join('');
            this._string = [];
            return result
          }
        }
      };
      function circle$1(radius) {
        return 'm0,' + radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + -2 * radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + 2 * radius + 'z'
      }
      var index$1 = function (projection, context) {
        var pointRadius = 4.5, projectionStream, contextStream;
        function path(object) {
          if (object) {
            if (typeof pointRadius === 'function')
              contextStream.pointRadius(+pointRadius.apply(this, arguments));
            geoStream(object, projectionStream(contextStream))
          }
          return contextStream.result()
        }
        path.area = function (object) {
          geoStream(object, projectionStream(areaStream$1));
          return areaStream$1.result()
        };
        path.measure = function (object) {
          geoStream(object, projectionStream(lengthStream$1));
          return lengthStream$1.result()
        };
        path.bounds = function (object) {
          geoStream(object, projectionStream(boundsStream$1));
          return boundsStream$1.result()
        };
        path.centroid = function (object) {
          geoStream(object, projectionStream(centroidStream$1));
          return centroidStream$1.result()
        };
        path.projection = function (_) {
          return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection
        };
        path.context = function (_) {
          if (!arguments.length)
            return context;
          contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
          if (typeof pointRadius !== 'function')
            contextStream.pointRadius(pointRadius);
          return path
        };
        path.pointRadius = function (_) {
          if (!arguments.length)
            return pointRadius;
          pointRadius = typeof _ === 'function' ? _ : (contextStream.pointRadius(+_), +_);
          return path
        };
        return path.projection(projection).context(context)
      };
      var sum$1 = adder();
      var polygonContains = function (polygon, point) {
        var lambda = point[0], phi = point[1], normal = [
            sin$1(lambda),
            -cos$1(lambda),
            0
          ], angle = 0, winding = 0;
        sum$1.reset();
        for (var i = 0, n = polygon.length; i < n; ++i) {
          if (!(m = (ring = polygon[i]).length))
            continue;
          var ring, m, point0 = ring[m - 1], lambda0 = point0[0], phi0 = point0[1] / 2 + quarterPi, sinPhi0 = sin$1(phi0), cosPhi0 = cos$1(phi0);
          for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
            var point1 = ring[j], lambda1 = point1[0], phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin$1(phi1), cosPhi1 = cos$1(phi1), delta = lambda1 - lambda0, sign$$1 = delta >= 0 ? 1 : -1, absDelta = sign$$1 * delta, antimeridian = absDelta > pi$3, k = sinPhi0 * sinPhi1;
            sum$1.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
            angle += antimeridian ? delta + sign$$1 * tau$3 : delta;
            // Are the longitudes either side of the point’s meridian (lambda),
            // and are the latitudes smaller than the parallel (phi)?
            if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
              var arc = cartesianCross(cartesian(point0), cartesian(point1));
              cartesianNormalizeInPlace(arc);
              var intersection = cartesianCross(normal, arc);
              cartesianNormalizeInPlace(intersection);
              var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
              if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                winding += antimeridian ^ delta >= 0 ? 1 : -1
              }
            }
          }
        }
        // First, determine whether the South pole is inside or outside:
        //
        // It is inside if:
        // * the polygon winds around it in a clockwise direction.
        // * the polygon does not (cumulatively) wind around it, but has a negative
        //   (counter-clockwise) area.
        //
        // Second, count the (signed) number of times a segment crosses a lambda
        // from the point to the South pole.  If it is zero, then the point is the
        // same side as the South pole.
        return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ winding & 1
      };
      var clip = function (pointVisible, clipLine, interpolate, start) {
        return function (rotate, sink) {
          var line = clipLine(sink), rotatedStart = rotate.invert(start[0], start[1]), ringBuffer = clipBuffer(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
          var clip = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function () {
              clip.point = pointRing;
              clip.lineStart = ringStart;
              clip.lineEnd = ringEnd;
              segments = [];
              polygon = []
            },
            polygonEnd: function () {
              clip.point = point;
              clip.lineStart = lineStart;
              clip.lineEnd = lineEnd;
              segments = merge(segments);
              var startInside = polygonContains(polygon, rotatedStart);
              if (segments.length) {
                if (!polygonStarted)
                  sink.polygonStart(), polygonStarted = true;
                clipPolygon(segments, compareIntersection, startInside, interpolate, sink)
              } else if (startInside) {
                if (!polygonStarted)
                  sink.polygonStart(), polygonStarted = true;
                sink.lineStart();
                interpolate(null, null, 1, sink);
                sink.lineEnd()
              }
              if (polygonStarted)
                sink.polygonEnd(), polygonStarted = false;
              segments = polygon = null
            },
            sphere: function () {
              sink.polygonStart();
              sink.lineStart();
              interpolate(null, null, 1, sink);
              sink.lineEnd();
              sink.polygonEnd()
            }
          };
          function point(lambda, phi) {
            var point = rotate(lambda, phi);
            if (pointVisible(lambda = point[0], phi = point[1]))
              sink.point(lambda, phi)
          }
          function pointLine(lambda, phi) {
            var point = rotate(lambda, phi);
            line.point(point[0], point[1])
          }
          function lineStart() {
            clip.point = pointLine;
            line.lineStart()
          }
          function lineEnd() {
            clip.point = point;
            line.lineEnd()
          }
          function pointRing(lambda, phi) {
            ring.push([
              lambda,
              phi
            ]);
            var point = rotate(lambda, phi);
            ringSink.point(point[0], point[1])
          }
          function ringStart() {
            ringSink.lineStart();
            ring = []
          }
          function ringEnd() {
            pointRing(ring[0][0], ring[0][1]);
            ringSink.lineEnd();
            var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
            ring.pop();
            polygon.push(ring);
            ring = null;
            if (!n)
              return;
            // No intersections.
            if (clean & 1) {
              segment = ringSegments[0];
              if ((m = segment.length - 1) > 0) {
                if (!polygonStarted)
                  sink.polygonStart(), polygonStarted = true;
                sink.lineStart();
                for (i = 0; i < m; ++i)
                  sink.point((point = segment[i])[0], point[1]);
                sink.lineEnd()
              }
              return
            }
            // Rejoin connected segments.
            // TODO reuse ringBuffer.rejoin()?
            if (n > 1 && clean & 2)
              ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
            segments.push(ringSegments.filter(validSegment))
          }
          return clip
        }
      };
      function validSegment(segment) {
        return segment.length > 1
      }
      // Intersections are sorted along the clip edge. For both antimeridian cutting
      // and circle clipping, the same comparison is used.
      function compareIntersection(a, b) {
        return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1])
      }
      var clipAntimeridian = clip(function () {
        return true
      }, clipAntimeridianLine, clipAntimeridianInterpolate, [
        -pi$3,
        -halfPi$2
      ]);
      // Takes a line and cuts into visible segments. Return values: 0 - there were
      // intersections or the line was empty; 1 - no intersections; 2 - there were
      // intersections, and the first and last segments should be rejoined.
      function clipAntimeridianLine(stream) {
        var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean;
        // no intersections
        return {
          lineStart: function () {
            stream.lineStart();
            clean = 1
          },
          point: function (lambda1, phi1) {
            var sign1 = lambda1 > 0 ? pi$3 : -pi$3, delta = abs(lambda1 - lambda0);
            if (abs(delta - pi$3) < epsilon$2) {
              // line crosses a pole
              stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
              stream.point(sign0, phi0);
              stream.lineEnd();
              stream.lineStart();
              stream.point(sign1, phi0);
              stream.point(lambda1, phi0);
              clean = 0
            } else if (sign0 !== sign1 && delta >= pi$3) {
              // line crosses antimeridian
              if (abs(lambda0 - sign0) < epsilon$2)
                lambda0 -= sign0 * epsilon$2;
              // handle degeneracies
              if (abs(lambda1 - sign1) < epsilon$2)
                lambda1 -= sign1 * epsilon$2;
              phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
              stream.point(sign0, phi0);
              stream.lineEnd();
              stream.lineStart();
              stream.point(sign1, phi0);
              clean = 0
            }
            stream.point(lambda0 = lambda1, phi0 = phi1);
            sign0 = sign1
          },
          lineEnd: function () {
            stream.lineEnd();
            lambda0 = phi0 = NaN
          },
          clean: function () {
            return 2 - clean  // if intersections, rejoin first and last segments
          }
        }
      }
      function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
        var cosPhi0, cosPhi1, sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
        return abs(sinLambda0Lambda1) > epsilon$2 ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2
      }
      function clipAntimeridianInterpolate(from, to, direction, stream) {
        var phi;
        if (from == null) {
          phi = direction * halfPi$2;
          stream.point(-pi$3, phi);
          stream.point(0, phi);
          stream.point(pi$3, phi);
          stream.point(pi$3, 0);
          stream.point(pi$3, -phi);
          stream.point(0, -phi);
          stream.point(-pi$3, -phi);
          stream.point(-pi$3, 0);
          stream.point(-pi$3, phi)
        } else if (abs(from[0] - to[0]) > epsilon$2) {
          var lambda = from[0] < to[0] ? pi$3 : -pi$3;
          phi = direction * lambda / 2;
          stream.point(-lambda, phi);
          stream.point(0, phi);
          stream.point(lambda, phi)
        } else {
          stream.point(to[0], to[1])
        }
      }
      var clipCircle = function (radius, delta) {
        var cr = cos$1(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon$2;
        // TODO optimise for this common case
        function interpolate(from, to, direction, stream) {
          circleStream(stream, radius, delta, direction, from, to)
        }
        function visible(lambda, phi) {
          return cos$1(lambda) * cos$1(phi) > cr
        }
        // Takes a line and cuts into visible segments. Return values used for polygon
        // clipping: 0 - there were intersections or the line was empty; 1 - no
        // intersections 2 - there were intersections, and the first and last segments
        // should be rejoined.
        function clipLine(stream) {
          var point0,
            // previous point
            c0,
            // code for previous point
            v0,
            // visibility of previous point
            v00,
            // visibility of first point
            clean;
          // no intersections
          return {
            lineStart: function () {
              v00 = v0 = false;
              clean = 1
            },
            point: function (lambda, phi) {
              var point1 = [
                  lambda,
                  phi
                ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
              if (!point0 && (v00 = v0 = v))
                stream.lineStart();
              // Handle degeneracies.
              // TODO ignore if not clipping polygons.
              if (v !== v0) {
                point2 = intersect(point0, point1);
                if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
                  point1[0] += epsilon$2;
                  point1[1] += epsilon$2;
                  v = visible(point1[0], point1[1])
                }
              }
              if (v !== v0) {
                clean = 0;
                if (v) {
                  // outside going in
                  stream.lineStart();
                  point2 = intersect(point1, point0);
                  stream.point(point2[0], point2[1])
                } else {
                  // inside going out
                  point2 = intersect(point0, point1);
                  stream.point(point2[0], point2[1]);
                  stream.lineEnd()
                }
                point0 = point2
              } else if (notHemisphere && point0 && smallRadius ^ v) {
                var t;
                // If the codes for two points are different, or are both zero,
                // and there this segment intersects with the small circle.
                if (!(c & c0) && (t = intersect(point1, point0, true))) {
                  clean = 0;
                  if (smallRadius) {
                    stream.lineStart();
                    stream.point(t[0][0], t[0][1]);
                    stream.point(t[1][0], t[1][1]);
                    stream.lineEnd()
                  } else {
                    stream.point(t[1][0], t[1][1]);
                    stream.lineEnd();
                    stream.lineStart();
                    stream.point(t[0][0], t[0][1])
                  }
                }
              }
              if (v && (!point0 || !pointEqual(point0, point1))) {
                stream.point(point1[0], point1[1])
              }
              point0 = point1, v0 = v, c0 = c
            },
            lineEnd: function () {
              if (v0)
                stream.lineEnd();
              point0 = null
            },
            // Rejoin first and last segments if there were intersections and the first
            // and last points were visible.
            clean: function () {
              return clean | (v00 && v0) << 1
            }
          }
        }
        // Intersects the great circle between a and b with the clip circle.
        function intersect(a, b, two) {
          var pa = cartesian(a), pb = cartesian(b);
          // We have two planes, n1.p = d1 and n2.p = d2.
          // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
          var n1 = [
              1,
              0,
              0
            ],
            // normal
            n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0],
            // cartesianDot(n1, n2),
            determinant = n2n2 - n1n2 * n1n2;
          // Two polar points.
          if (!determinant)
            return !two && a;
          var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
          cartesianAddInPlace(A, B);
          // Solve |p(t)|^2 = 1.
          var u = n1xn2, w = cartesianDot(A, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A, A) - 1);
          if (t2 < 0)
            return;
          var t = sqrt(t2), q = cartesianScale(u, (-w - t) / uu);
          cartesianAddInPlace(q, A);
          q = spherical(q);
          if (!two)
            return q;
          // Two intersection points.
          var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
          if (lambda1 < lambda0)
            z = lambda0, lambda0 = lambda1, lambda1 = z;
          var delta = lambda1 - lambda0, polar = abs(delta - pi$3) < epsilon$2, meridian = polar || delta < epsilon$2;
          if (!polar && phi1 < phi0)
            z = phi0, phi0 = phi1, phi1 = z;
          // Check that the first point is between a and b.
          if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
            var q1 = cartesianScale(u, (-w + t) / uu);
            cartesianAddInPlace(q1, A);
            return [
              q,
              spherical(q1)
            ]
          }
        }
        // Generates a 4-bit vector representing the location of a point relative to
        // the small circle's bounding box.
        function code(lambda, phi) {
          var r = smallRadius ? radius : pi$3 - radius, code = 0;
          if (lambda < -r)
            code |= 1;  // left
          else if (lambda > r)
            code |= 2;
          // right
          if (phi < -r)
            code |= 4;  // below
          else if (phi > r)
            code |= 8;
          // above
          return code
        }
        return clip(visible, clipLine, interpolate, smallRadius ? [
          0,
          -radius
        ] : [
          -pi$3,
          radius - pi$3
        ])
      };
      var transform = function (methods) {
        return { stream: transformer(methods) }
      };
      function transformer(methods) {
        return function (stream) {
          var s = new TransformStream;
          for (var key in methods)
            s[key] = methods[key];
          s.stream = stream;
          return s
        }
      }
      function TransformStream() {
      }
      TransformStream.prototype = {
        constructor: TransformStream,
        point: function (x, y) {
          this.stream.point(x, y)
        },
        sphere: function () {
          this.stream.sphere()
        },
        lineStart: function () {
          this.stream.lineStart()
        },
        lineEnd: function () {
          this.stream.lineEnd()
        },
        polygonStart: function () {
          this.stream.polygonStart()
        },
        polygonEnd: function () {
          this.stream.polygonEnd()
        }
      };
      function fitExtent(projection, extent, object) {
        var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], clip = projection.clipExtent && projection.clipExtent();
        projection.scale(150).translate([
          0,
          0
        ]);
        if (clip != null)
          projection.clipExtent(null);
        geoStream(object, projection.stream(boundsStream$1));
        var b = boundsStream$1.result(), k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        if (clip != null)
          projection.clipExtent(clip);
        return projection.scale(k * 150).translate([
          x,
          y
        ])
      }
      function fitSize(projection, size, object) {
        return fitExtent(projection, [
          [
            0,
            0
          ],
          size
        ], object)
      }
      var maxDepth = 16;
      var cosMinDistance = cos$1(30 * radians);
      // cos(minimum angular distance)
      var resample = function (project, delta2) {
        return +delta2 ? resample$1(project, delta2) : resampleNone(project)
      };
      function resampleNone(project) {
        return transformer({
          point: function (x, y) {
            x = project(x, y);
            this.stream.point(x[0], x[1])
          }
        })
      }
      function resample$1(project, delta2) {
        function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
          var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
          if (d2 > 4 * delta2 && depth--) {
            var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = sqrt(a * a + b * b + c * c), phi2 = asin(c /= m), lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
            if (dz * dz / d2 > delta2  // perpendicular projected distance
|| abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3  // midpoint close to an end
|| a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
              // angular distance
              resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
              stream.point(x2, y2);
              resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream)
            }
          }
        }
        return function (stream) {
          var lambda00, x00, y00, a00, b00, c00,
            // first point
            lambda0, x0, y0, a0, b0, c0;
          // previous point
          var resampleStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function () {
              stream.polygonStart();
              resampleStream.lineStart = ringStart
            },
            polygonEnd: function () {
              stream.polygonEnd();
              resampleStream.lineStart = lineStart
            }
          };
          function point(x, y) {
            x = project(x, y);
            stream.point(x[0], x[1])
          }
          function lineStart() {
            x0 = NaN;
            resampleStream.point = linePoint;
            stream.lineStart()
          }
          function linePoint(lambda, phi) {
            var c = cartesian([
                lambda,
                phi
              ]), p = project(lambda, phi);
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
            stream.point(x0, y0)
          }
          function lineEnd() {
            resampleStream.point = point;
            stream.lineEnd()
          }
          function ringStart() {
            lineStart();
            resampleStream.point = ringPoint;
            resampleStream.lineEnd = ringEnd
          }
          function ringPoint(lambda, phi) {
            linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
            resampleStream.point = linePoint
          }
          function ringEnd() {
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
            resampleStream.lineEnd = lineEnd;
            lineEnd()
          }
          return resampleStream
        }
      }
      var transformRadians = transformer({
        point: function (x, y) {
          this.stream.point(x * radians, y * radians)
        }
      });
      function projection(project) {
        return projectionMutator(function () {
          return project
        })()
      }
      function projectionMutator(projectAt) {
        var project, k = 150,
          // scale
          x = 480, y = 250,
          // translate
          dx, dy, lambda = 0, phi = 0,
          // center
          deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate,
          // rotate
          theta = null, preclip = clipAntimeridian,
          // clip angle
          x0 = null, y0, x1, y1, postclip = identity$4,
          // clip extent
          delta2 = 0.5, projectResample = resample(projectTransform, delta2),
          // precision
          cache, cacheStream;
        function projection(point) {
          point = projectRotate(point[0] * radians, point[1] * radians);
          return [
            point[0] * k + dx,
            dy - point[1] * k
          ]
        }
        function invert(point) {
          point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
          return point && [
            point[0] * degrees$1,
            point[1] * degrees$1
          ]
        }
        function projectTransform(x, y) {
          return x = project(x, y), [
            x[0] * k + dx,
            dy - x[1] * k
          ]
        }
        projection.stream = function (stream) {
          return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))))
        };
        projection.clipAngle = function (_) {
          return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1
        };
        projection.clipExtent = function (_) {
          return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
              x0,
              y0
            ],
            [
              x1,
              y1
            ]
          ]
        };
        projection.scale = function (_) {
          return arguments.length ? (k = +_, recenter()) : k
        };
        projection.translate = function (_) {
          return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
            x,
            y
          ]
        };
        projection.center = function (_) {
          return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [
            lambda * degrees$1,
            phi * degrees$1
          ]
        };
        projection.rotate = function (_) {
          return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [
            deltaLambda * degrees$1,
            deltaPhi * degrees$1,
            deltaGamma * degrees$1
          ]
        };
        projection.precision = function (_) {
          return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2)
        };
        projection.fitExtent = function (extent, object) {
          return fitExtent(projection, extent, object)
        };
        projection.fitSize = function (size, object) {
          return fitSize(projection, size, object)
        };
        function recenter() {
          projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
          var center = project(lambda, phi);
          dx = x - center[0] * k;
          dy = y + center[1] * k;
          return reset()
        }
        function reset() {
          cache = cacheStream = null;
          return projection
        }
        return function () {
          project = projectAt.apply(this, arguments);
          projection.invert = project.invert && invert;
          return recenter()
        }
      }
      function conicProjection(projectAt) {
        var phi0 = 0, phi1 = pi$3 / 3, m = projectionMutator(projectAt), p = m(phi0, phi1);
        p.parallels = function (_) {
          return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [
            phi0 * degrees$1,
            phi1 * degrees$1
          ]
        };
        return p
      }
      function cylindricalEqualAreaRaw(phi0) {
        var cosPhi0 = cos$1(phi0);
        function forward(lambda, phi) {
          return [
            lambda * cosPhi0,
            sin$1(phi) / cosPhi0
          ]
        }
        forward.invert = function (x, y) {
          return [
            x / cosPhi0,
            asin(y * cosPhi0)
          ]
        };
        return forward
      }
      function conicEqualAreaRaw(y0, y1) {
        var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;
        // Are the parallels symmetrical around the Equator?
        if (abs(n) < epsilon$2)
          return cylindricalEqualAreaRaw(y0);
        var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;
        function project(x, y) {
          var r = sqrt(c - 2 * n * sin$1(y)) / n;
          return [
            r * sin$1(x *= n),
            r0 - r * cos$1(x)
          ]
        }
        project.invert = function (x, y) {
          var r0y = r0 - y;
          return [
            atan2(x, abs(r0y)) / n * sign(r0y),
            asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))
          ]
        };
        return project
      }
      var conicEqualArea = function () {
        return conicProjection(conicEqualAreaRaw).scale(155.424).center([
          0,
          33.6442
        ])
      };
      var albers = function () {
        return conicEqualArea().parallels([
          29.5,
          45.5
        ]).scale(1070).translate([
          480,
          250
        ]).rotate([
          96,
          0
        ]).center([
          -0.6,
          38.7
        ])
      };
      // The projections must have mutually exclusive clip regions on the sphere,
      // as this will avoid emitting interleaving lines and polygons.
      function multiplex(streams) {
        var n = streams.length;
        return {
          point: function (x, y) {
            var i = -1;
            while (++i < n)
              streams[i].point(x, y)
          },
          sphere: function () {
            var i = -1;
            while (++i < n)
              streams[i].sphere()
          },
          lineStart: function () {
            var i = -1;
            while (++i < n)
              streams[i].lineStart()
          },
          lineEnd: function () {
            var i = -1;
            while (++i < n)
              streams[i].lineEnd()
          },
          polygonStart: function () {
            var i = -1;
            while (++i < n)
              streams[i].polygonStart()
          },
          polygonEnd: function () {
            var i = -1;
            while (++i < n)
              streams[i].polygonEnd()
          }
        }
      }
      // A composite projection for the United States, configured by default for
      // 960×500. The projection also works quite well at 960×600 if you change the
      // scale to 1285 and adjust the translate accordingly. The set of standard
      // parallels for each region comes from USGS, which is published here:
      // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
      var albersUsa = function () {
        var cache, cacheStream, lower48 = albers(), lower48Point, alaska = conicEqualArea().rotate([
            154,
            0
          ]).center([
            -2,
            58.5
          ]).parallels([
            55,
            65
          ]), alaskaPoint,
          // EPSG:3338
          hawaii = conicEqualArea().rotate([
            157,
            0
          ]).center([
            -3,
            19.9
          ]).parallels([
            8,
            18
          ]), hawaiiPoint,
          // ESRI:102007
          point, pointStream = {
            point: function (x, y) {
              point = [
                x,
                y
              ]
            }
          };
        function albersUsa(coordinates) {
          var x = coordinates[0], y = coordinates[1];
          return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point)
        }
        albersUsa.invert = function (coordinates) {
          var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
          return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates)
        };
        albersUsa.stream = function (stream) {
          return cache && cacheStream === stream ? cache : cache = multiplex([
            lower48.stream(cacheStream = stream),
            alaska.stream(stream),
            hawaii.stream(stream)
          ])
        };
        albersUsa.precision = function (_) {
          if (!arguments.length)
            return lower48.precision();
          lower48.precision(_), alaska.precision(_), hawaii.precision(_);
          return reset()
        };
        albersUsa.scale = function (_) {
          if (!arguments.length)
            return lower48.scale();
          lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
          return albersUsa.translate(lower48.translate())
        };
        albersUsa.translate = function (_) {
          if (!arguments.length)
            return lower48.translate();
          var k = lower48.scale(), x = +_[0], y = +_[1];
          lower48Point = lower48.translate(_).clipExtent([
            [
              x - 0.455 * k,
              y - 0.238 * k
            ],
            [
              x + 0.455 * k,
              y + 0.238 * k
            ]
          ]).stream(pointStream);
          alaskaPoint = alaska.translate([
            x - 0.307 * k,
            y + 0.201 * k
          ]).clipExtent([
            [
              x - 0.425 * k + epsilon$2,
              y + 0.12 * k + epsilon$2
            ],
            [
              x - 0.214 * k - epsilon$2,
              y + 0.234 * k - epsilon$2
            ]
          ]).stream(pointStream);
          hawaiiPoint = hawaii.translate([
            x - 0.205 * k,
            y + 0.212 * k
          ]).clipExtent([
            [
              x - 0.214 * k + epsilon$2,
              y + 0.166 * k + epsilon$2
            ],
            [
              x - 0.115 * k - epsilon$2,
              y + 0.234 * k - epsilon$2
            ]
          ]).stream(pointStream);
          return reset()
        };
        albersUsa.fitExtent = function (extent, object) {
          return fitExtent(albersUsa, extent, object)
        };
        albersUsa.fitSize = function (size, object) {
          return fitSize(albersUsa, size, object)
        };
        function reset() {
          cache = cacheStream = null;
          return albersUsa
        }
        return albersUsa.scale(1070)
      };
      function azimuthalRaw(scale) {
        return function (x, y) {
          var cx = cos$1(x), cy = cos$1(y), k = scale(cx * cy);
          return [
            k * cy * sin$1(x),
            k * sin$1(y)
          ]
        }
      }
      function azimuthalInvert(angle) {
        return function (x, y) {
          var z = sqrt(x * x + y * y), c = angle(z), sc = sin$1(c), cc = cos$1(c);
          return [
            atan2(x * sc, z * cc),
            asin(z && y * sc / z)
          ]
        }
      }
      var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {
        return sqrt(2 / (1 + cxcy))
      });
      azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {
        return 2 * asin(z / 2)
      });
      var azimuthalEqualArea = function () {
        return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 0.001)
      };
      var azimuthalEquidistantRaw = azimuthalRaw(function (c) {
        return (c = acos(c)) && c / sin$1(c)
      });
      azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
        return z
      });
      var azimuthalEquidistant = function () {
        return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 0.001)
      };
      function mercatorRaw(lambda, phi) {
        return [
          lambda,
          log(tan((halfPi$2 + phi) / 2))
        ]
      }
      mercatorRaw.invert = function (x, y) {
        return [
          x,
          2 * atan(exp(y)) - halfPi$2
        ]
      };
      var mercator = function () {
        return mercatorProjection(mercatorRaw).scale(961 / tau$3)
      };
      function mercatorProjection(project) {
        var m = projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
        m.scale = function (_) {
          return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale()
        };
        m.translate = function (_) {
          return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate()
        };
        m.clipExtent = function (_) {
          if (!arguments.length)
            return clipAuto ? null : clipExtent();
          if (clipAuto = _ == null) {
            var k = pi$3 * scale(), t = translate();
            _ = [
              [
                t[0] - k,
                t[1] - k
              ],
              [
                t[0] + k,
                t[1] + k
              ]
            ]
          }
          clipExtent(_);
          return m
        };
        return m.clipExtent(null)
      }
      function tany(y) {
        return tan((halfPi$2 + y) / 2)
      }
      function conicConformalRaw(y0, y1) {
        var cy0 = cos$1(y0), n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)), f = cy0 * pow(tany(y0), n) / n;
        if (!n)
          return mercatorRaw;
        function project(x, y) {
          if (f > 0) {
            if (y < -halfPi$2 + epsilon$2)
              y = -halfPi$2 + epsilon$2
          } else {
            if (y > halfPi$2 - epsilon$2)
              y = halfPi$2 - epsilon$2
          }
          var r = f / pow(tany(y), n);
          return [
            r * sin$1(n * x),
            f - r * cos$1(n * x)
          ]
        }
        project.invert = function (x, y) {
          var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
          return [
            atan2(x, abs(fy)) / n * sign(fy),
            2 * atan(pow(f / r, 1 / n)) - halfPi$2
          ]
        };
        return project
      }
      var conicConformal = function () {
        return conicProjection(conicConformalRaw).scale(109.5).parallels([
          30,
          30
        ])
      };
      function equirectangularRaw(lambda, phi) {
        return [
          lambda,
          phi
        ]
      }
      equirectangularRaw.invert = equirectangularRaw;
      var equirectangular = function () {
        return projection(equirectangularRaw).scale(152.63)
      };
      function conicEquidistantRaw(y0, y1) {
        var cy0 = cos$1(y0), n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0), g = cy0 / n + y0;
        if (abs(n) < epsilon$2)
          return equirectangularRaw;
        function project(x, y) {
          var gy = g - y, nx = n * x;
          return [
            gy * sin$1(nx),
            g - gy * cos$1(nx)
          ]
        }
        project.invert = function (x, y) {
          var gy = g - y;
          return [
            atan2(x, abs(gy)) / n * sign(gy),
            g - sign(n) * sqrt(x * x + gy * gy)
          ]
        };
        return project
      }
      var conicEquidistant = function () {
        return conicProjection(conicEquidistantRaw).scale(131.154).center([
          0,
          13.9389
        ])
      };
      function gnomonicRaw(x, y) {
        var cy = cos$1(y), k = cos$1(x) * cy;
        return [
          cy * sin$1(x) / k,
          sin$1(y) / k
        ]
      }
      gnomonicRaw.invert = azimuthalInvert(atan);
      var gnomonic = function () {
        return projection(gnomonicRaw).scale(144.049).clipAngle(60)
      };
      function scaleTranslate(kx, ky, tx, ty) {
        return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({
          point: function (x, y) {
            this.stream.point(x * kx + tx, y * ky + ty)
          }
        })
      }
      var identity$5 = function () {
        var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$4,
          // scale, translate and reflect
          x0 = null, y0, x1, y1, clip = identity$4,
          // clip extent
          cache, cacheStream, projection;
        function reset() {
          cache = cacheStream = null;
          return projection
        }
        return projection = {
          stream: function (stream) {
            return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream))
          },
          clipExtent: function (_) {
            return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
              [
                x0,
                y0
              ],
              [
                x1,
                y1
              ]
            ]
          },
          scale: function (_) {
            return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k
          },
          translate: function (_) {
            return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [
              tx,
              ty
            ]
          },
          reflectX: function (_) {
            return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0
          },
          reflectY: function (_) {
            return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0
          },
          fitExtent: function (extent, object) {
            return fitExtent(projection, extent, object)
          },
          fitSize: function (size, object) {
            return fitSize(projection, size, object)
          }
        }
      };
      function orthographicRaw(x, y) {
        return [
          cos$1(y) * sin$1(x),
          sin$1(y)
        ]
      }
      orthographicRaw.invert = azimuthalInvert(asin);
      var orthographic = function () {
        return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$2)
      };
      function stereographicRaw(x, y) {
        var cy = cos$1(y), k = 1 + cos$1(x) * cy;
        return [
          cy * sin$1(x) / k,
          sin$1(y) / k
        ]
      }
      stereographicRaw.invert = azimuthalInvert(function (z) {
        return 2 * atan(z)
      });
      var stereographic = function () {
        return projection(stereographicRaw).scale(250).clipAngle(142)
      };
      function transverseMercatorRaw(lambda, phi) {
        return [
          log(tan((halfPi$2 + phi) / 2)),
          -lambda
        ]
      }
      transverseMercatorRaw.invert = function (x, y) {
        return [
          -y,
          2 * atan(exp(x)) - halfPi$2
        ]
      };
      var transverseMercator = function () {
        var m = mercatorProjection(transverseMercatorRaw), center = m.center, rotate = m.rotate;
        m.center = function (_) {
          return arguments.length ? center([
            -_[1],
            _[0]
          ]) : (_ = center(), [
            _[1],
            -_[0]
          ])
        };
        m.rotate = function (_) {
          return arguments.length ? rotate([
            _[0],
            _[1],
            _.length > 2 ? _[2] + 90 : 90
          ]) : (_ = rotate(), [
            _[0],
            _[1],
            _[2] - 90
          ])
        };
        return rotate([
          0,
          0,
          90
        ]).scale(159.155)
      };
      function defaultSeparation(a, b) {
        return a.parent === b.parent ? 1 : 2
      }
      function meanX(children) {
        return children.reduce(meanXReduce, 0) / children.length
      }
      function meanXReduce(x, c) {
        return x + c.x
      }
      function maxY(children) {
        return 1 + children.reduce(maxYReduce, 0)
      }
      function maxYReduce(y, c) {
        return Math.max(y, c.y)
      }
      function leafLeft(node) {
        var children;
        while (children = node.children)
          node = children[0];
        return node
      }
      function leafRight(node) {
        var children;
        while (children = node.children)
          node = children[children.length - 1];
        return node
      }
      var cluster = function () {
        var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
        function cluster(root) {
          var previousNode, x = 0;
          // First walk, computing the initial x & y values.
          root.eachAfter(function (node) {
            var children = node.children;
            if (children) {
              node.x = meanX(children);
              node.y = maxY(children)
            } else {
              node.x = previousNode ? x += separation(node, previousNode) : 0;
              node.y = 0;
              previousNode = node
            }
          });
          var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
          // Second walk, normalizing x & y to the desired size.
          return root.eachAfter(nodeSize ? function (node) {
            node.x = (node.x - root.x) * dx;
            node.y = (root.y - node.y) * dy
          } : function (node) {
            node.x = (node.x - x0) / (x1 - x0) * dx;
            node.y = (1 - (root.y ? node.y / root.y : 1)) * dy
          })
        }
        cluster.separation = function (x) {
          return arguments.length ? (separation = x, cluster) : separation
        };
        cluster.size = function (x) {
          return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
            dx,
            dy
          ]
        };
        cluster.nodeSize = function (x) {
          return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
            dx,
            dy
          ] : null
        };
        return cluster
      };
      function count(node) {
        var sum = 0, children = node.children, i = children && children.length;
        if (!i)
          sum = 1;
        else
          while (--i >= 0)
            sum += children[i].value;
        node.value = sum
      }
      var node_count = function () {
        return this.eachAfter(count)
      };
      var node_each = function (callback) {
        var node = this, current, next = [node], children, i, n;
        do {
          current = next.reverse(), next = [];
          while (node = current.pop()) {
            callback(node), children = node.children;
            if (children)
              for (i = 0, n = children.length; i < n; ++i) {
                next.push(children[i])
              }
          }
        } while (next.length);
        return this
      };
      var node_eachBefore = function (callback) {
        var node = this, nodes = [node], children, i;
        while (node = nodes.pop()) {
          callback(node), children = node.children;
          if (children)
            for (i = children.length - 1; i >= 0; --i) {
              nodes.push(children[i])
            }
        }
        return this
      };
      var node_eachAfter = function (callback) {
        var node = this, nodes = [node], next = [], children, i, n;
        while (node = nodes.pop()) {
          next.push(node), children = node.children;
          if (children)
            for (i = 0, n = children.length; i < n; ++i) {
              nodes.push(children[i])
            }
        }
        while (node = next.pop()) {
          callback(node)
        }
        return this
      };
      var node_sum = function (value) {
        return this.eachAfter(function (node) {
          var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
          while (--i >= 0)
            sum += children[i].value;
          node.value = sum
        })
      };
      var node_sort = function (compare) {
        return this.eachBefore(function (node) {
          if (node.children) {
            node.children.sort(compare)
          }
        })
      };
      var node_path = function (end) {
        var start = this, ancestor = leastCommonAncestor(start, end), nodes = [start];
        while (start !== ancestor) {
          start = start.parent;
          nodes.push(start)
        }
        var k = nodes.length;
        while (end !== ancestor) {
          nodes.splice(k, 0, end);
          end = end.parent
        }
        return nodes
      };
      function leastCommonAncestor(a, b) {
        if (a === b)
          return a;
        var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
        a = aNodes.pop();
        b = bNodes.pop();
        while (a === b) {
          c = a;
          a = aNodes.pop();
          b = bNodes.pop()
        }
        return c
      }
      var node_ancestors = function () {
        var node = this, nodes = [node];
        while (node = node.parent) {
          nodes.push(node)
        }
        return nodes
      };
      var node_descendants = function () {
        var nodes = [];
        this.each(function (node) {
          nodes.push(node)
        });
        return nodes
      };
      var node_leaves = function () {
        var leaves = [];
        this.eachBefore(function (node) {
          if (!node.children) {
            leaves.push(node)
          }
        });
        return leaves
      };
      var node_links = function () {
        var root = this, links = [];
        root.each(function (node) {
          if (node !== root) {
            // Don’t include the root’s parent, if any.
            links.push({
              source: node.parent,
              target: node
            })
          }
        });
        return links
      };
      function hierarchy(data, children) {
        var root = new Node(data), valued = +data.value && (root.value = data.value), node, nodes = [root], child, childs, i, n;
        if (children == null)
          children = defaultChildren;
        while (node = nodes.pop()) {
          if (valued)
            node.value = +node.data.value;
          if ((childs = children(node.data)) && (n = childs.length)) {
            node.children = new Array(n);
            for (i = n - 1; i >= 0; --i) {
              nodes.push(child = node.children[i] = new Node(childs[i]));
              child.parent = node;
              child.depth = node.depth + 1
            }
          }
        }
        return root.eachBefore(computeHeight)
      }
      function node_copy() {
        return hierarchy(this).eachBefore(copyData)
      }
      function defaultChildren(d) {
        return d.children
      }
      function copyData(node) {
        node.data = node.data.data
      }
      function computeHeight(node) {
        var height = 0;
        do
          node.height = height;
        while ((node = node.parent) && node.height < ++height)
      }
      function Node(data) {
        this.data = data;
        this.depth = this.height = 0;
        this.parent = null
      }
      Node.prototype = hierarchy.prototype = {
        constructor: Node,
        count: node_count,
        each: node_each,
        eachAfter: node_eachAfter,
        eachBefore: node_eachBefore,
        sum: node_sum,
        sort: node_sort,
        path: node_path,
        ancestors: node_ancestors,
        descendants: node_descendants,
        leaves: node_leaves,
        links: node_links,
        copy: node_copy
      };
      function Node$2(value) {
        this._ = value;
        this.next = null
      }
      var shuffle$1 = function (array) {
        var i, n = (array = array.slice()).length, head = null, node = head;
        while (n) {
          var next = new Node$2(array[n - 1]);
          if (node)
            node = node.next = next;
          else
            node = head = next;
          array[i] = array[--n]
        }
        return {
          head: head,
          tail: node
        }
      };
      var enclose = function (circles) {
        return encloseN(shuffle$1(circles), [])
      };
      function encloses(a, b) {
        var dx = b.x - a.x, dy = b.y - a.y, dr = a.r - b.r;
        return dr * dr + 0.000001 > dx * dx + dy * dy
      }
      // Returns the smallest circle that contains circles L and intersects circles B.
      function encloseN(L, B) {
        var circle, l0 = null, l1 = L.head, l2, p1;
        switch (B.length) {
        case 1:
          circle = enclose1(B[0]);
          break;
        case 2:
          circle = enclose2(B[0], B[1]);
          break;
        case 3:
          circle = enclose3(B[0], B[1], B[2]);
          break
        }
        while (l1) {
          p1 = l1._, l2 = l1.next;
          if (!circle || !encloses(circle, p1)) {
            // Temporarily truncate L before l1.
            if (l0)
              L.tail = l0, l0.next = null;
            else
              L.head = L.tail = null;
            B.push(p1);
            circle = encloseN(L, B);
            // Note: reorders L!
            B.pop();
            // Move l1 to the front of L and reconnect the truncated list L.
            if (L.head)
              l1.next = L.head, L.head = l1;
            else
              l1.next = null, L.head = L.tail = l1;
            l0 = L.tail, l0.next = l2
          } else {
            l0 = l1
          }
          l1 = l2
        }
        L.tail = l0;
        return circle
      }
      function enclose1(a) {
        return {
          x: a.x,
          y: a.y,
          r: a.r
        }
      }
      function enclose2(a, b) {
        var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
        return {
          x: (x1 + x2 + x21 / l * r21) / 2,
          y: (y1 + y2 + y21 / l * r21) / 2,
          r: (l + r1 + r2) / 2
        }
      }
      function enclose3(a, b, c) {
        var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = 2 * (x1 - x2), b2 = 2 * (y1 - y2), c2 = 2 * (r2 - r1), d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2, a3 = 2 * (x1 - x3), b3 = 2 * (y1 - y3), c3 = 2 * (r3 - r1), d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d3 - b3 * d2) / ab - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d3) / ab - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (xa * xb + ya * yb + r1), C = xa * xa + ya * ya - r1 * r1, r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
        return {
          x: xa + xb * r + x1,
          y: ya + yb * r + y1,
          r: r
        }
      }
      function place(a, b, c) {
        var ax = a.x, ay = a.y, da = b.r + c.r, db = a.r + c.r, dx = b.x - ax, dy = b.y - ay, dc = dx * dx + dy * dy;
        if (dc) {
          var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
          c.x = ax + x * dx + y * dy;
          c.y = ay + x * dy - y * dx
        } else {
          c.x = ax + db;
          c.y = ay
        }
      }
      function intersects(a, b) {
        var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
        return dr * dr - 0.000001 > dx * dx + dy * dy
      }
      function distance1(a, b) {
        var l = a._.r;
        while (a !== b)
          l += 2 * (a = a.next)._.r;
        return l - b._.r
      }
      function distance2(node, x, y) {
        var a = node._, b = node.next._, ab = a.r + b.r, dx = (a.x * b.r + b.x * a.r) / ab - x, dy = (a.y * b.r + b.y * a.r) / ab - y;
        return dx * dx + dy * dy
      }
      function Node$1(circle) {
        this._ = circle;
        this.next = null;
        this.previous = null
      }
      function packEnclose(circles) {
        if (!(n = circles.length))
          return 0;
        var a, b, c, n;
        // Place the first circle.
        a = circles[0], a.x = 0, a.y = 0;
        if (!(n > 1))
          return a.r;
        // Place the second circle.
        b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
        if (!(n > 2))
          return a.r + b.r;
        // Place the third circle.
        place(b, a, c = circles[2]);
        // Initialize the weighted centroid.
        var aa = a.r * a.r, ba = b.r * b.r, ca = c.r * c.r, oa = aa + ba + ca, ox = aa * a.x + ba * b.x + ca * c.x, oy = aa * a.y + ba * b.y + ca * c.y, cx, cy, i, j, k, sj, sk;
        // Initialize the front-chain using the first three circles a, b and c.
        a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
        a.next = c.previous = b;
        b.next = a.previous = c;
        c.next = b.previous = a;
        // Attempt to place each remaining circle…
        pack:
          for (i = 3; i < n; ++i) {
            place(a._, b._, c = circles[i]), c = new Node$1(c);
            // Find the closest intersecting circle on the front-chain, if any.
            // “Closeness” is determined by linear distance along the front-chain.
            // “Ahead” or “behind” is likewise determined by linear distance.
            j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
            do {
              if (sj <= sk) {
                if (intersects(j._, c._)) {
                  if (sj + a._.r + b._.r > distance1(j, b))
                    a = j;
                  else
                    b = j;
                  a.next = b, b.previous = a, --i;
                  continue pack
                }
                sj += j._.r, j = j.next
              } else {
                if (intersects(k._, c._)) {
                  if (distance1(a, k) > sk + a._.r + b._.r)
                    a = k;
                  else
                    b = k;
                  a.next = b, b.previous = a, --i;
                  continue pack
                }
                sk += k._.r, k = k.previous
              }
            } while (j !== k.next);
            // Success! Insert the new circle c between a and b.
            c.previous = a, c.next = b, a.next = b.previous = b = c;
            // Update the weighted centroid.
            oa += ca = c._.r * c._.r;
            ox += ca * c._.x;
            oy += ca * c._.y;
            // Compute the new closest circle pair to the centroid.
            aa = distance2(a, cx = ox / oa, cy = oy / oa);
            while ((c = c.next) !== b) {
              if ((ca = distance2(c, cx, cy)) < aa) {
                a = c, aa = ca
              }
            }
            b = a.next
          }
        // Compute the enclosing circle of the front chain.
        a = [b._], c = b;
        while ((c = c.next) !== b)
          a.push(c._);
        c = enclose(a);
        // Translate the circles to put the enclosing circle around the origin.
        for (i = 0; i < n; ++i)
          a = circles[i], a.x -= c.x, a.y -= c.y;
        return c.r
      }
      var siblings = function (circles) {
        packEnclose(circles);
        return circles
      };
      function optional(f) {
        return f == null ? null : required(f)
      }
      function required(f) {
        if (typeof f !== 'function')
          throw new Error;
        return f
      }
      function constantZero() {
        return 0
      }
      var constant$8 = function (x) {
        return function () {
          return x
        }
      };
      function defaultRadius$1(d) {
        return Math.sqrt(d.value)
      }
      var index$2 = function () {
        var radius = null, dx = 1, dy = 1, padding = constantZero;
        function pack(root) {
          root.x = dx / 2, root.y = dy / 2;
          if (radius) {
            root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1))
          } else {
            root.eachBefore(radiusLeaf(defaultRadius$1)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)))
          }
          return root
        }
        pack.radius = function (x) {
          return arguments.length ? (radius = optional(x), pack) : radius
        };
        pack.size = function (x) {
          return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [
            dx,
            dy
          ]
        };
        pack.padding = function (x) {
          return arguments.length ? (padding = typeof x === 'function' ? x : constant$8(+x), pack) : padding
        };
        return pack
      };
      function radiusLeaf(radius) {
        return function (node) {
          if (!node.children) {
            node.r = Math.max(0, +radius(node) || 0)
          }
        }
      }
      function packChildren(padding, k) {
        return function (node) {
          if (children = node.children) {
            var children, i, n = children.length, r = padding(node) * k || 0, e;
            if (r)
              for (i = 0; i < n; ++i)
                children[i].r += r;
            e = packEnclose(children);
            if (r)
              for (i = 0; i < n; ++i)
                children[i].r -= r;
            node.r = e + r
          }
        }
      }
      function translateChild(k) {
        return function (node) {
          var parent = node.parent;
          node.r *= k;
          if (parent) {
            node.x = parent.x + k * node.x;
            node.y = parent.y + k * node.y
          }
        }
      }
      var roundNode = function (node) {
        node.x0 = Math.round(node.x0);
        node.y0 = Math.round(node.y0);
        node.x1 = Math.round(node.x1);
        node.y1 = Math.round(node.y1)
      };
      var treemapDice = function (parent, x0, y0, x1, y1) {
        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
        while (++i < n) {
          node = nodes[i], node.y0 = y0, node.y1 = y1;
          node.x0 = x0, node.x1 = x0 += node.value * k
        }
      };
      var partition = function () {
        var dx = 1, dy = 1, padding = 0, round = false;
        function partition(root) {
          var n = root.height + 1;
          root.x0 = root.y0 = padding;
          root.x1 = dx;
          root.y1 = dy / n;
          root.eachBefore(positionNode(dy, n));
          if (round)
            root.eachBefore(roundNode);
          return root
        }
        function positionNode(dy, n) {
          return function (node) {
            if (node.children) {
              treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n)
            }
            var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
            if (x1 < x0)
              x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0)
              y0 = y1 = (y0 + y1) / 2;
            node.x0 = x0;
            node.y0 = y0;
            node.x1 = x1;
            node.y1 = y1
          }
        }
        partition.round = function (x) {
          return arguments.length ? (round = !!x, partition) : round
        };
        partition.size = function (x) {
          return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [
            dx,
            dy
          ]
        };
        partition.padding = function (x) {
          return arguments.length ? (padding = +x, partition) : padding
        };
        return partition
      };
      var keyPrefix$1 = '$';
      var preroot = { depth: -1 };
      var ambiguous = {};
      function defaultId(d) {
        return d.id
      }
      function defaultParentId(d) {
        return d.parentId
      }
      var stratify = function () {
        var id = defaultId, parentId = defaultParentId;
        function stratify(data) {
          var d, i, n = data.length, root, parent, node, nodes = new Array(n), nodeId, nodeKey, nodeByKey = {};
          for (i = 0; i < n; ++i) {
            d = data[i], node = nodes[i] = new Node(d);
            if ((nodeId = id(d, i, data)) != null && (nodeId += '')) {
              nodeKey = keyPrefix$1 + (node.id = nodeId);
              nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node
            }
          }
          for (i = 0; i < n; ++i) {
            node = nodes[i], nodeId = parentId(data[i], i, data);
            if (nodeId == null || !(nodeId += '')) {
              if (root)
                throw new Error('multiple roots');
              root = node
            } else {
              parent = nodeByKey[keyPrefix$1 + nodeId];
              if (!parent)
                throw new Error('missing: ' + nodeId);
              if (parent === ambiguous)
                throw new Error('ambiguous: ' + nodeId);
              if (parent.children)
                parent.children.push(node);
              else
                parent.children = [node];
              node.parent = parent
            }
          }
          if (!root)
            throw new Error('no root');
          root.parent = preroot;
          root.eachBefore(function (node) {
            node.depth = node.parent.depth + 1;
            --n
          }).eachBefore(computeHeight);
          root.parent = null;
          if (n > 0)
            throw new Error('cycle');
          return root
        }
        stratify.id = function (x) {
          return arguments.length ? (id = required(x), stratify) : id
        };
        stratify.parentId = function (x) {
          return arguments.length ? (parentId = required(x), stratify) : parentId
        };
        return stratify
      };
      function defaultSeparation$1(a, b) {
        return a.parent === b.parent ? 1 : 2
      }
      // function radialSeparation(a, b) {
      //   return (a.parent === b.parent ? 1 : 2) / a.depth;
      // }
      // This function is used to traverse the left contour of a subtree (or
      // subforest). It returns the successor of v on this contour. This successor is
      // either given by the leftmost child of v or by the thread of v. The function
      // returns null if and only if v is on the highest level of its subtree.
      function nextLeft(v) {
        var children = v.children;
        return children ? children[0] : v.t
      }
      // This function works analogously to nextLeft.
      function nextRight(v) {
        var children = v.children;
        return children ? children[children.length - 1] : v.t
      }
      // Shifts the current subtree rooted at w+. This is done by increasing
      // prelim(w+) and mod(w+) by shift.
      function moveSubtree(wm, wp, shift) {
        var change = shift / (wp.i - wm.i);
        wp.c -= change;
        wp.s += shift;
        wm.c += change;
        wp.z += shift;
        wp.m += shift
      }
      // All other shifts, applied to the smaller subtrees between w- and w+, are
      // performed by this function. To prepare the shifts, we have to adjust
      // change(w+), shift(w+), and change(w-).
      function executeShifts(v) {
        var shift = 0, change = 0, children = v.children, i = children.length, w;
        while (--i >= 0) {
          w = children[i];
          w.z += shift;
          w.m += shift;
          shift += w.s + (change += w.c)
        }
      }
      // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
      // returns the specified (default) ancestor.
      function nextAncestor(vim, v, ancestor) {
        return vim.a.parent === v.parent ? vim.a : ancestor
      }
      function TreeNode(node, i) {
        this._ = node;
        this.parent = null;
        this.children = null;
        this.A = null;
        // default ancestor
        this.a = this;
        // ancestor
        this.z = 0;
        // prelim
        this.m = 0;
        // mod
        this.c = 0;
        // change
        this.s = 0;
        // shift
        this.t = null;
        // thread
        this.i = i  // number
      }
      TreeNode.prototype = Object.create(Node.prototype);
      function treeRoot(root) {
        var tree = new TreeNode(root, 0), node, nodes = [tree], child, children, i, n;
        while (node = nodes.pop()) {
          if (children = node._.children) {
            node.children = new Array(n = children.length);
            for (i = n - 1; i >= 0; --i) {
              nodes.push(child = node.children[i] = new TreeNode(children[i], i));
              child.parent = node
            }
          }
        }
        (tree.parent = new TreeNode(null, 0)).children = [tree];
        return tree
      }
      // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
      var tree = function () {
        var separation = defaultSeparation$1, dx = 1, dy = 1, nodeSize = null;
        function tree(root) {
          var t = treeRoot(root);
          // Compute the layout using Buchheim et al.’s algorithm.
          t.eachAfter(firstWalk), t.parent.m = -t.z;
          t.eachBefore(secondWalk);
          // If a fixed node size is specified, scale x and y.
          if (nodeSize)
            root.eachBefore(sizeNode);  // If a fixed tree size is specified, scale x and y based on the extent.
                                        // Compute the left-most, right-most, and depth-most nodes for extents.
          else {
            var left = root, right = root, bottom = root;
            root.eachBefore(function (node) {
              if (node.x < left.x)
                left = node;
              if (node.x > right.x)
                right = node;
              if (node.depth > bottom.depth)
                bottom = node
            });
            var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
            root.eachBefore(function (node) {
              node.x = (node.x + tx) * kx;
              node.y = node.depth * ky
            })
          }
          return root
        }
        // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
        // applied recursively to the children of v, as well as the function
        // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
        // node v is placed to the midpoint of its outermost children.
        function firstWalk(v) {
          var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
          if (children) {
            executeShifts(v);
            var midpoint = (children[0].z + children[children.length - 1].z) / 2;
            if (w) {
              v.z = w.z + separation(v._, w._);
              v.m = v.z - midpoint
            } else {
              v.z = midpoint
            }
          } else if (w) {
            v.z = w.z + separation(v._, w._)
          }
          v.parent.A = apportion(v, w, v.parent.A || siblings[0])
        }
        // Computes all real x-coordinates by summing up the modifiers recursively.
        function secondWalk(v) {
          v._.x = v.z + v.parent.m;
          v.m += v.parent.m
        }
        // The core of the algorithm. Here, a new subtree is combined with the
        // previous subtrees. Threads are used to traverse the inside and outside
        // contours of the left and right subtree up to the highest common level. The
        // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
        // superscript o means outside and i means inside, the subscript - means left
        // subtree and + means right subtree. For summing up the modifiers along the
        // contour, we use respective variables si+, si-, so-, and so+. Whenever two
        // nodes of the inside contours conflict, we compute the left one of the
        // greatest uncommon ancestors using the function ANCESTOR and call MOVE
        // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
        // Finally, we add a new thread (if necessary).
        function apportion(v, w, ancestor) {
          if (w) {
            var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
            while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
              vom = nextLeft(vom);
              vop = nextRight(vop);
              vop.a = v;
              shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
              if (shift > 0) {
                moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                sip += shift;
                sop += shift
              }
              sim += vim.m;
              sip += vip.m;
              som += vom.m;
              sop += vop.m
            }
            if (vim && !nextRight(vop)) {
              vop.t = vim;
              vop.m += sim - sop
            }
            if (vip && !nextLeft(vom)) {
              vom.t = vip;
              vom.m += sip - som;
              ancestor = v
            }
          }
          return ancestor
        }
        function sizeNode(node) {
          node.x *= dx;
          node.y = node.depth * dy
        }
        tree.separation = function (x) {
          return arguments.length ? (separation = x, tree) : separation
        };
        tree.size = function (x) {
          return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [
            dx,
            dy
          ]
        };
        tree.nodeSize = function (x) {
          return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [
            dx,
            dy
          ] : null
        };
        return tree
      };
      var treemapSlice = function (parent, x0, y0, x1, y1) {
        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
        while (++i < n) {
          node = nodes[i], node.x0 = x0, node.x1 = x1;
          node.y0 = y0, node.y1 = y0 += node.value * k
        }
      };
      var phi = (1 + Math.sqrt(5)) / 2;
      function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
        var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
        while (i0 < n) {
          dx = x1 - x0, dy = y1 - y0;
          // Find the next non-empty node.
          do
            sumValue = nodes[i1++].value;
          while (!sumValue && i1 < n);
          minValue = maxValue = sumValue;
          alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
          beta = sumValue * sumValue * alpha;
          minRatio = Math.max(maxValue / beta, beta / minValue);
          // Keep adding nodes while the aspect ratio maintains or improves.
          for (; i1 < n; ++i1) {
            sumValue += nodeValue = nodes[i1].value;
            if (nodeValue < minValue)
              minValue = nodeValue;
            if (nodeValue > maxValue)
              maxValue = nodeValue;
            beta = sumValue * sumValue * alpha;
            newRatio = Math.max(maxValue / beta, beta / minValue);
            if (newRatio > minRatio) {
              sumValue -= nodeValue;
              break
            }
            minRatio = newRatio
          }
          // Position and record the row orientation.
          rows.push(row = {
            value: sumValue,
            dice: dx < dy,
            children: nodes.slice(i0, i1)
          });
          if (row.dice)
            treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
          else
            treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
          value -= sumValue, i0 = i1
        }
        return rows
      }
      var squarify = function custom(ratio) {
        function squarify(parent, x0, y0, x1, y1) {
          squarifyRatio(ratio, parent, x0, y0, x1, y1)
        }
        squarify.ratio = function (x) {
          return custom((x = +x) > 1 ? x : 1)
        };
        return squarify
      }(phi);
      var index$3 = function () {
        var tile = squarify, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
        function treemap(root) {
          root.x0 = root.y0 = 0;
          root.x1 = dx;
          root.y1 = dy;
          root.eachBefore(positionNode);
          paddingStack = [0];
          if (round)
            root.eachBefore(roundNode);
          return root
        }
        function positionNode(node) {
          var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
          if (x1 < x0)
            x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0)
            y0 = y1 = (y0 + y1) / 2;
          node.x0 = x0;
          node.y0 = y0;
          node.x1 = x1;
          node.y1 = y1;
          if (node.children) {
            p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
            x0 += paddingLeft(node) - p;
            y0 += paddingTop(node) - p;
            x1 -= paddingRight(node) - p;
            y1 -= paddingBottom(node) - p;
            if (x1 < x0)
              x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0)
              y0 = y1 = (y0 + y1) / 2;
            tile(node, x0, y0, x1, y1)
          }
        }
        treemap.round = function (x) {
          return arguments.length ? (round = !!x, treemap) : round
        };
        treemap.size = function (x) {
          return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [
            dx,
            dy
          ]
        };
        treemap.tile = function (x) {
          return arguments.length ? (tile = required(x), treemap) : tile
        };
        treemap.padding = function (x) {
          return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner()
        };
        treemap.paddingInner = function (x) {
          return arguments.length ? (paddingInner = typeof x === 'function' ? x : constant$8(+x), treemap) : paddingInner
        };
        treemap.paddingOuter = function (x) {
          return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop()
        };
        treemap.paddingTop = function (x) {
          return arguments.length ? (paddingTop = typeof x === 'function' ? x : constant$8(+x), treemap) : paddingTop
        };
        treemap.paddingRight = function (x) {
          return arguments.length ? (paddingRight = typeof x === 'function' ? x : constant$8(+x), treemap) : paddingRight
        };
        treemap.paddingBottom = function (x) {
          return arguments.length ? (paddingBottom = typeof x === 'function' ? x : constant$8(+x), treemap) : paddingBottom
        };
        treemap.paddingLeft = function (x) {
          return arguments.length ? (paddingLeft = typeof x === 'function' ? x : constant$8(+x), treemap) : paddingLeft
        };
        return treemap
      };
      var binary = function (parent, x0, y0, x1, y1) {
        var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
        for (sums[0] = sum = i = 0; i < n; ++i) {
          sums[i + 1] = sum += nodes[i].value
        }
        partition(0, n, parent.value, x0, y0, x1, y1);
        function partition(i, j, value, x0, y0, x1, y1) {
          if (i >= j - 1) {
            var node = nodes[i];
            node.x0 = x0, node.y0 = y0;
            node.x1 = x1, node.y1 = y1;
            return
          }
          var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
          while (k < hi) {
            var mid = k + hi >>> 1;
            if (sums[mid] < valueTarget)
              k = mid + 1;
            else
              hi = mid
          }
          var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
          if (y1 - y0 > x1 - x0) {
            var yk = (y0 * valueRight + y1 * valueLeft) / value;
            partition(i, k, valueLeft, x0, y0, x1, yk);
            partition(k, j, valueRight, x0, yk, x1, y1)
          } else {
            var xk = (x0 * valueRight + x1 * valueLeft) / value;
            partition(i, k, valueLeft, x0, y0, xk, y1);
            partition(k, j, valueRight, xk, y0, x1, y1)
          }
        }
      };
      var sliceDice = function (parent, x0, y0, x1, y1) {
        (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1)
      };
      var resquarify = function custom(ratio) {
        function resquarify(parent, x0, y0, x1, y1) {
          if ((rows = parent._squarify) && rows.ratio === ratio) {
            var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
            while (++j < m) {
              row = rows[j], nodes = row.children;
              for (i = row.value = 0, n = nodes.length; i < n; ++i)
                row.value += nodes[i].value;
              if (row.dice)
                treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
              else
                treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
              value -= row.value
            }
          } else {
            parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
            rows.ratio = ratio
          }
        }
        resquarify.ratio = function (x) {
          return custom((x = +x) > 1 ? x : 1)
        };
        return resquarify
      }(phi);
      var area$1 = function (polygon) {
        var i = -1, n = polygon.length, a, b = polygon[n - 1], area = 0;
        while (++i < n) {
          a = b;
          b = polygon[i];
          area += a[1] * b[0] - a[0] * b[1]
        }
        return area / 2
      };
      var centroid$1 = function (polygon) {
        var i = -1, n = polygon.length, x = 0, y = 0, a, b = polygon[n - 1], c, k = 0;
        while (++i < n) {
          a = b;
          b = polygon[i];
          k += c = a[0] * b[1] - b[0] * a[1];
          x += (a[0] + b[0]) * c;
          y += (a[1] + b[1]) * c
        }
        return k *= 3, [
          x / k,
          y / k
        ]
      };
      // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
      // the 3D cross product in a quadrant I Cartesian coordinate system (+x is
      // right, +y is up). Returns a positive value if ABC is counter-clockwise,
      // negative if clockwise, and zero if the points are collinear.
      var cross = function (a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0])
      };
      function lexicographicOrder(a, b) {
        return a[0] - b[0] || a[1] - b[1]
      }
      // Computes the upper convex hull per the monotone chain algorithm.
      // Assumes points.length >= 3, is sorted by x, unique in y.
      // Returns an array of indices into points in left-to-right order.
      function computeUpperHullIndexes(points) {
        var n = points.length, indexes = [
            0,
            1
          ], size = 2;
        for (var i = 2; i < n; ++i) {
          while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0)
            --size;
          indexes[size++] = i
        }
        return indexes.slice(0, size)  // remove popped points
      }
      var hull = function (points) {
        if ((n = points.length) < 3)
          return null;
        var i, n, sortedPoints = new Array(n), flippedPoints = new Array(n);
        for (i = 0; i < n; ++i)
          sortedPoints[i] = [
            +points[i][0],
            +points[i][1],
            i
          ];
        sortedPoints.sort(lexicographicOrder);
        for (i = 0; i < n; ++i)
          flippedPoints[i] = [
            sortedPoints[i][0],
            -sortedPoints[i][1]
          ];
        var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
        // Construct the hull polygon, removing possible duplicate endpoints.
        var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull = [];
        // Add upper hull in right-to-l order.
        // Then add lower hull in left-to-right order.
        for (i = upperIndexes.length - 1; i >= 0; --i)
          hull.push(points[sortedPoints[upperIndexes[i]][2]]);
        for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i)
          hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
        return hull
      };
      var contains = function (polygon, point) {
        var n = polygon.length, p = polygon[n - 1], x = point[0], y = point[1], x0 = p[0], y0 = p[1], x1, y1, inside = false;
        for (var i = 0; i < n; ++i) {
          p = polygon[i], x1 = p[0], y1 = p[1];
          if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)
            inside = !inside;
          x0 = x1, y0 = y1
        }
        return inside
      };
      var length$2 = function (polygon) {
        var i = -1, n = polygon.length, b = polygon[n - 1], xa, ya, xb = b[0], yb = b[1], perimeter = 0;
        while (++i < n) {
          xa = xb;
          ya = yb;
          b = polygon[i];
          xb = b[0];
          yb = b[1];
          xa -= xb;
          ya -= yb;
          perimeter += Math.sqrt(xa * xa + ya * ya)
        }
        return perimeter
      };
      var slice$3 = [].slice;
      var noabort = {};
      function Queue(size) {
        if (!(size >= 1))
          throw new Error;
        this._size = size;
        this._call = this._error = null;
        this._tasks = [];
        this._data = [];
        this._waiting = this._active = this._ended = this._start = 0  // inside a synchronous task callback?
      }
      Queue.prototype = queue.prototype = {
        constructor: Queue,
        defer: function (callback) {
          if (typeof callback !== 'function' || this._call)
            throw new Error;
          if (this._error != null)
            return this;
          var t = slice$3.call(arguments, 1);
          t.push(callback);
          ++this._waiting, this._tasks.push(t);
          poke$1(this);
          return this
        },
        abort: function () {
          if (this._error == null)
            abort(this, new Error('abort'));
          return this
        },
        await: function (callback) {
          if (typeof callback !== 'function' || this._call)
            throw new Error;
          this._call = function (error, results) {
            callback.apply(null, [error].concat(results))
          };
          maybeNotify(this);
          return this
        },
        awaitAll: function (callback) {
          if (typeof callback !== 'function' || this._call)
            throw new Error;
          this._call = callback;
          maybeNotify(this);
          return this
        }
      };
      function poke$1(q) {
        if (!q._start) {
          try {
            start$1(q)
          } // let the current task complete
          catch (e) {
            if (q._tasks[q._ended + q._active - 1])
              abort(q, e);  // task errored synchronously
            else if (!q._data)
              throw e  // await callback errored synchronously
          }
        }
      }
      function start$1(q) {
        while (q._start = q._waiting && q._active < q._size) {
          var i = q._ended + q._active, t = q._tasks[i], j = t.length - 1, c = t[j];
          t[j] = end(q, i);
          --q._waiting, ++q._active;
          t = c.apply(null, t);
          if (!q._tasks[i])
            continue;
          // task finished synchronously
          q._tasks[i] = t || noabort
        }
      }
      function end(q, i) {
        return function (e, r) {
          if (!q._tasks[i])
            return;
          // ignore multiple callbacks
          --q._active, ++q._ended;
          q._tasks[i] = null;
          if (q._error != null)
            return;
          // ignore secondary errors
          if (e != null) {
            abort(q, e)
          } else {
            q._data[i] = r;
            if (q._waiting)
              poke$1(q);
            else
              maybeNotify(q)
          }
        }
      }
      function abort(q, e) {
        var i = q._tasks.length, t;
        q._error = e;
        // ignore active callbacks
        q._data = undefined;
        // allow gc
        q._waiting = NaN;
        // prevent starting
        while (--i >= 0) {
          if (t = q._tasks[i]) {
            q._tasks[i] = null;
            if (t.abort) {
              try {
                t.abort()
              } catch (e) {
              }
            }
          }
        }
        q._active = NaN;
        // allow notification
        maybeNotify(q)
      }
      function maybeNotify(q) {
        if (!q._active && q._call) {
          var d = q._data;
          q._data = undefined;
          // allow gc
          q._call(q._error, d)
        }
      }
      function queue(concurrency) {
        return new Queue(arguments.length ? +concurrency : Infinity)
      }
      var uniform = function (min, max) {
        min = min == null ? 0 : +min;
        max = max == null ? 1 : +max;
        if (arguments.length === 1)
          max = min, min = 0;
        else
          max -= min;
        return function () {
          return Math.random() * max + min
        }
      };
      var normal = function (mu, sigma) {
        var x, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function () {
          var y;
          // If available, use the second previously-generated uniform random.
          if (x != null)
            y = x, x = null;  // Otherwise, generate a new x and y.
          else
            do {
              x = Math.random() * 2 - 1;
              y = Math.random() * 2 - 1;
              r = x * x + y * y
            } while (!r || r > 1);
          return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r)
        }
      };
      var logNormal = function () {
        var randomNormal = normal.apply(this, arguments);
        return function () {
          return Math.exp(randomNormal())
        }
      };
      var irwinHall = function (n) {
        return function () {
          for (var sum = 0, i = 0; i < n; ++i)
            sum += Math.random();
          return sum
        }
      };
      var bates = function (n) {
        var randomIrwinHall = irwinHall(n);
        return function () {
          return randomIrwinHall() / n
        }
      };
      var exponential$1 = function (lambda) {
        return function () {
          return -Math.log(1 - Math.random()) / lambda
        }
      };
      var request = function (url, callback) {
        var request, event = dispatch('beforesend', 'progress', 'load', 'error'), mimeType, headers = map$1(), xhr = new XMLHttpRequest, user = null, password = null, response, responseType, timeout = 0;
        // If IE does not support CORS, use XDomainRequest.
        if (typeof XDomainRequest !== 'undefined' && !('withCredentials' in xhr) && /^(http(s)?:)?\/\//.test(url))
          xhr = new XDomainRequest;
        'onload' in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function (o) {
          xhr.readyState > 3 && respond(o)
        };
        function respond(o) {
          var status = xhr.status, result;
          if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {
            if (response) {
              try {
                result = response.call(request, xhr)
              } catch (e) {
                event.call('error', request, e);
                return
              }
            } else {
              result = xhr
            }
            event.call('load', request, result)
          } else {
            event.call('error', request, o)
          }
        }
        xhr.onprogress = function (e) {
          event.call('progress', request, e)
        };
        request = {
          header: function (name, value) {
            name = (name + '').toLowerCase();
            if (arguments.length < 2)
              return headers.get(name);
            if (value == null)
              headers.remove(name);
            else
              headers.set(name, value + '');
            return request
          },
          // If mimeType is non-null and no Accept header is set, a default is used.
          mimeType: function (value) {
            if (!arguments.length)
              return mimeType;
            mimeType = value == null ? null : value + '';
            return request
          },
          // Specifies what type the response value should take;
          // for instance, arraybuffer, blob, document, or text.
          responseType: function (value) {
            if (!arguments.length)
              return responseType;
            responseType = value;
            return request
          },
          timeout: function (value) {
            if (!arguments.length)
              return timeout;
            timeout = +value;
            return request
          },
          user: function (value) {
            return arguments.length < 1 ? user : (user = value == null ? null : value + '', request)
          },
          password: function (value) {
            return arguments.length < 1 ? password : (password = value == null ? null : value + '', request)
          },
          // Specify how to convert the response content to a specific type;
          // changes the callback value on "load" events.
          response: function (value) {
            response = value;
            return request
          },
          // Alias for send("GET", …).
          get: function (data, callback) {
            return request.send('GET', data, callback)
          },
          // Alias for send("POST", …).
          post: function (data, callback) {
            return request.send('POST', data, callback)
          },
          // If callback is non-null, it will be used for error and load events.
          send: function (method, data, callback) {
            xhr.open(method, url, true, user, password);
            if (mimeType != null && !headers.has('accept'))
              headers.set('accept', mimeType + ',*/*');
            if (xhr.setRequestHeader)
              headers.each(function (value, name) {
                xhr.setRequestHeader(name, value)
              });
            if (mimeType != null && xhr.overrideMimeType)
              xhr.overrideMimeType(mimeType);
            if (responseType != null)
              xhr.responseType = responseType;
            if (timeout > 0)
              xhr.timeout = timeout;
            if (callback == null && typeof data === 'function')
              callback = data, data = null;
            if (callback != null && callback.length === 1)
              callback = fixCallback(callback);
            if (callback != null)
              request.on('error', callback).on('load', function (xhr) {
                callback(null, xhr)
              });
            event.call('beforesend', request, xhr);
            xhr.send(data == null ? null : data);
            return request
          },
          abort: function () {
            xhr.abort();
            return request
          },
          on: function () {
            var value = event.on.apply(event, arguments);
            return value === event ? request : value
          }
        };
        if (callback != null) {
          if (typeof callback !== 'function')
            throw new Error('invalid callback: ' + callback);
          return request.get(callback)
        }
        return request
      };
      function fixCallback(callback) {
        return function (error, xhr) {
          callback(error == null ? xhr : null)
        }
      }
      function hasResponse(xhr) {
        var type = xhr.responseType;
        return type && type !== 'text' ? xhr.response : xhr.responseText  // "" on error
      }
      var type$1 = function (defaultMimeType, response) {
        return function (url, callback) {
          var r = request(url).mimeType(defaultMimeType).response(response);
          if (callback != null) {
            if (typeof callback !== 'function')
              throw new Error('invalid callback: ' + callback);
            return r.get(callback)
          }
          return r
        }
      };
      var html = type$1('text/html', function (xhr) {
        return document.createRange().createContextualFragment(xhr.responseText)
      });
      var json = type$1('application/json', function (xhr) {
        return JSON.parse(xhr.responseText)
      });
      var text = type$1('text/plain', function (xhr) {
        return xhr.responseText
      });
      var xml = type$1('application/xml', function (xhr) {
        var xml = xhr.responseXML;
        if (!xml)
          throw new Error('parse error');
        return xml
      });
      var dsv$1 = function (defaultMimeType, parse) {
        return function (url, row, callback) {
          if (arguments.length < 3)
            callback = row, row = null;
          var r = request(url).mimeType(defaultMimeType);
          r.row = function (_) {
            return arguments.length ? r.response(responseOf(parse, row = _)) : row
          };
          r.row(row);
          return callback ? r.get(callback) : r
        }
      };
      function responseOf(parse, row) {
        return function (request$$1) {
          return parse(request$$1.responseText, row)
        }
      }
      var csv$1 = dsv$1('text/csv', csvParse);
      var tsv$1 = dsv$1('text/tab-separated-values', tsvParse);
      var array$2 = Array.prototype;
      var map$3 = array$2.map;
      var slice$4 = array$2.slice;
      var implicit = { name: 'implicit' };
      function ordinal(range) {
        var index = map$1(), domain = [], unknown = implicit;
        range = range == null ? [] : slice$4.call(range);
        function scale(d) {
          var key = d + '', i = index.get(key);
          if (!i) {
            if (unknown !== implicit)
              return unknown;
            index.set(key, i = domain.push(d))
          }
          return range[(i - 1) % range.length]
        }
        scale.domain = function (_) {
          if (!arguments.length)
            return domain.slice();
          domain = [], index = map$1();
          var i = -1, n = _.length, d, key;
          while (++i < n)
            if (!index.has(key = (d = _[i]) + ''))
              index.set(key, domain.push(d));
          return scale
        };
        scale.range = function (_) {
          return arguments.length ? (range = slice$4.call(_), scale) : range.slice()
        };
        scale.unknown = function (_) {
          return arguments.length ? (unknown = _, scale) : unknown
        };
        scale.copy = function () {
          return ordinal().domain(domain).range(range).unknown(unknown)
        };
        return scale
      }
      function band() {
        var scale = ordinal().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, range$$1 = [
            0,
            1
          ], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
        delete scale.unknown;
        function rescale() {
          var n = domain().length, reverse = range$$1[1] < range$$1[0], start = range$$1[reverse - 0], stop = range$$1[1 - reverse];
          step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
          if (round)
            step = Math.floor(step);
          start += (stop - start - step * (n - paddingInner)) * align;
          bandwidth = step * (1 - paddingInner);
          if (round)
            start = Math.round(start), bandwidth = Math.round(bandwidth);
          var values = sequence(n).map(function (i) {
            return start + step * i
          });
          return ordinalRange(reverse ? values.reverse() : values)
        }
        scale.domain = function (_) {
          return arguments.length ? (domain(_), rescale()) : domain()
        };
        scale.range = function (_) {
          return arguments.length ? (range$$1 = [
            +_[0],
            +_[1]
          ], rescale()) : range$$1.slice()
        };
        scale.rangeRound = function (_) {
          return range$$1 = [
            +_[0],
            +_[1]
          ], round = true, rescale()
        };
        scale.bandwidth = function () {
          return bandwidth
        };
        scale.step = function () {
          return step
        };
        scale.round = function (_) {
          return arguments.length ? (round = !!_, rescale()) : round
        };
        scale.padding = function (_) {
          return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner
        };
        scale.paddingInner = function (_) {
          return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner
        };
        scale.paddingOuter = function (_) {
          return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter
        };
        scale.align = function (_) {
          return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align
        };
        scale.copy = function () {
          return band().domain(domain()).range(range$$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align)
        };
        return rescale()
      }
      function pointish(scale) {
        var copy = scale.copy;
        scale.padding = scale.paddingOuter;
        delete scale.paddingInner;
        delete scale.paddingOuter;
        scale.copy = function () {
          return pointish(copy())
        };
        return scale
      }
      function point$1() {
        return pointish(band().paddingInner(1))
      }
      var constant$9 = function (x) {
        return function () {
          return x
        }
      };
      var number$1 = function (x) {
        return +x
      };
      var unit = [
        0,
        1
      ];
      function deinterpolateLinear(a, b) {
        return (b -= a = +a) ? function (x) {
          return (x - a) / b
        } : constant$9(b)
      }
      function deinterpolateClamp(deinterpolate) {
        return function (a, b) {
          var d = deinterpolate(a = +a, b = +b);
          return function (x) {
            return x <= a ? 0 : x >= b ? 1 : d(x)
          }
        }
      }
      function reinterpolateClamp(reinterpolate) {
        return function (a, b) {
          var r = reinterpolate(a = +a, b = +b);
          return function (t) {
            return t <= 0 ? a : t >= 1 ? b : r(t)
          }
        }
      }
      function bimap(domain, range$$1, deinterpolate, reinterpolate) {
        var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
        if (d1 < d0)
          d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
        else
          d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
        return function (x) {
          return r0(d0(x))
        }
      }
      function polymap(domain, range$$1, deinterpolate, reinterpolate) {
        var j = Math.min(domain.length, range$$1.length) - 1, d = new Array(j), r = new Array(j), i = -1;
        // Reverse descending domains.
        if (domain[j] < domain[0]) {
          domain = domain.slice().reverse();
          range$$1 = range$$1.slice().reverse()
        }
        while (++i < j) {
          d[i] = deinterpolate(domain[i], domain[i + 1]);
          r[i] = reinterpolate(range$$1[i], range$$1[i + 1])
        }
        return function (x) {
          var i = bisectRight(domain, x, 1, j) - 1;
          return r[i](d[i](x))
        }
      }
      function copy(source, target) {
        return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp())
      }
      // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
      // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
      function continuous(deinterpolate, reinterpolate) {
        var domain = unit, range$$1 = unit, interpolate$$1 = interpolateValue, clamp = false, piecewise, output, input;
        function rescale() {
          piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
          output = input = null;
          return scale
        }
        function scale(x) {
          return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x)
        }
        scale.invert = function (y) {
          return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y)
        };
        scale.domain = function (_) {
          return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice()
        };
        scale.range = function (_) {
          return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice()
        };
        scale.rangeRound = function (_) {
          return range$$1 = slice$4.call(_), interpolate$$1 = interpolateRound, rescale()
        };
        scale.clamp = function (_) {
          return arguments.length ? (clamp = !!_, rescale()) : clamp
        };
        scale.interpolate = function (_) {
          return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1
        };
        return rescale()
      }
      var tickFormat = function (domain, count, specifier) {
        var start = domain[0], stop = domain[domain.length - 1], step = tickStep(start, stop, count == null ? 10 : count), precision;
        specifier = formatSpecifier(specifier == null ? ',f' : specifier);
        switch (specifier.type) {
        case 's': {
            var value = Math.max(Math.abs(start), Math.abs(stop));
            if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value)))
              specifier.precision = precision;
            return exports.formatPrefix(specifier, value)
          }
        case '':
        case 'e':
        case 'g':
        case 'p':
        case 'r': {
            if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)))))
              specifier.precision = precision - (specifier.type === 'e');
            break
          }
        case 'f':
        case '%': {
            if (specifier.precision == null && !isNaN(precision = precisionFixed(step)))
              specifier.precision = precision - (specifier.type === '%') * 2;
            break
          }
        }
        return exports.format(specifier)
      };
      function linearish(scale) {
        var domain = scale.domain;
        scale.ticks = function (count) {
          var d = domain();
          return ticks(d[0], d[d.length - 1], count == null ? 10 : count)
        };
        scale.tickFormat = function (count, specifier) {
          return tickFormat(domain(), count, specifier)
        };
        scale.nice = function (count) {
          var d = domain(), i = d.length - 1, n = count == null ? 10 : count, start = d[0], stop = d[i], step = tickStep(start, stop, n);
          if (step) {
            step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
            d[0] = Math.floor(start / step) * step;
            d[i] = Math.ceil(stop / step) * step;
            domain(d)
          }
          return scale
        };
        return scale
      }
      function linear$2() {
        var scale = continuous(deinterpolateLinear, reinterpolate);
        scale.copy = function () {
          return copy(scale, linear$2())
        };
        return linearish(scale)
      }
      function identity$6() {
        var domain = [
          0,
          1
        ];
        function scale(x) {
          return +x
        }
        scale.invert = scale;
        scale.domain = scale.range = function (_) {
          return arguments.length ? (domain = map$3.call(_, number$1), scale) : domain.slice()
        };
        scale.copy = function () {
          return identity$6().domain(domain)
        };
        return linearish(scale)
      }
      var nice = function (domain, interval) {
        domain = domain.slice();
        var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
        if (x1 < x0) {
          t = i0, i0 = i1, i1 = t;
          t = x0, x0 = x1, x1 = t
        }
        domain[i0] = interval.floor(x0);
        domain[i1] = interval.ceil(x1);
        return domain
      };
      function deinterpolate(a, b) {
        return (b = Math.log(b / a)) ? function (x) {
          return Math.log(x / a) / b
        } : constant$9(b)
      }
      function reinterpolate$1(a, b) {
        return a < 0 ? function (t) {
          return -Math.pow(-b, t) * Math.pow(-a, 1 - t)
        } : function (t) {
          return Math.pow(b, t) * Math.pow(a, 1 - t)
        }
      }
      function pow10(x) {
        return isFinite(x) ? +('1e' + x) : x < 0 ? 0 : x
      }
      function powp(base) {
        return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
          return Math.pow(base, x)
        }
      }
      function logp(base) {
        return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
          return Math.log(x) / base
        })
      }
      function reflect(f) {
        return function (x) {
          return -f(-x)
        }
      }
      function log$1() {
        var scale = continuous(deinterpolate, reinterpolate$1).domain([
            1,
            10
          ]), domain = scale.domain, base = 10, logs = logp(10), pows = powp(10);
        function rescale() {
          logs = logp(base), pows = powp(base);
          if (domain()[0] < 0)
            logs = reflect(logs), pows = reflect(pows);
          return scale
        }
        scale.base = function (_) {
          return arguments.length ? (base = +_, rescale()) : base
        };
        scale.domain = function (_) {
          return arguments.length ? (domain(_), rescale()) : domain()
        };
        scale.ticks = function (count) {
          var d = domain(), u = d[0], v = d[d.length - 1], r;
          if (r = v < u)
            i = u, u = v, v = i;
          var i = logs(u), j = logs(v), p, k, t, n = count == null ? 10 : +count, z = [];
          if (!(base % 1) && j - i < n) {
            i = Math.round(i) - 1, j = Math.round(j) + 1;
            if (u > 0)
              for (; i < j; ++i) {
                for (k = 1, p = pows(i); k < base; ++k) {
                  t = p * k;
                  if (t < u)
                    continue;
                  if (t > v)
                    break;
                  z.push(t)
                }
              }
            else
              for (; i < j; ++i) {
                for (k = base - 1, p = pows(i); k >= 1; --k) {
                  t = p * k;
                  if (t < u)
                    continue;
                  if (t > v)
                    break;
                  z.push(t)
                }
              }
          } else {
            z = ticks(i, j, Math.min(j - i, n)).map(pows)
          }
          return r ? z.reverse() : z
        };
        scale.tickFormat = function (count, specifier) {
          if (specifier == null)
            specifier = base === 10 ? '.0e' : ',';
          if (typeof specifier !== 'function')
            specifier = exports.format(specifier);
          if (count === Infinity)
            return specifier;
          if (count == null)
            count = 10;
          var k = Math.max(1, base * count / scale.ticks().length);
          // TODO fast estimate?
          return function (d) {
            var i = d / pows(Math.round(logs(d)));
            if (i * base < base - 0.5)
              i *= base;
            return i <= k ? specifier(d) : ''
          }
        };
        scale.nice = function () {
          return domain(nice(domain(), {
            floor: function (x) {
              return pows(Math.floor(logs(x)))
            },
            ceil: function (x) {
              return pows(Math.ceil(logs(x)))
            }
          }))
        };
        scale.copy = function () {
          return copy(scale, log$1().base(base))
        };
        return scale
      }
      function raise$1(x, exponent) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent)
      }
      function pow$1() {
        var exponent = 1, scale = continuous(deinterpolate, reinterpolate), domain = scale.domain;
        function deinterpolate(a, b) {
          return (b = raise$1(b, exponent) - (a = raise$1(a, exponent))) ? function (x) {
            return (raise$1(x, exponent) - a) / b
          } : constant$9(b)
        }
        function reinterpolate(a, b) {
          b = raise$1(b, exponent) - (a = raise$1(a, exponent));
          return function (t) {
            return raise$1(a + b * t, 1 / exponent)
          }
        }
        scale.exponent = function (_) {
          return arguments.length ? (exponent = +_, domain(domain())) : exponent
        };
        scale.copy = function () {
          return copy(scale, pow$1().exponent(exponent))
        };
        return linearish(scale)
      }
      function sqrt$1() {
        return pow$1().exponent(0.5)
      }
      function quantile$$1() {
        var domain = [], range$$1 = [], thresholds = [];
        function rescale() {
          var i = 0, n = Math.max(1, range$$1.length);
          thresholds = new Array(n - 1);
          while (++i < n)
            thresholds[i - 1] = threshold(domain, i / n);
          return scale
        }
        function scale(x) {
          if (!isNaN(x = +x))
            return range$$1[bisectRight(thresholds, x)]
        }
        scale.invertExtent = function (y) {
          var i = range$$1.indexOf(y);
          return i < 0 ? [
            NaN,
            NaN
          ] : [
            i > 0 ? thresholds[i - 1] : domain[0],
            i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
          ]
        };
        scale.domain = function (_) {
          if (!arguments.length)
            return domain.slice();
          domain = [];
          for (var i = 0, n = _.length, d; i < n; ++i)
            if (d = _[i], d != null && !isNaN(d = +d))
              domain.push(d);
          domain.sort(ascending);
          return rescale()
        };
        scale.range = function (_) {
          return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice()
        };
        scale.quantiles = function () {
          return thresholds.slice()
        };
        scale.copy = function () {
          return quantile$$1().domain(domain).range(range$$1)
        };
        return scale
      }
      function quantize$1() {
        var x0 = 0, x1 = 1, n = 1, domain = [0.5], range$$1 = [
            0,
            1
          ];
        function scale(x) {
          if (x <= x)
            return range$$1[bisectRight(domain, x, 0, n)]
        }
        function rescale() {
          var i = -1;
          domain = new Array(n);
          while (++i < n)
            domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
          return scale
        }
        scale.domain = function (_) {
          return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [
            x0,
            x1
          ]
        };
        scale.range = function (_) {
          return arguments.length ? (n = (range$$1 = slice$4.call(_)).length - 1, rescale()) : range$$1.slice()
        };
        scale.invertExtent = function (y) {
          var i = range$$1.indexOf(y);
          return i < 0 ? [
            NaN,
            NaN
          ] : i < 1 ? [
            x0,
            domain[0]
          ] : i >= n ? [
            domain[n - 1],
            x1
          ] : [
            domain[i - 1],
            domain[i]
          ]
        };
        scale.copy = function () {
          return quantize$1().domain([
            x0,
            x1
          ]).range(range$$1)
        };
        return linearish(scale)
      }
      function threshold$1() {
        var domain = [0.5], range$$1 = [
            0,
            1
          ], n = 1;
        function scale(x) {
          if (x <= x)
            return range$$1[bisectRight(domain, x, 0, n)]
        }
        scale.domain = function (_) {
          return arguments.length ? (domain = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice()
        };
        scale.range = function (_) {
          return arguments.length ? (range$$1 = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice()
        };
        scale.invertExtent = function (y) {
          var i = range$$1.indexOf(y);
          return [
            domain[i - 1],
            domain[i]
          ]
        };
        scale.copy = function () {
          return threshold$1().domain(domain).range(range$$1)
        };
        return scale
      }
      var t0$1 = new Date;
      var t1$1 = new Date;
      function newInterval(floori, offseti, count, field) {
        function interval(date) {
          return floori(date = new Date(+date)), date
        }
        interval.floor = interval;
        interval.ceil = function (date) {
          return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date
        };
        interval.round = function (date) {
          var d0 = interval(date), d1 = interval.ceil(date);
          return date - d0 < d1 - date ? d0 : d1
        };
        interval.offset = function (date, step) {
          return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date
        };
        interval.range = function (start, stop, step) {
          var range = [];
          start = interval.ceil(start);
          step = step == null ? 1 : Math.floor(step);
          if (!(start < stop) || !(step > 0))
            return range;
          // also handles Invalid Date
          do
            range.push(new Date(+start));
          while (offseti(start, step), floori(start), start < stop);
          return range
        };
        interval.filter = function (test) {
          return newInterval(function (date) {
            if (date >= date)
              while (floori(date), !test(date))
                date.setTime(date - 1)
          }, function (date, step) {
            if (date >= date)
              while (--step >= 0)
                while (offseti(date, 1), !test(date)) {
                }  // eslint-disable-line no-empty
          })
        };
        if (count) {
          interval.count = function (start, end) {
            t0$1.setTime(+start), t1$1.setTime(+end);
            floori(t0$1), floori(t1$1);
            return Math.floor(count(t0$1, t1$1))
          };
          interval.every = function (step) {
            step = Math.floor(step);
            return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
              return field(d) % step === 0
            } : function (d) {
              return interval.count(0, d) % step === 0
            })
          }
        }
        return interval
      }
      var millisecond = newInterval(function () {
      }, function (date, step) {
        date.setTime(+date + step)
      }, function (start, end) {
        return end - start
      });
      // An optimized implementation for this simple case.
      millisecond.every = function (k) {
        k = Math.floor(k);
        if (!isFinite(k) || !(k > 0))
          return null;
        if (!(k > 1))
          return millisecond;
        return newInterval(function (date) {
          date.setTime(Math.floor(date / k) * k)
        }, function (date, step) {
          date.setTime(+date + step * k)
        }, function (start, end) {
          return (end - start) / k
        })
      };
      var milliseconds = millisecond.range;
      var durationSecond$1 = 1000;
      var durationMinute$1 = 60000;
      var durationHour$1 = 3600000;
      var durationDay$1 = 86400000;
      var durationWeek$1 = 604800000;
      var second = newInterval(function (date) {
        date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1)
      }, function (date, step) {
        date.setTime(+date + step * durationSecond$1)
      }, function (start, end) {
        return (end - start) / durationSecond$1
      }, function (date) {
        return date.getUTCSeconds()
      });
      var seconds = second.range;
      var minute = newInterval(function (date) {
        date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1)
      }, function (date, step) {
        date.setTime(+date + step * durationMinute$1)
      }, function (start, end) {
        return (end - start) / durationMinute$1
      }, function (date) {
        return date.getMinutes()
      });
      var minutes = minute.range;
      var hour = newInterval(function (date) {
        var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;
        if (offset < 0)
          offset += durationHour$1;
        date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset)
      }, function (date, step) {
        date.setTime(+date + step * durationHour$1)
      }, function (start, end) {
        return (end - start) / durationHour$1
      }, function (date) {
        return date.getHours()
      });
      var hours = hour.range;
      var day = newInterval(function (date) {
        date.setHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setDate(date.getDate() + step)
      }, function (start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1
      }, function (date) {
        return date.getDate() - 1
      });
      var days = day.range;
      function weekday(i) {
        return newInterval(function (date) {
          date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
          date.setHours(0, 0, 0, 0)
        }, function (date, step) {
          date.setDate(date.getDate() + step * 7)
        }, function (start, end) {
          return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1
        })
      }
      var sunday = weekday(0);
      var monday = weekday(1);
      var tuesday = weekday(2);
      var wednesday = weekday(3);
      var thursday = weekday(4);
      var friday = weekday(5);
      var saturday = weekday(6);
      var sundays = sunday.range;
      var mondays = monday.range;
      var tuesdays = tuesday.range;
      var wednesdays = wednesday.range;
      var thursdays = thursday.range;
      var fridays = friday.range;
      var saturdays = saturday.range;
      var month = newInterval(function (date) {
        date.setDate(1);
        date.setHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setMonth(date.getMonth() + step)
      }, function (start, end) {
        return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12
      }, function (date) {
        return date.getMonth()
      });
      var months = month.range;
      var year = newInterval(function (date) {
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setFullYear(date.getFullYear() + step)
      }, function (start, end) {
        return end.getFullYear() - start.getFullYear()
      }, function (date) {
        return date.getFullYear()
      });
      // An optimized implementation for this simple case.
      year.every = function (k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
          date.setFullYear(Math.floor(date.getFullYear() / k) * k);
          date.setMonth(0, 1);
          date.setHours(0, 0, 0, 0)
        }, function (date, step) {
          date.setFullYear(date.getFullYear() + step * k)
        })
      };
      var years = year.range;
      var utcMinute = newInterval(function (date) {
        date.setUTCSeconds(0, 0)
      }, function (date, step) {
        date.setTime(+date + step * durationMinute$1)
      }, function (start, end) {
        return (end - start) / durationMinute$1
      }, function (date) {
        return date.getUTCMinutes()
      });
      var utcMinutes = utcMinute.range;
      var utcHour = newInterval(function (date) {
        date.setUTCMinutes(0, 0, 0)
      }, function (date, step) {
        date.setTime(+date + step * durationHour$1)
      }, function (start, end) {
        return (end - start) / durationHour$1
      }, function (date) {
        return date.getUTCHours()
      });
      var utcHours = utcHour.range;
      var utcDay = newInterval(function (date) {
        date.setUTCHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setUTCDate(date.getUTCDate() + step)
      }, function (start, end) {
        return (end - start) / durationDay$1
      }, function (date) {
        return date.getUTCDate() - 1
      });
      var utcDays = utcDay.range;
      function utcWeekday(i) {
        return newInterval(function (date) {
          date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
          date.setUTCHours(0, 0, 0, 0)
        }, function (date, step) {
          date.setUTCDate(date.getUTCDate() + step * 7)
        }, function (start, end) {
          return (end - start) / durationWeek$1
        })
      }
      var utcSunday = utcWeekday(0);
      var utcMonday = utcWeekday(1);
      var utcTuesday = utcWeekday(2);
      var utcWednesday = utcWeekday(3);
      var utcThursday = utcWeekday(4);
      var utcFriday = utcWeekday(5);
      var utcSaturday = utcWeekday(6);
      var utcSundays = utcSunday.range;
      var utcMondays = utcMonday.range;
      var utcTuesdays = utcTuesday.range;
      var utcWednesdays = utcWednesday.range;
      var utcThursdays = utcThursday.range;
      var utcFridays = utcFriday.range;
      var utcSaturdays = utcSaturday.range;
      var utcMonth = newInterval(function (date) {
        date.setUTCDate(1);
        date.setUTCHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setUTCMonth(date.getUTCMonth() + step)
      }, function (start, end) {
        return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12
      }, function (date) {
        return date.getUTCMonth()
      });
      var utcMonths = utcMonth.range;
      var utcYear = newInterval(function (date) {
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step)
      }, function (start, end) {
        return end.getUTCFullYear() - start.getUTCFullYear()
      }, function (date) {
        return date.getUTCFullYear()
      });
      // An optimized implementation for this simple case.
      utcYear.every = function (k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
          date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
          date.setUTCMonth(0, 1);
          date.setUTCHours(0, 0, 0, 0)
        }, function (date, step) {
          date.setUTCFullYear(date.getUTCFullYear() + step * k)
        })
      };
      var utcYears = utcYear.range;
      function localDate(d) {
        if (0 <= d.y && d.y < 100) {
          var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
          date.setFullYear(d.y);
          return date
        }
        return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L)
      }
      function utcDate(d) {
        if (0 <= d.y && d.y < 100) {
          var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
          date.setUTCFullYear(d.y);
          return date
        }
        return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L))
      }
      function newYear(y) {
        return {
          y: y,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0
        }
      }
      function formatLocale$1(locale) {
        var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
        var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
        var formats = {
          'a': formatShortWeekday,
          'A': formatWeekday,
          'b': formatShortMonth,
          'B': formatMonth,
          'c': null,
          'd': formatDayOfMonth,
          'e': formatDayOfMonth,
          'H': formatHour24,
          'I': formatHour12,
          'j': formatDayOfYear,
          'L': formatMilliseconds,
          'm': formatMonthNumber,
          'M': formatMinutes,
          'p': formatPeriod,
          'S': formatSeconds,
          'U': formatWeekNumberSunday,
          'w': formatWeekdayNumber,
          'W': formatWeekNumberMonday,
          'x': null,
          'X': null,
          'y': formatYear,
          'Y': formatFullYear,
          'Z': formatZone,
          '%': formatLiteralPercent
        };
        var utcFormats = {
          'a': formatUTCShortWeekday,
          'A': formatUTCWeekday,
          'b': formatUTCShortMonth,
          'B': formatUTCMonth,
          'c': null,
          'd': formatUTCDayOfMonth,
          'e': formatUTCDayOfMonth,
          'H': formatUTCHour24,
          'I': formatUTCHour12,
          'j': formatUTCDayOfYear,
          'L': formatUTCMilliseconds,
          'm': formatUTCMonthNumber,
          'M': formatUTCMinutes,
          'p': formatUTCPeriod,
          'S': formatUTCSeconds,
          'U': formatUTCWeekNumberSunday,
          'w': formatUTCWeekdayNumber,
          'W': formatUTCWeekNumberMonday,
          'x': null,
          'X': null,
          'y': formatUTCYear,
          'Y': formatUTCFullYear,
          'Z': formatUTCZone,
          '%': formatLiteralPercent
        };
        var parses = {
          'a': parseShortWeekday,
          'A': parseWeekday,
          'b': parseShortMonth,
          'B': parseMonth,
          'c': parseLocaleDateTime,
          'd': parseDayOfMonth,
          'e': parseDayOfMonth,
          'H': parseHour24,
          'I': parseHour24,
          'j': parseDayOfYear,
          'L': parseMilliseconds,
          'm': parseMonthNumber,
          'M': parseMinutes,
          'p': parsePeriod,
          'S': parseSeconds,
          'U': parseWeekNumberSunday,
          'w': parseWeekdayNumber,
          'W': parseWeekNumberMonday,
          'x': parseLocaleDate,
          'X': parseLocaleTime,
          'y': parseYear,
          'Y': parseFullYear,
          'Z': parseZone,
          '%': parseLiteralPercent
        };
        // These recursive directive definitions must be deferred.
        formats.x = newFormat(locale_date, formats);
        formats.X = newFormat(locale_time, formats);
        formats.c = newFormat(locale_dateTime, formats);
        utcFormats.x = newFormat(locale_date, utcFormats);
        utcFormats.X = newFormat(locale_time, utcFormats);
        utcFormats.c = newFormat(locale_dateTime, utcFormats);
        function newFormat(specifier, formats) {
          return function (date) {
            var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
            if (!(date instanceof Date))
              date = new Date(+date);
            while (++i < n) {
              if (specifier.charCodeAt(i) === 37) {
                string.push(specifier.slice(j, i));
                if ((pad = pads[c = specifier.charAt(++i)]) != null)
                  c = specifier.charAt(++i);
                else
                  pad = c === 'e' ? ' ' : '0';
                if (format = formats[c])
                  c = format(date, pad);
                string.push(c);
                j = i + 1
              }
            }
            string.push(specifier.slice(j, i));
            return string.join('')
          }
        }
        function newParse(specifier, newDate) {
          return function (string) {
            var d = newYear(1900), i = parseSpecifier(d, specifier, string += '', 0);
            if (i != string.length)
              return null;
            // The am-pm flag is 0 for AM, and 1 for PM.
            if ('p' in d)
              d.H = d.H % 12 + d.p * 12;
            // Convert day-of-week and week-of-year to day-of-year.
            if ('W' in d || 'U' in d) {
              if (!('w' in d))
                d.w = 'W' in d ? 1 : 0;
              var day$$1 = 'Z' in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
              d.m = 0;
              d.d = 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7
            }
            // If a time zone is specified, all fields are interpreted as UTC and then
            // offset according to the specified time zone.
            if ('Z' in d) {
              d.H += d.Z / 100 | 0;
              d.M += d.Z % 100;
              return utcDate(d)
            }
            // Otherwise, all fields are in local time.
            return newDate(d)
          }
        }
        function parseSpecifier(d, specifier, string, j) {
          var i = 0, n = specifier.length, m = string.length, c, parse;
          while (i < n) {
            if (j >= m)
              return -1;
            c = specifier.charCodeAt(i++);
            if (c === 37) {
              c = specifier.charAt(i++);
              parse = parses[c in pads ? specifier.charAt(i++) : c];
              if (!parse || (j = parse(d, string, j)) < 0)
                return -1
            } else if (c != string.charCodeAt(j++)) {
              return -1
            }
          }
          return j
        }
        function parsePeriod(d, string, i) {
          var n = periodRe.exec(string.slice(i));
          return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1
        }
        function parseShortWeekday(d, string, i) {
          var n = shortWeekdayRe.exec(string.slice(i));
          return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1
        }
        function parseWeekday(d, string, i) {
          var n = weekdayRe.exec(string.slice(i));
          return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1
        }
        function parseShortMonth(d, string, i) {
          var n = shortMonthRe.exec(string.slice(i));
          return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1
        }
        function parseMonth(d, string, i) {
          var n = monthRe.exec(string.slice(i));
          return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1
        }
        function parseLocaleDateTime(d, string, i) {
          return parseSpecifier(d, locale_dateTime, string, i)
        }
        function parseLocaleDate(d, string, i) {
          return parseSpecifier(d, locale_date, string, i)
        }
        function parseLocaleTime(d, string, i) {
          return parseSpecifier(d, locale_time, string, i)
        }
        function formatShortWeekday(d) {
          return locale_shortWeekdays[d.getDay()]
        }
        function formatWeekday(d) {
          return locale_weekdays[d.getDay()]
        }
        function formatShortMonth(d) {
          return locale_shortMonths[d.getMonth()]
        }
        function formatMonth(d) {
          return locale_months[d.getMonth()]
        }
        function formatPeriod(d) {
          return locale_periods[+(d.getHours() >= 12)]
        }
        function formatUTCShortWeekday(d) {
          return locale_shortWeekdays[d.getUTCDay()]
        }
        function formatUTCWeekday(d) {
          return locale_weekdays[d.getUTCDay()]
        }
        function formatUTCShortMonth(d) {
          return locale_shortMonths[d.getUTCMonth()]
        }
        function formatUTCMonth(d) {
          return locale_months[d.getUTCMonth()]
        }
        function formatUTCPeriod(d) {
          return locale_periods[+(d.getUTCHours() >= 12)]
        }
        return {
          format: function (specifier) {
            var f = newFormat(specifier += '', formats);
            f.toString = function () {
              return specifier
            };
            return f
          },
          parse: function (specifier) {
            var p = newParse(specifier += '', localDate);
            p.toString = function () {
              return specifier
            };
            return p
          },
          utcFormat: function (specifier) {
            var f = newFormat(specifier += '', utcFormats);
            f.toString = function () {
              return specifier
            };
            return f
          },
          utcParse: function (specifier) {
            var p = newParse(specifier, utcDate);
            p.toString = function () {
              return specifier
            };
            return p
          }
        }
      }
      var pads = {
        '-': '',
        '_': ' ',
        '0': '0'
      };
      var numberRe = /^\s*\d+/;
      var percentRe = /^%/;
      var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
      function pad(value, fill, width) {
        var sign = value < 0 ? '-' : '', string = (sign ? -value : value) + '', length = string.length;
        return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string)
      }
      function requote(s) {
        return s.replace(requoteRe, '\\$&')
      }
      function formatRe(names) {
        return new RegExp('^(?:' + names.map(requote).join('|') + ')', 'i')
      }
      function formatLookup(names) {
        var map = {}, i = -1, n = names.length;
        while (++i < n)
          map[names[i].toLowerCase()] = i;
        return map
      }
      function parseWeekdayNumber(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.w = +n[0], i + n[0].length) : -1
      }
      function parseWeekNumberSunday(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.U = +n[0], i + n[0].length) : -1
      }
      function parseWeekNumberMonday(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.W = +n[0], i + n[0].length) : -1
      }
      function parseFullYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 4));
        return n ? (d.y = +n[0], i + n[0].length) : -1
      }
      function parseYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1
      }
      function parseZone(d, string, i) {
        var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
        return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || '00')), i + n[0].length) : -1
      }
      function parseMonthNumber(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.m = n[0] - 1, i + n[0].length) : -1
      }
      function parseDayOfMonth(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.d = +n[0], i + n[0].length) : -1
      }
      function parseDayOfYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1
      }
      function parseHour24(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.H = +n[0], i + n[0].length) : -1
      }
      function parseMinutes(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.M = +n[0], i + n[0].length) : -1
      }
      function parseSeconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.S = +n[0], i + n[0].length) : -1
      }
      function parseMilliseconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.L = +n[0], i + n[0].length) : -1
      }
      function parseLiteralPercent(d, string, i) {
        var n = percentRe.exec(string.slice(i, i + 1));
        return n ? i + n[0].length : -1
      }
      function formatDayOfMonth(d, p) {
        return pad(d.getDate(), p, 2)
      }
      function formatHour24(d, p) {
        return pad(d.getHours(), p, 2)
      }
      function formatHour12(d, p) {
        return pad(d.getHours() % 12 || 12, p, 2)
      }
      function formatDayOfYear(d, p) {
        return pad(1 + day.count(year(d), d), p, 3)
      }
      function formatMilliseconds(d, p) {
        return pad(d.getMilliseconds(), p, 3)
      }
      function formatMonthNumber(d, p) {
        return pad(d.getMonth() + 1, p, 2)
      }
      function formatMinutes(d, p) {
        return pad(d.getMinutes(), p, 2)
      }
      function formatSeconds(d, p) {
        return pad(d.getSeconds(), p, 2)
      }
      function formatWeekNumberSunday(d, p) {
        return pad(sunday.count(year(d), d), p, 2)
      }
      function formatWeekdayNumber(d) {
        return d.getDay()
      }
      function formatWeekNumberMonday(d, p) {
        return pad(monday.count(year(d), d), p, 2)
      }
      function formatYear(d, p) {
        return pad(d.getFullYear() % 100, p, 2)
      }
      function formatFullYear(d, p) {
        return pad(d.getFullYear() % 10000, p, 4)
      }
      function formatZone(d) {
        var z = d.getTimezoneOffset();
        return (z > 0 ? '-' : (z *= -1, '+')) + pad(z / 60 | 0, '0', 2) + pad(z % 60, '0', 2)
      }
      function formatUTCDayOfMonth(d, p) {
        return pad(d.getUTCDate(), p, 2)
      }
      function formatUTCHour24(d, p) {
        return pad(d.getUTCHours(), p, 2)
      }
      function formatUTCHour12(d, p) {
        return pad(d.getUTCHours() % 12 || 12, p, 2)
      }
      function formatUTCDayOfYear(d, p) {
        return pad(1 + utcDay.count(utcYear(d), d), p, 3)
      }
      function formatUTCMilliseconds(d, p) {
        return pad(d.getUTCMilliseconds(), p, 3)
      }
      function formatUTCMonthNumber(d, p) {
        return pad(d.getUTCMonth() + 1, p, 2)
      }
      function formatUTCMinutes(d, p) {
        return pad(d.getUTCMinutes(), p, 2)
      }
      function formatUTCSeconds(d, p) {
        return pad(d.getUTCSeconds(), p, 2)
      }
      function formatUTCWeekNumberSunday(d, p) {
        return pad(utcSunday.count(utcYear(d), d), p, 2)
      }
      function formatUTCWeekdayNumber(d) {
        return d.getUTCDay()
      }
      function formatUTCWeekNumberMonday(d, p) {
        return pad(utcMonday.count(utcYear(d), d), p, 2)
      }
      function formatUTCYear(d, p) {
        return pad(d.getUTCFullYear() % 100, p, 2)
      }
      function formatUTCFullYear(d, p) {
        return pad(d.getUTCFullYear() % 10000, p, 4)
      }
      function formatUTCZone() {
        return '+0000'
      }
      function formatLiteralPercent() {
        return '%'
      }
      var locale$2;
      defaultLocale$1({
        dateTime: '%x, %X',
        date: '%-m/%-d/%Y',
        time: '%-I:%M:%S %p',
        periods: [
          'AM',
          'PM'
        ],
        days: [
          'Sunday',
          'Monday',
          'Tuesday',
          'Wednesday',
          'Thursday',
          'Friday',
          'Saturday'
        ],
        shortDays: [
          'Sun',
          'Mon',
          'Tue',
          'Wed',
          'Thu',
          'Fri',
          'Sat'
        ],
        months: [
          'January',
          'February',
          'March',
          'April',
          'May',
          'June',
          'July',
          'August',
          'September',
          'October',
          'November',
          'December'
        ],
        shortMonths: [
          'Jan',
          'Feb',
          'Mar',
          'Apr',
          'May',
          'Jun',
          'Jul',
          'Aug',
          'Sep',
          'Oct',
          'Nov',
          'Dec'
        ]
      });
      function defaultLocale$1(definition) {
        locale$2 = formatLocale$1(definition);
        exports.timeFormat = locale$2.format;
        exports.timeParse = locale$2.parse;
        exports.utcFormat = locale$2.utcFormat;
        exports.utcParse = locale$2.utcParse;
        return locale$2
      }
      var isoSpecifier = '%Y-%m-%dT%H:%M:%S.%LZ';
      function formatIsoNative(date) {
        return date.toISOString()
      }
      var formatIso = Date.prototype.toISOString ? formatIsoNative : exports.utcFormat(isoSpecifier);
      function parseIsoNative(string) {
        var date = new Date(string);
        return isNaN(date) ? null : date
      }
      var parseIso = +new Date('2000-01-01T00:00:00.000Z') ? parseIsoNative : exports.utcParse(isoSpecifier);
      var durationSecond = 1000;
      var durationMinute = durationSecond * 60;
      var durationHour = durationMinute * 60;
      var durationDay = durationHour * 24;
      var durationWeek = durationDay * 7;
      var durationMonth = durationDay * 30;
      var durationYear = durationDay * 365;
      function date$1(t) {
        return new Date(t)
      }
      function number$2(t) {
        return t instanceof Date ? +t : +new Date(+t)
      }
      function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
        var scale = continuous(deinterpolateLinear, reinterpolate), invert = scale.invert, domain = scale.domain;
        var formatMillisecond = format('.%L'), formatSecond = format(':%S'), formatMinute = format('%I:%M'), formatHour = format('%I %p'), formatDay = format('%a %d'), formatWeek = format('%b %d'), formatMonth = format('%B'), formatYear = format('%Y');
        var tickIntervals = [
          [
            second$$1,
            1,
            durationSecond
          ],
          [
            second$$1,
            5,
            5 * durationSecond
          ],
          [
            second$$1,
            15,
            15 * durationSecond
          ],
          [
            second$$1,
            30,
            30 * durationSecond
          ],
          [
            minute$$1,
            1,
            durationMinute
          ],
          [
            minute$$1,
            5,
            5 * durationMinute
          ],
          [
            minute$$1,
            15,
            15 * durationMinute
          ],
          [
            minute$$1,
            30,
            30 * durationMinute
          ],
          [
            hour$$1,
            1,
            durationHour
          ],
          [
            hour$$1,
            3,
            3 * durationHour
          ],
          [
            hour$$1,
            6,
            6 * durationHour
          ],
          [
            hour$$1,
            12,
            12 * durationHour
          ],
          [
            day$$1,
            1,
            durationDay
          ],
          [
            day$$1,
            2,
            2 * durationDay
          ],
          [
            week,
            1,
            durationWeek
          ],
          [
            month$$1,
            1,
            durationMonth
          ],
          [
            month$$1,
            3,
            3 * durationMonth
          ],
          [
            year$$1,
            1,
            durationYear
          ]
        ];
        function tickFormat(date) {
          return (second$$1(date) < date ? formatMillisecond : minute$$1(date) < date ? formatSecond : hour$$1(date) < date ? formatMinute : day$$1(date) < date ? formatHour : month$$1(date) < date ? week(date) < date ? formatDay : formatWeek : year$$1(date) < date ? formatMonth : formatYear)(date)
        }
        function tickInterval(interval, start, stop, step) {
          if (interval == null)
            interval = 10;
          // If a desired tick count is specified, pick a reasonable tick interval
          // based on the extent of the domain and a rough estimate of tick size.
          // Otherwise, assume interval is already a time interval and use it.
          if (typeof interval === 'number') {
            var target = Math.abs(stop - start) / interval, i = bisector(function (i) {
                return i[2]
              }).right(tickIntervals, target);
            if (i === tickIntervals.length) {
              step = tickStep(start / durationYear, stop / durationYear, interval);
              interval = year$$1
            } else if (i) {
              i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
              step = i[1];
              interval = i[0]
            } else {
              step = tickStep(start, stop, interval);
              interval = millisecond$$1
            }
          }
          return step == null ? interval : interval.every(step)
        }
        scale.invert = function (y) {
          return new Date(invert(y))
        };
        scale.domain = function (_) {
          return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1)
        };
        scale.ticks = function (interval, step) {
          var d = domain(), t0 = d[0], t1 = d[d.length - 1], r = t1 < t0, t;
          if (r)
            t = t0, t0 = t1, t1 = t;
          t = tickInterval(interval, t0, t1, step);
          t = t ? t.range(t0, t1 + 1) : [];
          // inclusive stop
          return r ? t.reverse() : t
        };
        scale.tickFormat = function (count, specifier) {
          return specifier == null ? tickFormat : format(specifier)
        };
        scale.nice = function (interval, step) {
          var d = domain();
          return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale
        };
        scale.copy = function () {
          return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format))
        };
        return scale
      }
      var time = function () {
        return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([
          new Date(2000, 0, 1),
          new Date(2000, 0, 2)
        ])
      };
      var utcTime = function () {
        return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([
          Date.UTC(2000, 0, 1),
          Date.UTC(2000, 0, 2)
        ])
      };
      var colors = function (s) {
        return s.match(/.{6}/g).map(function (x) {
          return '#' + x
        })
      };
      var category10 = colors('1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf');
      var category20b = colors('393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6');
      var category20c = colors('3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9');
      var category20 = colors('1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5');
      var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));
      var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
      var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
      var rainbow = cubehelix();
      var rainbow$1 = function (t) {
        if (t < 0 || t > 1)
          t -= Math.floor(t);
        var ts = Math.abs(t - 0.5);
        rainbow.h = 360 * t - 100;
        rainbow.s = 1.5 - 1.5 * ts;
        rainbow.l = 0.8 - 0.9 * ts;
        return rainbow + ''
      };
      function ramp(range) {
        var n = range.length;
        return function (t) {
          return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))]
        }
      }
      var viridis = ramp(colors('44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725'));
      var magma = ramp(colors('00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf'));
      var inferno = ramp(colors('00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4'));
      var plasma = ramp(colors('0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921'));
      function sequential(interpolator) {
        var x0 = 0, x1 = 1, clamp = false;
        function scale(x) {
          var t = (x - x0) / (x1 - x0);
          return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t)
        }
        scale.domain = function (_) {
          return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [
            x0,
            x1
          ]
        };
        scale.clamp = function (_) {
          return arguments.length ? (clamp = !!_, scale) : clamp
        };
        scale.interpolator = function (_) {
          return arguments.length ? (interpolator = _, scale) : interpolator
        };
        scale.copy = function () {
          return sequential(interpolator).domain([
            x0,
            x1
          ]).clamp(clamp)
        };
        return linearish(scale)
      }
      var constant$10 = function (x) {
        return function constant() {
          return x
        }
      };
      var epsilon$3 = 1e-12;
      var pi$4 = Math.PI;
      var halfPi$3 = pi$4 / 2;
      var tau$4 = 2 * pi$4;
      function arcInnerRadius(d) {
        return d.innerRadius
      }
      function arcOuterRadius(d) {
        return d.outerRadius
      }
      function arcStartAngle(d) {
        return d.startAngle
      }
      function arcEndAngle(d) {
        return d.endAngle
      }
      function arcPadAngle(d) {
        return d && d.padAngle  // Note: optional!
      }
      function asin$1(x) {
        return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x)
      }
      function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
        var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
        return [
          x0 + t * x10,
          y0 + t * y10
        ]
      }
      // Compute perpendicular offset line of length rc.
      // http://mathworld.wolfram.com/Circle-LineIntersection.html
      function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
        var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
        // Pick the closer of the two intersection points.
        // TODO Is there a faster way to determine which intersection to use?
        if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
          cx0 = cx1, cy0 = cy1;
        return {
          cx: cx0,
          cy: cy0,
          x01: -ox,
          y01: -oy,
          x11: cx0 * (r1 / r - 1),
          y11: cy0 * (r1 / r - 1)
        }
      }
      var arc = function () {
        var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant$10(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
        function arc() {
          var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi$3, a1 = endAngle.apply(this, arguments) - halfPi$3, da = Math.abs(a1 - a0), cw = a1 > a0;
          if (!context)
            context = buffer = path();
          // Ensure that the outer radius is always larger than the inner radius.
          if (r1 < r0)
            r = r1, r1 = r0, r0 = r;
          // Is it a point?
          if (!(r1 > epsilon$3))
            context.moveTo(0, 0);  // Or is it a circle or annulus?
          else if (da > tau$4 - epsilon$3) {
            context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > epsilon$3) {
              context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
              context.arc(0, 0, r0, a1, a0, cw)
            }
          }  // Or is it a circular or annular sector?
          else {
            var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon$3 && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)), rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
            // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
            if (rp > epsilon$3) {
              var p0 = asin$1(rp / r0 * Math.sin(ap)), p1 = asin$1(rp / r1 * Math.sin(ap));
              if ((da0 -= p0 * 2) > epsilon$3)
                p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
              else
                da0 = 0, a00 = a10 = (a0 + a1) / 2;
              if ((da1 -= p1 * 2) > epsilon$3)
                p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
              else
                da1 = 0, a01 = a11 = (a0 + a1) / 2
            }
            var x01 = r1 * Math.cos(a01), y01 = r1 * Math.sin(a01), x10 = r0 * Math.cos(a10), y10 = r0 * Math.sin(a10);
            // Apply rounded corners?
            if (rc > epsilon$3) {
              var x11 = r1 * Math.cos(a11), y11 = r1 * Math.sin(a11), x00 = r0 * Math.cos(a00), y00 = r0 * Math.sin(a00);
              // Restrict the corner radius according to the sector angle.
              if (da < pi$4) {
                var oc = da0 > epsilon$3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [
                    x10,
                    y10
                  ], ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                rc1 = Math.min(rc, (r1 - lc) / (kc + 1))
              }
            }
            // Is the sector collapsed to a line?
            if (!(da1 > epsilon$3))
              context.moveTo(x01, y01);  // Does the sector’s outer ring have rounded corners?
            else if (rc1 > epsilon$3) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
              // Have the corners merged?
              if (rc1 < rc)
                context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);  // Otherwise, draw the two corners and the ring.
              else {
                context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw)
              }
            }  // Or is the outer ring just a circular arc?
            else
              context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
            // Is there no inner ring, and it’s a circular sector?
            // Or perhaps it’s an annular sector collapsed due to padding?
            if (!(r0 > epsilon$3) || !(da0 > epsilon$3))
              context.lineTo(x10, y10);  // Does the sector’s inner ring (or point) have rounded corners?
            else if (rc0 > epsilon$3) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
              // Have the corners merged?
              if (rc0 < rc)
                context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);  // Otherwise, draw the two corners and the ring.
              else {
                context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw)
              }
            }  // Or is the inner ring just a circular arc?
            else
              context.arc(0, 0, r0, a10, a00, cw)
          }
          context.closePath();
          if (buffer)
            return context = null, buffer + '' || null
        }
        arc.centroid = function () {
          var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;
          return [
            Math.cos(a) * r,
            Math.sin(a) * r
          ]
        };
        arc.innerRadius = function (_) {
          return arguments.length ? (innerRadius = typeof _ === 'function' ? _ : constant$10(+_), arc) : innerRadius
        };
        arc.outerRadius = function (_) {
          return arguments.length ? (outerRadius = typeof _ === 'function' ? _ : constant$10(+_), arc) : outerRadius
        };
        arc.cornerRadius = function (_) {
          return arguments.length ? (cornerRadius = typeof _ === 'function' ? _ : constant$10(+_), arc) : cornerRadius
        };
        arc.padRadius = function (_) {
          return arguments.length ? (padRadius = _ == null ? null : typeof _ === 'function' ? _ : constant$10(+_), arc) : padRadius
        };
        arc.startAngle = function (_) {
          return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$10(+_), arc) : startAngle
        };
        arc.endAngle = function (_) {
          return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$10(+_), arc) : endAngle
        };
        arc.padAngle = function (_) {
          return arguments.length ? (padAngle = typeof _ === 'function' ? _ : constant$10(+_), arc) : padAngle
        };
        arc.context = function (_) {
          return arguments.length ? (context = _ == null ? null : _, arc) : context
        };
        return arc
      };
      function Linear(context) {
        this._context = context
      }
      Linear.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._point = 0
        },
        lineEnd: function () {
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
          case 1:
            this._point = 2;
          // proceed
          default:
            this._context.lineTo(x, y);
            break
          }
        }
      };
      var curveLinear = function (context) {
        return new Linear(context)
      };
      function x$3(p) {
        return p[0]
      }
      function y$3(p) {
        return p[1]
      }
      var line = function () {
        var x$$1 = x$3, y$$1 = y$3, defined = constant$10(true), context = null, curve = curveLinear, output = null;
        function line(data) {
          var i, n = data.length, d, defined0 = false, buffer;
          if (context == null)
            output = curve(buffer = path());
          for (i = 0; i <= n; ++i) {
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
              if (defined0 = !defined0)
                output.lineStart();
              else
                output.lineEnd()
            }
            if (defined0)
              output.point(+x$$1(d, i, data), +y$$1(d, i, data))
          }
          if (buffer)
            return output = null, buffer + '' || null
        }
        line.x = function (_) {
          return arguments.length ? (x$$1 = typeof _ === 'function' ? _ : constant$10(+_), line) : x$$1
        };
        line.y = function (_) {
          return arguments.length ? (y$$1 = typeof _ === 'function' ? _ : constant$10(+_), line) : y$$1
        };
        line.defined = function (_) {
          return arguments.length ? (defined = typeof _ === 'function' ? _ : constant$10(!!_), line) : defined
        };
        line.curve = function (_) {
          return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve
        };
        line.context = function (_) {
          return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context
        };
        return line
      };
      var area$2 = function () {
        var x0 = x$3, x1 = null, y0 = constant$10(0), y1 = y$3, defined = constant$10(true), context = null, curve = curveLinear, output = null;
        function area(data) {
          var i, j, k, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
          if (context == null)
            output = curve(buffer = path());
          for (i = 0; i <= n; ++i) {
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
              if (defined0 = !defined0) {
                j = i;
                output.areaStart();
                output.lineStart()
              } else {
                output.lineEnd();
                output.lineStart();
                for (k = i - 1; k >= j; --k) {
                  output.point(x0z[k], y0z[k])
                }
                output.lineEnd();
                output.areaEnd()
              }
            }
            if (defined0) {
              x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
              output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i])
            }
          }
          if (buffer)
            return output = null, buffer + '' || null
        }
        function arealine() {
          return line().defined(defined).curve(curve).context(context)
        }
        area.x = function (_) {
          return arguments.length ? (x0 = typeof _ === 'function' ? _ : constant$10(+_), x1 = null, area) : x0
        };
        area.x0 = function (_) {
          return arguments.length ? (x0 = typeof _ === 'function' ? _ : constant$10(+_), area) : x0
        };
        area.x1 = function (_) {
          return arguments.length ? (x1 = _ == null ? null : typeof _ === 'function' ? _ : constant$10(+_), area) : x1
        };
        area.y = function (_) {
          return arguments.length ? (y0 = typeof _ === 'function' ? _ : constant$10(+_), y1 = null, area) : y0
        };
        area.y0 = function (_) {
          return arguments.length ? (y0 = typeof _ === 'function' ? _ : constant$10(+_), area) : y0
        };
        area.y1 = function (_) {
          return arguments.length ? (y1 = _ == null ? null : typeof _ === 'function' ? _ : constant$10(+_), area) : y1
        };
        area.lineX0 = area.lineY0 = function () {
          return arealine().x(x0).y(y0)
        };
        area.lineY1 = function () {
          return arealine().x(x0).y(y1)
        };
        area.lineX1 = function () {
          return arealine().x(x1).y(y0)
        };
        area.defined = function (_) {
          return arguments.length ? (defined = typeof _ === 'function' ? _ : constant$10(!!_), area) : defined
        };
        area.curve = function (_) {
          return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve
        };
        area.context = function (_) {
          return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context
        };
        return area
      };
      var descending$1 = function (a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN
      };
      var identity$7 = function (d) {
        return d
      };
      var pie = function () {
        var value = identity$7, sortValues = descending$1, sort = null, startAngle = constant$10(0), endAngle = constant$10(tau$4), padAngle = constant$10(0);
        function pie(data) {
          var i, n = data.length, j, k, sum = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
          for (i = 0; i < n; ++i) {
            if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
              sum += v
            }
          }
          // Optionally sort the arcs by previously-computed values or by data.
          if (sortValues != null)
            index.sort(function (i, j) {
              return sortValues(arcs[i], arcs[j])
            });
          else if (sort != null)
            index.sort(function (i, j) {
              return sort(data[i], data[j])
            });
          // Compute the arcs! They are stored in the original data's order.
          for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
            j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
              data: data[j],
              index: i,
              value: v,
              startAngle: a0,
              endAngle: a1,
              padAngle: p
            }
          }
          return arcs
        }
        pie.value = function (_) {
          return arguments.length ? (value = typeof _ === 'function' ? _ : constant$10(+_), pie) : value
        };
        pie.sortValues = function (_) {
          return arguments.length ? (sortValues = _, sort = null, pie) : sortValues
        };
        pie.sort = function (_) {
          return arguments.length ? (sort = _, sortValues = null, pie) : sort
        };
        pie.startAngle = function (_) {
          return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$10(+_), pie) : startAngle
        };
        pie.endAngle = function (_) {
          return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$10(+_), pie) : endAngle
        };
        pie.padAngle = function (_) {
          return arguments.length ? (padAngle = typeof _ === 'function' ? _ : constant$10(+_), pie) : padAngle
        };
        return pie
      };
      var curveRadialLinear = curveRadial(curveLinear);
      function Radial(curve) {
        this._curve = curve
      }
      Radial.prototype = {
        areaStart: function () {
          this._curve.areaStart()
        },
        areaEnd: function () {
          this._curve.areaEnd()
        },
        lineStart: function () {
          this._curve.lineStart()
        },
        lineEnd: function () {
          this._curve.lineEnd()
        },
        point: function (a, r) {
          this._curve.point(r * Math.sin(a), r * -Math.cos(a))
        }
      };
      function curveRadial(curve) {
        function radial(context) {
          return new Radial(curve(context))
        }
        radial._curve = curve;
        return radial
      }
      function radialLine(l) {
        var c = l.curve;
        l.angle = l.x, delete l.x;
        l.radius = l.y, delete l.y;
        l.curve = function (_) {
          return arguments.length ? c(curveRadial(_)) : c()._curve
        };
        return l
      }
      var radialLine$1 = function () {
        return radialLine(line().curve(curveRadialLinear))
      };
      var radialArea = function () {
        var a = area$2().curve(curveRadialLinear), c = a.curve, x0 = a.lineX0, x1 = a.lineX1, y0 = a.lineY0, y1 = a.lineY1;
        a.angle = a.x, delete a.x;
        a.startAngle = a.x0, delete a.x0;
        a.endAngle = a.x1, delete a.x1;
        a.radius = a.y, delete a.y;
        a.innerRadius = a.y0, delete a.y0;
        a.outerRadius = a.y1, delete a.y1;
        a.lineStartAngle = function () {
          return radialLine(x0())
        }, delete a.lineX0;
        a.lineEndAngle = function () {
          return radialLine(x1())
        }, delete a.lineX1;
        a.lineInnerRadius = function () {
          return radialLine(y0())
        }, delete a.lineY0;
        a.lineOuterRadius = function () {
          return radialLine(y1())
        }, delete a.lineY1;
        a.curve = function (_) {
          return arguments.length ? c(curveRadial(_)) : c()._curve
        };
        return a
      };
      var circle$2 = {
        draw: function (context, size) {
          var r = Math.sqrt(size / pi$4);
          context.moveTo(r, 0);
          context.arc(0, 0, r, 0, tau$4)
        }
      };
      var cross$1 = {
        draw: function (context, size) {
          var r = Math.sqrt(size / 5) / 2;
          context.moveTo(-3 * r, -r);
          context.lineTo(-r, -r);
          context.lineTo(-r, -3 * r);
          context.lineTo(r, -3 * r);
          context.lineTo(r, -r);
          context.lineTo(3 * r, -r);
          context.lineTo(3 * r, r);
          context.lineTo(r, r);
          context.lineTo(r, 3 * r);
          context.lineTo(-r, 3 * r);
          context.lineTo(-r, r);
          context.lineTo(-3 * r, r);
          context.closePath()
        }
      };
      var tan30 = Math.sqrt(1 / 3);
      var tan30_2 = tan30 * 2;
      var diamond = {
        draw: function (context, size) {
          var y = Math.sqrt(size / tan30_2), x = y * tan30;
          context.moveTo(0, -y);
          context.lineTo(x, 0);
          context.lineTo(0, y);
          context.lineTo(-x, 0);
          context.closePath()
        }
      };
      var ka = 0.8908130915292852;
      var kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10);
      var kx = Math.sin(tau$4 / 10) * kr;
      var ky = -Math.cos(tau$4 / 10) * kr;
      var star = {
        draw: function (context, size) {
          var r = Math.sqrt(size * ka), x = kx * r, y = ky * r;
          context.moveTo(0, -r);
          context.lineTo(x, y);
          for (var i = 1; i < 5; ++i) {
            var a = tau$4 * i / 5, c = Math.cos(a), s = Math.sin(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y)
          }
          context.closePath()
        }
      };
      var square = {
        draw: function (context, size) {
          var w = Math.sqrt(size), x = -w / 2;
          context.rect(x, x, w, w)
        }
      };
      var sqrt3 = Math.sqrt(3);
      var triangle = {
        draw: function (context, size) {
          var y = -Math.sqrt(size / (sqrt3 * 3));
          context.moveTo(0, y * 2);
          context.lineTo(-sqrt3 * y, -y);
          context.lineTo(sqrt3 * y, -y);
          context.closePath()
        }
      };
      var c = -0.5;
      var s = Math.sqrt(3) / 2;
      var k = 1 / Math.sqrt(12);
      var a = (k / 2 + 1) * 3;
      var wye = {
        draw: function (context, size) {
          var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x2 = -x1, y2 = y1;
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
          context.lineTo(x2, y2);
          context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
          context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
          context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
          context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
          context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
          context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
          context.closePath()
        }
      };
      var symbols = [
        circle$2,
        cross$1,
        diamond,
        square,
        star,
        triangle,
        wye
      ];
      var symbol = function () {
        var type = constant$10(circle$2), size = constant$10(64), context = null;
        function symbol() {
          var buffer;
          if (!context)
            context = buffer = path();
          type.apply(this, arguments).draw(context, +size.apply(this, arguments));
          if (buffer)
            return context = null, buffer + '' || null
        }
        symbol.type = function (_) {
          return arguments.length ? (type = typeof _ === 'function' ? _ : constant$10(_), symbol) : type
        };
        symbol.size = function (_) {
          return arguments.length ? (size = typeof _ === 'function' ? _ : constant$10(+_), symbol) : size
        };
        symbol.context = function (_) {
          return arguments.length ? (context = _ == null ? null : _, symbol) : context
        };
        return symbol
      };
      var noop$2 = function () {
      };
      function point$2(that, x, y) {
        that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6)
      }
      function Basis(context) {
        this._context = context
      }
      Basis.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x0 = this._x1 = this._y0 = this._y1 = NaN;
          this._point = 0
        },
        lineEnd: function () {
          switch (this._point) {
          case 3:
            point$2(this, this._x1, this._y1);
          // proceed
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          // proceed
          default:
            point$2(this, x, y);
            break
          }
          this._x0 = this._x1, this._x1 = x;
          this._y0 = this._y1, this._y1 = y
        }
      };
      var basis$2 = function (context) {
        return new Basis(context)
      };
      function BasisClosed(context) {
        this._context = context
      }
      BasisClosed.prototype = {
        areaStart: noop$2,
        areaEnd: noop$2,
        lineStart: function () {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
          this._point = 0
        },
        lineEnd: function () {
          switch (this._point) {
          case 1: {
              this._context.moveTo(this._x2, this._y2);
              this._context.closePath();
              break
            }
          case 2: {
              this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
              this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
              this._context.closePath();
              break
            }
          case 3: {
              this.point(this._x2, this._y2);
              this.point(this._x3, this._y3);
              this.point(this._x4, this._y4);
              break
            }
          }
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x, this._y2 = y;
            break;
          case 1:
            this._point = 2;
            this._x3 = x, this._y3 = y;
            break;
          case 2:
            this._point = 3;
            this._x4 = x, this._y4 = y;
            this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
            break;
          default:
            point$2(this, x, y);
            break
          }
          this._x0 = this._x1, this._x1 = x;
          this._y0 = this._y1, this._y1 = y
        }
      };
      var basisClosed$1 = function (context) {
        return new BasisClosed(context)
      };
      function BasisOpen(context) {
        this._context = context
      }
      BasisOpen.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x0 = this._x1 = this._y0 = this._y1 = NaN;
          this._point = 0
        },
        lineEnd: function () {
          if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          // proceed
          default:
            point$2(this, x, y);
            break
          }
          this._x0 = this._x1, this._x1 = x;
          this._y0 = this._y1, this._y1 = y
        }
      };
      var basisOpen = function (context) {
        return new BasisOpen(context)
      };
      function Bundle(context, beta) {
        this._basis = new Basis(context);
        this._beta = beta
      }
      Bundle.prototype = {
        lineStart: function () {
          this._x = [];
          this._y = [];
          this._basis.lineStart()
        },
        lineEnd: function () {
          var x = this._x, y = this._y, j = x.length - 1;
          if (j > 0) {
            var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
            while (++i <= j) {
              t = i / j;
              this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy))
            }
          }
          this._x = this._y = null;
          this._basis.lineEnd()
        },
        point: function (x, y) {
          this._x.push(+x);
          this._y.push(+y)
        }
      };
      var bundle = function custom(beta) {
        function bundle(context) {
          return beta === 1 ? new Basis(context) : new Bundle(context, beta)
        }
        bundle.beta = function (beta) {
          return custom(+beta)
        };
        return bundle
      }(0.85);
      function point$3(that, x, y) {
        that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2)
      }
      function Cardinal(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6
      }
      Cardinal.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._point = 0
        },
        lineEnd: function () {
          switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            point$3(this, this._x1, this._y1);
            break
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
          case 1:
            this._point = 2;
            this._x1 = x, this._y1 = y;
            break;
          case 2:
            this._point = 3;
          // proceed
          default:
            point$3(this, x, y);
            break
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y
        }
      };
      var cardinal = function custom(tension) {
        function cardinal(context) {
          return new Cardinal(context, tension)
        }
        cardinal.tension = function (tension) {
          return custom(+tension)
        };
        return cardinal
      }(0);
      function CardinalClosed(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6
      }
      CardinalClosed.prototype = {
        areaStart: noop$2,
        areaEnd: noop$2,
        lineStart: function () {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
          this._point = 0
        },
        lineEnd: function () {
          switch (this._point) {
          case 1: {
              this._context.moveTo(this._x3, this._y3);
              this._context.closePath();
              break
            }
          case 2: {
              this._context.lineTo(this._x3, this._y3);
              this._context.closePath();
              break
            }
          case 3: {
              this.point(this._x3, this._y3);
              this.point(this._x4, this._y4);
              this.point(this._x5, this._y5);
              break
            }
          }
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x, this._y3 = y;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x, this._y4 = y);
            break;
          case 2:
            this._point = 3;
            this._x5 = x, this._y5 = y;
            break;
          default:
            point$3(this, x, y);
            break
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y
        }
      };
      var cardinalClosed = function custom(tension) {
        function cardinal(context) {
          return new CardinalClosed(context, tension)
        }
        cardinal.tension = function (tension) {
          return custom(+tension)
        };
        return cardinal
      }(0);
      function CardinalOpen(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6
      }
      CardinalOpen.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._point = 0
        },
        lineEnd: function () {
          if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          // proceed
          default:
            point$3(this, x, y);
            break
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y
        }
      };
      var cardinalOpen = function custom(tension) {
        function cardinal(context) {
          return new CardinalOpen(context, tension)
        }
        cardinal.tension = function (tension) {
          return custom(+tension)
        };
        return cardinal
      }(0);
      function point$4(that, x, y) {
        var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
        if (that._l01_a > epsilon$3) {
          var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
          x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
          y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n
        }
        if (that._l23_a > epsilon$3) {
          var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
          x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
          y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m
        }
        that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2)
      }
      function CatmullRom(context, alpha) {
        this._context = context;
        this._alpha = alpha
      }
      CatmullRom.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0
        },
        lineEnd: function () {
          switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            this.point(this._x2, this._y2);
            break
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha))
          }
          switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
          // proceed
          default:
            point$4(this, x, y);
            break
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a;
          this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y
        }
      };
      var catmullRom = function custom(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0)
        }
        catmullRom.alpha = function (alpha) {
          return custom(+alpha)
        };
        return catmullRom
      }(0.5);
      function CatmullRomClosed(context, alpha) {
        this._context = context;
        this._alpha = alpha
      }
      CatmullRomClosed.prototype = {
        areaStart: noop$2,
        areaEnd: noop$2,
        lineStart: function () {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
          this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0
        },
        lineEnd: function () {
          switch (this._point) {
          case 1: {
              this._context.moveTo(this._x3, this._y3);
              this._context.closePath();
              break
            }
          case 2: {
              this._context.lineTo(this._x3, this._y3);
              this._context.closePath();
              break
            }
          case 3: {
              this.point(this._x3, this._y3);
              this.point(this._x4, this._y4);
              this.point(this._x5, this._y5);
              break
            }
          }
        },
        point: function (x, y) {
          x = +x, y = +y;
          if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha))
          }
          switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x, this._y3 = y;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x, this._y4 = y);
            break;
          case 2:
            this._point = 3;
            this._x5 = x, this._y5 = y;
            break;
          default:
            point$4(this, x, y);
            break
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a;
          this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y
        }
      };
      var catmullRomClosed = function custom(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0)
        }
        catmullRom.alpha = function (alpha) {
          return custom(+alpha)
        };
        return catmullRom
      }(0.5);
      function CatmullRomOpen(context, alpha) {
        this._context = context;
        this._alpha = alpha
      }
      CatmullRomOpen.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0
        },
        lineEnd: function () {
          if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha))
          }
          switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          // proceed
          default:
            point$4(this, x, y);
            break
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a;
          this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y
        }
      };
      var catmullRomOpen = function custom(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0)
        }
        catmullRom.alpha = function (alpha) {
          return custom(+alpha)
        };
        return catmullRom
      }(0.5);
      function LinearClosed(context) {
        this._context = context
      }
      LinearClosed.prototype = {
        areaStart: noop$2,
        areaEnd: noop$2,
        lineStart: function () {
          this._point = 0
        },
        lineEnd: function () {
          if (this._point)
            this._context.closePath()
        },
        point: function (x, y) {
          x = +x, y = +y;
          if (this._point)
            this._context.lineTo(x, y);
          else
            this._point = 1, this._context.moveTo(x, y)
        }
      };
      var linearClosed = function (context) {
        return new LinearClosed(context)
      };
      function sign$1(x) {
        return x < 0 ? -1 : 1
      }
      // Calculate the slopes of the tangents (Hermite-type interpolation) based on
      // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
      // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
      // NOV(II), P. 443, 1990.
      function slope3(that, x2, y2) {
        var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
        return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0
      }
      // Calculate a one-sided slope.
      function slope2(that, t) {
        var h = that._x1 - that._x0;
        return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t
      }
      // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
      // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
      // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
      function point$5(that, t0, t1) {
        var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
        that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1)
      }
      function MonotoneX(context) {
        this._context = context
      }
      MonotoneX.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
          this._point = 0
        },
        lineEnd: function () {
          switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point$5(this, this._t0, slope2(this, this._t0));
            break
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line
        },
        point: function (x, y) {
          var t1 = NaN;
          x = +x, y = +y;
          if (x === this._x1 && y === this._y1)
            return;
          // Ignore coincident points.
          switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point$5(this, slope2(this, t1 = slope3(this, x, y)), t1);
            break;
          default:
            point$5(this, this._t0, t1 = slope3(this, x, y));
            break
          }
          this._x0 = this._x1, this._x1 = x;
          this._y0 = this._y1, this._y1 = y;
          this._t0 = t1
        }
      };
      function MonotoneY(context) {
        this._context = new ReflectContext(context)
      }
      (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
        MonotoneX.prototype.point.call(this, y, x)
      };
      function ReflectContext(context) {
        this._context = context
      }
      ReflectContext.prototype = {
        moveTo: function (x, y) {
          this._context.moveTo(y, x)
        },
        closePath: function () {
          this._context.closePath()
        },
        lineTo: function (x, y) {
          this._context.lineTo(y, x)
        },
        bezierCurveTo: function (x1, y1, x2, y2, x, y) {
          this._context.bezierCurveTo(y1, x1, y2, x2, y, x)
        }
      };
      function monotoneX(context) {
        return new MonotoneX(context)
      }
      function monotoneY(context) {
        return new MonotoneY(context)
      }
      function Natural(context) {
        this._context = context
      }
      Natural.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x = [];
          this._y = []
        },
        lineEnd: function () {
          var x = this._x, y = this._y, n = x.length;
          if (n) {
            this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
            if (n === 2) {
              this._context.lineTo(x[1], y[1])
            } else {
              var px = controlPoints(x), py = controlPoints(y);
              for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
                this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1])
              }
            }
          }
          if (this._line || this._line !== 0 && n === 1)
            this._context.closePath();
          this._line = 1 - this._line;
          this._x = this._y = null
        },
        point: function (x, y) {
          this._x.push(+x);
          this._y.push(+y)
        }
      };
      // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
      function controlPoints(x) {
        var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
        a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
        for (i = 1; i < n - 1; ++i)
          a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
        a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
        for (i = 1; i < n; ++i)
          m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
        a[n - 1] = r[n - 1] / b[n - 1];
        for (i = n - 2; i >= 0; --i)
          a[i] = (r[i] - a[i + 1]) / b[i];
        b[n - 1] = (x[n] + a[n - 1]) / 2;
        for (i = 0; i < n - 1; ++i)
          b[i] = 2 * x[i + 1] - a[i + 1];
        return [
          a,
          b
        ]
      }
      var natural = function (context) {
        return new Natural(context)
      };
      function Step(context, t) {
        this._context = context;
        this._t = t
      }
      Step.prototype = {
        areaStart: function () {
          this._line = 0
        },
        areaEnd: function () {
          this._line = NaN
        },
        lineStart: function () {
          this._x = this._y = NaN;
          this._point = 0
        },
        lineEnd: function () {
          if (0 < this._t && this._t < 1 && this._point === 2)
            this._context.lineTo(this._x, this._y);
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          if (this._line >= 0)
            this._t = 1 - this._t, this._line = 1 - this._line
        },
        point: function (x, y) {
          x = +x, y = +y;
          switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
          case 1:
            this._point = 2;
          // proceed
          default: {
              if (this._t <= 0) {
                this._context.lineTo(this._x, y);
                this._context.lineTo(x, y)
              } else {
                var x1 = this._x * (1 - this._t) + x * this._t;
                this._context.lineTo(x1, this._y);
                this._context.lineTo(x1, y)
              }
              break
            }
          }
          this._x = x, this._y = y
        }
      };
      var step = function (context) {
        return new Step(context, 0.5)
      };
      function stepBefore(context) {
        return new Step(context, 0)
      }
      function stepAfter(context) {
        return new Step(context, 1)
      }
      var slice$5 = Array.prototype.slice;
      var none$1 = function (series, order) {
        if (!((n = series.length) > 1))
          return;
        for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
          s0 = s1, s1 = series[order[i]];
          for (var j = 0; j < m; ++j) {
            s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1]
          }
        }
      };
      var none$2 = function (series) {
        var n = series.length, o = new Array(n);
        while (--n >= 0)
          o[n] = n;
        return o
      };
      function stackValue(d, key) {
        return d[key]
      }
      var stack = function () {
        var keys = constant$10([]), order = none$2, offset = none$1, value = stackValue;
        function stack(data) {
          var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
          for (i = 0; i < n; ++i) {
            for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
              si[j] = sij = [
                0,
                +value(data[j], ki, j, data)
              ];
              sij.data = data[j]
            }
            si.key = ki
          }
          for (i = 0, oz = order(sz); i < n; ++i) {
            sz[oz[i]].index = i
          }
          offset(sz, oz);
          return sz
        }
        stack.keys = function (_) {
          return arguments.length ? (keys = typeof _ === 'function' ? _ : constant$10(slice$5.call(_)), stack) : keys
        };
        stack.value = function (_) {
          return arguments.length ? (value = typeof _ === 'function' ? _ : constant$10(+_), stack) : value
        };
        stack.order = function (_) {
          return arguments.length ? (order = _ == null ? none$2 : typeof _ === 'function' ? _ : constant$10(slice$5.call(_)), stack) : order
        };
        stack.offset = function (_) {
          return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset
        };
        return stack
      };
      var expand = function (series, order) {
        if (!((n = series.length) > 0))
          return;
        for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
          for (y = i = 0; i < n; ++i)
            y += series[i][j][1] || 0;
          if (y)
            for (i = 0; i < n; ++i)
              series[i][j][1] /= y
        }
        none$1(series, order)
      };
      var silhouette = function (series, order) {
        if (!((n = series.length) > 0))
          return;
        for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
          for (var i = 0, y = 0; i < n; ++i)
            y += series[i][j][1] || 0;
          s0[j][1] += s0[j][0] = -y / 2
        }
        none$1(series, order)
      };
      var wiggle = function (series, order) {
        if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0))
          return;
        for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
          for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
            var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
            for (var k = 0; k < i; ++k) {
              var sk = series[order[k]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
              s3 += skj0 - skj1
            }
            s1 += sij0, s2 += s3 * sij0
          }
          s0[j - 1][1] += s0[j - 1][0] = y;
          if (s1)
            y -= s2 / s1
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        none$1(series, order)
      };
      var ascending$2 = function (series) {
        var sums = series.map(sum$2);
        return none$2(series).sort(function (a, b) {
          return sums[a] - sums[b]
        })
      };
      function sum$2(series) {
        var s = 0, i = -1, n = series.length, v;
        while (++i < n)
          if (v = +series[i][1])
            s += v;
        return s
      }
      var descending$2 = function (series) {
        return ascending$2(series).reverse()
      };
      var insideOut = function (series) {
        var n = series.length, i, j, sums = series.map(sum$2), order = none$2(series).sort(function (a, b) {
            return sums[b] - sums[a]
          }), top = 0, bottom = 0, tops = [], bottoms = [];
        for (i = 0; i < n; ++i) {
          j = order[i];
          if (top < bottom) {
            top += sums[j];
            tops.push(j)
          } else {
            bottom += sums[j];
            bottoms.push(j)
          }
        }
        return bottoms.reverse().concat(tops)
      };
      var reverse = function (series) {
        return none$2(series).reverse()
      };
      var constant$11 = function (x) {
        return function () {
          return x
        }
      };
      function x$4(d) {
        return d[0]
      }
      function y$4(d) {
        return d[1]
      }
      function RedBlackTree() {
        this._ = null  // root node
      }
      function RedBlackNode(node) {
        node.U = // parent node
        node.C = // color - true for red, false for black
        node.L = // left node
        node.R = // right node
        node.P = // previous node
        node.N = null  // next node
      }
      RedBlackTree.prototype = {
        constructor: RedBlackTree,
        insert: function (after, node) {
          var parent, grandpa, uncle;
          if (after) {
            node.P = after;
            node.N = after.N;
            if (after.N)
              after.N.P = node;
            after.N = node;
            if (after.R) {
              after = after.R;
              while (after.L)
                after = after.L;
              after.L = node
            } else {
              after.R = node
            }
            parent = after
          } else if (this._) {
            after = RedBlackFirst(this._);
            node.P = null;
            node.N = after;
            after.P = after.L = node;
            parent = after
          } else {
            node.P = node.N = null;
            this._ = node;
            parent = null
          }
          node.L = node.R = null;
          node.U = parent;
          node.C = true;
          after = node;
          while (parent && parent.C) {
            grandpa = parent.U;
            if (parent === grandpa.L) {
              uncle = grandpa.R;
              if (uncle && uncle.C) {
                parent.C = uncle.C = false;
                grandpa.C = true;
                after = grandpa
              } else {
                if (after === parent.R) {
                  RedBlackRotateLeft(this, parent);
                  after = parent;
                  parent = after.U
                }
                parent.C = false;
                grandpa.C = true;
                RedBlackRotateRight(this, grandpa)
              }
            } else {
              uncle = grandpa.L;
              if (uncle && uncle.C) {
                parent.C = uncle.C = false;
                grandpa.C = true;
                after = grandpa
              } else {
                if (after === parent.L) {
                  RedBlackRotateRight(this, parent);
                  after = parent;
                  parent = after.U
                }
                parent.C = false;
                grandpa.C = true;
                RedBlackRotateLeft(this, grandpa)
              }
            }
            parent = after.U
          }
          this._.C = false
        },
        remove: function (node) {
          if (node.N)
            node.N.P = node.P;
          if (node.P)
            node.P.N = node.N;
          node.N = node.P = null;
          var parent = node.U, sibling, left = node.L, right = node.R, next, red;
          if (!left)
            next = right;
          else if (!right)
            next = left;
          else
            next = RedBlackFirst(right);
          if (parent) {
            if (parent.L === node)
              parent.L = next;
            else
              parent.R = next
          } else {
            this._ = next
          }
          if (left && right) {
            red = next.C;
            next.C = node.C;
            next.L = left;
            left.U = next;
            if (next !== right) {
              parent = next.U;
              next.U = node.U;
              node = next.R;
              parent.L = node;
              next.R = right;
              right.U = next
            } else {
              next.U = parent;
              parent = next;
              node = next.R
            }
          } else {
            red = node.C;
            node = next
          }
          if (node)
            node.U = parent;
          if (red)
            return;
          if (node && node.C) {
            node.C = false;
            return
          }
          do {
            if (node === this._)
              break;
            if (node === parent.L) {
              sibling = parent.R;
              if (sibling.C) {
                sibling.C = false;
                parent.C = true;
                RedBlackRotateLeft(this, parent);
                sibling = parent.R
              }
              if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                if (!sibling.R || !sibling.R.C) {
                  sibling.L.C = false;
                  sibling.C = true;
                  RedBlackRotateRight(this, sibling);
                  sibling = parent.R
                }
                sibling.C = parent.C;
                parent.C = sibling.R.C = false;
                RedBlackRotateLeft(this, parent);
                node = this._;
                break
              }
            } else {
              sibling = parent.L;
              if (sibling.C) {
                sibling.C = false;
                parent.C = true;
                RedBlackRotateRight(this, parent);
                sibling = parent.L
              }
              if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                if (!sibling.L || !sibling.L.C) {
                  sibling.R.C = false;
                  sibling.C = true;
                  RedBlackRotateLeft(this, sibling);
                  sibling = parent.L
                }
                sibling.C = parent.C;
                parent.C = sibling.L.C = false;
                RedBlackRotateRight(this, parent);
                node = this._;
                break
              }
            }
            sibling.C = true;
            node = parent;
            parent = parent.U
          } while (!node.C);
          if (node)
            node.C = false
        }
      };
      function RedBlackRotateLeft(tree, node) {
        var p = node, q = node.R, parent = p.U;
        if (parent) {
          if (parent.L === p)
            parent.L = q;
          else
            parent.R = q
        } else {
          tree._ = q
        }
        q.U = parent;
        p.U = q;
        p.R = q.L;
        if (p.R)
          p.R.U = p;
        q.L = p
      }
      function RedBlackRotateRight(tree, node) {
        var p = node, q = node.L, parent = p.U;
        if (parent) {
          if (parent.L === p)
            parent.L = q;
          else
            parent.R = q
        } else {
          tree._ = q
        }
        q.U = parent;
        p.U = q;
        p.L = q.R;
        if (p.L)
          p.L.U = p;
        q.R = p
      }
      function RedBlackFirst(node) {
        while (node.L)
          node = node.L;
        return node
      }
      function createEdge(left, right, v0, v1) {
        var edge = [
            null,
            null
          ], index = edges.push(edge) - 1;
        edge.left = left;
        edge.right = right;
        if (v0)
          setEdgeEnd(edge, left, right, v0);
        if (v1)
          setEdgeEnd(edge, right, left, v1);
        cells[left.index].halfedges.push(index);
        cells[right.index].halfedges.push(index);
        return edge
      }
      function createBorderEdge(left, v0, v1) {
        var edge = [
          v0,
          v1
        ];
        edge.left = left;
        return edge
      }
      function setEdgeEnd(edge, left, right, vertex) {
        if (!edge[0] && !edge[1]) {
          edge[0] = vertex;
          edge.left = left;
          edge.right = right
        } else if (edge.left === right) {
          edge[1] = vertex
        } else {
          edge[0] = vertex
        }
      }
      // Liang–Barsky line clipping.
      function clipEdge(edge, x0, y0, x1, y1) {
        var a = edge[0], b = edge[1], ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
        r = x0 - ax;
        if (!dx && r > 0)
          return;
        r /= dx;
        if (dx < 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        } else if (dx > 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        }
        r = x1 - ax;
        if (!dx && r < 0)
          return;
        r /= dx;
        if (dx < 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        } else if (dx > 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        }
        r = y0 - ay;
        if (!dy && r > 0)
          return;
        r /= dy;
        if (dy < 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        } else if (dy > 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        }
        r = y1 - ay;
        if (!dy && r < 0)
          return;
        r /= dy;
        if (dy < 0) {
          if (r > t1)
            return;
          if (r > t0)
            t0 = r
        } else if (dy > 0) {
          if (r < t0)
            return;
          if (r < t1)
            t1 = r
        }
        if (!(t0 > 0) && !(t1 < 1))
          return true;
        // TODO Better check?
        if (t0 > 0)
          edge[0] = [
            ax + t0 * dx,
            ay + t0 * dy
          ];
        if (t1 < 1)
          edge[1] = [
            ax + t1 * dx,
            ay + t1 * dy
          ];
        return true
      }
      function connectEdge(edge, x0, y0, x1, y1) {
        var v1 = edge[1];
        if (v1)
          return true;
        var v0 = edge[0], left = edge.left, right = edge.right, lx = left[0], ly = left[1], rx = right[0], ry = right[1], fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
        if (ry === ly) {
          if (fx < x0 || fx >= x1)
            return;
          if (lx > rx) {
            if (!v0)
              v0 = [
                fx,
                y0
              ];
            else if (v0[1] >= y1)
              return;
            v1 = [
              fx,
              y1
            ]
          } else {
            if (!v0)
              v0 = [
                fx,
                y1
              ];
            else if (v0[1] < y0)
              return;
            v1 = [
              fx,
              y0
            ]
          }
        } else {
          fm = (lx - rx) / (ry - ly);
          fb = fy - fm * fx;
          if (fm < -1 || fm > 1) {
            if (lx > rx) {
              if (!v0)
                v0 = [
                  (y0 - fb) / fm,
                  y0
                ];
              else if (v0[1] >= y1)
                return;
              v1 = [
                (y1 - fb) / fm,
                y1
              ]
            } else {
              if (!v0)
                v0 = [
                  (y1 - fb) / fm,
                  y1
                ];
              else if (v0[1] < y0)
                return;
              v1 = [
                (y0 - fb) / fm,
                y0
              ]
            }
          } else {
            if (ly < ry) {
              if (!v0)
                v0 = [
                  x0,
                  fm * x0 + fb
                ];
              else if (v0[0] >= x1)
                return;
              v1 = [
                x1,
                fm * x1 + fb
              ]
            } else {
              if (!v0)
                v0 = [
                  x1,
                  fm * x1 + fb
                ];
              else if (v0[0] < x0)
                return;
              v1 = [
                x0,
                fm * x0 + fb
              ]
            }
          }
        }
        edge[0] = v0;
        edge[1] = v1;
        return true
      }
      function clipEdges(x0, y0, x1, y1) {
        var i = edges.length, edge;
        while (i--) {
          if (!connectEdge(edge = edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4 || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {
            delete edges[i]
          }
        }
      }
      function createCell(site) {
        return cells[site.index] = {
          site: site,
          halfedges: []
        }
      }
      function cellHalfedgeAngle(cell, edge) {
        var site = cell.site, va = edge.left, vb = edge.right;
        if (site === vb)
          vb = va, va = site;
        if (vb)
          return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
        if (site === va)
          va = edge[1], vb = edge[0];
        else
          va = edge[0], vb = edge[1];
        return Math.atan2(va[0] - vb[0], vb[1] - va[1])
      }
      function cellHalfedgeStart(cell, edge) {
        return edge[+(edge.left !== cell.site)]
      }
      function cellHalfedgeEnd(cell, edge) {
        return edge[+(edge.left === cell.site)]
      }
      function sortCellHalfedges() {
        for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
          if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
            var index = new Array(m), array = new Array(m);
            for (j = 0; j < m; ++j)
              index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
            index.sort(function (i, j) {
              return array[j] - array[i]
            });
            for (j = 0; j < m; ++j)
              array[j] = halfedges[index[j]];
            for (j = 0; j < m; ++j)
              halfedges[j] = array[j]
          }
        }
      }
      function clipCells(x0, y0, x1, y1) {
        var nCells = cells.length, iCell, cell, site, iHalfedge, halfedges, nHalfedges, start, startX, startY, end, endX, endY, cover = true;
        for (iCell = 0; iCell < nCells; ++iCell) {
          if (cell = cells[iCell]) {
            site = cell.site;
            halfedges = cell.halfedges;
            iHalfedge = halfedges.length;
            // Remove any dangling clipped edges.
            while (iHalfedge--) {
              if (!edges[halfedges[iHalfedge]]) {
                halfedges.splice(iHalfedge, 1)
              }
            }
            // Insert any border edges as necessary.
            iHalfedge = 0, nHalfedges = halfedges.length;
            while (iHalfedge < nHalfedges) {
              end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
              start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
              if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {
                halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [
                  x0,
                  Math.abs(startX - x0) < epsilon$4 ? startY : y1
                ] : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [
                  Math.abs(startY - y1) < epsilon$4 ? startX : x1,
                  y1
                ] : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [
                  x1,
                  Math.abs(startX - x1) < epsilon$4 ? startY : y0
                ] : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [
                  Math.abs(startY - y0) < epsilon$4 ? startX : x0,
                  y0
                ] : null)) - 1);
                ++nHalfedges
              }
            }
            if (nHalfedges)
              cover = false
          }
        }
        // If there weren’t any edges, have the closest site cover the extent.
        // It doesn’t matter which corner of the extent we measure!
        if (cover) {
          var dx, dy, d2, dc = Infinity;
          for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
            if (cell = cells[iCell]) {
              site = cell.site;
              dx = site[0] - x0;
              dy = site[1] - y0;
              d2 = dx * dx + dy * dy;
              if (d2 < dc)
                dc = d2, cover = cell
            }
          }
          if (cover) {
            var v00 = [
                x0,
                y0
              ], v01 = [
                x0,
                y1
              ], v11 = [
                x1,
                y1
              ], v10 = [
                x1,
                y0
              ];
            cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1)
          }
        }
        // Lastly delete any cells with no edges; these were entirely clipped.
        for (iCell = 0; iCell < nCells; ++iCell) {
          if (cell = cells[iCell]) {
            if (!cell.halfedges.length) {
              delete cells[iCell]
            }
          }
        }
      }
      var circlePool = [];
      var firstCircle;
      function Circle() {
        RedBlackNode(this);
        this.x = this.y = this.arc = this.site = this.cy = null
      }
      function attachCircle(arc) {
        var lArc = arc.P, rArc = arc.N;
        if (!lArc || !rArc)
          return;
        var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
        if (lSite === rSite)
          return;
        var bx = cSite[0], by = cSite[1], ax = lSite[0] - bx, ay = lSite[1] - by, cx = rSite[0] - bx, cy = rSite[1] - by;
        var d = 2 * (ax * cy - ay * cx);
        if (d >= -epsilon2$2)
          return;
        var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d;
        var circle = circlePool.pop() || new Circle;
        circle.arc = arc;
        circle.site = cSite;
        circle.x = x + bx;
        circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y);
        // y bottom
        arc.circle = circle;
        var before = null, node = circles._;
        while (node) {
          if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
            if (node.L)
              node = node.L;
            else {
              before = node.P;
              break
            }
          } else {
            if (node.R)
              node = node.R;
            else {
              before = node;
              break
            }
          }
        }
        circles.insert(before, circle);
        if (!before)
          firstCircle = circle
      }
      function detachCircle(arc) {
        var circle = arc.circle;
        if (circle) {
          if (!circle.P)
            firstCircle = circle.N;
          circles.remove(circle);
          circlePool.push(circle);
          RedBlackNode(circle);
          arc.circle = null
        }
      }
      var beachPool = [];
      function Beach() {
        RedBlackNode(this);
        this.edge = this.site = this.circle = null
      }
      function createBeach(site) {
        var beach = beachPool.pop() || new Beach;
        beach.site = site;
        return beach
      }
      function detachBeach(beach) {
        detachCircle(beach);
        beaches.remove(beach);
        beachPool.push(beach);
        RedBlackNode(beach)
      }
      function removeBeach(beach) {
        var circle = beach.circle, x = circle.x, y = circle.cy, vertex = [
            x,
            y
          ], previous = beach.P, next = beach.N, disappearing = [beach];
        detachBeach(beach);
        var lArc = previous;
        while (lArc.circle && Math.abs(x - lArc.circle.x) < epsilon$4 && Math.abs(y - lArc.circle.cy) < epsilon$4) {
          previous = lArc.P;
          disappearing.unshift(lArc);
          detachBeach(lArc);
          lArc = previous
        }
        disappearing.unshift(lArc);
        detachCircle(lArc);
        var rArc = next;
        while (rArc.circle && Math.abs(x - rArc.circle.x) < epsilon$4 && Math.abs(y - rArc.circle.cy) < epsilon$4) {
          next = rArc.N;
          disappearing.push(rArc);
          detachBeach(rArc);
          rArc = next
        }
        disappearing.push(rArc);
        detachCircle(rArc);
        var nArcs = disappearing.length, iArc;
        for (iArc = 1; iArc < nArcs; ++iArc) {
          rArc = disappearing[iArc];
          lArc = disappearing[iArc - 1];
          setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex)
        }
        lArc = disappearing[0];
        rArc = disappearing[nArcs - 1];
        rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
        attachCircle(lArc);
        attachCircle(rArc)
      }
      function addBeach(site) {
        var x = site[0], directrix = site[1], lArc, rArc, dxl, dxr, node = beaches._;
        while (node) {
          dxl = leftBreakPoint(node, directrix) - x;
          if (dxl > epsilon$4)
            node = node.L;
          else {
            dxr = x - rightBreakPoint(node, directrix);
            if (dxr > epsilon$4) {
              if (!node.R) {
                lArc = node;
                break
              }
              node = node.R
            } else {
              if (dxl > -epsilon$4) {
                lArc = node.P;
                rArc = node
              } else if (dxr > -epsilon$4) {
                lArc = node;
                rArc = node.N
              } else {
                lArc = rArc = node
              }
              break
            }
          }
        }
        createCell(site);
        var newArc = createBeach(site);
        beaches.insert(lArc, newArc);
        if (!lArc && !rArc)
          return;
        if (lArc === rArc) {
          detachCircle(lArc);
          rArc = createBeach(lArc.site);
          beaches.insert(newArc, rArc);
          newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
          attachCircle(lArc);
          attachCircle(rArc);
          return
        }
        if (!rArc) {
          // && lArc
          newArc.edge = createEdge(lArc.site, newArc.site);
          return
        }
        // else lArc !== rArc
        detachCircle(lArc);
        detachCircle(rArc);
        var lSite = lArc.site, ax = lSite[0], ay = lSite[1], bx = site[0] - ax, by = site[1] - ay, rSite = rArc.site, cx = rSite[0] - ax, cy = rSite[1] - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = [
            (cy * hb - by * hc) / d + ax,
            (bx * hc - cx * hb) / d + ay
          ];
        setEdgeEnd(rArc.edge, lSite, rSite, vertex);
        newArc.edge = createEdge(lSite, site, null, vertex);
        rArc.edge = createEdge(site, rSite, null, vertex);
        attachCircle(lArc);
        attachCircle(rArc)
      }
      function leftBreakPoint(arc, directrix) {
        var site = arc.site, rfocx = site[0], rfocy = site[1], pby2 = rfocy - directrix;
        if (!pby2)
          return rfocx;
        var lArc = arc.P;
        if (!lArc)
          return -Infinity;
        site = lArc.site;
        var lfocx = site[0], lfocy = site[1], plby2 = lfocy - directrix;
        if (!plby2)
          return lfocx;
        var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
        if (aby2)
          return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
        return (rfocx + lfocx) / 2
      }
      function rightBreakPoint(arc, directrix) {
        var rArc = arc.N;
        if (rArc)
          return leftBreakPoint(rArc, directrix);
        var site = arc.site;
        return site[1] === directrix ? site[0] : Infinity
      }
      var epsilon$4 = 0.000001;
      var epsilon2$2 = 1e-12;
      var beaches;
      var cells;
      var circles;
      var edges;
      function triangleArea(a, b, c) {
        return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1])
      }
      function lexicographic(a, b) {
        return b[1] - a[1] || b[0] - a[0]
      }
      function Diagram(sites, extent) {
        var site = sites.sort(lexicographic).pop(), x, y, circle;
        edges = [];
        cells = new Array(sites.length);
        beaches = new RedBlackTree;
        circles = new RedBlackTree;
        while (true) {
          circle = firstCircle;
          if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
            if (site[0] !== x || site[1] !== y) {
              addBeach(site);
              x = site[0], y = site[1]
            }
            site = sites.pop()
          } else if (circle) {
            removeBeach(circle.arc)
          } else {
            break
          }
        }
        sortCellHalfedges();
        if (extent) {
          var x0 = +extent[0][0], y0 = +extent[0][1], x1 = +extent[1][0], y1 = +extent[1][1];
          clipEdges(x0, y0, x1, y1);
          clipCells(x0, y0, x1, y1)
        }
        this.edges = edges;
        this.cells = cells;
        beaches = circles = edges = cells = null
      }
      Diagram.prototype = {
        constructor: Diagram,
        polygons: function () {
          var edges = this.edges;
          return this.cells.map(function (cell) {
            var polygon = cell.halfedges.map(function (i) {
              return cellHalfedgeStart(cell, edges[i])
            });
            polygon.data = cell.site.data;
            return polygon
          })
        },
        triangles: function () {
          var triangles = [], edges = this.edges;
          this.cells.forEach(function (cell, i) {
            if (!(m = (halfedges = cell.halfedges).length))
              return;
            var site = cell.site, halfedges, j = -1, m, s0, e1 = edges[halfedges[m - 1]], s1 = e1.left === site ? e1.right : e1.left;
            while (++j < m) {
              s0 = s1;
              e1 = edges[halfedges[j]];
              s1 = e1.left === site ? e1.right : e1.left;
              if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
                triangles.push([
                  site.data,
                  s0.data,
                  s1.data
                ])
              }
            }
          });
          return triangles
        },
        links: function () {
          return this.edges.filter(function (edge) {
            return edge.right
          }).map(function (edge) {
            return {
              source: edge.left.data,
              target: edge.right.data
            }
          })
        },
        find: function (x, y, radius) {
          var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;
          // Use the previously-found cell, or start with an arbitrary one.
          while (!(cell = that.cells[i1]))
            if (++i1 >= n)
              return null;
          var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;
          // Traverse the half-edges to find a closer cell, if any.
          do {
            cell = that.cells[i0 = i1], i1 = null;
            cell.halfedges.forEach(function (e) {
              var edge = that.edges[e], v = edge.left;
              if ((v === cell.site || !v) && !(v = edge.right))
                return;
              var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
              if (v2 < d2)
                d2 = v2, i1 = v.index
            })
          } while (i1 !== null);
          that._found = i0;
          return radius == null || d2 <= radius * radius ? cell.site : null
        }
      };
      var voronoi = function () {
        var x$$1 = x$4, y$$1 = y$4, extent = null;
        function voronoi(data) {
          return new Diagram(data.map(function (d, i) {
            var s = [
              Math.round(x$$1(d, i, data) / epsilon$4) * epsilon$4,
              Math.round(y$$1(d, i, data) / epsilon$4) * epsilon$4
            ];
            s.index = i;
            s.data = d;
            return s
          }), extent)
        }
        voronoi.polygons = function (data) {
          return voronoi(data).polygons()
        };
        voronoi.links = function (data) {
          return voronoi(data).links()
        };
        voronoi.triangles = function (data) {
          return voronoi(data).triangles()
        };
        voronoi.x = function (_) {
          return arguments.length ? (x$$1 = typeof _ === 'function' ? _ : constant$11(+_), voronoi) : x$$1
        };
        voronoi.y = function (_) {
          return arguments.length ? (y$$1 = typeof _ === 'function' ? _ : constant$11(+_), voronoi) : y$$1
        };
        voronoi.extent = function (_) {
          return arguments.length ? (extent = _ == null ? null : [
            [
              +_[0][0],
              +_[0][1]
            ],
            [
              +_[1][0],
              +_[1][1]
            ]
          ], voronoi) : extent && [
            [
              extent[0][0],
              extent[0][1]
            ],
            [
              extent[1][0],
              extent[1][1]
            ]
          ]
        };
        voronoi.size = function (_) {
          return arguments.length ? (extent = _ == null ? null : [
            [
              0,
              0
            ],
            [
              +_[0],
              +_[1]
            ]
          ], voronoi) : extent && [
            extent[1][0] - extent[0][0],
            extent[1][1] - extent[0][1]
          ]
        };
        return voronoi
      };
      var constant$12 = function (x) {
        return function () {
          return x
        }
      };
      function ZoomEvent(target, type, transform) {
        this.target = target;
        this.type = type;
        this.transform = transform
      }
      function Transform(k, x, y) {
        this.k = k;
        this.x = x;
        this.y = y
      }
      Transform.prototype = {
        constructor: Transform,
        scale: function (k) {
          return k === 1 ? this : new Transform(this.k * k, this.x, this.y)
        },
        translate: function (x, y) {
          return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y)
        },
        apply: function (point) {
          return [
            point[0] * this.k + this.x,
            point[1] * this.k + this.y
          ]
        },
        applyX: function (x) {
          return x * this.k + this.x
        },
        applyY: function (y) {
          return y * this.k + this.y
        },
        invert: function (location) {
          return [
            (location[0] - this.x) / this.k,
            (location[1] - this.y) / this.k
          ]
        },
        invertX: function (x) {
          return (x - this.x) / this.k
        },
        invertY: function (y) {
          return (y - this.y) / this.k
        },
        rescaleX: function (x) {
          return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x))
        },
        rescaleY: function (y) {
          return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y))
        },
        toString: function () {
          return 'translate(' + this.x + ',' + this.y + ') scale(' + this.k + ')'
        }
      };
      var identity$8 = new Transform(1, 0, 0);
      transform$1.prototype = Transform.prototype;
      function transform$1(node) {
        return node.__zoom || identity$8
      }
      function nopropagation$2() {
        exports.event.stopImmediatePropagation()
      }
      var noevent$2 = function () {
        exports.event.preventDefault();
        exports.event.stopImmediatePropagation()
      };
      // Ignore right-click, since that should open the context menu.
      function defaultFilter$2() {
        return !exports.event.button
      }
      function defaultExtent$1() {
        var e = this, w, h;
        if (e instanceof SVGElement) {
          e = e.ownerSVGElement || e;
          w = e.width.baseVal.value;
          h = e.height.baseVal.value
        } else {
          w = e.clientWidth;
          h = e.clientHeight
        }
        return [
          [
            0,
            0
          ],
          [
            w,
            h
          ]
        ]
      }
      function defaultTransform() {
        return this.__zoom || identity$8
      }
      var zoom = function () {
        var filter = defaultFilter$2, extent = defaultExtent$1, k0 = 0, k1 = Infinity, x0 = -k1, x1 = k1, y0 = x0, y1 = x1, duration = 250, interpolate$$1 = interpolateZoom, gestures = [], listeners = dispatch('start', 'zoom', 'end'), touchstarting, touchending, touchDelay = 500, wheelDelay = 150;
        function zoom(selection$$1) {
          selection$$1.on('wheel.zoom', wheeled).on('mousedown.zoom', mousedowned).on('dblclick.zoom', dblclicked).on('touchstart.zoom', touchstarted).on('touchmove.zoom', touchmoved).on('touchend.zoom touchcancel.zoom', touchended).style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').property('__zoom', defaultTransform)
        }
        zoom.transform = function (collection, transform) {
          var selection$$1 = collection.selection ? collection.selection() : collection;
          selection$$1.property('__zoom', defaultTransform);
          if (collection !== selection$$1) {
            schedule(collection, transform)
          } else {
            selection$$1.interrupt().each(function () {
              gesture(this, arguments).start().zoom(null, typeof transform === 'function' ? transform.apply(this, arguments) : transform).end()
            })
          }
        };
        zoom.scaleBy = function (selection$$1, k) {
          zoom.scaleTo(selection$$1, function () {
            var k0 = this.__zoom.k, k1 = typeof k === 'function' ? k.apply(this, arguments) : k;
            return k0 * k1
          })
        };
        zoom.scaleTo = function (selection$$1, k) {
          zoom.transform(selection$$1, function () {
            var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = centroid(e), p1 = t0.invert(p0), k1 = typeof k === 'function' ? k.apply(this, arguments) : k;
            return constrain(translate(scale(t0, k1), p0, p1), e)
          })
        };
        zoom.translateBy = function (selection$$1, x, y) {
          zoom.transform(selection$$1, function () {
            return constrain(this.__zoom.translate(typeof x === 'function' ? x.apply(this, arguments) : x, typeof y === 'function' ? y.apply(this, arguments) : y), extent.apply(this, arguments))
          })
        };
        function scale(transform, k) {
          k = Math.max(k0, Math.min(k1, k));
          return k === transform.k ? transform : new Transform(k, transform.x, transform.y)
        }
        function translate(transform, p0, p1) {
          var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
          return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y)
        }
        function constrain(transform, extent) {
          var dx0 = transform.invertX(extent[0][0]) - x0, dx1 = transform.invertX(extent[1][0]) - x1, dy0 = transform.invertY(extent[0][1]) - y0, dy1 = transform.invertY(extent[1][1]) - y1;
          return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1))
        }
        function centroid(extent) {
          return [
            (+extent[0][0] + +extent[1][0]) / 2,
            (+extent[0][1] + +extent[1][1]) / 2
          ]
        }
        function schedule(transition$$1, transform, center) {
          transition$$1.on('start.zoom', function () {
            gesture(this, arguments).start()
          }).on('interrupt.zoom end.zoom', function () {
            gesture(this, arguments).end()
          }).tween('zoom', function () {
            var that = this, args = arguments, g = gesture(that, args), e = extent.apply(that, args), p = center || centroid(e), w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === 'function' ? transform.apply(that, args) : transform, i = interpolate$$1(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
            return function (t) {
              if (t === 1)
                t = b;  // Avoid rounding error on end.
              else {
                var l = i(t), k = w / l[2];
                t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k)
              }
              g.zoom(null, t)
            }
          })
        }
        function gesture(that, args) {
          for (var i = 0, n = gestures.length, g; i < n; ++i) {
            if ((g = gestures[i]).that === that) {
              return g
            }
          }
          return new Gesture(that, args)
        }
        function Gesture(that, args) {
          this.that = that;
          this.args = args;
          this.index = -1;
          this.active = 0;
          this.extent = extent.apply(that, args)
        }
        Gesture.prototype = {
          start: function () {
            if (++this.active === 1) {
              this.index = gestures.push(this) - 1;
              this.emit('start')
            }
            return this
          },
          zoom: function (key, transform) {
            if (this.mouse && key !== 'mouse')
              this.mouse[1] = transform.invert(this.mouse[0]);
            if (this.touch0 && key !== 'touch')
              this.touch0[1] = transform.invert(this.touch0[0]);
            if (this.touch1 && key !== 'touch')
              this.touch1[1] = transform.invert(this.touch1[0]);
            this.that.__zoom = transform;
            this.emit('zoom');
            return this
          },
          end: function () {
            if (--this.active === 0) {
              gestures.splice(this.index, 1);
              this.index = -1;
              this.emit('end')
            }
            return this
          },
          emit: function (type) {
            customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [
              type,
              this.that,
              this.args
            ])
          }
        };
        function wheeled() {
          if (!filter.apply(this, arguments))
            return;
          var g = gesture(this, arguments), t = this.__zoom, k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))), p = mouse(this);
          // If the mouse is in the same location as before, reuse it.
          // If there were recent wheel events, reset the wheel idle timeout.
          if (g.wheel) {
            if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
              g.mouse[1] = t.invert(g.mouse[0] = p)
            }
            clearTimeout(g.wheel)
          }  // If this wheel event won’t trigger a transform change, ignore it.
          else if (t.k === k)
            return;  // Otherwise, capture the mouse point and location at the start.
          else {
            g.mouse = [
              p,
              t.invert(p)
            ];
            interrupt(this);
            g.start()
          }
          noevent$2();
          g.wheel = setTimeout(wheelidled, wheelDelay);
          g.zoom('mouse', constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));
          function wheelidled() {
            g.wheel = null;
            g.end()
          }
        }
        function mousedowned() {
          if (touchending || !filter.apply(this, arguments))
            return;
          var g = gesture(this, arguments), v = select(exports.event.view).on('mousemove.zoom', mousemoved, true).on('mouseup.zoom', mouseupped, true), p = mouse(this);
          dragDisable(exports.event.view);
          nopropagation$2();
          g.mouse = [
            p,
            this.__zoom.invert(p)
          ];
          interrupt(this);
          g.start();
          function mousemoved() {
            noevent$2();
            g.moved = true;
            g.zoom('mouse', constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent))
          }
          function mouseupped() {
            v.on('mousemove.zoom mouseup.zoom', null);
            yesdrag(exports.event.view, g.moved);
            noevent$2();
            g.end()
          }
        }
        function dblclicked() {
          if (!filter.apply(this, arguments))
            return;
          var t0 = this.__zoom, p0 = mouse(this), p1 = t0.invert(p0), k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));
          noevent$2();
          if (duration > 0)
            select(this).transition().duration(duration).call(schedule, t1, p0);
          else
            select(this).call(zoom.transform, t1)
        }
        function touchstarted() {
          if (!filter.apply(this, arguments))
            return;
          var g = gesture(this, arguments), touches$$1 = exports.event.changedTouches, started, n = touches$$1.length, i, t, p;
          nopropagation$2();
          for (i = 0; i < n; ++i) {
            t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
            p = [
              p,
              this.__zoom.invert(p),
              t.identifier
            ];
            if (!g.touch0)
              g.touch0 = p, started = true;
            else if (!g.touch1)
              g.touch1 = p
          }
          // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
          if (touchstarting) {
            touchstarting = clearTimeout(touchstarting);
            if (!g.touch1) {
              g.end();
              p = select(this).on('dblclick.zoom');
              if (p)
                p.apply(this, arguments);
              return
            }
          }
          if (started) {
            touchstarting = setTimeout(function () {
              touchstarting = null
            }, touchDelay);
            interrupt(this);
            g.start()
          }
        }
        function touchmoved() {
          var g = gesture(this, arguments), touches$$1 = exports.event.changedTouches, n = touches$$1.length, i, t, p, l;
          noevent$2();
          if (touchstarting)
            touchstarting = clearTimeout(touchstarting);
          for (i = 0; i < n; ++i) {
            t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
            if (g.touch0 && g.touch0[2] === t.identifier)
              g.touch0[0] = p;
            else if (g.touch1 && g.touch1[2] === t.identifier)
              g.touch1[0] = p
          }
          t = g.that.__zoom;
          if (g.touch1) {
            var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
            t = scale(t, Math.sqrt(dp / dl));
            p = [
              (p0[0] + p1[0]) / 2,
              (p0[1] + p1[1]) / 2
            ];
            l = [
              (l0[0] + l1[0]) / 2,
              (l0[1] + l1[1]) / 2
            ]
          } else if (g.touch0)
            p = g.touch0[0], l = g.touch0[1];
          else
            return;
          g.zoom('touch', constrain(translate(t, p, l), g.extent))
        }
        function touchended() {
          var g = gesture(this, arguments), touches$$1 = exports.event.changedTouches, n = touches$$1.length, i, t;
          nopropagation$2();
          if (touchending)
            clearTimeout(touchending);
          touchending = setTimeout(function () {
            touchending = null
          }, touchDelay);
          for (i = 0; i < n; ++i) {
            t = touches$$1[i];
            if (g.touch0 && g.touch0[2] === t.identifier)
              delete g.touch0;
            else if (g.touch1 && g.touch1[2] === t.identifier)
              delete g.touch1
          }
          if (g.touch1 && !g.touch0)
            g.touch0 = g.touch1, delete g.touch1;
          if (!g.touch0)
            g.end()
        }
        zoom.filter = function (_) {
          return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$12(!!_), zoom) : filter
        };
        zoom.extent = function (_) {
          return arguments.length ? (extent = typeof _ === 'function' ? _ : constant$12([
            [
              +_[0][0],
              +_[0][1]
            ],
            [
              +_[1][0],
              +_[1][1]
            ]
          ]), zoom) : extent
        };
        zoom.scaleExtent = function (_) {
          return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [
            k0,
            k1
          ]
        };
        zoom.translateExtent = function (_) {
          return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [
            [
              x0,
              y0
            ],
            [
              x1,
              y1
            ]
          ]
        };
        zoom.duration = function (_) {
          return arguments.length ? (duration = +_, zoom) : duration
        };
        zoom.interpolate = function (_) {
          return arguments.length ? (interpolate$$1 = _, zoom) : interpolate$$1
        };
        zoom.on = function () {
          var value = listeners.on.apply(listeners, arguments);
          return value === listeners ? zoom : value
        };
        return zoom
      };
      exports.version = version;
      exports.bisect = bisectRight;
      exports.bisectRight = bisectRight;
      exports.bisectLeft = bisectLeft;
      exports.ascending = ascending;
      exports.bisector = bisector;
      exports.descending = descending;
      exports.deviation = deviation;
      exports.extent = extent;
      exports.histogram = histogram;
      exports.thresholdFreedmanDiaconis = freedmanDiaconis;
      exports.thresholdScott = scott;
      exports.thresholdSturges = sturges;
      exports.max = max;
      exports.mean = mean;
      exports.median = median;
      exports.merge = merge;
      exports.min = min;
      exports.pairs = pairs;
      exports.permute = permute;
      exports.quantile = threshold;
      exports.range = sequence;
      exports.scan = scan;
      exports.shuffle = shuffle;
      exports.sum = sum;
      exports.ticks = ticks;
      exports.tickStep = tickStep;
      exports.transpose = transpose;
      exports.variance = variance;
      exports.zip = zip;
      exports.axisTop = axisTop;
      exports.axisRight = axisRight;
      exports.axisBottom = axisBottom;
      exports.axisLeft = axisLeft;
      exports.brush = brush;
      exports.brushX = brushX;
      exports.brushY = brushY;
      exports.brushSelection = brushSelection;
      exports.chord = chord;
      exports.ribbon = ribbon;
      exports.nest = nest;
      exports.set = set$2;
      exports.map = map$1;
      exports.keys = keys;
      exports.values = values;
      exports.entries = entries;
      exports.color = color;
      exports.rgb = rgb;
      exports.hsl = hsl;
      exports.lab = lab;
      exports.hcl = hcl;
      exports.cubehelix = cubehelix;
      exports.dispatch = dispatch;
      exports.drag = drag;
      exports.dragDisable = dragDisable;
      exports.dragEnable = yesdrag;
      exports.dsvFormat = dsv;
      exports.csvParse = csvParse;
      exports.csvParseRows = csvParseRows;
      exports.csvFormat = csvFormat;
      exports.csvFormatRows = csvFormatRows;
      exports.tsvParse = tsvParse;
      exports.tsvParseRows = tsvParseRows;
      exports.tsvFormat = tsvFormat;
      exports.tsvFormatRows = tsvFormatRows;
      exports.easeLinear = linear$1;
      exports.easeQuad = quadInOut;
      exports.easeQuadIn = quadIn;
      exports.easeQuadOut = quadOut;
      exports.easeQuadInOut = quadInOut;
      exports.easeCubic = cubicInOut;
      exports.easeCubicIn = cubicIn;
      exports.easeCubicOut = cubicOut;
      exports.easeCubicInOut = cubicInOut;
      exports.easePoly = polyInOut;
      exports.easePolyIn = polyIn;
      exports.easePolyOut = polyOut;
      exports.easePolyInOut = polyInOut;
      exports.easeSin = sinInOut;
      exports.easeSinIn = sinIn;
      exports.easeSinOut = sinOut;
      exports.easeSinInOut = sinInOut;
      exports.easeExp = expInOut;
      exports.easeExpIn = expIn;
      exports.easeExpOut = expOut;
      exports.easeExpInOut = expInOut;
      exports.easeCircle = circleInOut;
      exports.easeCircleIn = circleIn;
      exports.easeCircleOut = circleOut;
      exports.easeCircleInOut = circleInOut;
      exports.easeBounce = bounceOut;
      exports.easeBounceIn = bounceIn;
      exports.easeBounceOut = bounceOut;
      exports.easeBounceInOut = bounceInOut;
      exports.easeBack = backInOut;
      exports.easeBackIn = backIn;
      exports.easeBackOut = backOut;
      exports.easeBackInOut = backInOut;
      exports.easeElastic = elasticOut;
      exports.easeElasticIn = elasticIn;
      exports.easeElasticOut = elasticOut;
      exports.easeElasticInOut = elasticInOut;
      exports.forceCenter = center$1;
      exports.forceCollide = collide;
      exports.forceLink = link;
      exports.forceManyBody = manyBody;
      exports.forceSimulation = simulation;
      exports.forceX = x$2;
      exports.forceY = y$2;
      exports.formatDefaultLocale = defaultLocale;
      exports.formatLocale = formatLocale;
      exports.formatSpecifier = formatSpecifier;
      exports.precisionFixed = precisionFixed;
      exports.precisionPrefix = precisionPrefix;
      exports.precisionRound = precisionRound;
      exports.geoArea = area;
      exports.geoBounds = bounds;
      exports.geoCentroid = centroid;
      exports.geoCircle = circle;
      exports.geoClipExtent = extent$1;
      exports.geoDistance = distance;
      exports.geoGraticule = graticule;
      exports.geoGraticule10 = graticule10;
      exports.geoInterpolate = interpolate$1;
      exports.geoLength = length$1;
      exports.geoPath = index$1;
      exports.geoAlbers = albers;
      exports.geoAlbersUsa = albersUsa;
      exports.geoAzimuthalEqualArea = azimuthalEqualArea;
      exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
      exports.geoAzimuthalEquidistant = azimuthalEquidistant;
      exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
      exports.geoConicConformal = conicConformal;
      exports.geoConicConformalRaw = conicConformalRaw;
      exports.geoConicEqualArea = conicEqualArea;
      exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
      exports.geoConicEquidistant = conicEquidistant;
      exports.geoConicEquidistantRaw = conicEquidistantRaw;
      exports.geoEquirectangular = equirectangular;
      exports.geoEquirectangularRaw = equirectangularRaw;
      exports.geoGnomonic = gnomonic;
      exports.geoGnomonicRaw = gnomonicRaw;
      exports.geoIdentity = identity$5;
      exports.geoProjection = projection;
      exports.geoProjectionMutator = projectionMutator;
      exports.geoMercator = mercator;
      exports.geoMercatorRaw = mercatorRaw;
      exports.geoOrthographic = orthographic;
      exports.geoOrthographicRaw = orthographicRaw;
      exports.geoStereographic = stereographic;
      exports.geoStereographicRaw = stereographicRaw;
      exports.geoTransverseMercator = transverseMercator;
      exports.geoTransverseMercatorRaw = transverseMercatorRaw;
      exports.geoRotation = rotation;
      exports.geoStream = geoStream;
      exports.geoTransform = transform;
      exports.cluster = cluster;
      exports.hierarchy = hierarchy;
      exports.pack = index$2;
      exports.packSiblings = siblings;
      exports.packEnclose = enclose;
      exports.partition = partition;
      exports.stratify = stratify;
      exports.tree = tree;
      exports.treemap = index$3;
      exports.treemapBinary = binary;
      exports.treemapDice = treemapDice;
      exports.treemapSlice = treemapSlice;
      exports.treemapSliceDice = sliceDice;
      exports.treemapSquarify = squarify;
      exports.treemapResquarify = resquarify;
      exports.interpolate = interpolateValue;
      exports.interpolateArray = array$1;
      exports.interpolateBasis = basis$1;
      exports.interpolateBasisClosed = basisClosed;
      exports.interpolateDate = date;
      exports.interpolateNumber = reinterpolate;
      exports.interpolateObject = object;
      exports.interpolateRound = interpolateRound;
      exports.interpolateString = interpolateString;
      exports.interpolateTransformCss = interpolateTransformCss;
      exports.interpolateTransformSvg = interpolateTransformSvg;
      exports.interpolateZoom = interpolateZoom;
      exports.interpolateRgb = interpolateRgb;
      exports.interpolateRgbBasis = rgbBasis;
      exports.interpolateRgbBasisClosed = rgbBasisClosed;
      exports.interpolateHsl = hsl$2;
      exports.interpolateHslLong = hslLong;
      exports.interpolateLab = lab$1;
      exports.interpolateHcl = hcl$2;
      exports.interpolateHclLong = hclLong;
      exports.interpolateCubehelix = cubehelix$2;
      exports.interpolateCubehelixLong = cubehelixLong;
      exports.quantize = quantize;
      exports.path = path;
      exports.polygonArea = area$1;
      exports.polygonCentroid = centroid$1;
      exports.polygonHull = hull;
      exports.polygonContains = contains;
      exports.polygonLength = length$2;
      exports.quadtree = quadtree;
      exports.queue = queue;
      exports.randomUniform = uniform;
      exports.randomNormal = normal;
      exports.randomLogNormal = logNormal;
      exports.randomBates = bates;
      exports.randomIrwinHall = irwinHall;
      exports.randomExponential = exponential$1;
      exports.request = request;
      exports.html = html;
      exports.json = json;
      exports.text = text;
      exports.xml = xml;
      exports.csv = csv$1;
      exports.tsv = tsv$1;
      exports.scaleBand = band;
      exports.scalePoint = point$1;
      exports.scaleIdentity = identity$6;
      exports.scaleLinear = linear$2;
      exports.scaleLog = log$1;
      exports.scaleOrdinal = ordinal;
      exports.scaleImplicit = implicit;
      exports.scalePow = pow$1;
      exports.scaleSqrt = sqrt$1;
      exports.scaleQuantile = quantile$$1;
      exports.scaleQuantize = quantize$1;
      exports.scaleThreshold = threshold$1;
      exports.scaleTime = time;
      exports.scaleUtc = utcTime;
      exports.schemeCategory10 = category10;
      exports.schemeCategory20b = category20b;
      exports.schemeCategory20c = category20c;
      exports.schemeCategory20 = category20;
      exports.interpolateCubehelixDefault = cubehelix$3;
      exports.interpolateRainbow = rainbow$1;
      exports.interpolateWarm = warm;
      exports.interpolateCool = cool;
      exports.interpolateViridis = viridis;
      exports.interpolateMagma = magma;
      exports.interpolateInferno = inferno;
      exports.interpolatePlasma = plasma;
      exports.scaleSequential = sequential;
      exports.creator = creator;
      exports.local = local$1;
      exports.matcher = matcher$1;
      exports.mouse = mouse;
      exports.namespace = namespace;
      exports.namespaces = namespaces;
      exports.select = select;
      exports.selectAll = selectAll;
      exports.selection = selection;
      exports.selector = selector;
      exports.selectorAll = selectorAll;
      exports.touch = touch;
      exports.touches = touches;
      exports.window = window;
      exports.customEvent = customEvent;
      exports.arc = arc;
      exports.area = area$2;
      exports.line = line;
      exports.pie = pie;
      exports.radialArea = radialArea;
      exports.radialLine = radialLine$1;
      exports.symbol = symbol;
      exports.symbols = symbols;
      exports.symbolCircle = circle$2;
      exports.symbolCross = cross$1;
      exports.symbolDiamond = diamond;
      exports.symbolSquare = square;
      exports.symbolStar = star;
      exports.symbolTriangle = triangle;
      exports.symbolWye = wye;
      exports.curveBasisClosed = basisClosed$1;
      exports.curveBasisOpen = basisOpen;
      exports.curveBasis = basis$2;
      exports.curveBundle = bundle;
      exports.curveCardinalClosed = cardinalClosed;
      exports.curveCardinalOpen = cardinalOpen;
      exports.curveCardinal = cardinal;
      exports.curveCatmullRomClosed = catmullRomClosed;
      exports.curveCatmullRomOpen = catmullRomOpen;
      exports.curveCatmullRom = catmullRom;
      exports.curveLinearClosed = linearClosed;
      exports.curveLinear = curveLinear;
      exports.curveMonotoneX = monotoneX;
      exports.curveMonotoneY = monotoneY;
      exports.curveNatural = natural;
      exports.curveStep = step;
      exports.curveStepAfter = stepAfter;
      exports.curveStepBefore = stepBefore;
      exports.stack = stack;
      exports.stackOffsetExpand = expand;
      exports.stackOffsetNone = none$1;
      exports.stackOffsetSilhouette = silhouette;
      exports.stackOffsetWiggle = wiggle;
      exports.stackOrderAscending = ascending$2;
      exports.stackOrderDescending = descending$2;
      exports.stackOrderInsideOut = insideOut;
      exports.stackOrderNone = none$2;
      exports.stackOrderReverse = reverse;
      exports.timeInterval = newInterval;
      exports.timeMillisecond = millisecond;
      exports.timeMilliseconds = milliseconds;
      exports.utcMillisecond = millisecond;
      exports.utcMilliseconds = milliseconds;
      exports.timeSecond = second;
      exports.timeSeconds = seconds;
      exports.utcSecond = second;
      exports.utcSeconds = seconds;
      exports.timeMinute = minute;
      exports.timeMinutes = minutes;
      exports.timeHour = hour;
      exports.timeHours = hours;
      exports.timeDay = day;
      exports.timeDays = days;
      exports.timeWeek = sunday;
      exports.timeWeeks = sundays;
      exports.timeSunday = sunday;
      exports.timeSundays = sundays;
      exports.timeMonday = monday;
      exports.timeMondays = mondays;
      exports.timeTuesday = tuesday;
      exports.timeTuesdays = tuesdays;
      exports.timeWednesday = wednesday;
      exports.timeWednesdays = wednesdays;
      exports.timeThursday = thursday;
      exports.timeThursdays = thursdays;
      exports.timeFriday = friday;
      exports.timeFridays = fridays;
      exports.timeSaturday = saturday;
      exports.timeSaturdays = saturdays;
      exports.timeMonth = month;
      exports.timeMonths = months;
      exports.timeYear = year;
      exports.timeYears = years;
      exports.utcMinute = utcMinute;
      exports.utcMinutes = utcMinutes;
      exports.utcHour = utcHour;
      exports.utcHours = utcHours;
      exports.utcDay = utcDay;
      exports.utcDays = utcDays;
      exports.utcWeek = utcSunday;
      exports.utcWeeks = utcSundays;
      exports.utcSunday = utcSunday;
      exports.utcSundays = utcSundays;
      exports.utcMonday = utcMonday;
      exports.utcMondays = utcMondays;
      exports.utcTuesday = utcTuesday;
      exports.utcTuesdays = utcTuesdays;
      exports.utcWednesday = utcWednesday;
      exports.utcWednesdays = utcWednesdays;
      exports.utcThursday = utcThursday;
      exports.utcThursdays = utcThursdays;
      exports.utcFriday = utcFriday;
      exports.utcFridays = utcFridays;
      exports.utcSaturday = utcSaturday;
      exports.utcSaturdays = utcSaturdays;
      exports.utcMonth = utcMonth;
      exports.utcMonths = utcMonths;
      exports.utcYear = utcYear;
      exports.utcYears = utcYears;
      exports.timeFormatDefaultLocale = defaultLocale$1;
      exports.timeFormatLocale = formatLocale$1;
      exports.isoFormat = formatIso;
      exports.isoParse = parseIso;
      exports.now = now;
      exports.timer = timer;
      exports.timerFlush = timerFlush;
      exports.timeout = timeout$1;
      exports.interval = interval$1;
      exports.transition = transition;
      exports.active = active;
      exports.interrupt = interrupt;
      exports.voronoi = voronoi;
      exports.zoom = zoom;
      exports.zoomTransform = transform$1;
      exports.zoomIdentity = identity$8;
      Object.defineProperty(exports, '__esModule', { value: true })
    }))
  });
  // source: src/templates/graphics/chart.pug
  rqzt.define('./templates/graphics/chart', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<svg></svg>'
  });
  // source: src/views/graphics/counter.coffee
  rqzt.define('./views/graphics/counter', function (module, exports, __dirname, __filename, process) {
    var Counter, CrowdControl, Tween, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    Tween = rqzt('tween.js/src/Tween');
    module.exports = Counter = function (superClass) {
      extend(Counter, superClass);
      function Counter() {
        return Counter.__super__.constructor.apply(this, arguments)
      }
      Counter.prototype.tag = 'daisho-graphics-counter';
      Counter.prototype.html = rqzt('./templates/graphics/counter');
      Counter.prototype.value0 = 0;
      Counter.prototype.value1 = 0;
      Counter.prototype.tween0 = null;
      Counter.prototype.tween1 = null;
      Counter.prototype.timer = 1000;
      Counter.prototype.init = function () {
        Counter.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var data, self, value0, value1;
            data = _this.data;
            self = _this;
            if (!_this.tween0 && data.get('0')) {
              value0 = data.get(0 + '.ys.0');
              if (value0 && value0 !== _this.value0) {
                _this.tween0 = new Tween.Tween({ v: _this.value0 }).to({ v: value0 }, _this.timer).onUpdate(function () {
                  self.value0 = this.v;
                  return requestAnimationFrame(function () {
                    return self.update()
                  })
                }).onComplete(function () {
                  _this.tween0 = null;
                  _this.value0 = value0;
                  return requestAnimationFrame(function () {
                    return _this.update()
                  })
                }).start()
              }
            }
            if (!_this.tween1 && data.get('1')) {
              value1 = data.get(1 + '.ys.0');
              if (value1 && value1 !== _this.value1) {
                return _this.tween1 = new Tween.Tween({ v: _this.value1 }).to({ v: value1 }, _this.timer).onUpdate(function () {
                  self.value1 = this.v;
                  return requestAnimationFrame(function () {
                    return self.update()
                  })
                }).onComplete(function () {
                  _this.tween1 = null;
                  _this.value1 = value1;
                  return requestAnimationFrame(function () {
                    return _this.update()
                  })
                }).start()
              }
            }
          }
        }(this))
      };
      Counter.prototype.getNumber = function (index) {
        if (index === 0) {
          if (!this.data.get(0 + '.fmt.y')) {
            return this.value0
          }
          return this.data.get(0 + '.fmt.y')(this.value0)
        } else {
          if (!this.data.get(1 + '.fmt.y')) {
            return this.value1
          }
          return this.data.get(1 + '.fmt.y')(this.value1)
        }
      };
      return Counter
    }(CrowdControl.Views.View)
  });
  // source: src/templates/graphics/counter.pug
  rqzt.define('./templates/graphics/counter', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<div class="display">\n  <div class="numbers">\n    <div class="number">{ getNumber(0) }</div>\n    <div class="divider" if="{ data.get(\'1\') }">/</div>\n    <div class="number" if="{ data.get(\'1\') }">{ getNumber(1) }</div>\n  </div>\n  <div class="names">\n    <div class="name">{ data.get(\'0.fmt.x\')(data.get(\'0.xs.0\')) }</div>\n    <div class="name" if="{ data.get(\'1\') }">{ data.get(\'1.fmt.x\')(data.get(\'1.xs.0\')) }</div>\n  </div>\n</div>\n<div class="label" if="{ !data.get(\'1\') }">{ data.get(\'0.series\') }</div>\n<div class="label" if="{ data.get(\'1\') }">{ data.get(\'0.series\') }</div>\n<div class="divider" if="{ data.get(\'1\') }">vs</div>\n<div class="label" if="{ data.get(\'1\') }">{ data.get(\'1.series\') }</div>'
  });
  // source: src/views/list.coffee
  rqzt.define('./views/list', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, List, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = List = function (superClass) {
      extend(List, superClass);
      function List() {
        return List.__super__.constructor.apply(this, arguments)
      }
      List.prototype.tag = 'list';
      List.prototype.html = rqzt('./templates/list');
      List.prototype.init = function () {
        return List.__super__.init.apply(this, arguments)
      };
      return List
    }(CrowdControl.Views.View)
  });
  // source: src/templates/list.pug
  rqzt.define('./templates/list', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<list each="{ item, k in data.get(listField) }" data="{ this.parent.data.ref(listField + \'.\' + k) }">\n  <yield></yield>\n</list>'
  });
  // source: src/views/list-item.coffee
  rqzt.define('./views/list-item', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, List, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = List = function (superClass) {
      extend(List, superClass);
      function List() {
        return List.__super__.constructor.apply(this, arguments)
      }
      List.prototype.tag = 'list-item';
      List.prototype.html = rqzt('./templates/list-item');
      List.prototype.init = function () {
        return List.__super__.init.apply(this, arguments)
      };
      return List
    }(CrowdControl.Views.Form)
  });
  // source: src/templates/list-item.pug
  rqzt.define('./templates/list-item', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield></yield>'
  });
  // source: src/views/login.coffee
  rqzt.define('./views/login', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, Login, isEmail, isPassword, isRequired, m, ref, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./views/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, isPassword = ref.isPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = Login = function (superClass) {
      extend(Login, superClass);
      function Login() {
        return Login.__super__.constructor.apply(this, arguments)
      }
      Login.prototype.tag = 'daisho-login';
      Login.prototype.html = rqzt('./templates/login');
      Login.prototype.configs = {
        'account.email': [
          isRequired,
          isEmail
        ],
        'account.password': [isPassword]
      };
      Login.prototype.error = null;
      Login.prototype.disabled = false;
      Login.prototype.init = function () {
        if (!this.data.get('account')) {
          this.data.set('account', {
            email: '',
            password: ''
          })
        }
        return Login.__super__.init.apply(this, arguments)
      };
      Login.prototype._submit = function (event) {
        var opts;
        opts = {
          email: this.data.get('account.email'),
          password: this.data.get('account.password')
        };
        this.error = null;
        m.trigger(Events.Login);
        this.disabled = true;
        this.update();
        return this.client.dashv2.login(opts).then(function (_this) {
          return function (res) {
            _this.disabled = false;
            _this.data.set('account.password', '');
            _this.data.set('account', res.user);
            _this.data.set('orgs', res.organizations);
            _this.data.set('activeOrg', 0);
            m.trigger(Events.LoginSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.disabled = false;
            _this.error = err.message;
            m.trigger(Events.LoginFailed, err);
            return _this.update()
          }
        }(this))
      };
      return Login
    }(CrowdControl.Views.Form)
  });
  // source: src/views/middleware/index.coffee
  rqzt.define('./views/middleware', function (module, exports, __dirname, __filename, process) {
    var emailRe, middleware;
    emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    middleware = {
      isRequired: function (value) {
        if (value && value !== '') {
          return value
        }
        throw new Error('Required')
      },
      isEmail: function (value) {
        if (!value) {
          return value
        }
        if (emailRe.test(value)) {
          return value.toLowerCase()
        }
        throw new Error('Enter a valid email')
      },
      isPassword: function (value) {
        if (!value) {
          throw new Error('Required')
        }
        if (value.length >= 6) {
          return value
        }
        throw new Error('Password must be atleast 6 characters long')
      }
    };
    module.exports = middleware
  });
  // source: src/templates/login.pug
  rqzt.define('./templates/login', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield>\n  <text-control class="input" lookup="account.email" placeholder="Email"></text-control>\n  <password-control class="input" lookup="account.password" placeholder="Password"></password-control>\n  <div class="error message" if="{ error }">{ error }</div>\n  <div class="{ disabled: disabled, button: true, submit: true }" onclick="{ submit }">Login</div>\n</yield>'
  });
  // source: src/views/main.coffee
  rqzt.define('./views/main', function (module, exports, __dirname, __filename, process) {
    var $, CrowdControl, Events, Main, m, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    $ = rqzt('jquery/dist/jquery');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = Main = function (superClass) {
      extend(Main, superClass);
      function Main() {
        return Main.__super__.constructor.apply(this, arguments)
      }
      Main.prototype.tag = 'daisho-main';
      Main.prototype.html = rqzt('./templates/main');
      Main.prototype.configs = { 'activeOrg': 0 };
      Main.prototype.error = null;
      Main.prototype.orgs = null;
      Main.prototype.init = function () {
        var i, org, ref;
        this.data = this.parentData;
        Main.__super__.init.apply(this, arguments);
        this.orgs = {};
        ref = this.data.get('orgs');
        for (i in ref) {
          org = ref[i];
          this.orgs[i] = org.fullName
        }
        this.client.setKey(this.data.get('orgs')[this.data.get('activeOrg')]['live-secret-key']);
        this.on('updated', function (_this) {
          return function () {
            var $el, $page, current;
            current = _this.services.page.current;
            if (current != null) {
              $el = $(current);
              $page = $(_this.root).find('#page');
              $page.html('').append($el);
              return current != null ? typeof current.update === 'function' ? current.update() : void 0 : void 0
            }
          }
        }(this));
        return m.on(Events.Change, function (_this) {
          return function (name, val) {
            if (name === 'activeOrg') {
              _this.client.setKey(_this.data.get('orgs')[val]['live-secret-key']);
              return window.location.reload()
            }
          }
        }(this))
      };
      Main.prototype.logout = function () {
        m.trigger(Events.Logout, res);
        return window.location.reload()
      };
      Main.prototype._submit = function (event) {
      };
      return Main
    }(CrowdControl.Views.Form)
  });
  // source: src/templates/main.pug
  rqzt.define('./templates/main', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield>\n  <header>\n    <div id="org-switcher">\n      <select-control class="input" select-options="{ orgs }" lookup="activeOrg"></select-control>\n    </div>\n  </header>\n  <daisho-menu id="menu"></daisho-menu>\n  <div id="page"></div>\n</yield>'
  });
  // source: src/views/menu.coffee
  rqzt.define('./views/menu', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Menu, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = Menu = function (superClass) {
      extend(Menu, superClass);
      function Menu() {
        return Menu.__super__.constructor.apply(this, arguments)
      }
      Menu.prototype.tag = 'daisho-menu';
      Menu.prototype.html = rqzt('./templates/menu');
      Menu.prototype.error = null;
      Menu.prototype.init = function () {
        return Menu.__super__.init.apply(this, arguments)
      };
      Menu.prototype.items = function () {
        var items, k, ref, v;
        items = [];
        ref = this.services.menu.menu;
        for (k in ref) {
          v = ref[k];
          items.push({
            name: k,
            onclick: v
          })
        }
        return items
      };
      return Menu
    }(CrowdControl.Views.View)
  });
  // source: src/templates/menu.pug
  rqzt.define('./templates/menu', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<ul>\n  <li each="{ items() }" onclick="{ onclick }">{ name }</li>\n</ul>'
  });
  // source: src/services/index.coffee
  rqzt.define('./services', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Menu: rqzt('./services/menu'),
      Page: rqzt('./services/page')
    }
  });
  // source: src/services/menu.coffee
  rqzt.define('./services/menu', function (module, exports, __dirname, __filename, process) {
    var MenuService;
    module.exports = MenuService = function () {
      MenuService.prototype.menu = null;
      MenuService.prototype.initFn = null;
      MenuService.prototype.daisho = null;
      function MenuService(daisho) {
        this.daisho = daisho;
        this.menu = {}
      }
      MenuService.prototype.register = function (name, fn) {
        this.menu[name] = fn;
        if (this.initFn == null) {
          return this.initFn = fn
        }
      };
      MenuService.prototype.run = function (name) {
        var fn;
        fn = this.menu[name];
        if (!fn) {
          void 0
        }
        return fn()
      };
      MenuService.prototype.start = function () {
        if (!this.initFn) {
          void 0;
          return
        }
        return this.initFn()
      };
      return MenuService
    }()
  });
  // source: src/services/page.coffee
  rqzt.define('./services/page', function (module, exports, __dirname, __filename, process) {
    var PageService;
    module.exports = PageService = function () {
      PageService.prototype.cache = null;
      PageService.prototype.data = null;
      PageService.prototype.daisho = null;
      PageService.prototype.current = null;
      function PageService(daisho, data, debug) {
        this.daisho = daisho;
        this.debug = debug;
        this.cache = {}
      }
      PageService.prototype.mount = function () {
      };
      PageService.prototype.update = function () {
      };
      PageService.prototype.register = function (id, enterFn, startFn, stopFn) {
        return this.cache[id] = {
          id: id,
          enter: enterFn,
          start: startFn,
          stop: stopFn,
          root: null
        }
      };
      PageService.prototype.show = function (id) {
        var page;
        page = this.cache[id];
        if (page == null) {
          void 0
        }
        if (this.current != null) {
          page.root = this.current.stop(this)
        }
        if (!page.root) {
          page.root = page.enter(this);
          page.root = page.start(this);
          if (this.debug) {
            void 0
          }
        } else {
          page.root = page.start(this);
          if (this.debug) {
            void 0
          }
        }
        this.current = page.root;
        return this.current
      };
      return PageService
    }()
  });
  // source: src/util/index.coffee
  rqzt.define('./util', function (module, exports, __dirname, __filename, process) {
    module.exports = { time: { rfc3339: 'YYYY-MM-DDTHH:mm:ssZ' } }
  });
  // source: src/browser.coffee
  rqzt.define('./browser', function (module, exports, __dirname, __filename, process) {
    global.Referential = rqzt('./index')
  });
  rqzt('./browser')
}.call(this, this))//# sourceMappingURL=data:application/json;base64,