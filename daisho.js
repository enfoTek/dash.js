(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require a module
  function rqzt(file, callback) {
    if ({}.hasOwnProperty.call(rqzt.cache, file))
      return rqzt.cache[file];
    // Handle async require
    if (typeof callback == 'function') {
      rqzt.load(file, callback);
      return
    }
    var resolved = rqzt.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      rqzt: rqzt,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    rqzt.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return rqzt.cache[file] = module$.exports
  }
  rqzt.modules = {};
  rqzt.cache = {};
  rqzt.resolve = function (file) {
    return {}.hasOwnProperty.call(rqzt.modules, file) ? rqzt.modules[file] : void 0
  };
  // Define normal static module
  rqzt.define = function (file, fn) {
    rqzt.modules[file] = fn
  };
  // source: node_modules/jquery/dist/jquery.js
  rqzt.define('jquery/dist/jquery', function (module, exports, __dirname, __filename, process) {
    /*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
    (function (global, factory) {
      'use strict';
      if (typeof module === 'object' && typeof module.exports === 'object') {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ? factory(global, true) : function (w) {
          if (!w.document) {
            throw new Error('jQuery requires a window with a document')
          }
          return factory(w)
        }
      } else {
        factory(global)
      }  // Pass this if window is not defined yet
    }(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
      // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
      // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
      // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
      // enough that all such attempts are guarded in a try block.
      'use strict';
      var arr = [];
      var document = window.document;
      var getProto = Object.getPrototypeOf;
      var slice = arr.slice;
      var concat = arr.concat;
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      function DOMEval(code, doc) {
        doc = doc || document;
        var script = doc.createElement('script');
        script.text = code;
        doc.head.appendChild(script).parentNode.removeChild(script)
      }
      /* global Symbol */
      // Defining this global in .eslintrc.json would create a danger of using the global
      // unguarded in another place, it seems safer to define global only for this module
      var version = '3.1.1',
        // Define a local copy of jQuery
        jQuery = function (selector, context) {
          // The jQuery object is actually just the init constructor 'enhanced'
          // Need init if jQuery is called (just allow error to be thrown if not included)
          return new jQuery.fn.init(selector, context)
        },
        // Support: Android <=4.0 only
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g,
        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function (all, letter) {
          return letter.toUpperCase()
        };
      jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function () {
          return slice.call(this)
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function (num) {
          // Return all the elements in a clean array
          if (num == null) {
            return slice.call(this)
          }
          // Return just the one element from the set
          return num < 0 ? this[num + this.length] : this[num]
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function (elems) {
          // Build a new jQuery matched element set
          var ret = jQuery.merge(this.constructor(), elems);
          // Add the old object onto the stack (as a reference)
          ret.prevObject = this;
          // Return the newly-formed element set
          return ret
        },
        // Execute a callback for every element in the matched set.
        each: function (callback) {
          return jQuery.each(this, callback)
        },
        map: function (callback) {
          return this.pushStack(jQuery.map(this, function (elem, i) {
            return callback.call(elem, i, elem)
          }))
        },
        slice: function () {
          return this.pushStack(slice.apply(this, arguments))
        },
        first: function () {
          return this.eq(0)
        },
        last: function () {
          return this.eq(-1)
        },
        eq: function (i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
        },
        end: function () {
          return this.prevObject || this.constructor()
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === 'boolean') {
          deep = target;
          // Skip the boolean and the target
          target = arguments[i] || {};
          i++
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
          target = {}
        }
        // Extend jQuery itself if only one argument is passed
        if (i === length) {
          target = this;
          i--
        }
        for (; i < length; i++) {
          // Only deal with non-null/undefined values
          if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
              src = target[name];
              copy = options[name];
              // Prevent never-ending loop
              if (target === copy) {
                continue
              }
              // Recurse if we're merging plain objects or arrays
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && jQuery.isArray(src) ? src : []
                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {}
                }
                // Never move original objects, clone them
                target[name] = jQuery.extend(deep, clone, copy)  // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy
              }
            }
          }
        }
        // Return the modified object
        return target
      };
      jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function (msg) {
          throw new Error(msg)
        },
        noop: function () {
        },
        isFunction: function (obj) {
          return jQuery.type(obj) === 'function'
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
          return obj != null && obj === obj.window
        },
        isNumeric: function (obj) {
          // As of jQuery 3.0, isNumeric is limited to
          // strings and numbers (primitives or objects)
          // that can be coerced to finite numbers (gh-2662)
          var type = jQuery.type(obj);
          return (type === 'number' || type === 'string') && // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj))
        },
        isPlainObject: function (obj) {
          var proto, Ctor;
          // Detect obvious negatives
          // Use toString instead of jQuery.type to catch host objects
          if (!obj || toString.call(obj) !== '[object Object]') {
            return false
          }
          proto = getProto(obj);
          // Objects with no prototype (e.g., `Object.create( null )`) are plain
          if (!proto) {
            return true
          }
          // Objects with prototype are plain iff they were constructed by a global Object function
          Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString
        },
        isEmptyObject: function (obj) {
          /* eslint-disable no-unused-vars */
          // See https://github.com/eslint/eslint/issues/6125
          var name;
          for (name in obj) {
            return false
          }
          return true
        },
        type: function (obj) {
          if (obj == null) {
            return obj + ''
          }
          // Support: Android <=2.3 only (functionish RegExp)
          return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj
        },
        // Evaluates a script in a global context
        globalEval: function (code) {
          DOMEval(code)
        },
        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE <=9 - 11, Edge 12 - 13
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function (string) {
          return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase)
        },
        nodeName: function (elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
        },
        each: function (obj, callback) {
          var length, i = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          }
          return obj
        },
        // Support: Android <=4.0 only
        trim: function (text) {
          return text == null ? '' : (text + '').replace(rtrim, '')
        },
        // results is for internal usage only
        makeArray: function (arr, results) {
          var ret = results || [];
          if (arr != null) {
            if (isArrayLike(Object(arr))) {
              jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr)
            } else {
              push.call(ret, arr)
            }
          }
          return ret
        },
        inArray: function (elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i)
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function (first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j]
          }
          first.length = i;
          return first
        },
        grep: function (elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          // Go through the array, only saving the items
          // that pass the validator function
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i])
            }
          }
          return matches
        },
        // arg is for internal usage only
        map: function (elems, callback, arg) {
          var length, value, i = 0, ret = [];
          // Go through the array, translating each of the items to their new values
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value)
              }
            }  // Go through every key on the object,
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value)
              }
            }
          }
          // Flatten any nested arrays
          return concat.apply([], ret)
        },
        // A global GUID counter for objects
        guid: 1,
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function (fn, context) {
          var tmp, args, proxy;
          if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp
          }
          // Quick check to determine if target is callable, in the spec
          // this throws a TypeError, but we will just return undefined.
          if (!jQuery.isFunction(fn)) {
            return undefined
          }
          // Simulated bind
          args = slice.call(arguments, 2);
          proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)))
          };
          // Set the guid of unique handler to the same of original handler, so it can be removed
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy
        },
        now: Date.now,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
      });
      if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator]
      }
      // Populate the class2type map
      jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase()
      });
      function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && 'length' in obj && obj.length, type = jQuery.type(obj);
        if (type === 'function' || jQuery.isWindow(obj)) {
          return false
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj
      }
      var Sizzle = /*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
      function (window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate,
          // Local document vars
          setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
          // Instance-specific data
          expando = 'sizzle' + 1 * new Date, preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
            if (a === b) {
              hasDuplicate = true
            }
            return 0
          },
          // Instance methods
          hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
          // Use a stripped-down indexOf as it's faster than native
          // https://jsperf.com/thor-indexof-vs-for/5
          indexOf = function (list, elem) {
            var i = 0, len = list.length;
            for (; i < len; i++) {
              if (list[i] === elem) {
                return i
              }
            }
            return -1
          }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
          // Regular expressions
          // http://www.w3.org/TR/css3-selectors/#whitespace
          whitespace = '[\\x20\\t\\r\\n\\f]',
          // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
          identifier = '(?:\\\\.|[\\w-]|[^ -\\xa0])+',
          // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
          attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + // Operator (capture 2)
          '*([*^$|!~]?=)' + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
          '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
          // 1. quoted (capture 3; capture 4 or capture 5)
          '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + // 2. simple (capture 6)
          '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + // 3. anything else (capture 2)
          '.*' + ')\\)|)',
          // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
          rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
            'ID': new RegExp('^#(' + identifier + ')'),
            'CLASS': new RegExp('^\\.(' + identifier + ')'),
            'TAG': new RegExp('^(' + identifier + '|[*])'),
            'ATTR': new RegExp('^' + attributes),
            'PSEUDO': new RegExp('^' + pseudos),
            'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
            'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
          }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/,
          // Easily-parseable/retrievable ID or TAG or CLASS selectors
          rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/,
          // CSS escapes
          // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
          runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
            var high = '0x' + escaped - 65536;
            // NaN means non-codepoint
            // Support: Firefox<24
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
            String.fromCharCode(high + 65536) : // Supplemental Plane codepoint (surrogate pair)
            String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
          },
          // CSS string/identifier serialization
          // https://drafts.csswg.org/cssom/#common-serializing-idioms
          rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function (ch, asCodePoint) {
            if (asCodePoint) {
              // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
              if (ch === ' ') {
                return '�'
              }
              // Control characters and (dependent upon position) numbers get escaped as code points
              return ch.slice(0, -1) + '\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' '
            }
            // Other potentially-special ASCII characters get backslash-escaped
            return '\\' + ch
          },
          // Used for iframes
          // See setDocument()
          // Removing the function wrapper causes a "Permission Denied"
          // error in IE
          unloadHandler = function () {
            setDocument()
          }, disabledAncestor = addCombinator(function (elem) {
            return elem.disabled === true && ('form' in elem || 'label' in elem)
          }, {
            dir: 'parentNode',
            next: 'legend'
          });
        // Optimize for push.apply( _, NodeList )
        try {
          push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
          // Support: Android<4.0
          // Detect silently failing push.apply
          arr[preferredDoc.childNodes.length].nodeType
        } catch (e) {
          push = {
            apply: arr.length ? // Leverage slice if possible
            function (target, els) {
              push_native.apply(target, slice.call(els))
            } : // Support: IE<9
            // Otherwise append directly
            function (target, els) {
              var j = target.length, i = 0;
              // Can't trust NodeList.length
              while (target[j++] = els[i++]) {
              }
              target.length = j - 1
            }
          }
        }
        function Sizzle(selector, context, results, seed) {
          var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument,
            // nodeType defaults to 9, since context defaults to document
            nodeType = context ? context.nodeType : 9;
          results = results || [];
          // Return early from calls with invalid selector or context
          if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results
          }
          // Try to shortcut find operations (as opposed to filters) in HTML documents
          if (!seed) {
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
              setDocument(context)
            }
            context = context || document;
            if (documentIsHTML) {
              // If the selector is sufficiently simple, try using a "get*By*" DOM method
              // (excepting DocumentFragment context, where the methods don't exist)
              if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                // ID selector
                if (m = match[1]) {
                  // Document context
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      // Support: IE, Opera, Webkit
                      // TODO: identify versions
                      // getElementById can match elements by name instead of ID
                      if (elem.id === m) {
                        results.push(elem);
                        return results
                      }
                    } else {
                      return results
                    }  // Element context
                  } else {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results
                    }
                  }  // Type selector
                } else if (match[2]) {
                  push.apply(results, context.getElementsByTagName(selector));
                  return results  // Class selector
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                  push.apply(results, context.getElementsByClassName(m));
                  return results
                }
              }
              // Take advantage of querySelectorAll
              if (support.qsa && !compilerCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                if (nodeType !== 1) {
                  newContext = context;
                  newSelector = selector  // qSA looks outside Element context, which is not what we want
                                          // Thanks to Andrew Dupont for this workaround technique
                                          // Support: IE <=8
                                          // Exclude object elements
                } else if (context.nodeName.toLowerCase() !== 'object') {
                  // Capture the context ID, setting it first if necessary
                  if (nid = context.getAttribute('id')) {
                    nid = nid.replace(rcssescape, fcssescape)
                  } else {
                    context.setAttribute('id', nid = expando)
                  }
                  // Prefix every selector in the list
                  groups = tokenize(selector);
                  i = groups.length;
                  while (i--) {
                    groups[i] = '#' + nid + ' ' + toSelector(groups[i])
                  }
                  newSelector = groups.join(',');
                  // Expand context for sibling selectors
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context
                }
                if (newSelector) {
                  try {
                    push.apply(results, newContext.querySelectorAll(newSelector));
                    return results
                  } catch (qsaError) {
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute('id')
                    }
                  }
                }
              }
            }
          }
          // All others
          return select(selector.replace(rtrim, '$1'), context, results, seed)
        }
        /**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
        function createCache() {
          var keys = [];
          function cache(key, value) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if (keys.push(key + ' ') > Expr.cacheLength) {
              // Only keep the most recent entries
              delete cache[keys.shift()]
            }
            return cache[key + ' '] = value
          }
          return cache
        }
        /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
        function markFunction(fn) {
          fn[expando] = true;
          return fn
        }
        /**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
        function assert(fn) {
          var el = document.createElement('fieldset');
          try {
            return !!fn(el)
          } catch (e) {
            return false
          } finally {
            // Remove from its parent by default
            if (el.parentNode) {
              el.parentNode.removeChild(el)
            }
            // release memory in IE
            el = null
          }
        }
        /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
        function addHandle(attrs, handler) {
          var arr = attrs.split('|'), i = arr.length;
          while (i--) {
            Expr.attrHandle[arr[i]] = handler
          }
        }
        /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
        function siblingCheck(a, b) {
          var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
          // Use IE sourceIndex if available on both nodes
          if (diff) {
            return diff
          }
          // Check if b follows a
          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1
              }
            }
          }
          return a ? 1 : -1
        }
        /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
        function createInputPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === 'input' && elem.type === type
          }
        }
        /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
        function createButtonPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === 'input' || name === 'button') && elem.type === type
          }
        }
        /**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
        function createDisabledPseudo(disabled) {
          // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
          return function (elem) {
            // Only certain elements can match :enabled or :disabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
            if ('form' in elem) {
              // Check for inherited disabledness on relevant non-disabled elements:
              // * listed form-associated elements in a disabled fieldset
              //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
              // * option elements in a disabled optgroup
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
              // All such elements have a "form" property.
              if (elem.parentNode && elem.disabled === false) {
                // Option elements defer to a parent optgroup if present
                if ('label' in elem) {
                  if ('label' in elem.parentNode) {
                    return elem.parentNode.disabled === disabled
                  } else {
                    return elem.disabled === disabled
                  }
                }
                // Support: IE 6 - 11
                // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                /* jshint -W018 */
                elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled
              }
              return elem.disabled === disabled  // Try to winnow out elements that can't be disabled before trusting the disabled property.
                                                 // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                                                 // even exist on them, let alone have a boolean value.
            } else if ('label' in elem) {
              return elem.disabled === disabled
            }
            // Remaining elements are neither :enabled nor :disabled
            return false
          }
        }
        /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
        function createPositionalPseudo(fn) {
          return markFunction(function (argument) {
            argument = +argument;
            return markFunction(function (seed, matches) {
              var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
              // Match elements found at the specified indexes
              while (i--) {
                if (seed[j = matchIndexes[i]]) {
                  seed[j] = !(matches[j] = seed[j])
                }
              }
            })
          })
        }
        /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== 'undefined' && context
        }
        // Expose support vars for convenience
        support = Sizzle.support = {};
        /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
        isXML = Sizzle.isXML = function (elem) {
          // documentElement is verified for cases where it doesn't yet exist
          // (such as loading iframes in IE - #4833)
          var documentElement = elem && (elem.ownerDocument || elem).documentElement;
          return documentElement ? documentElement.nodeName !== 'HTML' : false
        };
        /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
        setDocument = Sizzle.setDocument = function (node) {
          var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          // Return early if doc is invalid or already selected
          if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
            return document
          }
          // Update global variables
          document = doc;
          docElem = document.documentElement;
          documentIsHTML = !isXML(document);
          // Support: IE 9-11, Edge
          // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
          if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
            // Support: IE 11, Edge
            if (subWindow.addEventListener) {
              subWindow.addEventListener('unload', unloadHandler, false)  // Support: IE 9 - 10 only
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent('onunload', unloadHandler)
            }
          }
          /* Attributes
	---------------------------------------------------------------------- */
          // Support: IE<8
          // Verify that getAttribute really returns attributes and not properties
          // (excepting IE8 booleans)
          support.attributes = assert(function (el) {
            el.className = 'i';
            return !el.getAttribute('className')
          });
          /* getElement(s)By*
	---------------------------------------------------------------------- */
          // Check if getElementsByTagName("*") returns only elements
          support.getElementsByTagName = assert(function (el) {
            el.appendChild(document.createComment(''));
            return !el.getElementsByTagName('*').length
          });
          // Support: IE<9
          support.getElementsByClassName = rnative.test(document.getElementsByClassName);
          // Support: IE<10
          // Check if getElementById returns elements by name
          // The broken getElementById methods don't pick up programmatically-set names,
          // so use a roundabout getElementsByName test
          support.getById = assert(function (el) {
            docElem.appendChild(el).id = expando;
            return !document.getElementsByName || !document.getElementsByName(expando).length
          });
          // ID filter and find
          if (support.getById) {
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                return elem.getAttribute('id') === attrId
              }
            };
            Expr.find['ID'] = function (id, context) {
              if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : []
              }
            }
          } else {
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                return node && node.value === attrId
              }
            };
            // Support: IE 6 - 7 only
            // getElementById is not reliable as a find shortcut
            Expr.find['ID'] = function (id, context) {
              if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                var node, i, elems, elem = context.getElementById(id);
                if (elem) {
                  // Verify the id attribute
                  node = elem.getAttributeNode('id');
                  if (node && node.value === id) {
                    return [elem]
                  }
                  // Fall back on getElementsByName
                  elems = context.getElementsByName(id);
                  i = 0;
                  while (elem = elems[i++]) {
                    node = elem.getAttributeNode('id');
                    if (node && node.value === id) {
                      return [elem]
                    }
                  }
                }
                return []
              }
            }
          }
          // Tag
          Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
            if (typeof context.getElementsByTagName !== 'undefined') {
              return context.getElementsByTagName(tag)  // DocumentFragment nodes don't have gEBTN
            } else if (support.qsa) {
              return context.querySelectorAll(tag)
            }
          } : function (tag, context) {
            var elem, tmp = [], i = 0,
              // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
              results = context.getElementsByTagName(tag);
            // Filter out possible comments
            if (tag === '*') {
              while (elem = results[i++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem)
                }
              }
              return tmp
            }
            return results
          };
          // Class
          Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
            if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
              return context.getElementsByClassName(className)
            }
          };
          /* QSA/matchesSelector
	---------------------------------------------------------------------- */
          // QSA and matchesSelector support
          // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
          rbuggyMatches = [];
          // qSa(:focus) reports false when true (Chrome 21)
          // We allow this because of a bug in IE8/9 that throws an error
          // whenever `document.activeElement` is accessed on an iframe
          // So, we allow :focus to pass through QSA all the time to avoid the IE error
          // See https://bugs.jquery.com/ticket/13378
          rbuggyQSA = [];
          if (support.qsa = rnative.test(document.querySelectorAll)) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function (el) {
              // Select is set to empty string on purpose
              // This is to test IE's treatment of not explicitly
              // setting a boolean content attribute,
              // since its presence should be enough
              // https://bugs.jquery.com/ticket/12359
              docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
              // Support: IE8, Opera 11-12.16
              // Nothing should be selected when empty strings follow ^= or $= or *=
              // The test attribute must be unknown in Opera but "safe" for WinRT
              // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")')
              }
              // Support: IE8
              // Boolean attributes and "value" are not treated correctly
              if (!el.querySelectorAll('[selected]').length) {
                rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')')
              }
              // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
              if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                rbuggyQSA.push('~=')
              }
              // Webkit/Opera - :checked should return selected option elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              // IE8 throws error here and will not see later tests
              if (!el.querySelectorAll(':checked').length) {
                rbuggyQSA.push(':checked')
              }
              // Support: Safari 8+, iOS 8+
              // https://bugs.webkit.org/show_bug.cgi?id=136851
              // In-page `selector#id sibling-combinator selector` fails
              if (!el.querySelectorAll('a#' + expando + '+*').length) {
                rbuggyQSA.push('.#.+[+~]')
              }
            });
            assert(function (el) {
              el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";
              // Support: Windows 8 Native Apps
              // The type and name attributes are restricted during .innerHTML assignment
              var input = document.createElement('input');
              input.setAttribute('type', 'hidden');
              el.appendChild(input).setAttribute('name', 'D');
              // Support: IE8
              // Enforce case-sensitivity of name attribute
              if (el.querySelectorAll('[name=d]').length) {
                rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=')
              }
              // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
              // IE8 throws error here and will not see later tests
              if (el.querySelectorAll(':enabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              // Support: IE9-11+
              // IE's :disabled selector does not pick up the children of disabled fieldsets
              docElem.appendChild(el).disabled = true;
              if (el.querySelectorAll(':disabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              // Opera 10-11 does not throw on post-comma invalid pseudos
              el.querySelectorAll('*,:x');
              rbuggyQSA.push(',.*:')
            })
          }
          if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function (el) {
              // Check to see if it's possible to do matchesSelector
              // on a disconnected node (IE 9)
              support.disconnectedMatch = matches.call(el, '*');
              // This should fail with an exception
              // Gecko does not error, returns false instead
              matches.call(el, "[s!='']:x");
              rbuggyMatches.push('!=', pseudos)
            })
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
          /* Contains
	---------------------------------------------------------------------- */
          hasCompare = rnative.test(docElem.compareDocumentPosition);
          // Element contains another
          // Purposefully self-exclusive
          // As in, an element does not contain itself
          contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
          } : function (a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true
                }
              }
            }
            return false
          };
          /* Sorting
	---------------------------------------------------------------------- */
          // Document order sorting
          sortOrder = hasCompare ? function (a, b) {
            // Flag for duplicate removal
            if (a === b) {
              hasDuplicate = true;
              return 0
            }
            // Sort on method existence if only one input has compareDocumentPosition
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare
            }
            // Calculate position if both inputs belong to the same document
            compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
            1;
            // Disconnected nodes
            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
              // Choose the first element that is related to our preferred document
              if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                return -1
              }
              if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                return 1
              }
              // Maintain original order
              return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
            }
            return compare & 4 ? -1 : 1
          } : function (a, b) {
            // Exit early if the nodes are identical
            if (a === b) {
              hasDuplicate = true;
              return 0
            }
            var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
            // Parentless nodes are either documents or disconnected
            if (!aup || !bup) {
              return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0  // If the nodes are siblings, we can do a quick check
            } else if (aup === bup) {
              return siblingCheck(a, b)
            }
            // Otherwise we need full lists of their ancestors for comparison
            cur = a;
            while (cur = cur.parentNode) {
              ap.unshift(cur)
            }
            cur = b;
            while (cur = cur.parentNode) {
              bp.unshift(cur)
            }
            // Walk down the tree looking for a discrepancy
            while (ap[i] === bp[i]) {
              i++
            }
            return i ? // Do a sibling check if the nodes have a common ancestor
            siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
            ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
          };
          return document
        };
        Sizzle.matches = function (expr, elements) {
          return Sizzle(expr, null, null, elements)
        };
        Sizzle.matchesSelector = function (elem, expr) {
          // Set document vars if needed
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          // Make sure that attribute selectors are quoted
          expr = expr.replace(rattributeQuotes, "='$1']");
          if (support.matchesSelector && documentIsHTML && !compilerCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              // IE 9's matchesSelector returns false on disconnected nodes
              if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) {
                return ret
              }
            } catch (e) {
            }
          }
          return Sizzle(expr, document, null, [elem]).length > 0
        };
        Sizzle.contains = function (context, elem) {
          // Set document vars if needed
          if ((context.ownerDocument || context) !== document) {
            setDocument(context)
          }
          return contains(context, elem)
        };
        Sizzle.attr = function (elem, name) {
          // Set document vars if needed
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          var fn = Expr.attrHandle[name.toLowerCase()],
            // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
          return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
        };
        Sizzle.escape = function (sel) {
          return (sel + '').replace(rcssescape, fcssescape)
        };
        Sizzle.error = function (msg) {
          throw new Error('Syntax error, unrecognized expression: ' + msg)
        };
        /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
        Sizzle.uniqueSort = function (results) {
          var elem, duplicates = [], j = 0, i = 0;
          // Unless we *know* we can detect duplicates, assume their presence
          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice(0);
          results.sort(sortOrder);
          if (hasDuplicate) {
            while (elem = results[i++]) {
              if (elem === results[i]) {
                j = duplicates.push(i)
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1)
            }
          }
          // Clear input after sorting to release objects
          // See https://github.com/jquery/sizzle/pull/225
          sortInput = null;
          return results
        };
        /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
        getText = Sizzle.getText = function (elem) {
          var node, ret = '', i = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            // If no nodeType, this is expected to be an array
            while (node = elem[i++]) {
              // Do not traverse comment nodes
              ret += getText(node)
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (jQuery #11153)
            if (typeof elem.textContent === 'string') {
              return elem.textContent
            } else {
              // Traverse its children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem)
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue
          }
          // Do not include comment or processing instruction nodes
          return ret
        };
        Expr = Sizzle.selectors = {
          // Can be adjusted by the user
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            '>': {
              dir: 'parentNode',
              first: true
            },
            ' ': { dir: 'parentNode' },
            '+': {
              dir: 'previousSibling',
              first: true
            },
            '~': { dir: 'previousSibling' }
          },
          preFilter: {
            'ATTR': function (match) {
              match[1] = match[1].replace(runescape, funescape);
              // Move the given value to match[3] whether quoted or unquoted
              match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
              if (match[2] === '~=') {
                match[3] = ' ' + match[3] + ' '
              }
              return match.slice(0, 4)
            },
            'CHILD': function (match) {
              /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === 'nth') {
                // nth-* requires argument
                if (!match[3]) {
                  Sizzle.error(match[0])
                }
                // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                match[5] = +(match[7] + match[8] || match[3] === 'odd')  // other types prohibit arguments
              } else if (match[3]) {
                Sizzle.error(match[0])
              }
              return match
            },
            'PSEUDO': function (match) {
              var excess, unquoted = !match[6] && match[2];
              if (matchExpr['CHILD'].test(match[0])) {
                return null
              }
              // Accept quoted arguments as-is
              if (match[3]) {
                match[2] = match[4] || match[5] || ''  // Strip excess characters from unquoted arguments
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                // excess is a negative index
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess)
              }
              // Return only captures needed by the pseudo filter method (type and argument)
              return match.slice(0, 3)
            }
          },
          filter: {
            'TAG': function (nodeNameSelector) {
              var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === '*' ? function () {
                return true
              } : function (elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
              }
            },
            'CLASS': function (className) {
              var pattern = classCache[className + ' '];
              return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '')
              })
            },
            'ATTR': function (name, operator, check) {
              return function (elem) {
                var result = Sizzle.attr(elem, name);
                if (result == null) {
                  return operator === '!='
                }
                if (!operator) {
                  return true
                }
                result += '';
                return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false
              }
            },
            'CHILD': function (type, what, argument, first, last) {
              var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
              return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
              function (elem) {
                return !!elem.parentNode
              } : function (elem, context, xml) {
                var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                if (parent) {
                  // :(first|last|only)-(child|of-type)
                  if (simple) {
                    while (dir) {
                      node = elem;
                      while (node = node[dir]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false
                        }
                      }
                      // Reverse direction for :only-* (if we haven't yet done so)
                      start = dir = type === 'only' && !start && 'nextSibling'
                    }
                    return true
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  // non-xml :nth-child(...) stores cache data on `parent`
                  if (forward && useCache) {
                    // Seek `elem` from a previously-cached index
                    // ...in a gzip-friendly way
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {});
                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                      // When found, cache indexes on `parent` and break
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        uniqueCache[type] = [
                          dirruns,
                          nodeIndex,
                          diff
                        ];
                        break
                      }
                    }
                  } else {
                    // Use previously-cached element index if available
                    if (useCache) {
                      // ...in a gzip-friendly way
                      node = elem;
                      outerCache = node[expando] || (node[expando] = {});
                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex
                    }
                    // xml :nth-child(...)
                    // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                    if (diff === false) {
                      // Use the same loop as above to seek `elem` from the start
                      while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          // Cache the index of each encountered element
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)
                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            uniqueCache[type] = [
                              dirruns,
                              diff
                            ]
                          }
                          if (node === elem) {
                            break
                          }
                        }
                      }
                    }
                  }
                  // Incorporate the offset, then check against cycle size
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0
                }
              }
            },
            'PSEUDO': function (pseudo, argument) {
              // pseudo-class names are case-insensitive
              // http://www.w3.org/TR/selectors/#pseudo-classes
              // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
              // Remember that setFilters inherits from pseudos
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
              // The user may use createPseudo to indicate that
              // arguments are needed to create the filter function
              // just as Sizzle does
              if (fn[expando]) {
                return fn(argument)
              }
              // But maintain support for old signatures
              if (fn.length > 1) {
                args = [
                  pseudo,
                  pseudo,
                  '',
                  argument
                ];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                  var idx, matched = fn(seed, argument), i = matched.length;
                  while (i--) {
                    idx = indexOf(seed, matched[i]);
                    seed[idx] = !(matches[idx] = matched[i])
                  }
                }) : function (elem) {
                  return fn(elem, 0, args)
                }
              }
              return fn
            }
          },
          pseudos: {
            // Potentially complex pseudos
            'not': markFunction(function (selector) {
              // Trim the selector passed to compile
              // to avoid treating leading and trailing
              // spaces as combinators
              var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
              return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                // Match elements unmatched by `matcher`
                while (i--) {
                  if (elem = unmatched[i]) {
                    seed[i] = !(matches[i] = elem)
                  }
                }
              }) : function (elem, context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                // Don't keep the element (issue #299)
                input[0] = null;
                return !results.pop()
              }
            }),
            'has': markFunction(function (selector) {
              return function (elem) {
                return Sizzle(selector, elem).length > 0
              }
            }),
            'contains': markFunction(function (text) {
              text = text.replace(runescape, funescape);
              return function (elem) {
                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
              }
            }),
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            'lang': markFunction(function (lang) {
              // lang value must be a valid identifier
              if (!ridentifier.test(lang || '')) {
                Sizzle.error('unsupported lang: ' + lang)
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function (elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + '-') === 0
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false
              }
            }),
            // Miscellaneous
            'target': function (elem) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice(1) === elem.id
            },
            'root': function (elem) {
              return elem === docElem
            },
            'focus': function (elem) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
            },
            // Boolean properties
            'enabled': createDisabledPseudo(false),
            'disabled': createDisabledPseudo(true),
            'checked': function (elem) {
              // In CSS3, :checked should return both checked and selected elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              var nodeName = elem.nodeName.toLowerCase();
              return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected
            },
            'selected': function (elem) {
              // Accessing this property makes selected-by-default
              // options in Safari work properly
              if (elem.parentNode) {
                elem.parentNode.selectedIndex
              }
              return elem.selected === true
            },
            // Contents
            'empty': function (elem) {
              // http://www.w3.org/TR/selectors/#empty-pseudo
              // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
              //   but not by others (comment: 8; processing instruction: 7; etc.)
              // nodeType < 6 works because attributes (2) do not appear as children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false
                }
              }
              return true
            },
            'parent': function (elem) {
              return !Expr.pseudos['empty'](elem)
            },
            // Element/input types
            'header': function (elem) {
              return rheader.test(elem.nodeName)
            },
            'input': function (elem) {
              return rinputs.test(elem.nodeName)
            },
            'button': function (elem) {
              var name = elem.nodeName.toLowerCase();
              return name === 'input' && elem.type === 'button' || name === 'button'
            },
            'text': function (elem) {
              var attr;
              return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text')
            },
            // Position-in-collection
            'first': createPositionalPseudo(function () {
              return [0]
            }),
            'last': createPositionalPseudo(function (matchIndexes, length) {
              return [length - 1]
            }),
            'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument]
            }),
            'even': createPositionalPseudo(function (matchIndexes, length) {
              var i = 0;
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'odd': createPositionalPseudo(function (matchIndexes, length) {
              var i = 1;
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; --i >= 0;) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; ++i < length;) {
                matchIndexes.push(i)
              }
              return matchIndexes
            })
          }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        // Add button/input type pseudos
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
          }) {
          Expr.pseudos[i] = createInputPseudo(i)
        }
        for (i in {
            submit: true,
            reset: true
          }) {
          Expr.pseudos[i] = createButtonPseudo(i)
        }
        // Easy API for creating new setFilters
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters;
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0)
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            // Comma and first run
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice(match[0].length) || soFar
              }
              groups.push(tokens = [])
            }
            matched = false;
            // Combinators
            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace(rtrim, ' ')
              });
              soFar = soFar.slice(matched.length)
            }
            // Filters
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice(matched.length)
              }
            }
            if (!matched) {
              break
            }
          }
          // Return the length of the invalid excess
          // if we're just parsing
          // Otherwise, throw an error or return tokens
          return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
          tokenCache(selector, groups).slice(0)
        };
        function toSelector(tokens) {
          var i = 0, len = tokens.length, selector = '';
          for (; i < len; i++) {
            selector += tokens[i].value
          }
          return selector
        }
        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === 'parentNode', doneName = done++;
          return combinator.first ? // Check against closest ancestor/preceding element
          function (elem, context, xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml)
              }
            }
            return false
          } : // Check against all ancestor/preceding elements
          function (elem, context, xml) {
            var oldCache, uniqueCache, outerCache, newCache = [
                dirruns,
                doneName
              ];
            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
            if (xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true
                  }
                }
              }
            } else {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)
                  uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                  if (skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir] || elem
                  } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    // Assign to newCache so results back-propagate to previous elements
                    return newCache[2] = oldCache[2]
                  } else {
                    // Reuse newcache so results back-propagate to previous elements
                    uniqueCache[key] = newCache;
                    // A match means we're done; a fail means we have to keep checking
                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true
                    }
                  }
                }
              }
            }
            return false
          }
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function (elem, context, xml) {
            var i = matchers.length;
            while (i--) {
              if (!matchers[i](elem, context, xml)) {
                return false
              }
            }
            return true
          } : matchers[0]
        }
        function multipleContexts(selector, contexts, results) {
          var i = 0, len = contexts.length;
          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results)
          }
          return results
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
          for (; i < len; i++) {
            if (elem = unmatched[i]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i)
                }
              }
            }
          }
          return newUnmatched
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter)
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector)
          }
          return markFunction(function (seed, results, context, xml) {
            var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
              // Get initial elements from seed or context
              elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
              // Prefilter to get matcher input, preserving a map for seed-results synchronization
              matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
              postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
              [] : // ...otherwise use results directly
              results : matcherIn;
            // Find primary matches
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml)
            }
            // Apply postFilter
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              // Un-match failing elements by moving them back to matcherIn
              i = temp.length;
              while (i--) {
                if (elem = temp[i]) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  // Get the final matcherOut by condensing this intermediate into postFinder contexts
                  temp = [];
                  i = matcherOut.length;
                  while (i--) {
                    if (elem = matcherOut[i]) {
                      // Restore matcherIn since elem is not yet a final match
                      temp.push(matcherIn[i] = elem)
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml)
                }
                // Move matched elements from seed to results to keep them synchronized
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                    seed[temp] = !(results[temp] = elem)
                  }
                }
              }  // Add elements to results, through postFinder if defined
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml)
              } else {
                push.apply(results, matcherOut)
              }
            }
          })
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function (elem) {
              return elem === checkContext
            }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
              return indexOf(checkContext, elem) > -1
            }, implicitRelative, true), matchers = [function (elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                // Avoid hanging onto element (issue #299)
                checkContext = null;
                return ret
              }];
          for (; i < len; i++) {
            if (matcher = Expr.relative[tokens[i].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)]
            } else {
              matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
              // Return special upon seeing a positional matcher
              if (matcher[expando]) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break
                  }
                }
                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
              }
              matchers.push(matcher)
            }
          }
          return elementMatcher(matchers)
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext,
                // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find['TAG']('*', outermost),
                // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context === document || context || outermost
              }
              // Add elements passing elementMatchers directly to results
              // Support: IE<9, Safari
              // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
              for (; i !== len && (elem = elems[i]) != null; i++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context && elem.ownerDocument !== document) {
                    setDocument(elem);
                    xml = !documentIsHTML
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context || document, xml)) {
                      results.push(elem);
                      break
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique
                  }
                }
                // Track unmatched elements for set filters
                if (bySet) {
                  // They will have gone through all possible matchers
                  if (elem = !matcher && elem) {
                    matchedCount--
                  }
                  // Lengthen the array for every element, matched or not
                  if (seed) {
                    unmatched.push(elem)
                  }
                }
              }
              // `i` is now the count of elements visited above, and adding it to `matchedCount`
              // makes the latter nonnegative.
              matchedCount += i;
              // Apply set filters to unmatched elements
              // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
              // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
              // no element matchers and no seed.
              // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
              // case, which will result in a "00" `matchedCount` that differs from `i` but is also
              // numerically zero.
              if (bySet && i !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml)
                }
                if (seed) {
                  // Reintegrate element matches to eliminate the need for sorting
                  if (matchedCount > 0) {
                    while (i--) {
                      if (!(unmatched[i] || setMatched[i])) {
                        setMatched[i] = pop.call(results)
                      }
                    }
                  }
                  // Discard index placeholder values to get only actual matches
                  setMatched = condense(setMatched)
                }
                // Add matches to results
                push.apply(results, setMatched);
                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  Sizzle.uniqueSort(results)
                }
              }
              // Override manipulation of globals by nested matchers
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup
              }
              return unmatched
            };
          return bySet ? markFunction(superMatcher) : superMatcher
        }
        compile = Sizzle.compile = function (selector, match) {
          var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
          if (!cached) {
            // Generate a function of recursive functions that can be used to check each element
            if (!match) {
              match = tokenize(selector)
            }
            i = match.length;
            while (i--) {
              cached = matcherFromTokens(match[i]);
              if (cached[expando]) {
                setMatchers.push(cached)
              } else {
                elementMatchers.push(cached)
              }
            }
            // Cache the compiled function
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            // Save selector and tokenization
            cached.selector = selector
          }
          return cached
        };
        /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
        select = Sizzle.select = function (selector, context, results, seed) {
          var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          // Try to minimize operations if there is only one selector in the list and no seed
          // (the latter of which guarantees us context)
          if (match.length === 1) {
            // Reduce context if the leading compound selector is an ID
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
              if (!context) {
                return results  // Precompiled matchers will still verify ancestry, so step up a level
              } else if (compiled) {
                context = context.parentNode
              }
              selector = selector.slice(tokens.shift().value.length)
            }
            // Fetch a seed set for right-to-left matching
            i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
            while (i--) {
              token = tokens[i];
              // Abort if we hit a combinator
              if (Expr.relative[type = token.type]) {
                break
              }
              if (find = Expr.find[type]) {
                // Search, expanding context for leading sibling combinators
                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  // If seed is empty or no tokens remain, we can return early
                  tokens.splice(i, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push.apply(results, seed);
                    return results
                  }
                  break
                }
              }
            }
          }
          // Compile and execute a filtering function if one is not provided
          // Provide `match` to avoid retokenization if we modified the selector above
          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results
        };
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function (el) {
          // Should return 1, but returns 4 (following)
          return el.compareDocumentPosition(document.createElement('fieldset')) & 1
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function (el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute('href') === '#'
          })) {
          addHandle('type|href|height|width', function (elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2)
            }
          })
        }
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function (el) {
            el.innerHTML = '<input/>';
            el.firstChild.setAttribute('value', '');
            return el.firstChild.getAttribute('value') === ''
          })) {
          addHandle('value', function (elem, name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === 'input') {
              return elem.defaultValue
            }
          })
        }
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function (el) {
            return el.getAttribute('disabled') == null
          })) {
          addHandle(booleans, function (elem, name, isXML) {
            var val;
            if (!isXML) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
            }
          })
        }
        return Sizzle
      }(window);
      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      // Deprecated
      jQuery.expr[':'] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      jQuery.escapeSelector = Sizzle.escape;
      var dir = function (elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break
            }
            matched.push(elem)
          }
        }
        return matched
      };
      var siblings = function (n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n)
          }
        }
        return matched
      };
      var rneedsContext = jQuery.expr.match.needsContext;
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      var risSimple = /^.[^:#\[\.,]*$/;
      // Implement the identical functionality for filter and not
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not
          })
        }
        // Single element
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not
          })
        }
        // Arraylike of elements (jQuery, arguments, Array)
        if (typeof qualifier !== 'string') {
          return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) > -1 !== not
          })
        }
        // Simple selector that can be filtered directly, removing non-Elements
        if (risSimple.test(qualifier)) {
          return jQuery.filter(qualifier, elements, not)
        }
        // Complex selector, compare the two sets, removing non-Elements
        qualifier = jQuery.filter(qualifier, elements);
        return jQuery.grep(elements, function (elem) {
          return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1
        })
      }
      jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ':not(' + expr + ')'
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : []
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
          return elem.nodeType === 1
        }))
      };
      jQuery.fn.extend({
        find: function (selector) {
          var i, ret, len = this.length, self = this;
          if (typeof selector !== 'string') {
            return this.pushStack(jQuery(selector).filter(function () {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true
                }
              }
            }))
          }
          ret = this.pushStack([]);
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret)
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret
        },
        filter: function (selector) {
          return this.pushStack(winnow(this, selector || [], false))
        },
        not: function (selector) {
          return this.pushStack(winnow(this, selector || [], true))
        },
        is: function (selector) {
          return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
          // so $("p:first").is("p:last") won't return true for a doc with two "p".
          typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
        }
      });
      // Initialize a jQuery object
      // A central reference to the root jQuery(document)
      var rootjQuery,
        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        // Shortcut simple #id case for speed
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function (selector, context, root) {
          var match, elem;
          // HANDLE: $(""), $(null), $(undefined), $(false)
          if (!selector) {
            return this
          }
          // Method init() accepts an alternate rootjQuery
          // so migrate can support jQuery.sub (gh-2101)
          root = root || rootjQuery;
          // Handle HTML strings
          if (typeof selector === 'string') {
            if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
              // Assume that strings that start and end with <> are HTML and skip the regex check
              match = [
                null,
                selector,
                null
              ]
            } else {
              match = rquickExpr.exec(selector)
            }
            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {
              // HANDLE: $(html) -> $(array)
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                // Option to run scripts is true for back-compat
                // Intentionally let the error be thrown if parseHTML is not present
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                // HANDLE: $(html, props)
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {
                    // Properties of context are called as methods if possible
                    if (jQuery.isFunction(this[match])) {
                      this[match](context[match])  // ...and otherwise set as attributes
                    } else {
                      this.attr(match, context[match])
                    }
                  }
                }
                return this  // HANDLE: $(#id)
              } else {
                elem = document.getElementById(match[2]);
                if (elem) {
                  // Inject the element directly into the jQuery object
                  this[0] = elem;
                  this.length = 1
                }
                return this
              }  // HANDLE: $(expr, $(...))
            } else if (!context || context.jquery) {
              return (context || root).find(selector)  // HANDLE: $(expr, context)
                                                       // (which is just equivalent to: $(context).find(expr)
            } else {
              return this.constructor(context).find(selector)
            }  // HANDLE: $(DOMElement)
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this  // HANDLE: $(function)
                         // Shortcut for document ready
          } else if (jQuery.isFunction(selector)) {
            return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
            selector(jQuery)
          }
          return jQuery.makeArray(selector, this)
        };
      // Give the init function the jQuery prototype for later instantiation
      init.prototype = jQuery.fn;
      // Initialize central reference
      rootjQuery = jQuery(document);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/,
        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
      jQuery.fn.extend({
        has: function (target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function () {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true
              }
            }
          })
        },
        closest: function (selectors, context) {
          var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== 'string' && jQuery(selectors);
          // Positional selectors never match, since there's no _selection_ context
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                // Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched)
        },
        // Determine the position of an element within the set
        index: function (elem) {
          // No argument, return index in parent
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
          }
          // Index in selector
          if (typeof elem === 'string') {
            return indexOf.call(jQuery(elem), this[0])
          }
          // Locate the position of the desired element
          return indexOf.call(this, // If it receives a jQuery object, the first element is used
          elem.jquery ? elem[0] : elem)
        },
        add: function (selector, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))))
        },
        addBack: function (selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
        }
      });
      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur
      }
      jQuery.each({
        parent: function (elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null
        },
        parents: function (elem) {
          return dir(elem, 'parentNode')
        },
        parentsUntil: function (elem, i, until) {
          return dir(elem, 'parentNode', until)
        },
        next: function (elem) {
          return sibling(elem, 'nextSibling')
        },
        prev: function (elem) {
          return sibling(elem, 'previousSibling')
        },
        nextAll: function (elem) {
          return dir(elem, 'nextSibling')
        },
        prevAll: function (elem) {
          return dir(elem, 'previousSibling')
        },
        nextUntil: function (elem, i, until) {
          return dir(elem, 'nextSibling', until)
        },
        prevUntil: function (elem, i, until) {
          return dir(elem, 'previousSibling', until)
        },
        siblings: function (elem) {
          return siblings((elem.parentNode || {}).firstChild, elem)
        },
        children: function (elem) {
          return siblings(elem.firstChild)
        },
        contents: function (elem) {
          return elem.contentDocument || jQuery.merge([], elem.childNodes)
        }
      }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== 'Until') {
            selector = until
          }
          if (selector && typeof selector === 'string') {
            matched = jQuery.filter(selector, matched)
          }
          if (this.length > 1) {
            // Remove duplicates
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched)
            }
            // Reverse order for parents* and prev-derivatives
            if (rparentsprev.test(name)) {
              matched.reverse()
            }
          }
          return this.pushStack(matched)
        }
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      // Convert String-formatted options into Object-formatted ones
      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
          object[flag] = true
        });
        return object
      }
      /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
      jQuery.Callbacks = function (options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
        var
          // Flag to know if list is currently firing
          firing,
          // Last fire value for non-forgettable lists
          memory,
          // Flag to know if list was already fired
          fired,
          // Flag to prevent firing
          locked,
          // Actual callback list
          list = [],
          // Queue of execution data for repeatable lists
          queue = [],
          // Index of currently firing callback (modified by add/remove as needed)
          firingIndex = -1,
          // Fire callbacks
          fire = function () {
            // Enforce single-firing
            locked = options.once;
            // Execute callbacks for all pending executions,
            // respecting firingIndex overrides and runtime changes
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                // Run callback and check for early termination
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  // Jump to end and forget the data so .add doesn't re-fire
                  firingIndex = list.length;
                  memory = false
                }
              }
            }
            // Forget the data if we're done with it
            if (!options.memory) {
              memory = false
            }
            firing = false;
            // Clean up if we're done firing for good
            if (locked) {
              // Keep an empty list if we have data for future add calls
              if (memory) {
                list = []  // Otherwise, this object is spent
              } else {
                list = ''
              }
            }
          },
          // Actual Callbacks object
          self = {
            // Add a callback or a collection of callbacks to the list
            add: function () {
              if (list) {
                // If we have memory from a past run, we should fire after adding
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory)
                }
                (function add(args) {
                  jQuery.each(args, function (_, arg) {
                    if (jQuery.isFunction(arg)) {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg)
                      }
                    } else if (arg && arg.length && jQuery.type(arg) !== 'string') {
                      // Inspect recursively
                      add(arg)
                    }
                  })
                }(arguments));
                if (memory && !firing) {
                  fire()
                }
              }
              return this
            },
            // Remove a callback from the list
            remove: function () {
              jQuery.each(arguments, function (_, arg) {
                var index;
                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  // Handle firing indexes
                  if (index <= firingIndex) {
                    firingIndex--
                  }
                }
              });
              return this
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function (fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0
            },
            // Remove all callbacks from the list
            empty: function () {
              if (list) {
                list = []
              }
              return this
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function () {
              locked = queue = [];
              list = memory = '';
              return this
            },
            disabled: function () {
              return !list
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function () {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = ''
              }
              return this
            },
            locked: function () {
              return !!locked
            },
            // Call all callbacks with the given context and arguments
            fireWith: function (context, args) {
              if (!locked) {
                args = args || [];
                args = [
                  context,
                  args.slice ? args.slice() : args
                ];
                queue.push(args);
                if (!firing) {
                  fire()
                }
              }
              return this
            },
            // Call all the callbacks with the given arguments
            fire: function () {
              self.fireWith(this, arguments);
              return this
            },
            // To know if the callbacks have already been called at least once
            fired: function () {
              return !!fired
            }
          };
        return self
      };
      function Identity(v) {
        return v
      }
      function Thrower(ex) {
        throw ex
      }
      function adoptValue(value, resolve, reject) {
        var method;
        try {
          // Check for promise aspect first to privilege synchronous behavior
          if (value && jQuery.isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject)  // Other thenables
          } else if (value && jQuery.isFunction(method = value.then)) {
            method.call(value, resolve, reject)  // Other non-thenables
          } else {
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            resolve.call(undefined, value)
          }  // For Promises/A+, convert exceptions into rejections
             // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
             // Deferred#then to conditionally suppress rejection.
        } catch (value) {
          // Support: Android 4.0 only
          // Strict mode functions invoked without .call/.apply get global-object context
          reject.call(undefined, value)
        }
      }
      jQuery.extend({
        Deferred: function (func) {
          var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              [
                'notify',
                'progress',
                jQuery.Callbacks('memory'),
                jQuery.Callbacks('memory'),
                2
              ],
              [
                'resolve',
                'done',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                0,
                'resolved'
              ],
              [
                'reject',
                'fail',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                1,
                'rejected'
              ]
            ], state = 'pending', promise = {
              state: function () {
                return state
              },
              always: function () {
                deferred.done(arguments).fail(arguments);
                return this
              },
              'catch': function (fn) {
                return promise.then(null, fn)
              },
              // Keep pipe for back-compat
              pipe: function () {
                var fns = arguments;
                return jQuery.Deferred(function (newDefer) {
                  jQuery.each(tuples, function (i, tuple) {
                    // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                    var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    // deferred.progress(function() { bind to newDefer or newDefer.notify })
                    // deferred.done(function() { bind to newDefer or newDefer.resolve })
                    // deferred.fail(function() { bind to newDefer or newDefer.reject })
                    deferred[tuple[1]](function () {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && jQuery.isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject)
                      } else {
                        newDefer[tuple[0] + 'With'](this, fn ? [returned] : arguments)
                      }
                    })
                  });
                  fns = null
                }).promise()
              },
              then: function (onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred, handler, special) {
                  return function () {
                    var that = this, args = arguments, mightThrow = function () {
                        var returned, then;
                        // Support: Promises/A+ section 2.3.3.3.3
                        // https://promisesaplus.com/#point-59
                        // Ignore double-resolution attempts
                        if (depth < maxDepth) {
                          return
                        }
                        returned = handler.apply(that, args);
                        // Support: Promises/A+ section 2.3.1
                        // https://promisesaplus.com/#point-48
                        if (returned === deferred.promise()) {
                          throw new TypeError('Thenable self-resolution')
                        }
                        // Support: Promises/A+ sections 2.3.3.1, 3.5
                        // https://promisesaplus.com/#point-54
                        // https://promisesaplus.com/#point-75
                        // Retrieve `then` only once
                        then = returned && (typeof returned === 'object' || typeof returned === 'function') && returned.then;
                        // Handle a returned thenable
                        if (jQuery.isFunction(then)) {
                          // Special processors (notify) just wait for resolution
                          if (special) {
                            then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special))  // Normal processors (resolve) also hook into progress
                          } else {
                            // ...and disregard older resolution values
                            maxDepth++;
                            then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith))
                          }  // Handle all other returned values
                        } else {
                          // Only substitute handlers pass on context
                          // and multiple values (non-spec behavior)
                          if (handler !== Identity) {
                            that = undefined;
                            args = [returned]
                          }
                          // Process the value(s)
                          // Default process is resolve
                          (special || deferred.resolveWith)(that, args)
                        }
                      },
                      // Only normal processors (resolve) catch and reject exceptions
                      process = special ? mightThrow : function () {
                        try {
                          mightThrow()
                        } catch (e) {
                          if (jQuery.Deferred.exceptionHook) {
                            jQuery.Deferred.exceptionHook(e, process.stackTrace)
                          }
                          // Support: Promises/A+ section 2.3.3.3.4.1
                          // https://promisesaplus.com/#point-61
                          // Ignore post-resolution exceptions
                          if (depth + 1 >= maxDepth) {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Thrower) {
                              that = undefined;
                              args = [e]
                            }
                            deferred.rejectWith(that, args)
                          }
                        }
                      };
                    // Support: Promises/A+ section 2.3.3.3.1
                    // https://promisesaplus.com/#point-57
                    // Re-resolve promises immediately to dodge false rejection from
                    // subsequent errors
                    if (depth) {
                      process()
                    } else {
                      // Call an optional hook to record the stack, in case of exception
                      // since it's otherwise lost when execution goes async
                      if (jQuery.Deferred.getStackHook) {
                        process.stackTrace = jQuery.Deferred.getStackHook()
                      }
                      window.setTimeout(process)
                    }
                  }
                }
                return jQuery.Deferred(function (newDefer) {
                  // progress_handlers.add( ... )
                  tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                  // fulfilled_handlers.add( ... )
                  tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));
                  // rejected_handlers.add( ... )
                  tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower))
                }).promise()
              },
              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function (obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise
              }
            }, deferred = {};
          // Add list-specific methods
          jQuery.each(tuples, function (i, tuple) {
            var list = tuple[2], stateString = tuple[5];
            // promise.progress = list.add
            // promise.done = list.add
            // promise.fail = list.add
            promise[tuple[1]] = list.add;
            // Handle state
            if (stateString) {
              list.add(function () {
                // state = "resolved" (i.e., fulfilled)
                // state = "rejected"
                state = stateString
              }, // rejected_callbacks.disable
              // fulfilled_callbacks.disable
              tuples[3 - i][2].disable, // progress_callbacks.lock
              tuples[0][2].lock)
            }
            // progress_handlers.fire
            // fulfilled_handlers.fire
            // rejected_handlers.fire
            list.add(tuple[3].fire);
            // deferred.notify = function() { deferred.notifyWith(...) }
            // deferred.resolve = function() { deferred.resolveWith(...) }
            // deferred.reject = function() { deferred.rejectWith(...) }
            deferred[tuple[0]] = function () {
              deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments);
              return this
            };
            // deferred.notifyWith = list.fireWith
            // deferred.resolveWith = list.fireWith
            // deferred.rejectWith = list.fireWith
            deferred[tuple[0] + 'With'] = list.fireWith
          });
          // Make the deferred a promise
          promise.promise(deferred);
          // Call given func if any
          if (func) {
            func.call(deferred, deferred)
          }
          // All done!
          return deferred
        },
        // Deferred helper
        when: function (singleValue) {
          var
            // count of uncompleted subordinates
            remaining = arguments.length,
            // count of unprocessed arguments
            i = remaining,
            // subordinate fulfillment data
            resolveContexts = Array(i), resolveValues = slice.call(arguments),
            // the master Deferred
            master = jQuery.Deferred(),
            // subordinate callback factory
            updateFunc = function (i) {
              return function (value) {
                resolveContexts[i] = this;
                resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  master.resolveWith(resolveContexts, resolveValues)
                }
              }
            };
          // Single- and empty arguments are adopted like Promise.resolve
          if (remaining <= 1) {
            adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject);
            // Use .then() to unwrap secondary thenables (cf. gh-3000)
            if (master.state() === 'pending' || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {
              return master.then()
            }
          }
          // Multiple arguments are aggregated like Promise.all array elements
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), master.reject)
          }
          return master.promise()
        }
      });
      // These usually indicate a programmer mistake during development,
      // warn about them ASAP rather than swallowing them by default.
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery.Deferred.exceptionHook = function (error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
          void 0
        }
      };
      jQuery.readyException = function (error) {
        window.setTimeout(function () {
          throw error
        })
      };
      // The deferred used on DOM ready
      var readyList = jQuery.Deferred();
      jQuery.fn.ready = function (fn) {
        readyList.then(fn)  // Wrap jQuery.readyException in a function so that the lookup
                            // happens at the time of error handling instead of callback
                            // registration.
.catch(function (error) {
          jQuery.readyException(error)
        });
        return this
      };
      jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Hold (or release) the ready event
        holdReady: function (hold) {
          if (hold) {
            jQuery.readyWait++
          } else {
            jQuery.ready(true)
          }
        },
        // Handle when the DOM is ready
        ready: function (wait) {
          // Abort if there are pending holds or we're already ready
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return
          }
          // Remember that the DOM is ready
          jQuery.isReady = true;
          // If a normal DOM Ready event fired, decrement, and wait if need be
          if (wait !== true && --jQuery.readyWait > 0) {
            return
          }
          // If there are functions bound, to execute
          readyList.resolveWith(document, [jQuery])
        }
      });
      jQuery.ready.then = readyList.then;
      // The ready event handler and self cleanup method
      function completed() {
        document.removeEventListener('DOMContentLoaded', completed);
        window.removeEventListener('load', completed);
        jQuery.ready()
      }
      // Catch cases where $(document).ready() is called
      // after the browser event has already occurred.
      // Support: IE <=9 - 10 only
      // Older IE sometimes signals "interactive" too soon
      if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready)
      } else {
        // Use the handy event callback
        document.addEventListener('DOMContentLoaded', completed);
        // A fallback to window.onload, that will always work
        window.addEventListener('load', completed)
      }
      // Multifunctional method to get and set values of a collection
      // The value/s can optionally be executed if it's a function
      var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        // Sets many values
        if (jQuery.type(key) === 'object') {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw)
          }  // Sets one value
        } else if (value !== undefined) {
          chainable = true;
          if (!jQuery.isFunction(value)) {
            raw = true
          }
          if (bulk) {
            // Bulk operations run against the entire set
            if (raw) {
              fn.call(elems, value);
              fn = null  // ...except when executing function values
            } else {
              bulk = fn;
              fn = function (elem, key, value) {
                return bulk.call(jQuery(elem), value)
              }
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
            }
          }
        }
        if (chainable) {
          return elems
        }
        // Gets
        if (bulk) {
          return fn.call(elems)
        }
        return len ? fn(elems[0], key) : emptyGet
      };
      var acceptData = function (owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
      };
      function Data() {
        this.expando = jQuery.expando + Data.uid++
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function (owner) {
          // Check if the owner object already has a cache
          var value = owner[this.expando];
          // If not, create one
          if (!value) {
            value = {};
            // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return an empty object.
            if (acceptData(owner)) {
              // If it is a node unlikely to be stringify-ed or looped over
              // use plain assignment
              if (owner.nodeType) {
                owner[this.expando] = value  // Otherwise secure it in a non-enumerable property
                                             // configurable must be true to allow the property to be
                                             // deleted when data is removed
              } else {
                Object.defineProperty(owner, this.expando, {
                  value: value,
                  configurable: true
                })
              }
            }
          }
          return value
        },
        set: function (owner, data, value) {
          var prop, cache = this.cache(owner);
          // Handle: [ owner, key, value ] args
          // Always use camelCase key (gh-2257)
          if (typeof data === 'string') {
            cache[jQuery.camelCase(data)] = value  // Handle: [ owner, { properties } ] args
          } else {
            // Copy the properties one-by-one to the cache object
            for (prop in data) {
              cache[jQuery.camelCase(prop)] = data[prop]
            }
          }
          return cache
        },
        get: function (owner, key) {
          return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][jQuery.camelCase(key)]
        },
        access: function (owner, key, value) {
          // In cases where either:
          //
          //   1. No key was specified
          //   2. A string key was specified, but no value provided
          //
          // Take the "read" path and allow the get method to determine
          // which value to return, respectively either:
          //
          //   1. The entire cache object
          //   2. The data stored at the key
          //
          if (key === undefined || key && typeof key === 'string' && value === undefined) {
            return this.get(owner, key)
          }
          // When the key is not a string, or both a key and value
          // are specified, set or extend (existing objects) with either:
          //
          //   1. An object of properties
          //   2. A key and value
          //
          this.set(owner, key, value);
          // Since the "set" path can have two possible entry points
          // return the expected data based on which path was taken[*]
          return value !== undefined ? value : key
        },
        remove: function (owner, key) {
          var i, cache = owner[this.expando];
          if (cache === undefined) {
            return
          }
          if (key !== undefined) {
            // Support array or space separated string of keys
            if (jQuery.isArray(key)) {
              // If key is an array of keys...
              // We always set camelCase keys, so remove that.
              key = key.map(jQuery.camelCase)
            } else {
              key = jQuery.camelCase(key);
              // If a key with the spaces exists, use it.
              // Otherwise, create an array by matching non-whitespace
              key = key in cache ? [key] : key.match(rnothtmlwhite) || []
            }
            i = key.length;
            while (i--) {
              delete cache[key[i]]
            }
          }
          // Remove the expando if there's no more data
          if (key === undefined || jQuery.isEmptyObject(cache)) {
            // Support: Chrome <=35 - 45
            // Webkit & Blink performance suffers when deleting properties
            // from DOM nodes, so set to undefined instead
            // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
            if (owner.nodeType) {
              owner[this.expando] = undefined
            } else {
              delete owner[this.expando]
            }
          }
        },
        hasData: function (owner) {
          var cache = owner[this.expando];
          return cache !== undefined && !jQuery.isEmptyObject(cache)
        }
      };
      var dataPriv = new Data;
      var dataUser = new Data;
      //	Implementation Summary
      //
      //	1. Enforce API surface and semantic compatibility with 1.9.x branch
      //	2. Improve the module's maintainability by reducing the storage
      //		paths to a single mechanism.
      //	3. Use the same single mechanism to support "private" and "user" data.
      //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
      //	5. Avoid exposing implementation details on user objects (eg. expando properties)
      //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data) {
        if (data === 'true') {
          return true
        }
        if (data === 'false') {
          return false
        }
        if (data === 'null') {
          return null
        }
        // Only convert to a number if it doesn't change the string
        if (data === +data + '') {
          return +data
        }
        if (rbrace.test(data)) {
          return JSON.parse(data)
        }
        return data
      }
      function dataAttr(elem, key, data) {
        var name;
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
          name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === 'string') {
            try {
              data = getData(data)
            } catch (e) {
            }
            // Make sure we set the data so it isn't changed later
            dataUser.set(elem, key, data)
          } else {
            data = undefined
          }
        }
        return data
      }
      jQuery.extend({
        hasData: function (elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem)
        },
        data: function (elem, name, data) {
          return dataUser.access(elem, name, data)
        },
        removeData: function (elem, name) {
          dataUser.remove(elem, name)
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function (elem, name, data) {
          return dataPriv.access(elem, name, data)
        },
        _removeData: function (elem, name) {
          dataPriv.remove(elem, name)
        }
      });
      jQuery.fn.extend({
        data: function (key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          // Gets all values
          if (key === undefined) {
            if (this.length) {
              data = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                i = attrs.length;
                while (i--) {
                  // Support: IE 11 only
                  // The attrs elements can be null (#14894)
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf('data-') === 0) {
                      name = jQuery.camelCase(name.slice(5));
                      dataAttr(elem, name, data[name])
                    }
                  }
                }
                dataPriv.set(elem, 'hasDataAttrs', true)
              }
            }
            return data
          }
          // Sets multiple values
          if (typeof key === 'object') {
            return this.each(function () {
              dataUser.set(this, key)
            })
          }
          return access(this, function (value) {
            var data;
            // The calling jQuery object (element matches) is not empty
            // (and therefore has an element appears at this[ 0 ]) and the
            // `value` parameter was not undefined. An empty jQuery object
            // will result in `undefined` for elem = this[ 0 ] which will
            // throw an exception if an attempt to read a data cache is made.
            if (elem && value === undefined) {
              // Attempt to get data from the cache
              // The key will always be camelCased in Data
              data = dataUser.get(elem, key);
              if (data !== undefined) {
                return data
              }
              // Attempt to "discover" the data in
              // HTML5 custom data-* attrs
              data = dataAttr(elem, key);
              if (data !== undefined) {
                return data
              }
              // We tried really hard, but the data doesn't exist.
              return
            }
            // Set the data...
            this.each(function () {
              // We always store the camelCased key
              dataUser.set(this, key, value)
            })
          }, null, value, arguments.length > 1, null, true)
        },
        removeData: function (key) {
          return this.each(function () {
            dataUser.remove(this, key)
          })
        }
      });
      jQuery.extend({
        queue: function (elem, type, data) {
          var queue;
          if (elem) {
            type = (type || 'fx') + 'queue';
            queue = dataPriv.get(elem, type);
            // Speed up dequeue by getting out quickly if this is just a lookup
            if (data) {
              if (!queue || jQuery.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data))
              } else {
                queue.push(data)
              }
            }
            return queue || []
          }
        },
        dequeue: function (elem, type) {
          type = type || 'fx';
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
              jQuery.dequeue(elem, type)
            };
          // If the fx queue is dequeued, always remove the progress sentinel
          if (fn === 'inprogress') {
            fn = queue.shift();
            startLength--
          }
          if (fn) {
            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if (type === 'fx') {
              queue.unshift('inprogress')
            }
            // Clear up the last queue stop function
            delete hooks.stop;
            fn.call(elem, next, hooks)
          }
          if (!startLength && hooks) {
            hooks.empty.fire()
          }
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function (elem, type) {
          var key = type + 'queueHooks';
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks('once memory').add(function () {
              dataPriv.remove(elem, [
                type + 'queue',
                key
              ])
            })
          })
        }
      });
      jQuery.fn.extend({
        queue: function (type, data) {
          var setter = 2;
          if (typeof type !== 'string') {
            data = type;
            type = 'fx';
            setter--
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type)
          }
          return data === undefined ? this : this.each(function () {
            var queue = jQuery.queue(this, type, data);
            // Ensure a hooks for this queue
            jQuery._queueHooks(this, type);
            if (type === 'fx' && queue[0] !== 'inprogress') {
              jQuery.dequeue(this, type)
            }
          })
        },
        dequeue: function (type) {
          return this.each(function () {
            jQuery.dequeue(this, type)
          })
        },
        clearQueue: function (type) {
          return this.queue(type || 'fx', [])
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function (type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
              if (!--count) {
                defer.resolveWith(elements, [elements])
              }
            };
          if (typeof type !== 'string') {
            obj = type;
            type = undefined
          }
          type = type || 'fx';
          while (i--) {
            tmp = dataPriv.get(elements[i], type + 'queueHooks');
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve)
            }
          }
          resolve();
          return defer.promise(obj)
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
      var cssExpand = [
        'Top',
        'Right',
        'Bottom',
        'Left'
      ];
      var isHiddenWithinTree = function (elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === 'none' || elem.style.display === '' && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, 'display') === 'none'
      };
      var swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        // Remember the old values, and insert the new ones
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name]
        }
        ret = callback.apply(elem, args || []);
        // Revert the old values
        for (name in options) {
          elem.style[name] = old[name]
        }
        return ret
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale = 1, maxIterations = 20, currentValue = tween ? function () {
            return tween.cur()
          } : function () {
            return jQuery.css(elem, prop, '')
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
          // Starting value computation is required for potential unit mismatches
          initialInUnit = (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          // Trust units reported by jQuery.css
          unit = unit || initialInUnit[3];
          // Make sure we update the tween properties later on
          valueParts = valueParts || [];
          // Iteratively approximate from a nonzero starting point
          initialInUnit = +initial || 1;
          do {
            // If previous iteration zeroed out, double until we get *something*.
            // Use string for doubling so we don't accidentally see scale as unchanged below
            scale = scale || '.5';
            // Adjust and apply
            initialInUnit = initialInUnit / scale;
            jQuery.style(elem, prop, initialInUnit + unit)  // Update scale, tolerating zero or NaN from tween.cur()
                                                            // Break the loop if scale is unchanged or perfect, or if we've just had enough.
          } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations)
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          // Apply relative offset (+=/-=) if specified
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted
          }
        }
        return adjusted
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
          return display
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, 'display');
        temp.parentNode.removeChild(temp);
        if (display === 'none') {
          display = 'block'
        }
        defaultDisplayMap[nodeName] = display;
        return display
      }
      function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        // Determine new display value for elements that need to change
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue
          }
          display = elem.style.display;
          if (show) {
            // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
            // check is required in this first loop unless we have a nonempty display value (either
            // inline or about-to-be-restored)
            if (display === 'none') {
              values[index] = dataPriv.get(elem, 'display') || null;
              if (!values[index]) {
                elem.style.display = ''
              }
            }
            if (elem.style.display === '' && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem)
            }
          } else {
            if (display !== 'none') {
              values[index] = 'none';
              // Remember what we're overwriting
              dataPriv.set(elem, 'display', display)
            }
          }
        }
        // Set the display of the elements in a second loop to avoid constant reflow
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index]
          }
        }
        return elements
      }
      jQuery.fn.extend({
        show: function () {
          return showHide(this, true)
        },
        hide: function () {
          return showHide(this)
        },
        toggle: function (state) {
          if (typeof state === 'boolean') {
            return state ? this.show() : this.hide()
          }
          return this.each(function () {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show()
            } else {
              jQuery(this).hide()
            }
          })
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
      var rscriptType = /^$|\/(?:java|ecma)script/i;
      // We have to close these tags to support XHTML (#13200)
      var wrapMap = {
        // Support: IE <=9 only
        option: [
          1,
          "<select multiple='multiple'>",
          '</select>'
        ],
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [
          1,
          '<table>',
          '</table>'
        ],
        col: [
          2,
          '<table><colgroup>',
          '</colgroup></table>'
        ],
        tr: [
          2,
          '<table><tbody>',
          '</tbody></table>'
        ],
        td: [
          3,
          '<table><tbody><tr>',
          '</tr></tbody></table>'
        ],
        _default: [
          0,
          '',
          ''
        ]
      };
      // Support: IE <=9 only
      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;
        if (typeof context.getElementsByTagName !== 'undefined') {
          ret = context.getElementsByTagName(tag || '*')
        } else if (typeof context.querySelectorAll !== 'undefined') {
          ret = context.querySelectorAll(tag || '*')
        } else {
          ret = []
        }
        if (tag === undefined || tag && jQuery.nodeName(context, tag)) {
          return jQuery.merge([context], ret)
        }
        return ret
      }
      // Mark scripts as having already been evaluated
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'))
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
          elem = elems[i];
          if (elem || elem === 0) {
            // Add nodes directly
            if (jQuery.type(elem) === 'object') {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem)  // Convert non-html into a text node
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem))  // Convert html into DOM nodes
            } else {
              tmp = tmp || fragment.appendChild(context.createElement('div'));
              // Deserialize a standard representation
              tag = (rtagName.exec(elem) || [
                '',
                ''
              ])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
              // Descend through wrappers to the right content
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild
              }
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, tmp.childNodes);
              // Remember the top-level container
              tmp = fragment.firstChild;
              // Ensure the created nodes are orphaned (#12392)
              tmp.textContent = ''
            }
          }
        }
        // Remove wrapper from fragment
        fragment.textContent = '';
        i = 0;
        while (elem = nodes[i++]) {
          // Skip elements already in the context collection (trac-4087)
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem)
            }
            continue
          }
          contains = jQuery.contains(elem.ownerDocument, elem);
          // Append to fragment
          tmp = getAll(fragment.appendChild(elem), 'script');
          // Preserve script evaluation history
          if (contains) {
            setGlobalEval(tmp)
          }
          // Capture executables
          if (scripts) {
            j = 0;
            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || '')) {
                scripts.push(elem)
              }
            }
          }
        }
        return fragment
      }
      (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
      }());
      var documentElement = document.documentElement;
      var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue() {
        return true
      }
      function returnFalse() {
        return false
      }
      // Support: IE <=9 only
      // See #13393 for more info
      function safeActiveElement() {
        try {
          return document.activeElement
        } catch (err) {
        }
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        // Types can be a map of types/handlers
        if (typeof types === 'object') {
          // ( types-Object, selector, data )
          if (typeof selector !== 'string') {
            // ( types-Object, data )
            data = data || selector;
            selector = undefined
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one)
          }
          return elem
        }
        if (data == null && fn == null) {
          // ( types, fn )
          fn = selector;
          data = selector = undefined
        } else if (fn == null) {
          if (typeof selector === 'string') {
            // ( types, selector, fn )
            fn = data;
            data = undefined
          } else {
            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined
          }
        }
        if (fn === false) {
          fn = returnFalse
        } else if (!fn) {
          return elem
        }
        if (one === 1) {
          origFn = fn;
          fn = function (event) {
            // Can use an empty set, since event contains the info
            jQuery().off(event);
            return origFn.apply(this, arguments)
          };
          // Use same guid so caller can remove using origFn
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
        }
        return elem.each(function () {
          jQuery.event.add(this, types, fn, data, selector)
        })
      }
      /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
      jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          // Don't attach events to noData or text/comment nodes (but allow plain objects)
          if (!elemData) {
            return
          }
          // Caller can pass in an object of custom data in lieu of the handler
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector
          }
          // Ensure that invalid selectors throw exceptions at attach time
          // Evaluate against documentElement in case elem is a non-element node (e.g., document)
          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector)
          }
          // Make sure that the handler has a unique ID, used to find/remove it later
          if (!handler.guid) {
            handler.guid = jQuery.guid++
          }
          // Init the element's event structure and main handler, if this is the first
          if (!(events = elemData.events)) {
            events = elemData.events = {}
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function (e) {
              // Discard the second event of a jQuery.event.trigger() and
              // when an event is called after a page has unloaded
              return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined
            }
          }
          // Handle multiple events separated by a space
          types = (types || '').match(rnothtmlwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            // There *must* be a type, no attaching namespace-only handlers
            if (!type) {
              continue
            }
            // If event changes its type, use the special event handlers for the changed type
            special = jQuery.event.special[type] || {};
            // If selector defined, determine special event api type, otherwise given type
            type = (selector ? special.delegateType : special.bindType) || type;
            // Update special based on newly reset type
            special = jQuery.event.special[type] || {};
            // handleObj is passed to all event handlers
            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join('.')
            }, handleObjIn);
            // Init the event handler queue if we're the first
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              // Only use addEventListener if the special events handler returns false
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle)
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid
              }
            }
            // Add to the element's handler list, delegates in front
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj)
            } else {
              handlers.push(handleObj)
            }
            // Keep track of which events have ever been used, for event optimization
            jQuery.event.global[type] = true
          }
        },
        // Detach an event or set of events from an element
        remove: function (elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return
          }
          // Once for each type.namespace in types; type may be omitted
          types = (types || '').match(rnothtmlwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            // Unbind all events (on this namespace, if provided) for the element
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true)
              }
              continue
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
            // Remove matching events
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj)
                }
              }
            }
            // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle)
              }
              delete events[type]
            }
          }
          // Remove data and the expando if it's no longer used
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, 'handle events')
          }
        },
        dispatch: function (nativeEvent) {
          // Make a writable jQuery.Event from the native event object
          var event = jQuery.event.fix(nativeEvent);
          var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
          // Use the fix-ed jQuery.Event rather than the (read-only) native event
          args[0] = event;
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i]
          }
          event.delegateTarget = this;
          // Call the preDispatch hook for the mapped type, and let it bail if desired
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return
          }
          // Determine handlers
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          // Run delegates first; they may want to stop propagation beneath us
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              // Triggered event must either 1) have no namespace, or 2) have namespace(s)
              // a subset or equal to those in the bound event (both can have no namespace).
              if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation()
                  }
                }
              }
            }
          }
          // Call the postDispatch hook for the mapped type
          if (special.postDispatch) {
            special.postDispatch.call(this, event)
          }
          return event.result
        },
        handlers: function (event, handlers) {
          var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          // Find delegate handlers
          if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === 'click' && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              // Don't check non-elements (#13208)
              // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
              if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  // Don't conflict with Object.prototype properties (#13203)
                  sel = handleObj.selector + ' ';
                  if (matchedSelectors[sel] === undefined) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj)
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matchedHandlers
                  })
                }
              }
            }
          }
          // Add the remaining (directly-bound) handlers
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({
              elem: cur,
              handlers: handlers.slice(delegateCount)
            })
          }
          return handlerQueue
        },
        addProp: function (name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: jQuery.isFunction(hook) ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent)
              }
            } : function () {
              if (this.originalEvent) {
                return this.originalEvent[name]
              }
            },
            set: function (value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: value
              })
            }
          })
        },
        fix: function (originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent)
        },
        special: {
          load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
          },
          focus: {
            // Fire native event if possible so blur/focus sequence is correct
            trigger: function () {
              if (this !== safeActiveElement() && this.focus) {
                this.focus();
                return false
              }
            },
            delegateType: 'focusin'
          },
          blur: {
            trigger: function () {
              if (this === safeActiveElement() && this.blur) {
                this.blur();
                return false
              }
            },
            delegateType: 'focusout'
          },
          click: {
            // For checkbox, fire native event so checked state will be right
            trigger: function () {
              if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                this.click();
                return false
              }
            },
            // For cross-browser consistency, don't fire native .click() on links
            _default: function (event) {
              return jQuery.nodeName(event.target, 'a')
            }
          },
          beforeunload: {
            postDispatch: function (event) {
              // Support: Firefox 20+
              // Firefox doesn't alert if the returnValue field is not set.
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result
              }
            }
          }
        }
      };
      jQuery.removeEvent = function (elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle)
        }
      };
      jQuery.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props)
        }
        // Event object
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
          src.returnValue === false ? returnTrue : returnFalse;
          // Create target properties
          // Support: Safari <=6 - 7 only
          // Target should not be a text node (#504, #13143)
          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget  // Event type
        } else {
          this.type = src
        }
        // Put explicitly provided properties onto the event object
        if (props) {
          jQuery.extend(this, props)
        }
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
        // Mark it as fixed
        this[jQuery.expando] = true
      };
      // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
      // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function () {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault()
          }
        },
        stopPropagation: function () {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation()
          }
        },
        stopImmediatePropagation: function () {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation()
          }
          this.stopPropagation()
        }
      };
      // Includes all common event props including KeyEvent and MouseEvent specific props
      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        'char': true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function (event) {
          var button = event.button;
          // Add which for key events
          if (event.which == null && rkeyEvent.test(event.type)) {
            return event.charCode != null ? event.charCode : event.keyCode
          }
          // Add which for click: 1 === left; 2 === middle; 3 === right
          if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
            if (button & 1) {
              return 1
            }
            if (button & 2) {
              return 3
            }
            if (button & 4) {
              return 2
            }
            return 0
          }
          return event.which
        }
      }, jQuery.event.addProp);
      // Create mouseenter/leave events using mouseover/out and event-time checks
      // so that event delegation works in jQuery.
      // Do the same for pointerenter/pointerleave and pointerover/pointerout
      //
      // Support: Safari 7 only
      // Safari sends mouseenter too often; see:
      // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
      // for the description of the bug (it existed in older Chrome versions as well).
      jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
      }, function (orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function (event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            // For mouseenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix
            }
            return ret
          }
        }
      });
      jQuery.fn.extend({
        on: function (types, selector, data, fn) {
          return on(this, types, selector, data, fn)
        },
        one: function (types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1)
        },
        off: function (types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this
          }
          if (typeof types === 'object') {
            // ( types-object [, selector] )
            for (type in types) {
              this.off(type, selector, types[type])
            }
            return this
          }
          if (selector === false || typeof selector === 'function') {
            // ( types [, fn] )
            fn = selector;
            selector = undefined
          }
          if (fn === false) {
            fn = returnFalse
          }
          return this.each(function () {
            jQuery.event.remove(this, types, fn, selector)
          })
        }
      });
      var
        /* eslint-disable max-len */
        // See https://github.com/eslint/eslint/issues/3229
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        /* eslint-enable */
        // Support: IE <=10 - 11, Edge 12 - 13
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
      function manipulationTarget(elem, content) {
        if (jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')) {
          return elem.getElementsByTagName('tbody')[0] || elem
        }
        return elem
      }
      // Replace/restore the type attribute of script elements for safe DOM manipulation
      function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem
      }
      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
          elem.type = match[1]
        } else {
          elem.removeAttribute('type')
        }
        return elem
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return
        }
        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.access(src);
          pdataCur = dataPriv.set(dest, pdataOld);
          events = pdataOld.events;
          if (events) {
            delete pdataCur.handle;
            pdataCur.events = {};
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i])
              }
            }
          }
        }
        // 2. Copy user data
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur)
        }
      }
      // Fix IE bugs, see support tests
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
          dest.checked = src.checked  // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === 'input' || nodeName === 'textarea') {
          dest.defaultValue = src.defaultValue
        }
      }
      function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
        // We can't cloneNode fragments that contain checked, in WebKit
        if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
          return collection.each(function (index) {
            var self = collection.eq(index);
            if (isFunction) {
              args[0] = value.call(this, index, self.html())
            }
            domManip(self, args, callback, ignored)
          })
        }
        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first
          }
          // Require either new content or an interest in ignored elements to invoke the callback
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
            hasScripts = scripts.length;
            // Use the original fragment for the last item
            // instead of the first because it can end up
            // being emptied incorrectly in certain situations (#8070).
            for (; i < l; i++) {
              node = fragment;
              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true);
                // Keep references to cloned scripts for later restoration
                if (hasScripts) {
                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(scripts, getAll(node, 'script'))
                }
              }
              callback.call(collection[i], node, i)
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              // Reenable scripts
              jQuery.map(scripts, restoreScript);
              // Evaluate executable scripts on first document insertion
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                  if (node.src) {
                    // Optional AJAX dependency, but won't run scripts if not present
                    if (jQuery._evalUrl) {
                      jQuery._evalUrl(node.src)
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ''), doc)
                  }
                }
              }
            }
          }
        }
        return collection
      }
      function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node))
          }
          if (node.parentNode) {
            if (keepData && jQuery.contains(node.ownerDocument, node)) {
              setGlobalEval(getAll(node, 'script'))
            }
            node.parentNode.removeChild(node)
          }
        }
        return elem
      }
      jQuery.extend({
        htmlPrefilter: function (html) {
          return html.replace(rxhtmlTag, '<$1></$2>')
        },
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
          // Fix IE cloning issues
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i])
            }
          }
          // Copy the events from the original to the clone
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i])
              }
            } else {
              cloneCopyEvent(elem, clone)
            }
          }
          // Preserve script evaluation history
          destElements = getAll(clone, 'script');
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, 'script'))
          }
          // Return the cloned set
          return clone
        },
        cleanData: function (elems) {
          var data, elem, type, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== undefined; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type)  // This is a shortcut to avoid jQuery.event.remove's overhead
                    } else {
                      jQuery.removeEvent(elem, type, data.handle)
                    }
                  }
                }
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataPriv.expando] = undefined
              }
              if (elem[dataUser.expando]) {
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function (selector) {
          return remove(this, selector, true)
        },
        remove: function (selector) {
          return remove(this, selector)
        },
        text: function (value) {
          return access(this, function (value) {
            return value === undefined ? jQuery.text(this) : this.empty().each(function () {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value
              }
            })
          }, null, value, arguments.length)
        },
        append: function () {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem)
            }
          })
        },
        prepend: function () {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild)
            }
          })
        },
        before: function () {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this)
            }
          })
        },
        after: function () {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling)
            }
          })
        },
        empty: function () {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              // Prevent memory leaks
              jQuery.cleanData(getAll(elem, false));
              // Remove any remaining nodes
              elem.textContent = ''
            }
          }
          return this
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function () {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
          })
        },
        html: function (value) {
          return access(this, function (value) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML
            }
            // See if we can take a shortcut and just use innerHTML
            if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                '',
                ''
              ])[1].toLowerCase()]) {
              value = jQuery.htmlPrefilter(value);
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  // Remove element nodes and prevent memory leaks
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value
                  }
                }
                elem = 0  // If using innerHTML throws an exception, use the fallback method
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value)
            }
          }, null, value, arguments.length)
        },
        replaceWith: function () {
          var ignored = [];
          // Make the changes, replacing each non-ignored context element with the new content
          return domManip(this, arguments, function (elem) {
            var parent = this.parentNode;
            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this)
              }
            }  // Force callback invocation
          }, ignored)
        }
      });
      jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
      }, function (name, original) {
        jQuery.fn[name] = function (selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            // Support: Android <=4.0 only, PhantomJS 1 only
            // .get() because push.apply(_, arraylike) throws on ancient WebKit
            push.apply(ret, elems.get())
          }
          return this.pushStack(ret)
        }
      });
      var rmargin = /^margin/;
      var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
      var getStyles = function (elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window
        }
        return view.getComputedStyle(elem)
      };
      (function () {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
          // This is a singleton, we need to execute it only once
          if (!div) {
            return
          }
          div.style.cssText = 'box-sizing:border-box;' + 'position:relative;display:block;' + 'margin:auto;border:1px;padding:1px;' + 'top:1%;width:50%';
          div.innerHTML = '';
          documentElement.appendChild(container);
          var divStyle = window.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== '1%';
          // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
          reliableMarginLeftVal = divStyle.marginLeft === '2px';
          boxSizingReliableVal = divStyle.width === '4px';
          // Support: Android 4.0 - 4.3 only
          // Some styles come back with percentage values, even though they shouldn't
          div.style.marginRight = '50%';
          pixelMarginRightVal = divStyle.marginRight === '4px';
          documentElement.removeChild(container);
          // Nullify the div so it wouldn't be stored in the memory and
          // it will also be a sign that checks already performed
          div = null
        }
        var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
        // Finish early in limited (non-browser) environments
        if (!div.style) {
          return
        }
        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        container.style.cssText = 'border:0;width:8px;height:0;top:0;left:-9999px;' + 'padding:0;margin-top:1px;position:absolute';
        container.appendChild(div);
        jQuery.extend(support, {
          pixelPosition: function () {
            computeStyleTests();
            return pixelPositionVal
          },
          boxSizingReliable: function () {
            computeStyleTests();
            return boxSizingReliableVal
          },
          pixelMarginRight: function () {
            computeStyleTests();
            return pixelMarginRightVal
          },
          reliableMarginLeft: function () {
            computeStyleTests();
            return reliableMarginLeftVal
          }
        })
      }());
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        // Support: IE <=9 only
        // getPropertyValue is only needed for .css('filter') (#12537)
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
          if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name)
          }
          // A tribute to the "awesome hack by Dean Edwards"
          // Android Browser returns percentage for some values,
          // but width seems to be reliably pixels.
          // This is against the CSSOM draft spec:
          // https://drafts.csswg.org/cssom/#resolved-values
          if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
            // Remember the original values
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            // Put in the new values to get a computed value out
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            // Revert the changed values
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth
          }
        }
        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + '' : ret
      }
      function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
          get: function () {
            if (conditionFn()) {
              // Hook not needed (or it's not possible to use it due
              // to missing dependency), remove it.
              delete this.get;
              return
            }
            // Hook needed; redefine it so that the support test is not executed again.
            return (this.get = hookFn).apply(this, arguments)
          }
        }
      }
      var
        // Swappable if display is none or starts with table
        // except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        }, cssNormalTransform = {
          letterSpacing: '0',
          fontWeight: '400'
        }, cssPrefixes = [
          'Webkit',
          'Moz',
          'ms'
        ], emptyStyle = document.createElement('div').style;
      // Return a css property mapped to a potentially vendor prefixed property
      function vendorPropName(name) {
        // Shortcut for names that are not vendor prefixed
        if (name in emptyStyle) {
          return name
        }
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name
          }
        }
      }
      function setPositiveNumber(elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value
      }
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i, val = 0;
        // If we already have the right measurement, avoid augmentation
        if (extra === (isBorderBox ? 'border' : 'content')) {
          i = 4  // Otherwise initialize for horizontal or vertical properties
        } else {
          i = name === 'width' ? 1 : 0
        }
        for (; i < 4; i += 2) {
          // Both box models exclude margin, so add it if we want it
          if (extra === 'margin') {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles)
          }
          if (isBorderBox) {
            // border-box includes padding, so remove it if we want content
            if (extra === 'content') {
              val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles)
            }
            // At this point, extra isn't border nor margin, so remove border
            if (extra !== 'margin') {
              val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
            }
          } else {
            // At this point, extra isn't content, so add padding
            val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
            // At this point, extra isn't content nor padding, so add border
            if (extra !== 'padding') {
              val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
            }
          }
        }
        return val
      }
      function getWidthOrHeight(elem, name, extra) {
        // Start with offset property, which is equivalent to the border-box value
        var val, valueIsBorderBox = true, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        // Support: IE <=11 only
        // Running getBoundingClientRect on a disconnected node
        // in IE throws an error.
        if (elem.getClientRects().length) {
          val = elem.getBoundingClientRect()[name]
        }
        // Some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
          // Fall back to computed then uncomputed css if necessary
          val = curCSS(elem, name, styles);
          if (val < 0 || val == null) {
            val = elem.style[name]
          }
          // Computed unit is not pixels. Stop here and return.
          if (rnumnonpx.test(val)) {
            return val
          }
          // Check for style in case a browser which returns unreliable values
          // for getComputedStyle silently falls back to the reliable elem.style
          valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
          // Normalize "", auto, and prepare for extra
          val = parseFloat(val) || 0
        }
        // Use the active box-sizing model to add/subtract irrelevant styles
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px'
      }
      jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
          opacity: {
            get: function (elem, computed) {
              if (computed) {
                // We should always get a number back from opacity
                var ret = curCSS(elem, 'opacity');
                return ret === '' ? '1' : ret
              }
            }
          }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
          'animationIterationCount': true,
          'columnCount': true,
          'fillOpacity': true,
          'flexGrow': true,
          'flexShrink': true,
          'fontWeight': true,
          'lineHeight': true,
          'opacity': true,
          'order': true,
          'orphans': true,
          'widows': true,
          'zIndex': true,
          'zoom': true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: { 'float': 'cssFloat' },
        // Get and set the style property on a DOM Node
        style: function (elem, name, value, extra) {
          // Don't set styles on text and comment nodes
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return
          }
          // Make sure that we're working with the right name
          var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
          // Gets hook for the prefixed version, then unprefixed version
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          // Check if we're setting a value
          if (value !== undefined) {
            type = typeof value;
            // Convert "+=" or "-=" to relative numbers (#7345)
            if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              // Fixes bug #9237
              type = 'number'
            }
            // Make sure that null and NaN values aren't set (#7116)
            if (value == null || value !== value) {
              return
            }
            // If a number was passed in, add the unit (except for certain CSS properties)
            if (type === 'number') {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px')
            }
            // background-* props affect original clone's values
            if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
              style[name] = 'inherit'
            }
            // If a hook was provided, use that value, otherwise just set the specified value
            if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              style[name] = value
            }
          } else {
            // If a hook was provided get the non-computed value from there
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret
            }
            // Otherwise just get the value from the style object
            return style[name]
          }
        },
        css: function (elem, name, extra, styles) {
          var val, num, hooks, origName = jQuery.camelCase(name);
          // Make sure that we're working with the right name
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
          // Try prefixed name followed by the unprefixed name
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          // If a hook was provided get the computed value from there
          if (hooks && 'get' in hooks) {
            val = hooks.get(elem, true, extra)
          }
          // Otherwise, if a way to get the computed value exists, use that
          if (val === undefined) {
            val = curCSS(elem, name, styles)
          }
          // Convert "normal" to computed value
          if (val === 'normal' && name in cssNormalTransform) {
            val = cssNormalTransform[name]
          }
          // Make numeric if forced or a qualifier was provided and val looks numeric
          if (extra === '' || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val
          }
          return val
        }
      });
      jQuery.each([
        'height',
        'width'
      ], function (i, name) {
        jQuery.cssHooks[name] = {
          get: function (elem, computed, extra) {
            if (computed) {
              // Certain elements can have dimension info if we invisibly show them
              // but it must have a current display style that would benefit
              return rdisplayswap.test(jQuery.css(elem, 'display')) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, name, extra)
              }) : getWidthOrHeight(elem, name, extra)
            }
          },
          set: function (elem, value, extra) {
            var matches, styles = extra && getStyles(elem), subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles);
            // Convert to pixels if value adjustment is needed
            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
              elem.style[name] = value;
              value = jQuery.css(elem, name)
            }
            return setPositiveNumber(elem, value, subtract)
          }
        }
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
            return elem.getBoundingClientRect().left
          })) + 'px'
        }
      });
      // These hooks are used by animate to expand properties
      jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
      }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function (value) {
            var i = 0, expanded = {},
              // Assumes a single number if not a string
              parts = typeof value === 'string' ? value.split(' ') : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
            }
            return expanded
          }
        };
        if (!rmargin.test(prefix)) {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
        }
      });
      jQuery.fn.extend({
        css: function (name, value) {
          return access(this, function (elem, name, value) {
            var styles, len, map = {}, i = 0;
            if (jQuery.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;
              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles)
              }
              return map
            }
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
          }, name, value, arguments.length > 1)
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing)
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px')
        },
        cur: function () {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
        },
        run: function (percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
          } else {
            this.pos = eased = percent
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this)
          }
          if (hooks && hooks.set) {
            hooks.set(this)
          } else {
            Tween.propHooks._default.set(this)
          }
          return this
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function (tween) {
            var result;
            // Use a property on the element directly when it is not a DOM element,
            // or when there is no matching style property that exists.
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop]
            }
            // Passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails.
            // Simple values such as "10px" are parsed to Float;
            // complex values such as "rotate(1rad)" are returned as-is.
            result = jQuery.css(tween.elem, tween.prop, '');
            // Empty strings, null, undefined and "auto" are converted to 0.
            return !result || result === 'auto' ? 0 : result
          },
          set: function (tween) {
            // Use step hook for back compat.
            // Use cssHook if its there.
            // Use .style if available and use plain properties where available.
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween)
            } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
            } else {
              tween.elem[tween.prop] = tween.now
            }
          }
        }
      };
      // Support: IE <=9 only
      // Panic based approach to setting things on disconnected nodes
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now
          }
        }
      };
      jQuery.easing = {
        linear: function (p) {
          return p
        },
        swing: function (p) {
          return 0.5 - Math.cos(p * Math.PI) / 2
        },
        _default: 'swing'
      };
      jQuery.fx = Tween.prototype.init;
      // Back compat <1.8 extension point
      jQuery.fx.step = {};
      var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function raf() {
        if (timerId) {
          window.requestAnimationFrame(raf);
          jQuery.fx.tick()
        }
      }
      // Animations created synchronously will run synchronously
      function createFxNow() {
        window.setTimeout(function () {
          fxNow = undefined
        });
        return fxNow = jQuery.now()
      }
      // Generate parameters to create a standard animation
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs['margin' + which] = attrs['padding' + which] = type
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type
        }
        return attrs
      }
      function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            // We're done with this property
            return tween
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = 'width' in props || 'height' in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, 'fxshow');
        // Queue-skipping animations hijack the fx hooks
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, 'fx');
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function () {
              if (!hooks.unqueued) {
                oldfire()
              }
            }
          }
          hooks.unqueued++;
          anim.always(function () {
            // Ensure the complete handler is called before this completes
            anim.always(function () {
              hooks.unqueued--;
              if (!jQuery.queue(elem, 'fx').length) {
                hooks.empty.fire()
              }
            })
          })
        }
        // Detect show/hide animations
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === 'toggle';
            if (value === (hidden ? 'hide' : 'show')) {
              // Pretend to be hidden if this is a "show" and
              // there is still data from a stopped show/hide
              if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                hidden = true  // Ignore all other no-op show/hide data
              } else {
                continue
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
          }
        }
        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
          return
        }
        // Restrict "overflow" and "display" styles during box animations
        if (isBox && elem.nodeType === 1) {
          // Support: IE <=9 - 11, Edge 12 - 13
          // Record all 3 overflow attributes because IE does not infer the shorthand
          // from identically-valued overflowX and overflowY
          opts.overflow = [
            style.overflow,
            style.overflowX,
            style.overflowY
          ];
          // Identify a display type, preferring old show/hide data over the CSS cascade
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, 'display')
          }
          display = jQuery.css(elem, 'display');
          if (display === 'none') {
            if (restoreDisplay) {
              display = restoreDisplay
            } else {
              // Get nonempty value(s) by temporarily forcing visibility
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, 'display');
              showHide([elem])
            }
          }
          // Animate inline elements as inline-block
          if (display === 'inline' || display === 'inline-block' && restoreDisplay != null) {
            if (jQuery.css(elem, 'float') === 'none') {
              // Restore the original display value at the end of pure show/hide animations
              if (!propTween) {
                anim.done(function () {
                  style.display = restoreDisplay
                });
                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === 'none' ? '' : display
                }
              }
              style.display = 'inline-block'
            }
          }
        }
        if (opts.overflow) {
          style.overflow = 'hidden';
          anim.always(function () {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2]
          })
        }
        // Implement show/hide animations
        propTween = false;
        for (prop in orig) {
          // General show/hide setup for this element animation
          if (!propTween) {
            if (dataShow) {
              if ('hidden' in dataShow) {
                hidden = dataShow.hidden
              }
            } else {
              dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay })
            }
            // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
            if (toggle) {
              dataShow.hidden = !hidden
            }
            // Show elements before animating them
            if (hidden) {
              showHide([elem], true)
            }
            /* eslint-disable no-loop-func */
            anim.done(function () {
              /* eslint-enable no-loop-func */
              // The final step of a "hide" animation is actually hiding the element
              if (!hidden) {
                showHide([elem])
              }
              dataPriv.remove(elem, 'fxshow');
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop])
              }
            })
          }
          // Per-property setup
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
          name = jQuery.camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (jQuery.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0]
          }
          if (index !== name) {
            props[name] = value;
            delete props[index]
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && 'expand' in hooks) {
            value = hooks.expand(value);
            delete props[name];
            // Not quite $.extend, this won't overwrite existing keys.
            // Reusing 'index' because we have the correct "name"
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing
              }
            }
          } else {
            specialEasing[name] = easing
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
            // Don't match elem in the :animated selector
            delete tick.elem
          }), tick = function () {
            if (stopped) {
              return false
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
              // Support: Android 2.3 only
              // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
              temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (; index < length; index++) {
              animation.tweens[index].run(percent)
            }
            deferred.notifyWith(elem, [
              animation,
              percent,
              remaining
            ]);
            if (percent < 1 && length) {
              return remaining
            } else {
              deferred.resolveWith(elem, [animation]);
              return false
            }
          }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
              specialEasing: {},
              easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function (prop, end) {
              var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween
            },
            stop: function (gotoEnd) {
              var index = 0,
                // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this
              }
              stopped = true;
              for (; index < length; index++) {
                animation.tweens[index].run(1)
              }
              // Resolve when we played the last frame; otherwise, reject
              if (gotoEnd) {
                deferred.notifyWith(elem, [
                  animation,
                  1,
                  0
                ]);
                deferred.resolveWith(elem, [
                  animation,
                  gotoEnd
                ])
              } else {
                deferred.rejectWith(elem, [
                  animation,
                  gotoEnd
                ])
              }
              return this
            }
          }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (jQuery.isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result)
            }
            return result
          }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation)
        }
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        // attach callbacks from options
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          '*': [function (prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween
            }]
        },
        tweener: function (props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props;
            props = ['*']
          } else {
            props = props.match(rnothtmlwhite)
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback)
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function (callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback)
          } else {
            Animation.prefilters.push(callback)
          }
        }
      });
      jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        // Go to the end state if fx are off or if document is hidden
        if (jQuery.fx.off || document.hidden) {
          opt.duration = 0
        } else {
          if (typeof opt.duration !== 'number') {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration]
            } else {
              opt.duration = jQuery.fx.speeds._default
            }
          }
        }
        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
          opt.queue = 'fx'
        }
        // Queueing
        opt.old = opt.complete;
        opt.complete = function () {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this)
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue)
          }
        };
        return opt
      };
      jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
          // Show any hidden elements after setting opacity to 0
          return this.filter(isHiddenWithinTree).css('opacity', 0).show()  // Animate to the value specified
.end().animate({ opacity: to }, speed, easing, callback)
        },
        animate: function (prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
              // Operate on a copy of prop so per-property easing won't be lost
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              // Empty animations, or finishing resolves immediately
              if (empty || dataPriv.get(this, 'finish')) {
                anim.stop(true)
              }
            };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
        },
        stop: function (type, clearQueue, gotoEnd) {
          var stopQueue = function (hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd)
          };
          if (typeof type !== 'string') {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined
          }
          if (clearQueue && type !== false) {
            this.queue(type || 'fx', [])
          }
          return this.each(function () {
            var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index])
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index])
                }
              }
            }
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1)
              }
            }
            // Start the next in the queue if the last step wasn't forced.
            // Timers currently will call their complete callbacks, which
            // will dequeue but only if they were gotoEnd.
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type)
            }
          })
        },
        finish: function (type) {
          if (type !== false) {
            type = type || 'fx'
          }
          return this.each(function () {
            var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
            // Enable finishing flag on private data
            data.finish = true;
            // Empty the queue first
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true)
            }
            // Look for any active animations, and finish them
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1)
              }
            }
            // Look for any animations in the old queue and finish them
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this)
              }
            }
            // Turn off finishing flag
            delete data.finish
          })
        }
      });
      jQuery.each([
        'toggle',
        'show',
        'hide'
      ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
          return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
        }
      });
      // Generate shortcuts for custom animations
      jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
      }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
          return this.animate(props, speed, easing, callback)
        }
      });
      jQuery.timers = [];
      jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          // Checks the timer has not already been removed
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1)
          }
        }
        if (!timers.length) {
          jQuery.fx.stop()
        }
        fxNow = undefined
      };
      jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        if (timer()) {
          jQuery.fx.start()
        } else {
          jQuery.timers.pop()
        }
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function () {
        if (!timerId) {
          timerId = window.requestAnimationFrame ? window.requestAnimationFrame(raf) : window.setInterval(jQuery.fx.tick, jQuery.fx.interval)
        }
      };
      jQuery.fx.stop = function () {
        if (window.cancelAnimationFrame) {
          window.cancelAnimationFrame(timerId)
        } else {
          window.clearInterval(timerId)
        }
        timerId = null
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
      };
      // Based off of the plugin by Clint Helfers, with permission.
      // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
      jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
          var timeout = window.setTimeout(next, time);
          hooks.stop = function () {
            window.clearTimeout(timeout)
          }
        })
      };
      (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== '';
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't'
      }());
      var boolHook, attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function (name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1)
        },
        removeAttr: function (name) {
          return this.each(function () {
            jQuery.removeAttr(this, name)
          })
        }
      });
      jQuery.extend({
        attr: function (elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          // Don't get/set attributes on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          // Fallback to prop when attributes are not supported
          if (typeof elem.getAttribute === 'undefined') {
            return jQuery.prop(elem, name, value)
          }
          // Attribute hooks are determined by the lowercase version
          // Grab necessary hook if one is defined
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined)
          }
          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return
            }
            if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret
            }
            elem.setAttribute(name, value + '');
            return value
          }
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret
          }
          ret = jQuery.find.attr(elem, name);
          // Non-existent attributes return null, we normalize to undefined
          return ret == null ? undefined : ret
        },
        attrHooks: {
          type: {
            set: function (elem, value) {
              if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                var val = elem.value;
                elem.setAttribute('type', value);
                if (val) {
                  elem.value = val
                }
                return value
              }
            }
          }
        },
        removeAttr: function (elem, value) {
          var name, i = 0,
            // Attribute names can contain non-HTML whitespace characters
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
            attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name)
            }
          }
        }
      });
      // Hooks for boolean attributes
      boolHook = {
        set: function (elem, value, name) {
          if (value === false) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name)
          } else {
            elem.setAttribute(name, name)
          }
          return name
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
          var ret, handle, lowercaseName = name.toLowerCase();
          if (!isXML) {
            // Avoid an infinite loop by temporarily removing this function from the getter
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle
          }
          return ret
        }
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function (name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1)
        },
        removeProp: function (name) {
          return this.each(function () {
            delete this[jQuery.propFix[name] || name]
          })
        }
      });
      jQuery.extend({
        prop: function (elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          // Don't get/set properties on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            // Fix name and attach hooks
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name]
          }
          if (value !== undefined) {
            if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret
            }
            return elem[name] = value
          }
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret
          }
          return elem[name]
        },
        propHooks: {
          tabIndex: {
            get: function (elem) {
              // Support: IE <=9 - 11 only
              // elem.tabIndex doesn't always return the
              // correct value when it hasn't been explicitly set
              // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
              // Use proper attribute retrieval(#12072)
              var tabindex = jQuery.find.attr(elem, 'tabindex');
              if (tabindex) {
                return parseInt(tabindex, 10)
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0
              }
              return -1
            }
          }
        },
        propFix: {
          'for': 'htmlFor',
          'class': 'className'
        }
      });
      // Support: IE <=11 only
      // Accessing the selectedIndex property
      // forces the browser to respect setting selected
      // on the option
      // The getter ensures a default option is selected
      // when in an optgroup
      // eslint rule "no-unused-expressions" is disabled for this code
      // since it considers such accessions noop
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function (elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex
            }
            return null
          },
          set: function (elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex
              }
            }
          }
        }
      }
      jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
      ], function () {
        jQuery.propFix[this.toLowerCase()] = this
      });
      // Strip and collapse whitespace according to HTML spec
      // https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(' ')
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute('class') || ''
      }
      jQuery.fn.extend({
        addClass: function (value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)))
            })
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || [];
            while (elem = this[i++]) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  if (cur.indexOf(' ' + clazz + ' ') < 0) {
                    cur += clazz + ' '
                  }
                }
                // Only assign if different to avoid unneeded rendering.
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        removeClass: function (value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)))
            })
          }
          if (!arguments.length) {
            return this.attr('class', '')
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || [];
            while (elem = this[i++]) {
              curValue = getClass(elem);
              // This expression is here for better compressibility (see addClass)
              cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  // Remove *all* instances
                  while (cur.indexOf(' ' + clazz + ' ') > -1) {
                    cur = cur.replace(' ' + clazz + ' ', ' ')
                  }
                }
                // Only assign if different to avoid unneeded rendering.
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        toggleClass: function (value, stateVal) {
          var type = typeof value;
          if (typeof stateVal === 'boolean' && type === 'string') {
            return stateVal ? this.addClass(value) : this.removeClass(value)
          }
          if (jQuery.isFunction(value)) {
            return this.each(function (i) {
              jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal)
            })
          }
          return this.each(function () {
            var className, i, self, classNames;
            if (type === 'string') {
              // Toggle individual class names
              i = 0;
              self = jQuery(this);
              classNames = value.match(rnothtmlwhite) || [];
              while (className = classNames[i++]) {
                // Check each className given, space separated list
                if (self.hasClass(className)) {
                  self.removeClass(className)
                } else {
                  self.addClass(className)
                }
              }  // Toggle whole class name
            } else if (value === undefined || type === 'boolean') {
              className = getClass(this);
              if (className) {
                // Store className if set
                dataPriv.set(this, '__className__', className)
              }
              // If the element has a class name or if we're passed `false`,
              // then remove the whole classname (if there was one, the above saved it).
              // Otherwise bring back whatever was previously saved (if anything),
              // falling back to the empty string if nothing was stored.
              if (this.setAttribute) {
                this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '')
              }
            }
          })
        },
        hasClass: function (selector) {
          var className, elem, i = 0;
          className = ' ' + selector + ' ';
          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1) {
              return true
            }
          }
          return false
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function (value) {
          var hooks, ret, isFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                return ret
              }
              ret = elem.value;
              // Handle most common string cases
              if (typeof ret === 'string') {
                return ret.replace(rreturn, '')
              }
              // Handle cases where value is null/undef or number
              return ret == null ? '' : ret
            }
            return
          }
          isFunction = jQuery.isFunction(value);
          return this.each(function (i) {
            var val;
            if (this.nodeType !== 1) {
              return
            }
            if (isFunction) {
              val = value.call(this, i, jQuery(this).val())
            } else {
              val = value
            }
            // Treat null/undefined as ""; convert numbers to string
            if (val == null) {
              val = ''
            } else if (typeof val === 'number') {
              val += ''
            } else if (jQuery.isArray(val)) {
              val = jQuery.map(val, function (value) {
                return value == null ? '' : value + ''
              })
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            // If set returns undefined, fall back to normal setting
            if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
              this.value = val
            }
          })
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function (elem) {
              var val = jQuery.find.attr(elem, 'value');
              return val != null ? val : // Support: IE <=10 - 11 only
              // option.text throws exceptions (#14686, #14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem))
            }
          },
          select: {
            get: function (elem) {
              var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one', values = one ? null : [], max = one ? index + 1 : options.length;
              if (index < 0) {
                i = max
              } else {
                i = one ? index : 0
              }
              // Loop through all the selected options
              for (; i < max; i++) {
                option = options[i];
                // Support: IE <=9 only
                // IE8-9 doesn't update selected after form reset (#2551)
                if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                  // Get the specific value for the option
                  value = jQuery(option).val();
                  // We don't need an array for one selects
                  if (one) {
                    return value
                  }
                  // Multi-Selects return an array
                  values.push(value)
                }
              }
              return values
            },
            set: function (elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                /* eslint-disable no-cond-assign */
                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true
                }  /* eslint-enable no-cond-assign */
              }
              // Force browsers to behave consistently when non-matching value is set
              if (!optionSet) {
                elem.selectedIndex = -1
              }
              return values
            }
          }
        }
      });
      // Radios and checkboxes getter/setter
      jQuery.each([
        'radio',
        'checkbox'
      ], function () {
        jQuery.valHooks[this] = {
          set: function (elem, value) {
            if (jQuery.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute('value') === null ? 'on' : elem.value
          }
        }
      });
      // Return jQuery for attributes-only inclusion
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
      jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
          cur = tmp = elem = elem || document;
          // Don't do events on text and comment nodes
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return
          }
          // focus/blur morphs to focusin/out; ensure we're not firing them right now
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return
          }
          if (type.indexOf('.') > -1) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split('.');
            type = namespaces.shift();
            namespaces.sort()
          }
          ontype = type.indexOf(':') < 0 && 'on' + type;
          // Caller can pass in a jQuery.Event object, Object, or just an event type string
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
          // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join('.');
          event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
          // Clean up the event in case it is being reused
          event.result = undefined;
          if (!event.target) {
            event.target = elem
          }
          // Clone any incoming data and prepend the event, creating the handler arg list
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          // Allow special events to draw outside the lines
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return
          }
          // Determine event propagation path in advance, per W3C events spec (#9951)
          // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur
            }
            // Only add window if we got to document (e.g., not plain obj or detached DOM)
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window)
            }
          }
          // Fire handlers on the event path
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            event.type = i > 1 ? bubbleType : special.bindType || type;
            // jQuery handler
            handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
            if (handle) {
              handle.apply(cur, data)
            }
            // Native handler
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault()
              }
            }
          }
          event.type = type;
          // If nobody prevented the default action, do it now
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              // Call a native DOM method on the target with the same name as the event.
              // Don't do default actions on window, that's where global variables be (#6170)
              if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                // Don't re-trigger an onFOO event when we call its FOO() method
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null
                }
                // Prevent re-triggering of the same event, since we already bubbled it above
                jQuery.event.triggered = type;
                elem[type]();
                jQuery.event.triggered = undefined;
                if (tmp) {
                  elem[ontype] = tmp
                }
              }
            }
          }
          return event.result
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function (type, elem, event) {
          var e = jQuery.extend(new jQuery.Event, event, {
            type: type,
            isSimulated: true
          });
          jQuery.event.trigger(e, null, elem)
        }
      });
      jQuery.fn.extend({
        trigger: function (type, data) {
          return this.each(function () {
            jQuery.event.trigger(type, data, this)
          })
        },
        triggerHandler: function (type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true)
          }
        }
      });
      jQuery.each(('blur focus focusin focusout resize scroll click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup contextmenu').split(' '), function (i, name) {
        // Handle event binding
        jQuery.fn[name] = function (data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
        }
      });
      jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        }
      });
      support.focusin = 'onfocusin' in window;
      // Support: Firefox <=44
      // Firefox doesn't have focus(in | out) events
      // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
      //
      // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
      // focus(in | out) events fire after focus & blur events,
      // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
      // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
      if (!support.focusin) {
        jQuery.each({
          focus: 'focusin',
          blur: 'focusout'
        }, function (orig, fix) {
          // Attach a single capturing handler on the document while someone wants focusin/focusout
          var handler = function (event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event))
          };
          jQuery.event.special[fix] = {
            setup: function () {
              var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true)
              }
              dataPriv.access(doc, fix, (attaches || 0) + 1)
            },
            teardown: function () {
              var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix)
              } else {
                dataPriv.access(doc, fix, attaches)
              }
            }
          }
        })
      }
      var location = window.location;
      var nonce = jQuery.now();
      var rquery = /\?/;
      // Cross-browser xml parsing
      jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== 'string') {
          return null
        }
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
          xml = new window.DOMParser().parseFromString(data, 'text/xml')
        } catch (e) {
          xml = undefined
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
          jQuery.error('Invalid XML: ' + data)
        }
        return xml
      };
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
          // Serialize array item.
          jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) {
              // Treat each array item as a scalar.
              add(prefix, v)
            } else {
              // Item is non-scalar (array or object), encode its numeric index.
              buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add)
            }
          })
        } else if (!traditional && jQuery.type(obj) === 'object') {
          // Serialize object item.
          for (name in obj) {
            buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
          }
        } else {
          // Serialize scalar item.
          add(prefix, obj)
        }
      }
      // Serialize an array of form elements or a set of
      // key/values into a query string
      jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, valueOrFunction) {
            // If value is a function, invoke it and use its return value
            var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value == null ? '' : value)
          };
        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          // Serialize the form elements
          jQuery.each(a, function () {
            add(this.name, this.value)
          })
        } else {
          // If traditional, encode the "old" way (the way 1.3.2 or older
          // did it), otherwise encode params recursively.
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add)
          }
        }
        // Return the resulting serialization
        return s.join('&')
      };
      jQuery.fn.extend({
        serialize: function () {
          return jQuery.param(this.serializeArray())
        },
        serializeArray: function () {
          return this.map(function () {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop(this, 'elements');
            return elements ? jQuery.makeArray(elements) : this
          }).filter(function () {
            var type = this.type;
            // Use .is( ":disabled" ) so that fieldset[disabled] works
            return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type))
          }).map(function (i, elem) {
            var val = jQuery(this).val();
            if (val == null) {
              return null
            }
            if (jQuery.isArray(val)) {
              return jQuery.map(val, function (val) {
                return {
                  name: elem.name,
                  value: val.replace(rCRLF, '\r\n')
                }
              })
            }
            return {
              name: elem.name,
              value: val.replace(rCRLF, '\r\n')
            }
          }).get()
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//,
        /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
        prefilters = {},
        /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
        transports = {},
        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = '*/'.concat('*'),
        // Anchor tag for parsing the document origin
        originAnchor = document.createElement('a');
      originAnchor.href = location.href;
      // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
      function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {
          if (typeof dataTypeExpression !== 'string') {
            func = dataTypeExpression;
            dataTypeExpression = '*'
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (jQuery.isFunction(func)) {
            // For each dataType in the dataTypeExpression
            while (dataType = dataTypes[i++]) {
              // Prepend if requested
              if (dataType[0] === '+') {
                dataType = dataType.slice(1) || '*';
                (structure[dataType] = structure[dataType] || []).unshift(func)  // Otherwise append
              } else {
                (structure[dataType] = structure[dataType] || []).push(func)
              }
            }
          }
        }
      }
      // Base inspection function for prefilters and transports
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport)
            }
          });
          return selected
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*')
      }
      // A special extend for ajax options
      // that takes "flat" options (not to be deep extended)
      // Fixes #9887
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep)
        }
        return target
      }
      /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === '*') {
          dataTypes.shift();
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader('Content-Type')
          }
        }
        // Check if we're dealing with a known content-type
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break
            }
          }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0]
        } else {
          // Try convertible dataTypes
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
              finalDataType = type;
              break
            }
            if (!firstDataType) {
              firstDataType = type
            }
          }
          // Or just use first one
          finalDataType = finalDataType || firstDataType
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType)
          }
          return responses[finalDataType]
        }
      }
      /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {},
          // Work with a copy of dataTypes in case we need to modify it for conversion
          dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv]
          }
        }
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response
          }
          // Apply the dataFilter if provided
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType)
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            // There's only work to do if current dataType is non-auto
            if (current === '*') {
              current = prev  // Convert response if prev dataType is non-auto and differs from current
            } else if (prev !== '*' && prev !== current) {
              // Seek a direct converter
              conv = converters[prev + ' ' + current] || converters['* ' + current];
              // If none found, seek a pair
              if (!conv) {
                for (conv2 in converters) {
                  // If conv2 outputs current
                  tmp = conv2.split(' ');
                  if (tmp[1] === current) {
                    // If prev can be converted to accepted input
                    conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                    if (conv) {
                      // Condense equivalence converters
                      if (conv === true) {
                        conv = converters[conv2]  // Otherwise, insert the intermediate dataType
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1])
                      }
                      break
                    }
                  }
                }
              }
              // Apply converter (if not an equivalence)
              if (conv !== true) {
                // Unless errors are allowed to bubble, catch and return them
                if (conv && s.throws) {
                  response = conv(response)
                } else {
                  try {
                    response = conv(response)
                  } catch (e) {
                    return {
                      state: 'parsererror',
                      error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                    }
                  }
                }
              }
            }
          }
        }
        return {
          state: 'success',
          data: response
        }
      }
      jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: 'GET',
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/
          accepts: {
            '*': allTypes,
            text: 'text/plain',
            html: 'text/html',
            xml: 'application/xml, text/xml',
            json: 'application/json, text/javascript'
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: 'responseXML',
            text: 'responseText',
            json: 'responseJSON'
          },
          // Data converters
          // Keys separate source (or catchall "*") and destination types with a single space
          converters: {
            // Convert anything to text
            '* text': String,
            // Text to html (true = no transformation)
            'text html': true,
            // Evaluate text as a json expression
            'text json': JSON.parse,
            // Parse text as xml
            'text xml': jQuery.parseXML
          },
          // For options that shouldn't be deep extended:
          // you can add your own custom options here if
          // and when you create one that shouldn't be
          // deep extended (see ajaxExtend)
          flatOptions: {
            url: true,
            context: true
          }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function (target, settings) {
          return settings ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target)
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function (url, options) {
          // If url is an object, simulate pre-1.5 signature
          if (typeof url === 'object') {
            options = url;
            url = undefined
          }
          // Force options to be an object
          options = options || {};
          var transport,
            // URL without anti-cache param
            cacheURL,
            // Response headers
            responseHeadersString, responseHeaders,
            // timeout handle
            timeoutTimer,
            // Url cleanup var
            urlAnchor,
            // Request state (becomes false upon send and true upon completion)
            completed,
            // To know if global events are to be dispatched
            fireGlobals,
            // Loop variable
            i,
            // uncached part of the url
            uncached,
            // Create the final options object
            s = jQuery.ajaxSetup({}, options),
            // Callbacks context
            callbackContext = s.context || s,
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
            // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
            // Status-dependent callbacks
            statusCode = s.statusCode || {},
            // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {},
            // Default abort message
            strAbort = 'canceled',
            // Fake xhr
            jqXHR = {
              readyState: 0,
              // Builds headers hashtable if needed
              getResponseHeader: function (key) {
                var match;
                if (completed) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase()] = match[2]
                    }
                  }
                  match = responseHeaders[key.toLowerCase()]
                }
                return match == null ? null : match
              },
              // Raw string
              getAllResponseHeaders: function () {
                return completed ? responseHeadersString : null
              },
              // Caches the header
              setRequestHeader: function (name, value) {
                if (completed == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value
                }
                return this
              },
              // Overrides response content-type header
              overrideMimeType: function (type) {
                if (completed == null) {
                  s.mimeType = type
                }
                return this
              },
              // Status-dependent callbacks
              statusCode: function (map) {
                var code;
                if (map) {
                  if (completed) {
                    // Execute the appropriate callbacks
                    jqXHR.always(map[jqXHR.status])
                  } else {
                    // Lazy-add the new callbacks in a way that preserves old ones
                    for (code in map) {
                      statusCode[code] = [
                        statusCode[code],
                        map[code]
                      ]
                    }
                  }
                }
                return this
              },
              // Cancel the request
              abort: function (statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText)
                }
                done(0, finalText);
                return this
              }
            };
          // Attach deferreds
          deferred.promise(jqXHR);
          // Add protocol if not provided (prefilters might expect it)
          // Handle falsy url in the settings object (#10093: consistency with old signature)
          // We also use the url parameter if available
          s.url = ((url || s.url || location.href) + '').replace(rprotocol, location.protocol + '//');
          // Alias method option to type as per ticket #12004
          s.type = options.method || options.type || s.method || s.type;
          // Extract dataTypes list
          s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [''];
          // A cross-domain request is in order when the origin doesn't match the current origin.
          if (s.crossDomain == null) {
            urlAnchor = document.createElement('a');
            // Support: IE <=8 - 11, Edge 12 - 13
            // IE throws exception on accessing the href property if url is malformed,
            // e.g. http://example.com:80x/
            try {
              urlAnchor.href = s.url;
              // Support: IE <=8 - 11 only
              // Anchor's host property isn't correctly set when s.url is relative
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host
            } catch (e) {
              // If there is an error parsing the URL, assume it is crossDomain,
              // it can be rejected by the transport if it is invalid
              s.crossDomain = true
            }
          }
          // Convert data if not already a string
          if (s.data && s.processData && typeof s.data !== 'string') {
            s.data = jQuery.param(s.data, s.traditional)
          }
          // Apply prefilters
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          // If request was aborted inside a prefilter, stop there
          if (completed) {
            return jqXHR
          }
          // We can fire global events as of now if asked to
          // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
          fireGlobals = jQuery.event && s.global;
          // Watch for a new set of requests
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger('ajaxStart')
          }
          // Uppercase the type
          s.type = s.type.toUpperCase();
          // Determine if request has content
          s.hasContent = !rnoContent.test(s.type);
          // Save the URL in case we're toying with the If-Modified-Since
          // and/or If-None-Match header later on
          // Remove hash to simplify url manipulation
          cacheURL = s.url.replace(rhash, '');
          // More options handling for requests with no content
          if (!s.hasContent) {
            // Remember the hash so we can put it back
            uncached = s.url.slice(cacheURL.length);
            // If data is available, append data to url
            if (s.data) {
              cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;
              // #9682: remove data so that it's not used in an eventual retry
              delete s.data
            }
            // Add or update anti-cache param if needed
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, '$1');
              uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++ + uncached
            }
            // Put hash and anti-cache on the URL that will be requested (gh-1732)
            s.url = cacheURL + uncached  // Change '%20' to '+' if this is encoded form body content (gh-2658)
          } else if (s.data && s.processData && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0) {
            s.data = s.data.replace(r20, '+')
          }
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL])
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL])
            }
          }
          // Set the correct header, if data is being sent
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader('Content-Type', s.contentType)
          }
          // Set the Accepts header for the server, depending on the dataType
          jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
          // Check for headers option
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i])
          }
          // Allow custom headers/mimetypes and early abort
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
            // Abort if not done already and return
            return jqXHR.abort()
          }
          // Aborting is no longer a cancellation
          strAbort = 'abort';
          // Install callbacks on deferreds
          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error);
          // Get transport
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          // If no transport, we auto-abort
          if (!transport) {
            done(-1, 'No Transport')
          } else {
            jqXHR.readyState = 1;
            // Send global event
            if (fireGlobals) {
              globalEventContext.trigger('ajaxSend', [
                jqXHR,
                s
              ])
            }
            // If request was aborted inside ajaxSend, stop there
            if (completed) {
              return jqXHR
            }
            // Timeout
            if (s.async && s.timeout > 0) {
              timeoutTimer = window.setTimeout(function () {
                jqXHR.abort('timeout')
              }, s.timeout)
            }
            try {
              completed = false;
              transport.send(requestHeaders, done)
            } catch (e) {
              // Rethrow post-completion exceptions
              if (completed) {
                throw e
              }
              // Propagate others as results
              done(-1, e)
            }
          }
          // Callback for when everything is done
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            // Ignore repeat invocations
            if (completed) {
              return
            }
            completed = true;
            // Clear timeout if it exists
            if (timeoutTimer) {
              window.clearTimeout(timeoutTimer)
            }
            // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)
            transport = undefined;
            // Cache response headers
            responseHeadersString = headers || '';
            // Set readyState
            jqXHR.readyState = status > 0 ? 4 : 0;
            // Determine if successful
            isSuccess = status >= 200 && status < 300 || status === 304;
            // Get response data
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses)
            }
            // Convert no matter what (that way responseXXX fields are always set)
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            // If successful, handle type chaining
            if (isSuccess) {
              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader('Last-Modified');
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified
                }
                modified = jqXHR.getResponseHeader('etag');
                if (modified) {
                  jQuery.etag[cacheURL] = modified
                }
              }
              // if no content
              if (status === 204 || s.type === 'HEAD') {
                statusText = 'nocontent'  // if not modified
              } else if (status === 304) {
                statusText = 'notmodified'  // If we have data, let's convert it
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error
              }
            } else {
              // Extract error from statusText and normalize for non-aborts
              error = statusText;
              if (status || !statusText) {
                statusText = 'error';
                if (status < 0) {
                  status = 0
                }
              }
            }
            // Set data for the fake xhr object
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + '';
            // Success/Error
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [
                success,
                statusText,
                jqXHR
              ])
            } else {
              deferred.rejectWith(callbackContext, [
                jqXHR,
                statusText,
                error
              ])
            }
            // Status-dependent callbacks
            jqXHR.statusCode(statusCode);
            statusCode = undefined;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                jqXHR,
                s,
                isSuccess ? success : error
              ])
            }
            // Complete
            completeDeferred.fireWith(callbackContext, [
              jqXHR,
              statusText
            ]);
            if (fireGlobals) {
              globalEventContext.trigger('ajaxComplete', [
                jqXHR,
                s
              ]);
              // Handle the global AJAX counter
              if (!--jQuery.active) {
                jQuery.event.trigger('ajaxStop')
              }
            }
          }
          return jqXHR
        },
        getJSON: function (url, data, callback) {
          return jQuery.get(url, data, callback, 'json')
        },
        getScript: function (url, callback) {
          return jQuery.get(url, undefined, callback, 'script')
        }
      });
      jQuery.each([
        'get',
        'post'
      ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
          // Shift arguments if data argument was omitted
          if (jQuery.isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined
          }
          // The url can be an options object (which then must have .url)
          return jQuery.ajax(jQuery.extend({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          }, jQuery.isPlainObject(url) && url))
        }
      });
      jQuery._evalUrl = function (url) {
        return jQuery.ajax({
          url: url,
          // Make this explicit, since user can override this through ajaxSetup (#11264)
          type: 'GET',
          dataType: 'script',
          cache: true,
          async: false,
          global: false,
          'throws': true
        })
      };
      jQuery.fn.extend({
        wrapAll: function (html) {
          var wrap;
          if (this[0]) {
            if (jQuery.isFunction(html)) {
              html = html.call(this[0])
            }
            // The elements to wrap the target around
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0])
            }
            wrap.map(function () {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild
              }
              return elem
            }).append(this)
          }
          return this
        },
        wrapInner: function (html) {
          if (jQuery.isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapInner(html.call(this, i))
            })
          }
          return this.each(function () {
            var self = jQuery(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html)
            } else {
              self.append(html)
            }
          })
        },
        wrap: function (html) {
          var isFunction = jQuery.isFunction(html);
          return this.each(function (i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
          })
        },
        unwrap: function (selector) {
          this.parent(selector).not('body').each(function () {
            jQuery(this).replaceWith(this.childNodes)
          });
          return this
        }
      });
      jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem)
      };
      jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length)
      };
      jQuery.ajaxSettings.xhr = function () {
        try {
          return new window.XMLHttpRequest
        } catch (e) {
        }
      };
      var xhrSuccessStatus = {
          // File protocol always yields status code 0, assume 200
          0: 200,
          // Support: IE <=9 only
          // #1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;
        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function (headers, complete) {
              var i, xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              // Apply custom fields if provided
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i]
                }
              }
              // Override mime type if needed
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType)
              }
              // X-Requested-With header
              // For cross-domain requests, seeing as conditions for a preflight are
              // akin to a jigsaw puzzle, we simply never set it to be sure.
              // (it can always be set on a per-request basis or even using ajaxSetup)
              // For same-domain requests, won't change header if already provided.
              if (!options.crossDomain && !headers['X-Requested-With']) {
                headers['X-Requested-With'] = 'XMLHttpRequest'
              }
              // Set headers
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i])
              }
              // Callback
              callback = function (type) {
                return function () {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
                    if (type === 'abort') {
                      xhr.abort()
                    } else if (type === 'error') {
                      // Support: IE <=9 only
                      // On a manual native abort, IE9 throws
                      // errors on any property access that is not readyState
                      if (typeof xhr.status !== 'number') {
                        complete(0, 'error')
                      } else {
                        complete(// File: protocol always yields status 0; see #8605, #14207
                        xhr.status, xhr.statusText)
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                      // IE9 has no XHR2 but throws on binary (trac-11426)
                      // For XHR2 non-text, let the caller handle it (gh-2498)
                      (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders())
                    }
                  }
                }
              };
              // Listen to events
              xhr.onload = callback();
              errorCallback = xhr.onerror = callback('error');
              // Support: IE 9 only
              // Use onreadystatechange to replace onabort
              // to handle uncaught aborts
              if (xhr.onabort !== undefined) {
                xhr.onabort = errorCallback
              } else {
                xhr.onreadystatechange = function () {
                  // Check readyState before timeout as it changes
                  if (xhr.readyState === 4) {
                    // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window.setTimeout(function () {
                      if (callback) {
                        errorCallback()
                      }
                    })
                  }
                }
              }
              // Create the abort callback
              callback = callback('abort');
              try {
                // Do send the request (this may raise an exception)
                xhr.send(options.hasContent && options.data || null)
              } catch (e) {
                // #14683: Only rethrow if this hasn't been notified as an error yet
                if (callback) {
                  throw e
                }
              }
            },
            abort: function () {
              if (callback) {
                callback()
              }
            }
          }
        }
      });
      // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
      jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
          s.contents.script = false
        }
      });
      // Install script dataType
      jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
          'text script': function (text) {
            jQuery.globalEval(text);
            return text
          }
        }
      });
      // Handle cache's special case and crossDomain
      jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
          s.cache = false
        }
        if (s.crossDomain) {
          s.type = 'GET'
        }
      });
      // Bind script tag hack transport
      jQuery.ajaxTransport('script', function (s) {
        // This transport only deals with cross domain requests
        if (s.crossDomain) {
          var script, callback;
          return {
            send: function (_, complete) {
              script = jQuery('<script>').prop({
                charset: s.scriptCharset,
                src: s.url
              }).on('load error', callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === 'error' ? 404 : 200, evt.type)
                }
              });
              // Use native DOM manipulation to avoid our domManip AJAX trickery
              document.head.appendChild(script[0])
            },
            abort: function () {
              if (callback) {
                callback()
              }
            }
          }
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      // Default jsonp settings
      jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
          var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
          this[callback] = true;
          return callback
        }
      });
      // Detect, normalize options and install callbacks for jsonp requests
      jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
          // Get callback name, remembering preexisting value associated with it
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          // Insert callback into url or form data
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName)
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName
          }
          // Use data converter to retrieve json after script execution
          s.converters['script json'] = function () {
            if (!responseContainer) {
              jQuery.error(callbackName + ' was not called')
            }
            return responseContainer[0]
          };
          // Force json dataType
          s.dataTypes[0] = 'json';
          // Install callback
          overwritten = window[callbackName];
          window[callbackName] = function () {
            responseContainer = arguments
          };
          // Clean-up function (fires after converters)
          jqXHR.always(function () {
            // If previous value didn't exist - remove it
            if (overwritten === undefined) {
              jQuery(window).removeProp(callbackName)  // Otherwise restore preexisting value
            } else {
              window[callbackName] = overwritten
            }
            // Save back as free
            if (s[callbackName]) {
              // Make sure that re-using the options doesn't screw things around
              s.jsonpCallback = originalSettings.jsonpCallback;
              // Save the callback name for future use
              oldCallbacks.push(callbackName)
            }
            // Call if it was a function and we have a response
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0])
            }
            responseContainer = overwritten = undefined
          });
          // Delegate to script
          return 'script'
        }
      });
      // Support: Safari 8 only
      // In Safari 8 documents created via document.implementation.createHTMLDocument
      // collapse sibling forms: the second one becomes a child of the first one.
      // Because of that, this security measure has to be disabled in Safari 8.
      // https://bugs.webkit.org/show_bug.cgi?id=137337
      support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument('').body;
        body.innerHTML = '<form></form><form></form>';
        return body.childNodes.length === 2
      }();
      // Argument "data" should be string of html
      // context (optional): If specified, the fragment will be created in this context,
      // defaults to document
      // keepScripts (optional): If true, will include scripts passed in the html string
      jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== 'string') {
          return []
        }
        if (typeof context === 'boolean') {
          keepScripts = context;
          context = false
        }
        var base, parsed, scripts;
        if (!context) {
          // Stop scripts or inline event handlers from being executed immediately
          // by using document.implementation
          if (support.createHTMLDocument) {
            context = document.implementation.createHTMLDocument('');
            // Set the base href for the created document
            // so any parsed elements with URLs
            // are based on the document's URL (gh-2965)
            base = context.createElement('base');
            base.href = document.location.href;
            context.head.appendChild(base)
          } else {
            context = document
          }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        // Single tag
        if (parsed) {
          return [context.createElement(parsed[1])]
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove()
        }
        return jQuery.merge([], parsed.childNodes)
      };
      /**
 * Load a url into a page
 */
      jQuery.fn.load = function (url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off)
        }
        // If it's a function
        if (jQuery.isFunction(params)) {
          // We assume that it's the callback
          callback = params;
          params = undefined  // Otherwise, build a param string
        } else if (params && typeof params === 'object') {
          type = 'POST'
        }
        // If we have elements to modify, make the request
        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || 'GET',
            dataType: 'html',
            data: params
          }).done(function (responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText)  // If the request succeeds, this function gets "data", "status", "jqXHR"
                           // but they are ignored because response was set above.
                           // If it fails, this function gets "jqXHR", "status", "error"
          }).always(callback && function (jqXHR, status) {
            self.each(function () {
              callback.apply(this, response || [
                jqXHR.responseText,
                status,
                jqXHR
              ])
            })
          })
        }
        return this
      };
      // Attach a bunch of functions for handling common AJAX events
      jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
      ], function (i, type) {
        jQuery.fn[type] = function (fn) {
          return this.on(type, fn)
        }
      });
      jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
          return elem === fn.elem
        }).length
      };
      /**
 * Gets a window from an element
 */
      function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
      }
      jQuery.offset = {
        setOffset: function (elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
          // Set position first, in-case top/left are set even on static elem
          if (position === 'static') {
            elem.style.position = 'relative'
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, 'top');
          curCSSLeft = jQuery.css(elem, 'left');
          calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
          // Need to be able to calculate position if either
          // top or left is auto and position is either absolute or fixed
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0
          }
          if (jQuery.isFunction(options)) {
            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({}, curOffset))
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft
          }
          if ('using' in options) {
            options.using.call(elem, props)
          } else {
            curElem.css(props)
          }
        }
      };
      jQuery.fn.extend({
        offset: function (options) {
          // Preserve chaining for setter
          if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i)
            })
          }
          var docElem, win, rect, doc, elem = this[0];
          if (!elem) {
            return
          }
          // Support: IE <=11 only
          // Running getBoundingClientRect on a
          // disconnected node in IE throws an error
          if (!elem.getClientRects().length) {
            return {
              top: 0,
              left: 0
            }
          }
          rect = elem.getBoundingClientRect();
          // Make sure element is not hidden (display: none)
          if (rect.width || rect.height) {
            doc = elem.ownerDocument;
            win = getWindow(doc);
            docElem = doc.documentElement;
            return {
              top: rect.top + win.pageYOffset - docElem.clientTop,
              left: rect.left + win.pageXOffset - docElem.clientLeft
            }
          }
          // Return zeros for disconnected and hidden elements (gh-2310)
          return rect
        },
        position: function () {
          if (!this[0]) {
            return
          }
          var offsetParent, offset, elem = this[0], parentOffset = {
              top: 0,
              left: 0
            };
          // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
          // because it is its only offset parent
          if (jQuery.css(elem, 'position') === 'fixed') {
            // Assume getBoundingClientRect is there when computed position is fixed
            offset = elem.getBoundingClientRect()
          } else {
            // Get *real* offsetParent
            offsetParent = this.offsetParent();
            // Get correct offsets
            offset = this.offset();
            if (!jQuery.nodeName(offsetParent[0], 'html')) {
              parentOffset = offsetParent.offset()
            }
            // Add offsetParent borders
            parentOffset = {
              top: parentOffset.top + jQuery.css(offsetParent[0], 'borderTopWidth', true),
              left: parentOffset.left + jQuery.css(offsetParent[0], 'borderLeftWidth', true)
            }
          }
          // Subtract parent offsets and element margins
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
            left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
          }
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function () {
          return this.map(function () {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
              offsetParent = offsetParent.offsetParent
            }
            return offsetParent || documentElement
          })
        }
      });
      // Create scrollLeft and scrollTop methods
      jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
      }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
          return access(this, function (elem, method, val) {
            var win = getWindow(elem);
            if (val === undefined) {
              return win ? win[prop] : elem[method]
            }
            if (win) {
              win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset)
            } else {
              elem[method] = val
            }
          }, method, val, arguments.length)
        }
      });
      // Support: Safari <=7 - 9.1, Chrome <=37 - 49
      // Add the top/left cssHooks using jQuery.fn.position
      // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
      // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
      // getComputedStyle returns percent when specified for top/left/bottom/right;
      // rather than make the css module depend on the offset module, just check for it here
      jQuery.each([
        'top',
        'left'
      ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            // If curCSS returns percentage, fallback to offset
            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed
          }
        })
      });
      // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
      jQuery.each({
        Height: 'height',
        Width: 'width'
      }, function (name, type) {
        jQuery.each({
          padding: 'inner' + name,
          content: type,
          '': 'outer' + name
        }, function (defaultExtra, funcName) {
          // Margin is only for outerHeight, outerWidth
          jQuery.fn[funcName] = function (margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
            return access(this, function (elem, type, value) {
              var doc;
              if (jQuery.isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf('outer') === 0 ? elem['inner' + name] : elem.document.documentElement['client' + name]
              }
              // Get document width or height
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest
                return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name])
              }
              return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
              jQuery.css(elem, type, extra) : // Set width or height on the element
              jQuery.style(elem, type, value, extra)
            }, type, chainable ? margin : undefined, chainable)
          }
        })
      });
      jQuery.fn.extend({
        bind: function (types, data, fn) {
          return this.on(types, null, data, fn)
        },
        unbind: function (types, fn) {
          return this.off(types, null, fn)
        },
        delegate: function (selector, types, data, fn) {
          return this.on(types, selector, data, fn)
        },
        undelegate: function (selector, types, fn) {
          // ( namespace ) or ( selector, types [, fn] )
          return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn)
        }
      });
      jQuery.parseJSON = JSON.parse;
      // Register as a named AMD module, since jQuery can be concatenated with other
      // files that may use define, but not via a proper concatenation script that
      // understands anonymous AMD modules. A named AMD is safest and most robust
      // way to register. Lowercase jquery is used because AMD module names are
      // derived from file names, and jQuery is normally delivered in a lowercase
      // file name. Do this after creating the global so that if an AMD module wants
      // to call noConflict to hide this version of jQuery, it will work.
      // Note that for maximum portability, libraries that are not jQuery should
      // declare themselves as anonymous modules, and avoid setting a global if an
      // AMD loader is present. jQuery is a special case. For more information, see
      // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
      if (typeof define === 'function' && define.amd) {
        define('jquery', [], function () {
          return jQuery
        })
      }
      var
        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,
        // Map over the $ in case of overwrite
        _$ = window.$;
      jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
          window.$ = _$
        }
        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery
        }
        return jQuery
      };
      // Expose jQuery and $ identifiers, even in AMD
      // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
      // and CommonJS for browser emulators (#13566)
      if (!noGlobal) {
        window.jQuery = window.$ = jQuery
      }
      return jQuery
    }))
  });
  // source: node_modules/selectize/dist/js/selectize.js
  rqzt.define('selectize/dist/js/selectize', function (module, exports, __dirname, __filename, process) {
    /**
 * selectize.js (v0.12.4)
 * Copyright (c) 2013–2015 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    /*jshint curly:false */
    /*jshint browser:true */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define([
          'jquery',
          'sifter',
          'microplugin'
        ], factory)
      } else if (typeof exports === 'object') {
        module.exports = factory(rqzt('jquery/dist/jquery'), rqzt('sifter/sifter'), rqzt('microplugin/src/microplugin'))
      } else {
        root.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin)
      }
    }(this, function ($, Sifter, MicroPlugin) {
      'use strict';
      var highlight = function ($element, pattern) {
        if (typeof pattern === 'string' && !pattern.length)
          return;
        var regex = typeof pattern === 'string' ? new RegExp(pattern, 'i') : pattern;
        var highlight = function (node) {
          var skip = 0;
          if (node.nodeType === 3) {
            var pos = node.data.search(regex);
            if (pos >= 0 && node.data.length > 0) {
              var match = node.data.match(regex);
              var spannode = document.createElement('span');
              spannode.className = 'highlight';
              var middlebit = node.splitText(pos);
              var endbit = middlebit.splitText(match[0].length);
              var middleclone = middlebit.cloneNode(true);
              spannode.appendChild(middleclone);
              middlebit.parentNode.replaceChild(spannode, middlebit);
              skip = 1
            }
          } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {
            for (var i = 0; i < node.childNodes.length; ++i) {
              i += highlight(node.childNodes[i])
            }
          }
          return skip
        };
        return $element.each(function () {
          highlight(this)
        })
      };
      /**
	 * removeHighlight fn copied from highlight v5 and
	 * edited to remove with() and pass js strict mode
	 */
      $.fn.removeHighlight = function () {
        return this.find('span.highlight').each(function () {
          this.parentNode.firstChild.nodeName;
          var parent = this.parentNode;
          parent.replaceChild(this.firstChild, this);
          parent.normalize()
        }).end()
      };
      var MicroEvent = function () {
      };
      MicroEvent.prototype = {
        on: function (event, fct) {
          this._events = this._events || {};
          this._events[event] = this._events[event] || [];
          this._events[event].push(fct)
        },
        off: function (event, fct) {
          var n = arguments.length;
          if (n === 0)
            return delete this._events;
          if (n === 1)
            return delete this._events[event];
          this._events = this._events || {};
          if (event in this._events === false)
            return;
          this._events[event].splice(this._events[event].indexOf(fct), 1)
        },
        trigger: function (event) {
          this._events = this._events || {};
          if (event in this._events === false)
            return;
          for (var i = 0; i < this._events[event].length; i++) {
            this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))
          }
        }
      };
      /**
	 * Mixin will delegate all MicroEvent.js function in the destination object.
	 *
	 * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent
	 *
	 * @param {object} the object which will support MicroEvent
	 */
      MicroEvent.mixin = function (destObject) {
        var props = [
          'on',
          'off',
          'trigger'
        ];
        for (var i = 0; i < props.length; i++) {
          destObject.prototype[props[i]] = MicroEvent.prototype[props[i]]
        }
      };
      var IS_MAC = /Mac/.test(navigator.userAgent);
      var KEY_A = 65;
      var KEY_COMMA = 188;
      var KEY_RETURN = 13;
      var KEY_ESC = 27;
      var KEY_LEFT = 37;
      var KEY_UP = 38;
      var KEY_P = 80;
      var KEY_RIGHT = 39;
      var KEY_DOWN = 40;
      var KEY_N = 78;
      var KEY_BACKSPACE = 8;
      var KEY_DELETE = 46;
      var KEY_SHIFT = 16;
      var KEY_CMD = IS_MAC ? 91 : 17;
      var KEY_CTRL = IS_MAC ? 18 : 17;
      var KEY_TAB = 9;
      var TAG_SELECT = 1;
      var TAG_INPUT = 2;
      // for now, android support in general is too spotty to support validity
      var SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('input').validity;
      var isset = function (object) {
        return typeof object !== 'undefined'
      };
      /**
	 * Converts a scalar to its best string representation
	 * for hash keys and HTML attribute values.
	 *
	 * Transformations:
	 *   'str'     -> 'str'
	 *   null      -> ''
	 *   undefined -> ''
	 *   true      -> '1'
	 *   false     -> '0'
	 *   0         -> '0'
	 *   1         -> '1'
	 *
	 * @param {string} value
	 * @returns {string|null}
	 */
      var hash_key = function (value) {
        if (typeof value === 'undefined' || value === null)
          return null;
        if (typeof value === 'boolean')
          return value ? '1' : '0';
        return value + ''
      };
      /**
	 * Escapes a string for use within HTML.
	 *
	 * @param {string} str
	 * @returns {string}
	 */
      var escape_html = function (str) {
        return (str + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;')
      };
      /**
	 * Escapes "$" characters in replacement strings.
	 *
	 * @param {string} str
	 * @returns {string}
	 */
      var escape_replace = function (str) {
        return (str + '').replace(/\$/g, '$$$$')
      };
      var hook = {};
      /**
	 * Wraps `method` on `self` so that `fn`
	 * is invoked before the original method.
	 *
	 * @param {object} self
	 * @param {string} method
	 * @param {function} fn
	 */
      hook.before = function (self, method, fn) {
        var original = self[method];
        self[method] = function () {
          fn.apply(self, arguments);
          return original.apply(self, arguments)
        }
      };
      /**
	 * Wraps `method` on `self` so that `fn`
	 * is invoked after the original method.
	 *
	 * @param {object} self
	 * @param {string} method
	 * @param {function} fn
	 */
      hook.after = function (self, method, fn) {
        var original = self[method];
        self[method] = function () {
          var result = original.apply(self, arguments);
          fn.apply(self, arguments);
          return result
        }
      };
      /**
	 * Wraps `fn` so that it can only be invoked once.
	 *
	 * @param {function} fn
	 * @returns {function}
	 */
      var once = function (fn) {
        var called = false;
        return function () {
          if (called)
            return;
          called = true;
          fn.apply(this, arguments)
        }
      };
      /**
	 * Wraps `fn` so that it can only be called once
	 * every `delay` milliseconds (invoked on the falling edge).
	 *
	 * @param {function} fn
	 * @param {int} delay
	 * @returns {function}
	 */
      var debounce = function (fn, delay) {
        var timeout;
        return function () {
          var self = this;
          var args = arguments;
          window.clearTimeout(timeout);
          timeout = window.setTimeout(function () {
            fn.apply(self, args)
          }, delay)
        }
      };
      /**
	 * Debounce all fired events types listed in `types`
	 * while executing the provided `fn`.
	 *
	 * @param {object} self
	 * @param {array} types
	 * @param {function} fn
	 */
      var debounce_events = function (self, types, fn) {
        var type;
        var trigger = self.trigger;
        var event_args = {};
        // override trigger method
        self.trigger = function () {
          var type = arguments[0];
          if (types.indexOf(type) !== -1) {
            event_args[type] = arguments
          } else {
            return trigger.apply(self, arguments)
          }
        };
        // invoke provided function
        fn.apply(self, []);
        self.trigger = trigger;
        // trigger queued events
        for (type in event_args) {
          if (event_args.hasOwnProperty(type)) {
            trigger.apply(self, event_args[type])
          }
        }
      };
      /**
	 * A workaround for http://bugs.jquery.com/ticket/6696
	 *
	 * @param {object} $parent - Parent element to listen on.
	 * @param {string} event - Event name.
	 * @param {string} selector - Descendant selector to filter by.
	 * @param {function} fn - Event handler.
	 */
      var watchChildEvent = function ($parent, event, selector, fn) {
        $parent.on(event, selector, function (e) {
          var child = e.target;
          while (child && child.parentNode !== $parent[0]) {
            child = child.parentNode
          }
          e.currentTarget = child;
          return fn.apply(this, [e])
        })
      };
      /**
	 * Determines the current selection within a text input control.
	 * Returns an object containing:
	 *   - start
	 *   - length
	 *
	 * @param {object} input
	 * @returns {object}
	 */
      var getSelection = function (input) {
        var result = {};
        if ('selectionStart' in input) {
          result.start = input.selectionStart;
          result.length = input.selectionEnd - result.start
        } else if (document.selection) {
          input.focus();
          var sel = document.selection.createRange();
          var selLen = document.selection.createRange().text.length;
          sel.moveStart('character', -input.value.length);
          result.start = sel.text.length - selLen;
          result.length = selLen
        }
        return result
      };
      /**
	 * Copies CSS properties from one element to another.
	 *
	 * @param {object} $from
	 * @param {object} $to
	 * @param {array} properties
	 */
      var transferStyles = function ($from, $to, properties) {
        var i, n, styles = {};
        if (properties) {
          for (i = 0, n = properties.length; i < n; i++) {
            styles[properties[i]] = $from.css(properties[i])
          }
        } else {
          styles = $from.css()
        }
        $to.css(styles)
      };
      /**
	 * Measures the width of a string within a
	 * parent element (in pixels).
	 *
	 * @param {string} str
	 * @param {object} $parent
	 * @returns {int}
	 */
      var measureString = function (str, $parent) {
        if (!str) {
          return 0
        }
        var $test = $('<test>').css({
          position: 'absolute',
          top: -99999,
          left: -99999,
          width: 'auto',
          padding: 0,
          whiteSpace: 'pre'
        }).text(str).appendTo('body');
        transferStyles($parent, $test, [
          'letterSpacing',
          'fontSize',
          'fontFamily',
          'fontWeight',
          'textTransform'
        ]);
        var width = $test.width();
        $test.remove();
        return width
      };
      /**
	 * Sets up an input to grow horizontally as the user
	 * types. If the value is changed manually, you can
	 * trigger the "update" handler to resize:
	 *
	 * $input.trigger('update');
	 *
	 * @param {object} $input
	 */
      var autoGrow = function ($input) {
        var currentWidth = null;
        var update = function (e, options) {
          var value, keyCode, printable, placeholder, width;
          var shift, character, selection;
          e = e || window.event || {};
          options = options || {};
          if (e.metaKey || e.altKey)
            return;
          if (!options.force && $input.data('grow') === false)
            return;
          value = $input.val();
          if (e.type && e.type.toLowerCase() === 'keydown') {
            keyCode = e.keyCode;
            printable = keyCode >= 97 && keyCode <= 122 || keyCode >= 65 && keyCode <= 90 || keyCode >= 48 && keyCode <= 57 || // 0-9
            keyCode === 32  // space
;
            if (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {
              selection = getSelection($input[0]);
              if (selection.length) {
                value = value.substring(0, selection.start) + value.substring(selection.start + selection.length)
              } else if (keyCode === KEY_BACKSPACE && selection.start) {
                value = value.substring(0, selection.start - 1) + value.substring(selection.start + 1)
              } else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {
                value = value.substring(0, selection.start) + value.substring(selection.start + 1)
              }
            } else if (printable) {
              shift = e.shiftKey;
              character = String.fromCharCode(e.keyCode);
              if (shift)
                character = character.toUpperCase();
              else
                character = character.toLowerCase();
              value += character
            }
          }
          placeholder = $input.attr('placeholder');
          if (!value && placeholder) {
            value = placeholder
          }
          width = measureString(value, $input) + 4;
          if (width !== currentWidth) {
            currentWidth = width;
            $input.width(width);
            $input.triggerHandler('resize')
          }
        };
        $input.on('keydown keyup update blur', update);
        update()
      };
      var domToString = function (d) {
        var tmp = document.createElement('div');
        tmp.appendChild(d.cloneNode(true));
        return tmp.innerHTML
      };
      var logError = function (message, options) {
        if (!options)
          options = {};
        var component = 'Selectize';
        void 0;
        if (options.explanation) {
          // console.group is undefined in <IE11
          if (console.group)
            void 0;
          void 0;
          if (console.group)
            void 0
        }
      };
      var Selectize = function ($input, settings) {
        var key, i, n, dir, input, self = this;
        input = $input[0];
        input.selectize = self;
        // detect rtl environment
        var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);
        dir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;
        dir = dir || $input.parents('[dir]:first').attr('dir') || '';
        // setup default state
        $.extend(self, {
          order: 0,
          settings: settings,
          $input: $input,
          tabIndex: $input.attr('tabindex') || '',
          tagType: input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,
          rtl: /rtl/i.test(dir),
          eventNS: '.selectize' + ++Selectize.count,
          highlightedValue: null,
          isOpen: false,
          isDisabled: false,
          isRequired: $input.is('[required]'),
          isInvalid: false,
          isLocked: false,
          isFocused: false,
          isInputHidden: false,
          isSetup: false,
          isShiftDown: false,
          isCmdDown: false,
          isCtrlDown: false,
          ignoreFocus: false,
          ignoreBlur: false,
          ignoreHover: false,
          hasOptions: false,
          currentResults: null,
          lastValue: '',
          caretPos: 0,
          loading: 0,
          loadedSearches: {},
          $activeOption: null,
          $activeItems: [],
          optgroups: {},
          options: {},
          userOptions: {},
          items: [],
          renderCache: {},
          onSearchChange: settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)
        });
        // search system
        self.sifter = new Sifter(this.options, { diacritics: settings.diacritics });
        // build options table
        if (self.settings.options) {
          for (i = 0, n = self.settings.options.length; i < n; i++) {
            self.registerOption(self.settings.options[i])
          }
          delete self.settings.options
        }
        // build optgroup table
        if (self.settings.optgroups) {
          for (i = 0, n = self.settings.optgroups.length; i < n; i++) {
            self.registerOptionGroup(self.settings.optgroups[i])
          }
          delete self.settings.optgroups
        }
        // option-dependent defaults
        self.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');
        if (typeof self.settings.hideSelected !== 'boolean') {
          self.settings.hideSelected = self.settings.mode === 'multi'
        }
        self.initializePlugins(self.settings.plugins);
        self.setupCallbacks();
        self.setupTemplates();
        self.setup()
      };
      // mixins
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      MicroEvent.mixin(Selectize);
      if (typeof MicroPlugin !== 'undefined') {
        MicroPlugin.mixin(Selectize)
      } else {
        logError('Dependency MicroPlugin is missing', { explanation: 'Make sure you either: (1) are using the "standalone" ' + 'version of Selectize, or (2) require MicroPlugin before you ' + 'load Selectize.' })
      }
      // methods
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      $.extend(Selectize.prototype, {
        /**
		 * Creates all elements and sets up event bindings.
		 */
        setup: function () {
          var self = this;
          var settings = self.settings;
          var eventNS = self.eventNS;
          var $window = $(window);
          var $document = $(document);
          var $input = self.$input;
          var $wrapper;
          var $control;
          var $control_input;
          var $dropdown;
          var $dropdown_content;
          var $dropdown_parent;
          var inputMode;
          var timeout_blur;
          var timeout_focus;
          var classes;
          var classes_plugins;
          var inputId;
          inputMode = self.settings.mode;
          classes = $input.attr('class') || '';
          $wrapper = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);
          $control = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);
          $control_input = $('<input type="text" autocomplete="off" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);
          $dropdown_parent = $(settings.dropdownParent || $wrapper);
          $dropdown = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);
          $dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);
          if (inputId = $input.attr('id')) {
            $control_input.attr('id', inputId + '-selectized');
            $("label[for='" + inputId + "']").attr('for', inputId + '-selectized')
          }
          if (self.settings.copyClassesToDropdown) {
            $dropdown.addClass(classes)
          }
          $wrapper.css({ width: $input[0].style.width });
          if (self.plugins.names.length) {
            classes_plugins = 'plugin-' + self.plugins.names.join(' plugin-');
            $wrapper.addClass(classes_plugins);
            $dropdown.addClass(classes_plugins)
          }
          if ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {
            $input.attr('multiple', 'multiple')
          }
          if (self.settings.placeholder) {
            $control_input.attr('placeholder', settings.placeholder)
          }
          // if splitOn was not passed in, construct it from the delimiter to allow pasting universally
          if (!self.settings.splitOn && self.settings.delimiter) {
            var delimiterEscaped = self.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            self.settings.splitOn = new RegExp('\\s*' + delimiterEscaped + '+\\s*')
          }
          if ($input.attr('autocorrect')) {
            $control_input.attr('autocorrect', $input.attr('autocorrect'))
          }
          if ($input.attr('autocapitalize')) {
            $control_input.attr('autocapitalize', $input.attr('autocapitalize'))
          }
          self.$wrapper = $wrapper;
          self.$control = $control;
          self.$control_input = $control_input;
          self.$dropdown = $dropdown;
          self.$dropdown_content = $dropdown_content;
          $dropdown.on('mouseenter', '[data-selectable]', function () {
            return self.onOptionHover.apply(self, arguments)
          });
          $dropdown.on('mousedown click', '[data-selectable]', function () {
            return self.onOptionSelect.apply(self, arguments)
          });
          watchChildEvent($control, 'mousedown', '*:not(input)', function () {
            return self.onItemSelect.apply(self, arguments)
          });
          autoGrow($control_input);
          $control.on({
            mousedown: function () {
              return self.onMouseDown.apply(self, arguments)
            },
            click: function () {
              return self.onClick.apply(self, arguments)
            }
          });
          $control_input.on({
            mousedown: function (e) {
              e.stopPropagation()
            },
            keydown: function () {
              return self.onKeyDown.apply(self, arguments)
            },
            keyup: function () {
              return self.onKeyUp.apply(self, arguments)
            },
            keypress: function () {
              return self.onKeyPress.apply(self, arguments)
            },
            resize: function () {
              self.positionDropdown.apply(self, [])
            },
            blur: function () {
              return self.onBlur.apply(self, arguments)
            },
            focus: function () {
              self.ignoreBlur = false;
              return self.onFocus.apply(self, arguments)
            },
            paste: function () {
              return self.onPaste.apply(self, arguments)
            }
          });
          $document.on('keydown' + eventNS, function (e) {
            self.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];
            self.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];
            self.isShiftDown = e.shiftKey
          });
          $document.on('keyup' + eventNS, function (e) {
            if (e.keyCode === KEY_CTRL)
              self.isCtrlDown = false;
            if (e.keyCode === KEY_SHIFT)
              self.isShiftDown = false;
            if (e.keyCode === KEY_CMD)
              self.isCmdDown = false
          });
          $document.on('mousedown' + eventNS, function (e) {
            if (self.isFocused) {
              // prevent events on the dropdown scrollbar from causing the control to blur
              if (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {
                return false
              }
              // blur on click outside
              if (!self.$control.has(e.target).length && e.target !== self.$control[0]) {
                self.blur(e.target)
              }
            }
          });
          $window.on([
            'scroll' + eventNS,
            'resize' + eventNS
          ].join(' '), function () {
            if (self.isOpen) {
              self.positionDropdown.apply(self, arguments)
            }
          });
          $window.on('mousemove' + eventNS, function () {
            self.ignoreHover = false
          });
          // store original children and tab index so that they can be
          // restored when the destroy() method is called.
          this.revertSettings = {
            $children: $input.children().detach(),
            tabindex: $input.attr('tabindex')
          };
          $input.attr('tabindex', -1).hide().after(self.$wrapper);
          if ($.isArray(settings.items)) {
            self.setValue(settings.items);
            delete settings.items
          }
          // feature detect for the validation API
          if (SUPPORTS_VALIDITY_API) {
            $input.on('invalid' + eventNS, function (e) {
              e.preventDefault();
              self.isInvalid = true;
              self.refreshState()
            })
          }
          self.updateOriginalInput();
          self.refreshItems();
          self.refreshState();
          self.updatePlaceholder();
          self.isSetup = true;
          if ($input.is(':disabled')) {
            self.disable()
          }
          self.on('change', this.onChange);
          $input.data('selectize', self);
          $input.addClass('selectized');
          self.trigger('initialize');
          // preload options
          if (settings.preload === true) {
            self.onSearchChange('')
          }
        },
        /**
		 * Sets up default rendering functions.
		 */
        setupTemplates: function () {
          var self = this;
          var field_label = self.settings.labelField;
          var field_optgroup = self.settings.optgroupLabelField;
          var templates = {
            'optgroup': function (data) {
              return '<div class="optgroup">' + data.html + '</div>'
            },
            'optgroup_header': function (data, escape) {
              return '<div class="optgroup-header">' + escape(data[field_optgroup]) + '</div>'
            },
            'option': function (data, escape) {
              return '<div class="option">' + escape(data[field_label]) + '</div>'
            },
            'item': function (data, escape) {
              return '<div class="item">' + escape(data[field_label]) + '</div>'
            },
            'option_create': function (data, escape) {
              return '<div class="create">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>'
            }
          };
          self.settings.render = $.extend({}, templates, self.settings.render)
        },
        /**
		 * Maps fired events to callbacks provided
		 * in the settings used when creating the control.
		 */
        setupCallbacks: function () {
          var key, fn, callbacks = {
              'initialize': 'onInitialize',
              'change': 'onChange',
              'item_add': 'onItemAdd',
              'item_remove': 'onItemRemove',
              'clear': 'onClear',
              'option_add': 'onOptionAdd',
              'option_remove': 'onOptionRemove',
              'option_clear': 'onOptionClear',
              'optgroup_add': 'onOptionGroupAdd',
              'optgroup_remove': 'onOptionGroupRemove',
              'optgroup_clear': 'onOptionGroupClear',
              'dropdown_open': 'onDropdownOpen',
              'dropdown_close': 'onDropdownClose',
              'type': 'onType',
              'load': 'onLoad',
              'focus': 'onFocus',
              'blur': 'onBlur'
            };
          for (key in callbacks) {
            if (callbacks.hasOwnProperty(key)) {
              fn = this.settings[callbacks[key]];
              if (fn)
                this.on(key, fn)
            }
          }
        },
        /**
		 * Triggered when the main control element
		 * has a click event.
		 *
		 * @param {object} e
		 * @return {boolean}
		 */
        onClick: function (e) {
          var self = this;
          // necessary for mobile webkit devices (manual focus triggering
          // is ignored unless invoked within a click event)
          if (!self.isFocused) {
            self.focus();
            e.preventDefault()
          }
        },
        /**
		 * Triggered when the main control element
		 * has a mouse down event.
		 *
		 * @param {object} e
		 * @return {boolean}
		 */
        onMouseDown: function (e) {
          var self = this;
          var defaultPrevented = e.isDefaultPrevented();
          var $target = $(e.target);
          if (self.isFocused) {
            // retain focus by preventing native handling. if the
            // event target is the input it should not be modified.
            // otherwise, text selection within the input won't work.
            if (e.target !== self.$control_input[0]) {
              if (self.settings.mode === 'single') {
                // toggle dropdown
                self.isOpen ? self.close() : self.open()
              } else if (!defaultPrevented) {
                self.setActiveItem(null)
              }
              return false
            }
          } else {
            // give control focus
            if (!defaultPrevented) {
              window.setTimeout(function () {
                self.focus()
              }, 0)
            }
          }
        },
        /**
		 * Triggered when the value of the control has been changed.
		 * This should propagate the event to the original DOM
		 * input / select element.
		 */
        onChange: function () {
          this.$input.trigger('change')
        },
        /**
		 * Triggered on <input> paste.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onPaste: function (e) {
          var self = this;
          if (self.isFull() || self.isInputHidden || self.isLocked) {
            e.preventDefault();
            return
          }
          // If a regex or string is included, this will split the pasted
          // input and create Items for each separate value
          if (self.settings.splitOn) {
            // Wait for pasted text to be recognized in value
            setTimeout(function () {
              var pastedText = self.$control_input.val();
              if (!pastedText.match(self.settings.splitOn)) {
                return
              }
              var splitInput = $.trim(pastedText).split(self.settings.splitOn);
              for (var i = 0, n = splitInput.length; i < n; i++) {
                self.createItem(splitInput[i])
              }
            }, 0)
          }
        },
        /**
		 * Triggered on <input> keypress.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyPress: function (e) {
          if (this.isLocked)
            return e && e.preventDefault();
          var character = String.fromCharCode(e.keyCode || e.which);
          if (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {
            this.createItem();
            e.preventDefault();
            return false
          }
        },
        /**
		 * Triggered on <input> keydown.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyDown: function (e) {
          var isInput = e.target === this.$control_input[0];
          var self = this;
          if (self.isLocked) {
            if (e.keyCode !== KEY_TAB) {
              e.preventDefault()
            }
            return
          }
          switch (e.keyCode) {
          case KEY_A:
            if (self.isCmdDown) {
              self.selectAll();
              return
            }
            break;
          case KEY_ESC:
            if (self.isOpen) {
              e.preventDefault();
              e.stopPropagation();
              self.close()
            }
            return;
          case KEY_N:
            if (!e.ctrlKey || e.altKey)
              break;
          case KEY_DOWN:
            if (!self.isOpen && self.hasOptions) {
              self.open()
            } else if (self.$activeOption) {
              self.ignoreHover = true;
              var $next = self.getAdjacentOption(self.$activeOption, 1);
              if ($next.length)
                self.setActiveOption($next, true, true)
            }
            e.preventDefault();
            return;
          case KEY_P:
            if (!e.ctrlKey || e.altKey)
              break;
          case KEY_UP:
            if (self.$activeOption) {
              self.ignoreHover = true;
              var $prev = self.getAdjacentOption(self.$activeOption, -1);
              if ($prev.length)
                self.setActiveOption($prev, true, true)
            }
            e.preventDefault();
            return;
          case KEY_RETURN:
            if (self.isOpen && self.$activeOption) {
              self.onOptionSelect({ currentTarget: self.$activeOption });
              e.preventDefault()
            }
            return;
          case KEY_LEFT:
            self.advanceSelection(-1, e);
            return;
          case KEY_RIGHT:
            self.advanceSelection(1, e);
            return;
          case KEY_TAB:
            if (self.settings.selectOnTab && self.isOpen && self.$activeOption) {
              self.onOptionSelect({ currentTarget: self.$activeOption });
              // Default behaviour is to jump to the next field, we only want this
              // if the current field doesn't accept any more entries
              if (!self.isFull()) {
                e.preventDefault()
              }
            }
            if (self.settings.create && self.createItem()) {
              e.preventDefault()
            }
            return;
          case KEY_BACKSPACE:
          case KEY_DELETE:
            self.deleteSelection(e);
            return
          }
          if ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {
            e.preventDefault();
            return
          }
        },
        /**
		 * Triggered on <input> keyup.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyUp: function (e) {
          var self = this;
          if (self.isLocked)
            return e && e.preventDefault();
          var value = self.$control_input.val() || '';
          if (self.lastValue !== value) {
            self.lastValue = value;
            self.onSearchChange(value);
            self.refreshOptions();
            self.trigger('type', value)
          }
        },
        /**
		 * Invokes the user-provide option provider / loader.
		 *
		 * Note: this function is debounced in the Selectize
		 * constructor (by `settings.loadThrottle` milliseconds)
		 *
		 * @param {string} value
		 */
        onSearchChange: function (value) {
          var self = this;
          var fn = self.settings.load;
          if (!fn)
            return;
          if (self.loadedSearches.hasOwnProperty(value))
            return;
          self.loadedSearches[value] = true;
          self.load(function (callback) {
            fn.apply(self, [
              value,
              callback
            ])
          })
        },
        /**
		 * Triggered on <input> focus.
		 *
		 * @param {object} e (optional)
		 * @returns {boolean}
		 */
        onFocus: function (e) {
          var self = this;
          var wasFocused = self.isFocused;
          if (self.isDisabled) {
            self.blur();
            e && e.preventDefault();
            return false
          }
          if (self.ignoreFocus)
            return;
          self.isFocused = true;
          if (self.settings.preload === 'focus')
            self.onSearchChange('');
          if (!wasFocused)
            self.trigger('focus');
          if (!self.$activeItems.length) {
            self.showInput();
            self.setActiveItem(null);
            self.refreshOptions(!!self.settings.openOnFocus)
          }
          self.refreshState()
        },
        /**
		 * Triggered on <input> blur.
		 *
		 * @param {object} e
		 * @param {Element} dest
		 */
        onBlur: function (e, dest) {
          var self = this;
          if (!self.isFocused)
            return;
          self.isFocused = false;
          if (self.ignoreFocus) {
            return
          } else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {
            // necessary to prevent IE closing the dropdown when the scrollbar is clicked
            self.ignoreBlur = true;
            self.onFocus(e);
            return
          }
          var deactivate = function () {
            self.close();
            self.setTextboxValue('');
            self.setActiveItem(null);
            self.setActiveOption(null);
            self.setCaret(self.items.length);
            self.refreshState();
            // IE11 bug: element still marked as active
            dest && dest.focus && dest.focus();
            self.ignoreFocus = false;
            self.trigger('blur')
          };
          self.ignoreFocus = true;
          if (self.settings.create && self.settings.createOnBlur) {
            self.createItem(null, false, deactivate)
          } else {
            deactivate()
          }
        },
        /**
		 * Triggered when the user rolls over
		 * an option in the autocomplete dropdown menu.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onOptionHover: function (e) {
          if (this.ignoreHover)
            return;
          this.setActiveOption(e.currentTarget, false)
        },
        /**
		 * Triggered when the user clicks on an option
		 * in the autocomplete dropdown menu.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onOptionSelect: function (e) {
          var value, $target, $option, self = this;
          if (e.preventDefault) {
            e.preventDefault();
            e.stopPropagation()
          }
          $target = $(e.currentTarget);
          if ($target.hasClass('create')) {
            self.createItem(null, function () {
              if (self.settings.closeAfterSelect) {
                self.close()
              }
            })
          } else {
            value = $target.attr('data-value');
            if (typeof value !== 'undefined') {
              self.lastQuery = null;
              self.setTextboxValue('');
              self.addItem(value);
              if (self.settings.closeAfterSelect) {
                self.close()
              } else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {
                self.setActiveOption(self.getOption(value))
              }
            }
          }
        },
        /**
		 * Triggered when the user clicks on an item
		 * that has been selected.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onItemSelect: function (e) {
          var self = this;
          if (self.isLocked)
            return;
          if (self.settings.mode === 'multi') {
            e.preventDefault();
            self.setActiveItem(e.currentTarget, e)
          }
        },
        /**
		 * Invokes the provided method that provides
		 * results to a callback---which are then added
		 * as options to the control.
		 *
		 * @param {function} fn
		 */
        load: function (fn) {
          var self = this;
          var $wrapper = self.$wrapper.addClass(self.settings.loadingClass);
          self.loading++;
          fn.apply(self, [function (results) {
              self.loading = Math.max(self.loading - 1, 0);
              if (results && results.length) {
                self.addOption(results);
                self.refreshOptions(self.isFocused && !self.isInputHidden)
              }
              if (!self.loading) {
                $wrapper.removeClass(self.settings.loadingClass)
              }
              self.trigger('load', results)
            }])
        },
        /**
		 * Sets the input field of the control to the specified value.
		 *
		 * @param {string} value
		 */
        setTextboxValue: function (value) {
          var $input = this.$control_input;
          var changed = $input.val() !== value;
          if (changed) {
            $input.val(value).triggerHandler('update');
            this.lastValue = value
          }
        },
        /**
		 * Returns the value of the control. If multiple items
		 * can be selected (e.g. <select multiple>), this returns
		 * an array. If only one item can be selected, this
		 * returns a string.
		 *
		 * @returns {mixed}
		 */
        getValue: function () {
          if (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {
            return this.items
          } else {
            return this.items.join(this.settings.delimiter)
          }
        },
        /**
		 * Resets the selected items to the given value.
		 *
		 * @param {mixed} value
		 */
        setValue: function (value, silent) {
          var events = silent ? [] : ['change'];
          debounce_events(this, events, function () {
            this.clear(silent);
            this.addItems(value, silent)
          })
        },
        /**
		 * Sets the selected item.
		 *
		 * @param {object} $item
		 * @param {object} e (optional)
		 */
        setActiveItem: function ($item, e) {
          var self = this;
          var eventName;
          var i, idx, begin, end, item, swap;
          var $last;
          if (self.settings.mode === 'single')
            return;
          $item = $($item);
          // clear the active selection
          if (!$item.length) {
            $(self.$activeItems).removeClass('active');
            self.$activeItems = [];
            if (self.isFocused) {
              self.showInput()
            }
            return
          }
          // modify selection
          eventName = e && e.type.toLowerCase();
          if (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {
            $last = self.$control.children('.active:last');
            begin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);
            end = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);
            if (begin > end) {
              swap = begin;
              begin = end;
              end = swap
            }
            for (i = begin; i <= end; i++) {
              item = self.$control[0].childNodes[i];
              if (self.$activeItems.indexOf(item) === -1) {
                $(item).addClass('active');
                self.$activeItems.push(item)
              }
            }
            e.preventDefault()
          } else if (eventName === 'mousedown' && self.isCtrlDown || eventName === 'keydown' && this.isShiftDown) {
            if ($item.hasClass('active')) {
              idx = self.$activeItems.indexOf($item[0]);
              self.$activeItems.splice(idx, 1);
              $item.removeClass('active')
            } else {
              self.$activeItems.push($item.addClass('active')[0])
            }
          } else {
            $(self.$activeItems).removeClass('active');
            self.$activeItems = [$item.addClass('active')[0]]
          }
          // ensure control has focus
          self.hideInput();
          if (!this.isFocused) {
            self.focus()
          }
        },
        /**
		 * Sets the selected item in the dropdown menu
		 * of available options.
		 *
		 * @param {object} $object
		 * @param {boolean} scroll
		 * @param {boolean} animate
		 */
        setActiveOption: function ($option, scroll, animate) {
          var height_menu, height_item, y;
          var scroll_top, scroll_bottom;
          var self = this;
          if (self.$activeOption)
            self.$activeOption.removeClass('active');
          self.$activeOption = null;
          $option = $($option);
          if (!$option.length)
            return;
          self.$activeOption = $option.addClass('active');
          if (scroll || !isset(scroll)) {
            height_menu = self.$dropdown_content.height();
            height_item = self.$activeOption.outerHeight(true);
            scroll = self.$dropdown_content.scrollTop() || 0;
            y = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;
            scroll_top = y;
            scroll_bottom = y - height_menu + height_item;
            if (y + height_item > height_menu + scroll) {
              self.$dropdown_content.stop().animate({ scrollTop: scroll_bottom }, animate ? self.settings.scrollDuration : 0)
            } else if (y < scroll) {
              self.$dropdown_content.stop().animate({ scrollTop: scroll_top }, animate ? self.settings.scrollDuration : 0)
            }
          }
        },
        /**
		 * Selects all items (CTRL + A).
		 */
        selectAll: function () {
          var self = this;
          if (self.settings.mode === 'single')
            return;
          self.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));
          if (self.$activeItems.length) {
            self.hideInput();
            self.close()
          }
          self.focus()
        },
        /**
		 * Hides the input element out of view, while
		 * retaining its focus.
		 */
        hideInput: function () {
          var self = this;
          self.setTextboxValue('');
          self.$control_input.css({
            opacity: 0,
            position: 'absolute',
            left: self.rtl ? 10000 : -10000
          });
          self.isInputHidden = true
        },
        /**
		 * Restores input visibility.
		 */
        showInput: function () {
          this.$control_input.css({
            opacity: 1,
            position: 'relative',
            left: 0
          });
          this.isInputHidden = false
        },
        /**
		 * Gives the control focus.
		 */
        focus: function () {
          var self = this;
          if (self.isDisabled)
            return;
          self.ignoreFocus = true;
          self.$control_input[0].focus();
          window.setTimeout(function () {
            self.ignoreFocus = false;
            self.onFocus()
          }, 0)
        },
        /**
		 * Forces the control out of focus.
		 *
		 * @param {Element} dest
		 */
        blur: function (dest) {
          this.$control_input[0].blur();
          this.onBlur(null, dest)
        },
        /**
		 * Returns a function that scores an object
		 * to show how good of a match it is to the
		 * provided query.
		 *
		 * @param {string} query
		 * @param {object} options
		 * @return {function}
		 */
        getScoreFunction: function (query) {
          return this.sifter.getScoreFunction(query, this.getSearchOptions())
        },
        /**
		 * Returns search options for sifter (the system
		 * for scoring and sorting results).
		 *
		 * @see https://github.com/brianreavis/sifter.js
		 * @return {object}
		 */
        getSearchOptions: function () {
          var settings = this.settings;
          var sort = settings.sortField;
          if (typeof sort === 'string') {
            sort = [{ field: sort }]
          }
          return {
            fields: settings.searchField,
            conjunction: settings.searchConjunction,
            sort: sort
          }
        },
        /**
		 * Searches through available options and returns
		 * a sorted array of matches.
		 *
		 * Returns an object containing:
		 *
		 *   - query {string}
		 *   - tokens {array}
		 *   - total {int}
		 *   - items {array}
		 *
		 * @param {string} query
		 * @returns {object}
		 */
        search: function (query) {
          var i, value, score, result, calculateScore;
          var self = this;
          var settings = self.settings;
          var options = this.getSearchOptions();
          // validate user-provided result scoring function
          if (settings.score) {
            calculateScore = self.settings.score.apply(this, [query]);
            if (typeof calculateScore !== 'function') {
              throw new Error('Selectize "score" setting must be a function that returns a function')
            }
          }
          // perform search
          if (query !== self.lastQuery) {
            self.lastQuery = query;
            result = self.sifter.search(query, $.extend(options, { score: calculateScore }));
            self.currentResults = result
          } else {
            result = $.extend(true, {}, self.currentResults)
          }
          // filter out selected items
          if (settings.hideSelected) {
            for (i = result.items.length - 1; i >= 0; i--) {
              if (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {
                result.items.splice(i, 1)
              }
            }
          }
          return result
        },
        /**
		 * Refreshes the list of available options shown
		 * in the autocomplete dropdown menu.
		 *
		 * @param {boolean} triggerDropdown
		 */
        refreshOptions: function (triggerDropdown) {
          var i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;
          var $active, $active_before, $create;
          if (typeof triggerDropdown === 'undefined') {
            triggerDropdown = true
          }
          var self = this;
          var query = $.trim(self.$control_input.val());
          var results = self.search(query);
          var $dropdown_content = self.$dropdown_content;
          var active_before = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));
          // build markup
          n = results.items.length;
          if (typeof self.settings.maxOptions === 'number') {
            n = Math.min(n, self.settings.maxOptions)
          }
          // render and group available options individually
          groups = {};
          groups_order = [];
          for (i = 0; i < n; i++) {
            option = self.options[results.items[i].id];
            option_html = self.render('option', option);
            optgroup = option[self.settings.optgroupField] || '';
            optgroups = $.isArray(optgroup) ? optgroup : [optgroup];
            for (j = 0, k = optgroups && optgroups.length; j < k; j++) {
              optgroup = optgroups[j];
              if (!self.optgroups.hasOwnProperty(optgroup)) {
                optgroup = ''
              }
              if (!groups.hasOwnProperty(optgroup)) {
                groups[optgroup] = document.createDocumentFragment();
                groups_order.push(optgroup)
              }
              groups[optgroup].appendChild(option_html)
            }
          }
          // sort optgroups
          if (this.settings.lockOptgroupOrder) {
            groups_order.sort(function (a, b) {
              var a_order = self.optgroups[a].$order || 0;
              var b_order = self.optgroups[b].$order || 0;
              return a_order - b_order
            })
          }
          // render optgroup headers & join groups
          html = document.createDocumentFragment();
          for (i = 0, n = groups_order.length; i < n; i++) {
            optgroup = groups_order[i];
            if (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].childNodes.length) {
              // render the optgroup header and options within it,
              // then pass it to the wrapper template
              html_children = document.createDocumentFragment();
              html_children.appendChild(self.render('optgroup_header', self.optgroups[optgroup]));
              html_children.appendChild(groups[optgroup]);
              html.appendChild(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {
                html: domToString(html_children),
                dom: html_children
              })))
            } else {
              html.appendChild(groups[optgroup])
            }
          }
          $dropdown_content.html(html);
          // highlight matching terms inline
          if (self.settings.highlight && results.query.length && results.tokens.length) {
            $dropdown_content.removeHighlight();
            for (i = 0, n = results.tokens.length; i < n; i++) {
              highlight($dropdown_content, results.tokens[i].regex)
            }
          }
          // add "selected" class to selected options
          if (!self.settings.hideSelected) {
            for (i = 0, n = self.items.length; i < n; i++) {
              self.getOption(self.items[i]).addClass('selected')
            }
          }
          // add create option
          has_create_option = self.canCreate(query);
          if (has_create_option) {
            $dropdown_content.prepend(self.render('option_create', { input: query }));
            $create = $($dropdown_content[0].childNodes[0])
          }
          // activate
          self.hasOptions = results.items.length > 0 || has_create_option;
          if (self.hasOptions) {
            if (results.items.length > 0) {
              $active_before = active_before && self.getOption(active_before);
              if ($active_before && $active_before.length) {
                $active = $active_before
              } else if (self.settings.mode === 'single' && self.items.length) {
                $active = self.getOption(self.items[0])
              }
              if (!$active || !$active.length) {
                if ($create && !self.settings.addPrecedence) {
                  $active = self.getAdjacentOption($create, 1)
                } else {
                  $active = $dropdown_content.find('[data-selectable]:first')
                }
              }
            } else {
              $active = $create
            }
            self.setActiveOption($active);
            if (triggerDropdown && !self.isOpen) {
              self.open()
            }
          } else {
            self.setActiveOption(null);
            if (triggerDropdown && self.isOpen) {
              self.close()
            }
          }
        },
        /**
		 * Adds an available option. If it already exists,
		 * nothing will happen. Note: this does not refresh
		 * the options list dropdown (use `refreshOptions`
		 * for that).
		 *
		 * Usage:
		 *
		 *   this.addOption(data)
		 *
		 * @param {object|array} data
		 */
        addOption: function (data) {
          var i, n, value, self = this;
          if ($.isArray(data)) {
            for (i = 0, n = data.length; i < n; i++) {
              self.addOption(data[i])
            }
            return
          }
          if (value = self.registerOption(data)) {
            self.userOptions[value] = true;
            self.lastQuery = null;
            self.trigger('option_add', value, data)
          }
        },
        /**
		 * Registers an option to the pool of options.
		 *
		 * @param {object} data
		 * @return {boolean|string}
		 */
        registerOption: function (data) {
          var key = hash_key(data[this.settings.valueField]);
          if (typeof key === 'undefined' || key === null || this.options.hasOwnProperty(key))
            return false;
          data.$order = data.$order || ++this.order;
          this.options[key] = data;
          return key
        },
        /**
		 * Registers an option group to the pool of option groups.
		 *
		 * @param {object} data
		 * @return {boolean|string}
		 */
        registerOptionGroup: function (data) {
          var key = hash_key(data[this.settings.optgroupValueField]);
          if (!key)
            return false;
          data.$order = data.$order || ++this.order;
          this.optgroups[key] = data;
          return key
        },
        /**
		 * Registers a new optgroup for options
		 * to be bucketed into.
		 *
		 * @param {string} id
		 * @param {object} data
		 */
        addOptionGroup: function (id, data) {
          data[this.settings.optgroupValueField] = id;
          if (id = this.registerOptionGroup(data)) {
            this.trigger('optgroup_add', id, data)
          }
        },
        /**
		 * Removes an existing option group.
		 *
		 * @param {string} id
		 */
        removeOptionGroup: function (id) {
          if (this.optgroups.hasOwnProperty(id)) {
            delete this.optgroups[id];
            this.renderCache = {};
            this.trigger('optgroup_remove', id)
          }
        },
        /**
		 * Clears all existing option groups.
		 */
        clearOptionGroups: function () {
          this.optgroups = {};
          this.renderCache = {};
          this.trigger('optgroup_clear')
        },
        /**
		 * Updates an option available for selection. If
		 * it is visible in the selected items or options
		 * dropdown, it will be re-rendered automatically.
		 *
		 * @param {string} value
		 * @param {object} data
		 */
        updateOption: function (value, data) {
          var self = this;
          var $item, $item_new;
          var value_new, index_item, cache_items, cache_options, order_old;
          value = hash_key(value);
          value_new = hash_key(data[self.settings.valueField]);
          // sanity checks
          if (value === null)
            return;
          if (!self.options.hasOwnProperty(value))
            return;
          if (typeof value_new !== 'string')
            throw new Error('Value must be set in option data');
          order_old = self.options[value].$order;
          // update references
          if (value_new !== value) {
            delete self.options[value];
            index_item = self.items.indexOf(value);
            if (index_item !== -1) {
              self.items.splice(index_item, 1, value_new)
            }
          }
          data.$order = data.$order || order_old;
          self.options[value_new] = data;
          // invalidate render cache
          cache_items = self.renderCache['item'];
          cache_options = self.renderCache['option'];
          if (cache_items) {
            delete cache_items[value];
            delete cache_items[value_new]
          }
          if (cache_options) {
            delete cache_options[value];
            delete cache_options[value_new]
          }
          // update the item if it's selected
          if (self.items.indexOf(value_new) !== -1) {
            $item = self.getItem(value);
            $item_new = $(self.render('item', data));
            if ($item.hasClass('active'))
              $item_new.addClass('active');
            $item.replaceWith($item_new)
          }
          // invalidate last query because we might have updated the sortField
          self.lastQuery = null;
          // update dropdown contents
          if (self.isOpen) {
            self.refreshOptions(false)
          }
        },
        /**
		 * Removes a single option.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        removeOption: function (value, silent) {
          var self = this;
          value = hash_key(value);
          var cache_items = self.renderCache['item'];
          var cache_options = self.renderCache['option'];
          if (cache_items)
            delete cache_items[value];
          if (cache_options)
            delete cache_options[value];
          delete self.userOptions[value];
          delete self.options[value];
          self.lastQuery = null;
          self.trigger('option_remove', value);
          self.removeItem(value, silent)
        },
        /**
		 * Clears all options.
		 */
        clearOptions: function () {
          var self = this;
          self.loadedSearches = {};
          self.userOptions = {};
          self.renderCache = {};
          self.options = self.sifter.items = {};
          self.lastQuery = null;
          self.trigger('option_clear');
          self.clear()
        },
        /**
		 * Returns the jQuery element of the option
		 * matching the given value.
		 *
		 * @param {string} value
		 * @returns {object}
		 */
        getOption: function (value) {
          return this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'))
        },
        /**
		 * Returns the jQuery element of the next or
		 * previous selectable option.
		 *
		 * @param {object} $option
		 * @param {int} direction  can be 1 for next or -1 for previous
		 * @return {object}
		 */
        getAdjacentOption: function ($option, direction) {
          var $options = this.$dropdown.find('[data-selectable]');
          var index = $options.index($option) + direction;
          return index >= 0 && index < $options.length ? $options.eq(index) : $()
        },
        /**
		 * Finds the first element with a "data-value" attribute
		 * that matches the given value.
		 *
		 * @param {mixed} value
		 * @param {object} $els
		 * @return {object}
		 */
        getElementWithValue: function (value, $els) {
          value = hash_key(value);
          if (typeof value !== 'undefined' && value !== null) {
            for (var i = 0, n = $els.length; i < n; i++) {
              if ($els[i].getAttribute('data-value') === value) {
                return $($els[i])
              }
            }
          }
          return $()
        },
        /**
		 * Returns the jQuery element of the item
		 * matching the given value.
		 *
		 * @param {string} value
		 * @returns {object}
		 */
        getItem: function (value) {
          return this.getElementWithValue(value, this.$control.children())
        },
        /**
		 * "Selects" multiple items at once. Adds them to the list
		 * at the current caret position.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        addItems: function (values, silent) {
          var items = $.isArray(values) ? values : [values];
          for (var i = 0, n = items.length; i < n; i++) {
            this.isPending = i < n - 1;
            this.addItem(items[i], silent)
          }
        },
        /**
		 * "Selects" an item. Adds it to the list
		 * at the current caret position.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        addItem: function (value, silent) {
          var events = silent ? [] : ['change'];
          debounce_events(this, events, function () {
            var $item, $option, $options;
            var self = this;
            var inputMode = self.settings.mode;
            var i, active, value_next, wasFull;
            value = hash_key(value);
            if (self.items.indexOf(value) !== -1) {
              if (inputMode === 'single')
                self.close();
              return
            }
            if (!self.options.hasOwnProperty(value))
              return;
            if (inputMode === 'single')
              self.clear(silent);
            if (inputMode === 'multi' && self.isFull())
              return;
            $item = $(self.render('item', self.options[value]));
            wasFull = self.isFull();
            self.items.splice(self.caretPos, 0, value);
            self.insertAtCaret($item);
            if (!self.isPending || !wasFull && self.isFull()) {
              self.refreshState()
            }
            if (self.isSetup) {
              $options = self.$dropdown_content.find('[data-selectable]');
              // update menu / remove the option (if this is not one item being added as part of series)
              if (!self.isPending) {
                $option = self.getOption(value);
                value_next = self.getAdjacentOption($option, 1).attr('data-value');
                self.refreshOptions(self.isFocused && inputMode !== 'single');
                if (value_next) {
                  self.setActiveOption(self.getOption(value_next))
                }
              }
              // hide the menu if the maximum number of items have been selected or no options are left
              if (!$options.length || self.isFull()) {
                self.close()
              } else {
                self.positionDropdown()
              }
              self.updatePlaceholder();
              self.trigger('item_add', value, $item);
              self.updateOriginalInput({ silent: silent })
            }
          })
        },
        /**
		 * Removes the selected item matching
		 * the provided value.
		 *
		 * @param {string} value
		 */
        removeItem: function (value, silent) {
          var self = this;
          var $item, i, idx;
          $item = value instanceof $ ? value : self.getItem(value);
          value = hash_key($item.attr('data-value'));
          i = self.items.indexOf(value);
          if (i !== -1) {
            $item.remove();
            if ($item.hasClass('active')) {
              idx = self.$activeItems.indexOf($item[0]);
              self.$activeItems.splice(idx, 1)
            }
            self.items.splice(i, 1);
            self.lastQuery = null;
            if (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {
              self.removeOption(value, silent)
            }
            if (i < self.caretPos) {
              self.setCaret(self.caretPos - 1)
            }
            self.refreshState();
            self.updatePlaceholder();
            self.updateOriginalInput({ silent: silent });
            self.positionDropdown();
            self.trigger('item_remove', value, $item)
          }
        },
        /**
		 * Invokes the `create` method provided in the
		 * selectize options that should provide the data
		 * for the new item, given the user input.
		 *
		 * Once this completes, it will be added
		 * to the item list.
		 *
		 * @param {string} value
		 * @param {boolean} [triggerDropdown]
		 * @param {function} [callback]
		 * @return {boolean}
		 */
        createItem: function (input, triggerDropdown) {
          var self = this;
          var caret = self.caretPos;
          input = input || $.trim(self.$control_input.val() || '');
          var callback = arguments[arguments.length - 1];
          if (typeof callback !== 'function')
            callback = function () {
            };
          if (typeof triggerDropdown !== 'boolean') {
            triggerDropdown = true
          }
          if (!self.canCreate(input)) {
            callback();
            return false
          }
          self.lock();
          var setup = typeof self.settings.create === 'function' ? this.settings.create : function (input) {
            var data = {};
            data[self.settings.labelField] = input;
            data[self.settings.valueField] = input;
            return data
          };
          var create = once(function (data) {
            self.unlock();
            if (!data || typeof data !== 'object')
              return callback();
            var value = hash_key(data[self.settings.valueField]);
            if (typeof value !== 'string')
              return callback();
            self.setTextboxValue('');
            self.addOption(data);
            self.setCaret(caret);
            self.addItem(value);
            self.refreshOptions(triggerDropdown && self.settings.mode !== 'single');
            callback(data)
          });
          var output = setup.apply(this, [
            input,
            create
          ]);
          if (typeof output !== 'undefined') {
            create(output)
          }
          return true
        },
        /**
		 * Re-renders the selected item lists.
		 */
        refreshItems: function () {
          this.lastQuery = null;
          if (this.isSetup) {
            this.addItem(this.items)
          }
          this.refreshState();
          this.updateOriginalInput()
        },
        /**
		 * Updates all state-dependent attributes
		 * and CSS classes.
		 */
        refreshState: function () {
          this.refreshValidityState();
          this.refreshClasses()
        },
        /**
		 * Update the `required` attribute of both input and control input.
		 *
		 * The `required` property needs to be activated on the control input
		 * for the error to be displayed at the right place. `required` also
		 * needs to be temporarily deactivated on the input since the input is
		 * hidden and can't show errors.
		 */
        refreshValidityState: function () {
          if (!this.isRequired)
            return false;
          var invalid = !this.items.length;
          this.isInvalid = invalid;
          this.$control_input.prop('required', invalid);
          this.$input.prop('required', !invalid)
        },
        /**
		 * Updates all state-dependent CSS classes.
		 */
        refreshClasses: function () {
          var self = this;
          var isFull = self.isFull();
          var isLocked = self.isLocked;
          self.$wrapper.toggleClass('rtl', self.rtl);
          self.$control.toggleClass('focus', self.isFocused).toggleClass('disabled', self.isDisabled).toggleClass('required', self.isRequired).toggleClass('invalid', self.isInvalid).toggleClass('locked', isLocked).toggleClass('full', isFull).toggleClass('not-full', !isFull).toggleClass('input-active', self.isFocused && !self.isInputHidden).toggleClass('dropdown-active', self.isOpen).toggleClass('has-options', !$.isEmptyObject(self.options)).toggleClass('has-items', self.items.length > 0);
          self.$control_input.data('grow', !isFull && !isLocked)
        },
        /**
		 * Determines whether or not more items can be added
		 * to the control without exceeding the user-defined maximum.
		 *
		 * @returns {boolean}
		 */
        isFull: function () {
          return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems
        },
        /**
		 * Refreshes the original <select> or <input>
		 * element to reflect the current state.
		 */
        updateOriginalInput: function (opts) {
          var i, n, options, label, self = this;
          opts = opts || {};
          if (self.tagType === TAG_SELECT) {
            options = [];
            for (i = 0, n = self.items.length; i < n; i++) {
              label = self.options[self.items[i]][self.settings.labelField] || '';
              options.push('<option value="' + escape_html(self.items[i]) + '" selected="selected">' + escape_html(label) + '</option>')
            }
            if (!options.length && !this.$input.attr('multiple')) {
              options.push('<option value="" selected="selected"></option>')
            }
            self.$input.html(options.join(''))
          } else {
            self.$input.val(self.getValue());
            self.$input.attr('value', self.$input.val())
          }
          if (self.isSetup) {
            if (!opts.silent) {
              self.trigger('change', self.$input.val())
            }
          }
        },
        /**
		 * Shows/hide the input placeholder depending
		 * on if there items in the list already.
		 */
        updatePlaceholder: function () {
          if (!this.settings.placeholder)
            return;
          var $input = this.$control_input;
          if (this.items.length) {
            $input.removeAttr('placeholder')
          } else {
            $input.attr('placeholder', this.settings.placeholder)
          }
          $input.triggerHandler('update', { force: true })
        },
        /**
		 * Shows the autocomplete dropdown containing
		 * the available options.
		 */
        open: function () {
          var self = this;
          if (self.isLocked || self.isOpen || self.settings.mode === 'multi' && self.isFull())
            return;
          self.focus();
          self.isOpen = true;
          self.refreshState();
          self.$dropdown.css({
            visibility: 'hidden',
            display: 'block'
          });
          self.positionDropdown();
          self.$dropdown.css({ visibility: 'visible' });
          self.trigger('dropdown_open', self.$dropdown)
        },
        /**
		 * Closes the autocomplete dropdown menu.
		 */
        close: function () {
          var self = this;
          var trigger = self.isOpen;
          if (self.settings.mode === 'single' && self.items.length) {
            self.hideInput();
            self.$control_input.blur()  // close keyboard on iOS
          }
          self.isOpen = false;
          self.$dropdown.hide();
          self.setActiveOption(null);
          self.refreshState();
          if (trigger)
            self.trigger('dropdown_close', self.$dropdown)
        },
        /**
		 * Calculates and applies the appropriate
		 * position of the dropdown.
		 */
        positionDropdown: function () {
          var $control = this.$control;
          var offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();
          offset.top += $control.outerHeight(true);
          this.$dropdown.css({
            width: $control.outerWidth(),
            top: offset.top,
            left: offset.left
          })
        },
        /**
		 * Resets / clears all selected items
		 * from the control.
		 *
		 * @param {boolean} silent
		 */
        clear: function (silent) {
          var self = this;
          if (!self.items.length)
            return;
          self.$control.children(':not(input)').remove();
          self.items = [];
          self.lastQuery = null;
          self.setCaret(0);
          self.setActiveItem(null);
          self.updatePlaceholder();
          self.updateOriginalInput({ silent: silent });
          self.refreshState();
          self.showInput();
          self.trigger('clear')
        },
        /**
		 * A helper method for inserting an element
		 * at the current caret position.
		 *
		 * @param {object} $el
		 */
        insertAtCaret: function ($el) {
          var caret = Math.min(this.caretPos, this.items.length);
          if (caret === 0) {
            this.$control.prepend($el)
          } else {
            $(this.$control[0].childNodes[caret]).before($el)
          }
          this.setCaret(caret + 1)
        },
        /**
		 * Removes the current selected item(s).
		 *
		 * @param {object} e (optional)
		 * @returns {boolean}
		 */
        deleteSelection: function (e) {
          var i, n, direction, selection, values, caret, option_select, $option_select, $tail;
          var self = this;
          direction = e && e.keyCode === KEY_BACKSPACE ? -1 : 1;
          selection = getSelection(self.$control_input[0]);
          if (self.$activeOption && !self.settings.hideSelected) {
            option_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value')
          }
          // determine items that will be removed
          values = [];
          if (self.$activeItems.length) {
            $tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));
            caret = self.$control.children(':not(input)').index($tail);
            if (direction > 0) {
              caret++
            }
            for (i = 0, n = self.$activeItems.length; i < n; i++) {
              values.push($(self.$activeItems[i]).attr('data-value'))
            }
            if (e) {
              e.preventDefault();
              e.stopPropagation()
            }
          } else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {
            if (direction < 0 && selection.start === 0 && selection.length === 0) {
              values.push(self.items[self.caretPos - 1])
            } else if (direction > 0 && selection.start === self.$control_input.val().length) {
              values.push(self.items[self.caretPos])
            }
          }
          // allow the callback to abort
          if (!values.length || typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false) {
            return false
          }
          // perform removal
          if (typeof caret !== 'undefined') {
            self.setCaret(caret)
          }
          while (values.length) {
            self.removeItem(values.pop())
          }
          self.showInput();
          self.positionDropdown();
          self.refreshOptions(true);
          // select previous option
          if (option_select) {
            $option_select = self.getOption(option_select);
            if ($option_select.length) {
              self.setActiveOption($option_select)
            }
          }
          return true
        },
        /**
		 * Selects the previous / next item (depending
		 * on the `direction` argument).
		 *
		 * > 0 - right
		 * < 0 - left
		 *
		 * @param {int} direction
		 * @param {object} e (optional)
		 */
        advanceSelection: function (direction, e) {
          var tail, selection, idx, valueLength, cursorAtEdge, $tail;
          var self = this;
          if (direction === 0)
            return;
          if (self.rtl)
            direction *= -1;
          tail = direction > 0 ? 'last' : 'first';
          selection = getSelection(self.$control_input[0]);
          if (self.isFocused && !self.isInputHidden) {
            valueLength = self.$control_input.val().length;
            cursorAtEdge = direction < 0 ? selection.start === 0 && selection.length === 0 : selection.start === valueLength;
            if (cursorAtEdge && !valueLength) {
              self.advanceCaret(direction, e)
            }
          } else {
            $tail = self.$control.children('.active:' + tail);
            if ($tail.length) {
              idx = self.$control.children(':not(input)').index($tail);
              self.setActiveItem(null);
              self.setCaret(direction > 0 ? idx + 1 : idx)
            }
          }
        },
        /**
		 * Moves the caret left / right.
		 *
		 * @param {int} direction
		 * @param {object} e (optional)
		 */
        advanceCaret: function (direction, e) {
          var self = this, fn, $adj;
          if (direction === 0)
            return;
          fn = direction > 0 ? 'next' : 'prev';
          if (self.isShiftDown) {
            $adj = self.$control_input[fn]();
            if ($adj.length) {
              self.hideInput();
              self.setActiveItem($adj);
              e && e.preventDefault()
            }
          } else {
            self.setCaret(self.caretPos + direction)
          }
        },
        /**
		 * Moves the caret to the specified index.
		 *
		 * @param {int} i
		 */
        setCaret: function (i) {
          var self = this;
          if (self.settings.mode === 'single') {
            i = self.items.length
          } else {
            i = Math.max(0, Math.min(self.items.length, i))
          }
          if (!self.isPending) {
            // the input must be moved by leaving it in place and moving the
            // siblings, due to the fact that focus cannot be restored once lost
            // on mobile webkit devices
            var j, n, fn, $children, $child;
            $children = self.$control.children(':not(input)');
            for (j = 0, n = $children.length; j < n; j++) {
              $child = $($children[j]).detach();
              if (j < i) {
                self.$control_input.before($child)
              } else {
                self.$control.append($child)
              }
            }
          }
          self.caretPos = i
        },
        /**
		 * Disables user input on the control. Used while
		 * items are being asynchronously created.
		 */
        lock: function () {
          this.close();
          this.isLocked = true;
          this.refreshState()
        },
        /**
		 * Re-enables user input on the control.
		 */
        unlock: function () {
          this.isLocked = false;
          this.refreshState()
        },
        /**
		 * Disables user input on the control completely.
		 * While disabled, it cannot receive focus.
		 */
        disable: function () {
          var self = this;
          self.$input.prop('disabled', true);
          self.$control_input.prop('disabled', true).prop('tabindex', -1);
          self.isDisabled = true;
          self.lock()
        },
        /**
		 * Enables the control so that it can respond
		 * to focus and user input.
		 */
        enable: function () {
          var self = this;
          self.$input.prop('disabled', false);
          self.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);
          self.isDisabled = false;
          self.unlock()
        },
        /**
		 * Completely destroys the control and
		 * unbinds all event listeners so that it can
		 * be garbage collected.
		 */
        destroy: function () {
          var self = this;
          var eventNS = self.eventNS;
          var revertSettings = self.revertSettings;
          self.trigger('destroy');
          self.off();
          self.$wrapper.remove();
          self.$dropdown.remove();
          self.$input.html('').append(revertSettings.$children).removeAttr('tabindex').removeClass('selectized').attr({ tabindex: revertSettings.tabindex }).show();
          self.$control_input.removeData('grow');
          self.$input.removeData('selectize');
          $(window).off(eventNS);
          $(document).off(eventNS);
          $(document.body).off(eventNS);
          delete self.$input[0].selectize
        },
        /**
		 * A helper method for rendering "item" and
		 * "option" templates, given the data.
		 *
		 * @param {string} templateName
		 * @param {object} data
		 * @returns {string}
		 */
        render: function (templateName, data) {
          var value, id, label;
          var html = '';
          var cache = false;
          var self = this;
          var regex_tag = /^[\t \r\n]*<([a-z][a-z0-9\-_]*(?:\:[a-z][a-z0-9\-_]*)?)/i;
          if (templateName === 'option' || templateName === 'item') {
            value = hash_key(data[self.settings.valueField]);
            cache = !!value
          }
          // pull markup from cache if it exists
          if (cache) {
            if (!isset(self.renderCache[templateName])) {
              self.renderCache[templateName] = {}
            }
            if (self.renderCache[templateName].hasOwnProperty(value)) {
              return self.renderCache[templateName][value]
            }
          }
          // render markup
          html = $(self.settings.render[templateName].apply(this, [
            data,
            escape_html
          ]));
          // add mandatory attributes
          if (templateName === 'option' || templateName === 'option_create') {
            html.attr('data-selectable', '')
          } else if (templateName === 'optgroup') {
            id = data[self.settings.optgroupValueField] || '';
            html.attr('data-group', id)
          }
          if (templateName === 'option' || templateName === 'item') {
            html.attr('data-value', value || '')
          }
          // update cache
          if (cache) {
            self.renderCache[templateName][value] = html[0]
          }
          return html[0]
        },
        /**
		 * Clears the render cache for a template. If
		 * no template is given, clears all render
		 * caches.
		 *
		 * @param {string} templateName
		 */
        clearCache: function (templateName) {
          var self = this;
          if (typeof templateName === 'undefined') {
            self.renderCache = {}
          } else {
            delete self.renderCache[templateName]
          }
        },
        /**
		 * Determines whether or not to display the
		 * create item prompt, given a user input.
		 *
		 * @param {string} input
		 * @return {boolean}
		 */
        canCreate: function (input) {
          var self = this;
          if (!self.settings.create)
            return false;
          var filter = self.settings.createFilter;
          return input.length && (typeof filter !== 'function' || filter.apply(self, [input])) && (typeof filter !== 'string' || new RegExp(filter).test(input)) && (!(filter instanceof RegExp) || filter.test(input))
        }
      });
      Selectize.count = 0;
      Selectize.defaults = {
        options: [],
        optgroups: [],
        plugins: [],
        delimiter: ',',
        splitOn: null,
        // regexp or string for splitting up values from a paste command
        persist: true,
        diacritics: true,
        create: false,
        createOnBlur: false,
        createFilter: null,
        highlight: true,
        openOnFocus: true,
        maxOptions: 1000,
        maxItems: null,
        hideSelected: null,
        addPrecedence: false,
        selectOnTab: false,
        preload: false,
        allowEmptyOption: false,
        closeAfterSelect: false,
        scrollDuration: 60,
        loadThrottle: 300,
        loadingClass: 'loading',
        dataAttr: 'data-data',
        optgroupField: 'optgroup',
        valueField: 'value',
        labelField: 'text',
        optgroupLabelField: 'label',
        optgroupValueField: 'value',
        lockOptgroupOrder: false,
        sortField: '$order',
        searchField: ['text'],
        searchConjunction: 'and',
        mode: null,
        wrapperClass: 'selectize-control',
        inputClass: 'selectize-input',
        dropdownClass: 'selectize-dropdown',
        dropdownContentClass: 'selectize-dropdown-content',
        dropdownParent: null,
        copyClassesToDropdown: true,
        /*
		load                 : null, // function(query, callback) { ... }
		score                : null, // function(search) { ... }
		onInitialize         : null, // function() { ... }
		onChange             : null, // function(value) { ... }
		onItemAdd            : null, // function(value, $item) { ... }
		onItemRemove         : null, // function(value) { ... }
		onClear              : null, // function() { ... }
		onOptionAdd          : null, // function(value, data) { ... }
		onOptionRemove       : null, // function(value) { ... }
		onOptionClear        : null, // function() { ... }
		onOptionGroupAdd     : null, // function(id, data) { ... }
		onOptionGroupRemove  : null, // function(id) { ... }
		onOptionGroupClear   : null, // function() { ... }
		onDropdownOpen       : null, // function($dropdown) { ... }
		onDropdownClose      : null, // function($dropdown) { ... }
		onType               : null, // function(str) { ... }
		onDelete             : null, // function(values) { ... }
		*/
        render: {}
      };
      $.fn.selectize = function (settings_user) {
        var defaults = $.fn.selectize.defaults;
        var settings = $.extend({}, defaults, settings_user);
        var attr_data = settings.dataAttr;
        var field_label = settings.labelField;
        var field_value = settings.valueField;
        var field_optgroup = settings.optgroupField;
        var field_optgroup_label = settings.optgroupLabelField;
        var field_optgroup_value = settings.optgroupValueField;
        /**
		 * Initializes selectize from a <input type="text"> element.
		 *
		 * @param {object} $input
		 * @param {object} settings_element
		 */
        var init_textbox = function ($input, settings_element) {
          var i, n, values, option;
          var data_raw = $input.attr(attr_data);
          if (!data_raw) {
            var value = $.trim($input.val() || '');
            if (!settings.allowEmptyOption && !value.length)
              return;
            values = value.split(settings.delimiter);
            for (i = 0, n = values.length; i < n; i++) {
              option = {};
              option[field_label] = values[i];
              option[field_value] = values[i];
              settings_element.options.push(option)
            }
            settings_element.items = values
          } else {
            settings_element.options = JSON.parse(data_raw);
            for (i = 0, n = settings_element.options.length; i < n; i++) {
              settings_element.items.push(settings_element.options[i][field_value])
            }
          }
        };
        /**
		 * Initializes selectize from a <select> element.
		 *
		 * @param {object} $input
		 * @param {object} settings_element
		 */
        var init_select = function ($input, settings_element) {
          var i, n, tagName, $children, order = 0;
          var options = settings_element.options;
          var optionsMap = {};
          var readData = function ($el) {
            var data = attr_data && $el.attr(attr_data);
            if (typeof data === 'string' && data.length) {
              return JSON.parse(data)
            }
            return null
          };
          var addOption = function ($option, group) {
            $option = $($option);
            var value = hash_key($option.val());
            if (!value && !settings.allowEmptyOption)
              return;
            // if the option already exists, it's probably been
            // duplicated in another optgroup. in this case, push
            // the current group to the "optgroup" property on the
            // existing option so that it's rendered in both places.
            if (optionsMap.hasOwnProperty(value)) {
              if (group) {
                var arr = optionsMap[value][field_optgroup];
                if (!arr) {
                  optionsMap[value][field_optgroup] = group
                } else if (!$.isArray(arr)) {
                  optionsMap[value][field_optgroup] = [
                    arr,
                    group
                  ]
                } else {
                  arr.push(group)
                }
              }
              return
            }
            var option = readData($option) || {};
            option[field_label] = option[field_label] || $option.text();
            option[field_value] = option[field_value] || value;
            option[field_optgroup] = option[field_optgroup] || group;
            optionsMap[value] = option;
            options.push(option);
            if ($option.is(':selected')) {
              settings_element.items.push(value)
            }
          };
          var addGroup = function ($optgroup) {
            var i, n, id, optgroup, $options;
            $optgroup = $($optgroup);
            id = $optgroup.attr('label');
            if (id) {
              optgroup = readData($optgroup) || {};
              optgroup[field_optgroup_label] = id;
              optgroup[field_optgroup_value] = id;
              settings_element.optgroups.push(optgroup)
            }
            $options = $('option', $optgroup);
            for (i = 0, n = $options.length; i < n; i++) {
              addOption($options[i], id)
            }
          };
          settings_element.maxItems = $input.attr('multiple') ? null : 1;
          $children = $input.children();
          for (i = 0, n = $children.length; i < n; i++) {
            tagName = $children[i].tagName.toLowerCase();
            if (tagName === 'optgroup') {
              addGroup($children[i])
            } else if (tagName === 'option') {
              addOption($children[i])
            }
          }
        };
        return this.each(function () {
          if (this.selectize)
            return;
          var instance;
          var $input = $(this);
          var tag_name = this.tagName.toLowerCase();
          var placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');
          if (!placeholder && !settings.allowEmptyOption) {
            placeholder = $input.children('option[value=""]').text()
          }
          var settings_element = {
            'placeholder': placeholder,
            'options': [],
            'optgroups': [],
            'items': []
          };
          if (tag_name === 'select') {
            init_select($input, settings_element)
          } else {
            init_textbox($input, settings_element)
          }
          instance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user))
        })
      };
      $.fn.selectize.defaults = Selectize.defaults;
      $.fn.selectize.support = { validity: SUPPORTS_VALIDITY_API };
      Selectize.define('drag_drop', function (options) {
        if (!$.fn.sortable)
          throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');
        if (this.settings.mode !== 'multi')
          return;
        var self = this;
        self.lock = function () {
          var original = self.lock;
          return function () {
            var sortable = self.$control.data('sortable');
            if (sortable)
              sortable.disable();
            return original.apply(self, arguments)
          }
        }();
        self.unlock = function () {
          var original = self.unlock;
          return function () {
            var sortable = self.$control.data('sortable');
            if (sortable)
              sortable.enable();
            return original.apply(self, arguments)
          }
        }();
        self.setup = function () {
          var original = self.setup;
          return function () {
            original.apply(this, arguments);
            var $control = self.$control.sortable({
              items: '[data-value]',
              forcePlaceholderSize: true,
              disabled: self.isLocked,
              start: function (e, ui) {
                ui.placeholder.css('width', ui.helper.css('width'));
                $control.css({ overflow: 'visible' })
              },
              stop: function () {
                $control.css({ overflow: 'hidden' });
                var active = self.$activeItems ? self.$activeItems.slice() : null;
                var values = [];
                $control.children('[data-value]').each(function () {
                  values.push($(this).attr('data-value'))
                });
                self.setValue(values);
                self.setActiveItem(active)
              }
            })
          }
        }()
      });
      Selectize.define('dropdown_header', function (options) {
        var self = this;
        options = $.extend({
          title: 'Untitled',
          headerClass: 'selectize-dropdown-header',
          titleRowClass: 'selectize-dropdown-header-title',
          labelClass: 'selectize-dropdown-header-label',
          closeClass: 'selectize-dropdown-header-close',
          html: function (data) {
            return '<div class="' + data.headerClass + '">' + '<div class="' + data.titleRowClass + '">' + '<span class="' + data.labelClass + '">' + data.title + '</span>' + '<a href="javascript:void(0)" class="' + data.closeClass + '">&times;</a>' + '</div>' + '</div>'
          }
        }, options);
        self.setup = function () {
          var original = self.setup;
          return function () {
            original.apply(self, arguments);
            self.$dropdown_header = $(options.html(options));
            self.$dropdown.prepend(self.$dropdown_header)
          }
        }()
      });
      Selectize.define('optgroup_columns', function (options) {
        var self = this;
        options = $.extend({
          equalizeWidth: true,
          equalizeHeight: true
        }, options);
        this.getAdjacentOption = function ($option, direction) {
          var $options = $option.closest('[data-group]').find('[data-selectable]');
          var index = $options.index($option) + direction;
          return index >= 0 && index < $options.length ? $options.eq(index) : $()
        };
        this.onKeyDown = function () {
          var original = self.onKeyDown;
          return function (e) {
            var index, $option, $options, $optgroup;
            if (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {
              self.ignoreHover = true;
              $optgroup = this.$activeOption.closest('[data-group]');
              index = $optgroup.find('[data-selectable]').index(this.$activeOption);
              if (e.keyCode === KEY_LEFT) {
                $optgroup = $optgroup.prev('[data-group]')
              } else {
                $optgroup = $optgroup.next('[data-group]')
              }
              $options = $optgroup.find('[data-selectable]');
              $option = $options.eq(Math.min($options.length - 1, index));
              if ($option.length) {
                this.setActiveOption($option)
              }
              return
            }
            return original.apply(this, arguments)
          }
        }();
        var getScrollbarWidth = function () {
          var div;
          var width = getScrollbarWidth.width;
          var doc = document;
          if (typeof width === 'undefined') {
            div = doc.createElement('div');
            div.innerHTML = '<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>';
            div = div.firstChild;
            doc.body.appendChild(div);
            width = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;
            doc.body.removeChild(div)
          }
          return width
        };
        var equalizeSizes = function () {
          var i, n, height_max, width, width_last, width_parent, $optgroups;
          $optgroups = $('[data-group]', self.$dropdown_content);
          n = $optgroups.length;
          if (!n || !self.$dropdown_content.width())
            return;
          if (options.equalizeHeight) {
            height_max = 0;
            for (i = 0; i < n; i++) {
              height_max = Math.max(height_max, $optgroups.eq(i).height())
            }
            $optgroups.css({ height: height_max })
          }
          if (options.equalizeWidth) {
            width_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();
            width = Math.round(width_parent / n);
            $optgroups.css({ width: width });
            if (n > 1) {
              width_last = width_parent - width * (n - 1);
              $optgroups.eq(n - 1).css({ width: width_last })
            }
          }
        };
        if (options.equalizeHeight || options.equalizeWidth) {
          hook.after(this, 'positionDropdown', equalizeSizes);
          hook.after(this, 'refreshOptions', equalizeSizes)
        }
      });
      Selectize.define('remove_button', function (options) {
        options = $.extend({
          label: '&times;',
          title: 'Remove',
          className: 'remove',
          append: true
        }, options);
        var singleClose = function (thisRef, options) {
          options.className = 'remove-single';
          var self = thisRef;
          var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
          /**
				 * Appends an element as a child (with raw HTML).
				 *
				 * @param {string} html_container
				 * @param {string} html_element
				 * @return {string}
				 */
          var append = function (html_container, html_element) {
            return html_container + html_element
          };
          thisRef.setup = function () {
            var original = self.setup;
            return function () {
              // override the item rendering method to add the button to each
              if (options.append) {
                var id = $(self.$input.context).attr('id');
                var selectizer = $('#' + id);
                var render_item = self.settings.render.item;
                self.settings.render.item = function (data) {
                  return append(render_item.apply(thisRef, arguments), html)
                }
              }
              original.apply(thisRef, arguments);
              // add event listener
              thisRef.$control.on('click', '.' + options.className, function (e) {
                e.preventDefault();
                if (self.isLocked)
                  return;
                self.clear()
              })
            }
          }()
        };
        var multiClose = function (thisRef, options) {
          var self = thisRef;
          var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
          /**
				 * Appends an element as a child (with raw HTML).
				 *
				 * @param {string} html_container
				 * @param {string} html_element
				 * @return {string}
				 */
          var append = function (html_container, html_element) {
            var pos = html_container.search(/(<\/[^>]+>\s*)$/);
            return html_container.substring(0, pos) + html_element + html_container.substring(pos)
          };
          thisRef.setup = function () {
            var original = self.setup;
            return function () {
              // override the item rendering method to add the button to each
              if (options.append) {
                var render_item = self.settings.render.item;
                self.settings.render.item = function (data) {
                  return append(render_item.apply(thisRef, arguments), html)
                }
              }
              original.apply(thisRef, arguments);
              // add event listener
              thisRef.$control.on('click', '.' + options.className, function (e) {
                e.preventDefault();
                if (self.isLocked)
                  return;
                var $item = $(e.currentTarget).parent();
                self.setActiveItem($item);
                if (self.deleteSelection()) {
                  self.setCaret(self.items.length)
                }
              })
            }
          }()
        };
        if (this.settings.mode === 'single') {
          singleClose(this, options);
          return
        } else {
          multiClose(this, options)
        }
      });
      Selectize.define('restore_on_backspace', function (options) {
        var self = this;
        options.text = options.text || function (option) {
          return option[this.settings.labelField]
        };
        this.onKeyDown = function () {
          var original = self.onKeyDown;
          return function (e) {
            var index, option;
            if (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {
              index = this.caretPos - 1;
              if (index >= 0 && index < this.items.length) {
                option = this.options[this.items[index]];
                if (this.deleteSelection(e)) {
                  this.setTextboxValue(options.text.apply(this, [option]));
                  this.refreshOptions(true)
                }
                e.preventDefault();
                return
              }
            }
            return original.apply(this, arguments)
          }
        }()
      });
      return Selectize
    }))
  });
  // source: node_modules/sifter/sifter.js
  rqzt.define('sifter/sifter', function (module, exports, __dirname, __filename, process) {
    /**
 * sifter.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        root.Sifter = factory()
      }
    }(this, function () {
      /**
	 * Textually searches arrays and hashes of objects
	 * by property (or multiple properties). Designed
	 * specifically for autocomplete.
	 *
	 * @constructor
	 * @param {array|object} items
	 * @param {object} items
	 */
      var Sifter = function (items, settings) {
        this.items = items;
        this.settings = settings || { diacritics: true }
      };
      /**
	 * Splits a search string into an array of individual
	 * regexps to be used to match results.
	 *
	 * @param {string} query
	 * @returns {array}
	 */
      Sifter.prototype.tokenize = function (query) {
        query = trim(String(query || '').toLowerCase());
        if (!query || !query.length)
          return [];
        var i, n, regex, letter;
        var tokens = [];
        var words = query.split(/ +/);
        for (i = 0, n = words.length; i < n; i++) {
          regex = escape_regex(words[i]);
          if (this.settings.diacritics) {
            for (letter in DIACRITICS) {
              if (DIACRITICS.hasOwnProperty(letter)) {
                regex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter])
              }
            }
          }
          tokens.push({
            string: words[i],
            regex: new RegExp(regex, 'i')
          })
        }
        return tokens
      };
      /**
	 * Iterates over arrays and hashes.
	 *
	 * ```
	 * this.iterator(this.items, function(item, id) {
	 *    // invoked for each item
	 * });
	 * ```
	 *
	 * @param {array|object} object
	 */
      Sifter.prototype.iterator = function (object, callback) {
        var iterator;
        if (is_array(object)) {
          iterator = Array.prototype.forEach || function (callback) {
            for (var i = 0, n = this.length; i < n; i++) {
              callback(this[i], i, this)
            }
          }
        } else {
          iterator = function (callback) {
            for (var key in this) {
              if (this.hasOwnProperty(key)) {
                callback(this[key], key, this)
              }
            }
          }
        }
        iterator.apply(object, [callback])
      };
      /**
	 * Returns a function to be used to score individual results.
	 *
	 * Good matches will have a higher score than poor matches.
	 * If an item is not a match, 0 will be returned by the function.
	 *
	 * @param {object|string} search
	 * @param {object} options (optional)
	 * @returns {function}
	 */
      Sifter.prototype.getScoreFunction = function (search, options) {
        var self, fields, tokens, token_count, nesting;
        self = this;
        search = self.prepareSearch(search, options);
        tokens = search.tokens;
        fields = search.options.fields;
        token_count = tokens.length;
        nesting = search.options.nesting;
        /**
		 * Calculates how close of a match the
		 * given value is against a search token.
		 *
		 * @param {mixed} value
		 * @param {object} token
		 * @return {number}
		 */
        var scoreValue = function (value, token) {
          var score, pos;
          if (!value)
            return 0;
          value = String(value || '');
          pos = value.search(token.regex);
          if (pos === -1)
            return 0;
          score = token.string.length / value.length;
          if (pos === 0)
            score += 0.5;
          return score
        };
        /**
		 * Calculates the score of an object
		 * against the search query.
		 *
		 * @param {object} token
		 * @param {object} data
		 * @return {number}
		 */
        var scoreObject = function () {
          var field_count = fields.length;
          if (!field_count) {
            return function () {
              return 0
            }
          }
          if (field_count === 1) {
            return function (token, data) {
              return scoreValue(getattr(data, fields[0], nesting), token)
            }
          }
          return function (token, data) {
            for (var i = 0, sum = 0; i < field_count; i++) {
              sum += scoreValue(getattr(data, fields[i], nesting), token)
            }
            return sum / field_count
          }
        }();
        if (!token_count) {
          return function () {
            return 0
          }
        }
        if (token_count === 1) {
          return function (data) {
            return scoreObject(tokens[0], data)
          }
        }
        if (search.options.conjunction === 'and') {
          return function (data) {
            var score;
            for (var i = 0, sum = 0; i < token_count; i++) {
              score = scoreObject(tokens[i], data);
              if (score <= 0)
                return 0;
              sum += score
            }
            return sum / token_count
          }
        } else {
          return function (data) {
            for (var i = 0, sum = 0; i < token_count; i++) {
              sum += scoreObject(tokens[i], data)
            }
            return sum / token_count
          }
        }
      };
      /**
	 * Returns a function that can be used to compare two
	 * results, for sorting purposes. If no sorting should
	 * be performed, `null` will be returned.
	 *
	 * @param {string|object} search
	 * @param {object} options
	 * @return function(a,b)
	 */
      Sifter.prototype.getSortFunction = function (search, options) {
        var i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;
        self = this;
        search = self.prepareSearch(search, options);
        sort = !search.query && options.sort_empty || options.sort;
        /**
		 * Fetches the specified sort field value
		 * from a search result item.
		 *
		 * @param  {string} name
		 * @param  {object} result
		 * @return {mixed}
		 */
        get_field = function (name, result) {
          if (name === '$score')
            return result.score;
          return getattr(self.items[result.id], name, options.nesting)
        };
        // parse options
        fields = [];
        if (sort) {
          for (i = 0, n = sort.length; i < n; i++) {
            if (search.query || sort[i].field !== '$score') {
              fields.push(sort[i])
            }
          }
        }
        // the "$score" field is implied to be the primary
        // sort field, unless it's manually specified
        if (search.query) {
          implicit_score = true;
          for (i = 0, n = fields.length; i < n; i++) {
            if (fields[i].field === '$score') {
              implicit_score = false;
              break
            }
          }
          if (implicit_score) {
            fields.unshift({
              field: '$score',
              direction: 'desc'
            })
          }
        } else {
          for (i = 0, n = fields.length; i < n; i++) {
            if (fields[i].field === '$score') {
              fields.splice(i, 1);
              break
            }
          }
        }
        multipliers = [];
        for (i = 0, n = fields.length; i < n; i++) {
          multipliers.push(fields[i].direction === 'desc' ? -1 : 1)
        }
        // build function
        fields_count = fields.length;
        if (!fields_count) {
          return null
        } else if (fields_count === 1) {
          field = fields[0].field;
          multiplier = multipliers[0];
          return function (a, b) {
            return multiplier * cmp(get_field(field, a), get_field(field, b))
          }
        } else {
          return function (a, b) {
            var i, result, a_value, b_value, field;
            for (i = 0; i < fields_count; i++) {
              field = fields[i].field;
              result = multipliers[i] * cmp(get_field(field, a), get_field(field, b));
              if (result)
                return result
            }
            return 0
          }
        }
      };
      /**
	 * Parses a search query and returns an object
	 * with tokens and fields ready to be populated
	 * with results.
	 *
	 * @param {string} query
	 * @param {object} options
	 * @returns {object}
	 */
      Sifter.prototype.prepareSearch = function (query, options) {
        if (typeof query === 'object')
          return query;
        options = extend({}, options);
        var option_fields = options.fields;
        var option_sort = options.sort;
        var option_sort_empty = options.sort_empty;
        if (option_fields && !is_array(option_fields))
          options.fields = [option_fields];
        if (option_sort && !is_array(option_sort))
          options.sort = [option_sort];
        if (option_sort_empty && !is_array(option_sort_empty))
          options.sort_empty = [option_sort_empty];
        return {
          options: options,
          query: String(query || '').toLowerCase(),
          tokens: this.tokenize(query),
          total: 0,
          items: []
        }
      };
      /**
	 * Searches through all items and returns a sorted array of matches.
	 *
	 * The `options` parameter can contain:
	 *
	 *   - fields {string|array}
	 *   - sort {array}
	 *   - score {function}
	 *   - filter {bool}
	 *   - limit {integer}
	 *
	 * Returns an object containing:
	 *
	 *   - options {object}
	 *   - query {string}
	 *   - tokens {array}
	 *   - total {int}
	 *   - items {array}
	 *
	 * @param {string} query
	 * @param {object} options
	 * @returns {object}
	 */
      Sifter.prototype.search = function (query, options) {
        var self = this, value, score, search, calculateScore;
        var fn_sort;
        var fn_score;
        search = this.prepareSearch(query, options);
        options = search.options;
        query = search.query;
        // generate result scoring function
        fn_score = options.score || self.getScoreFunction(search);
        // perform search and sort
        if (query.length) {
          self.iterator(self.items, function (item, id) {
            score = fn_score(item);
            if (options.filter === false || score > 0) {
              search.items.push({
                'score': score,
                'id': id
              })
            }
          })
        } else {
          self.iterator(self.items, function (item, id) {
            search.items.push({
              'score': 1,
              'id': id
            })
          })
        }
        fn_sort = self.getSortFunction(search, options);
        if (fn_sort)
          search.items.sort(fn_sort);
        // apply limits
        search.total = search.items.length;
        if (typeof options.limit === 'number') {
          search.items = search.items.slice(0, options.limit)
        }
        return search
      };
      // utilities
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      var cmp = function (a, b) {
        if (typeof a === 'number' && typeof b === 'number') {
          return a > b ? 1 : a < b ? -1 : 0
        }
        a = asciifold(String(a || ''));
        b = asciifold(String(b || ''));
        if (a > b)
          return 1;
        if (b > a)
          return -1;
        return 0
      };
      var extend = function (a, b) {
        var i, n, k, object;
        for (i = 1, n = arguments.length; i < n; i++) {
          object = arguments[i];
          if (!object)
            continue;
          for (k in object) {
            if (object.hasOwnProperty(k)) {
              a[k] = object[k]
            }
          }
        }
        return a
      };
      /**
	 * A property getter resolving dot-notation
	 * @param  {Object}  obj     The root object to fetch property on
	 * @param  {String}  name    The optionally dotted property name to fetch
	 * @param  {Boolean} nesting Handle nesting or not
	 * @return {Object}          The resolved property value
	 */
      var getattr = function (obj, name, nesting) {
        if (!obj || !name)
          return;
        if (!nesting)
          return obj[name];
        var names = name.split('.');
        while (names.length && (obj = obj[names.shift()]));
        return obj
      };
      var trim = function (str) {
        return (str + '').replace(/^\s+|\s+$|/g, '')
      };
      var escape_regex = function (str) {
        return (str + '').replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1')
      };
      var is_array = Array.isArray || typeof $ !== 'undefined' && $.isArray || function (object) {
        return Object.prototype.toString.call(object) === '[object Array]'
      };
      var DIACRITICS = {
        'a': '[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]',
        'b': '[b␢βΒB฿𐌁ᛒ]',
        'c': '[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]',
        'd': '[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]',
        'e': '[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]',
        'f': '[fƑƒḞḟ]',
        'g': '[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]',
        'h': '[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]',
        'i': '[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]',
        'j': '[jȷĴĵɈɉʝɟʲ]',
        'k': '[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]',
        'l': '[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]',
        'n': '[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]',
        'o': '[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]',
        'p': '[pṔṕṖṗⱣᵽƤƥᵱ]',
        'q': '[qꝖꝗʠɊɋꝘꝙq̃]',
        'r': '[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]',
        's': '[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]',
        't': '[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]',
        'u': '[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]',
        'v': '[vṼṽṾṿƲʋꝞꝟⱱʋ]',
        'w': '[wẂẃẀẁŴŵẄẅẆẇẈẉ]',
        'x': '[xẌẍẊẋχ]',
        'y': '[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]',
        'z': '[zŹźẐẑŽžŻżẒẓẔẕƵƶ]'
      };
      var asciifold = function () {
        var i, n, k, chunk;
        var foreignletters = '';
        var lookup = {};
        for (k in DIACRITICS) {
          if (DIACRITICS.hasOwnProperty(k)) {
            chunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);
            foreignletters += chunk;
            for (i = 0, n = chunk.length; i < n; i++) {
              lookup[chunk.charAt(i)] = k
            }
          }
        }
        var regexp = new RegExp('[' + foreignletters + ']', 'g');
        return function (str) {
          return str.replace(regexp, function (foreignletter) {
            return lookup[foreignletter]
          }).toLowerCase()
        }
      }();
      // export
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      return Sifter
    }))
  });
  // source: node_modules/microplugin/src/microplugin.js
  rqzt.define('microplugin/src/microplugin', function (module, exports, __dirname, __filename, process) {
    /**
 * microplugin.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        root.MicroPlugin = factory()
      }
    }(this, function () {
      var MicroPlugin = {};
      MicroPlugin.mixin = function (Interface) {
        Interface.plugins = {};
        /**
		 * Initializes the listed plugins (with options).
		 * Acceptable formats:
		 *
		 * List (without options):
		 *   ['a', 'b', 'c']
		 *
		 * List (with options):
		 *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]
		 *
		 * Hash (with options):
		 *   {'a': { ... }, 'b': { ... }, 'c': { ... }}
		 *
		 * @param {mixed} plugins
		 */
        Interface.prototype.initializePlugins = function (plugins) {
          var i, n, key;
          var self = this;
          var queue = [];
          self.plugins = {
            names: [],
            settings: {},
            requested: {},
            loaded: {}
          };
          if (utils.isArray(plugins)) {
            for (i = 0, n = plugins.length; i < n; i++) {
              if (typeof plugins[i] === 'string') {
                queue.push(plugins[i])
              } else {
                self.plugins.settings[plugins[i].name] = plugins[i].options;
                queue.push(plugins[i].name)
              }
            }
          } else if (plugins) {
            for (key in plugins) {
              if (plugins.hasOwnProperty(key)) {
                self.plugins.settings[key] = plugins[key];
                queue.push(key)
              }
            }
          }
          while (queue.length) {
            self.require(queue.shift())
          }
        };
        Interface.prototype.loadPlugin = function (name) {
          var self = this;
          var plugins = self.plugins;
          var plugin = Interface.plugins[name];
          if (!Interface.plugins.hasOwnProperty(name)) {
            throw new Error('Unable to find "' + name + '" plugin')
          }
          plugins.requested[name] = true;
          plugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);
          plugins.names.push(name)
        };
        /**
		 * Initializes a plugin.
		 *
		 * @param {string} name
		 */
        Interface.prototype.require = function (name) {
          var self = this;
          var plugins = self.plugins;
          if (!self.plugins.loaded.hasOwnProperty(name)) {
            if (plugins.requested[name]) {
              throw new Error('Plugin has circular dependency ("' + name + '")')
            }
            self.loadPlugin(name)
          }
          return plugins.loaded[name]
        };
        /**
		 * Registers a plugin.
		 *
		 * @param {string} name
		 * @param {function} fn
		 */
        Interface.define = function (name, fn) {
          Interface.plugins[name] = {
            'name': name,
            'fn': fn
          }
        }
      };
      var utils = {
        isArray: Array.isArray || function (vArg) {
          return Object.prototype.toString.call(vArg) === '[object Array]'
        }
      };
      return MicroPlugin
    }))
  });
  // source: node_modules/hanzo.js/lib/browser.js
  rqzt.define('hanzo.js/lib/browser', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.12.4
    var Api, Client;
    if (global.Hanzo == null) {
      global.Hanzo = {}
    }
    Api = rqzt('hanzo.js/lib/api');
    Client = rqzt('hanzo.js/lib/client/xhr');
    Api.CLIENT = Client;
    Api.BLUEPRINTS = rqzt('hanzo.js/lib/blueprints/browser');
    Hanzo.Api = Api;
    Hanzo.Client = Client;
    module.exports = Hanzo  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/hanzo.js/lib/api.js
  rqzt.define('hanzo.js/lib/api', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.12.4
    var Api, isFunction, isString, newError, ref, statusOk;
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, isString = ref.isString, newError = ref.newError, statusOk = ref.statusOk;
    module.exports = Api = function () {
      Api.BLUEPRINTS = {};
      Api.CLIENT = null;
      function Api(opts) {
        var blueprints, client, debug, endpoint, k, key, v;
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof Api)) {
          return new Api(opts)
        }
        endpoint = opts.endpoint, debug = opts.debug, key = opts.key, client = opts.client, blueprints = opts.blueprints;
        this.debug = debug;
        if (blueprints == null) {
          blueprints = this.constructor.BLUEPRINTS
        }
        if (client) {
          this.client = client
        } else {
          this.client = new this.constructor.CLIENT({
            debug: debug,
            endpoint: endpoint,
            key: key
          })
        }
        for (k in blueprints) {
          v = blueprints[k];
          this.addBlueprints(k, v)
        }
      }
      Api.prototype.addBlueprints = function (api, blueprints) {
        var bp, fn, name;
        if (this[api] == null) {
          this[api] = {}
        }
        fn = function (_this) {
          return function (name, bp) {
            var method;
            if (isFunction(bp)) {
              return _this[api][name] = function () {
                return bp.apply(_this, arguments)
              }
            }
            if (bp.expects == null) {
              bp.expects = statusOk
            }
            if (bp.method == null) {
              bp.method = 'POST'
            }
            method = function (data, cb) {
              var key;
              key = void 0;
              if (bp.useCustomerToken) {
                key = _this.client.getCustomerToken()
              }
              return _this.client.request(bp, data, key).then(function (res) {
                var ref1, ref2;
                if (((ref1 = res.data) != null ? ref1.error : void 0) != null) {
                  throw newError(data, res)
                }
                if (!bp.expects(res)) {
                  throw newError(data, res)
                }
                if (bp.process != null) {
                  bp.process.call(_this, res)
                }
                return (ref2 = res.data) != null ? ref2 : res.body
              }).callback(cb)
            };
            return _this[api][name] = method
          }
        }(this);
        for (name in blueprints) {
          bp = blueprints[name];
          fn(name, bp)
        }
      };
      Api.prototype.setKey = function (key) {
        return this.client.setKey(key)
      };
      Api.prototype.setCustomerToken = function (key) {
        return this.client.setCustomerToken(key)
      };
      Api.prototype.deleteCustomerToken = function () {
        return this.client.deleteCustomerToken()
      };
      Api.prototype.setStore = function (id) {
        this.storeId = id;
        return this.client.setStore(id)
      };
      return Api
    }()  //# sourceMappingURL=api.js.map
  });
  // source: node_modules/hanzo.js/lib/utils.js
  rqzt.define('hanzo.js/lib/utils', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.12.4
    var updateParam;
    exports.isFunction = function (fn) {
      return typeof fn === 'function'
    };
    exports.isString = function (s) {
      return typeof s === 'string'
    };
    exports.statusOk = function (res) {
      return res.status === 200
    };
    exports.statusCreated = function (res) {
      return res.status === 201
    };
    exports.statusNoContent = function (res) {
      return res.status === 204
    };
    exports.newError = function (data, res, err) {
      var message, ref, ref1, ref2, ref3, ref4;
      if (res == null) {
        res = {}
      }
      message = (ref = res != null ? (ref1 = res.data) != null ? (ref2 = ref1.error) != null ? ref2.message : void 0 : void 0 : void 0) != null ? ref : 'Request failed';
      if (err == null) {
        err = new Error(message);
        err.message = message
      }
      err.req = data;
      err.data = res.data;
      err.responseText = res.data;
      err.status = res.status;
      err.type = (ref3 = res.data) != null ? (ref4 = ref3.error) != null ? ref4.type : void 0 : void 0;
      return err
    };
    updateParam = function (url, key, value) {
      var hash, re, separator;
      re = new RegExp('([?&])' + key + '=.*?(&|#|$)(.*)', 'gi');
      if (re.test(url)) {
        if (value != null) {
          return url.replace(re, '$1' + key + '=' + value + '$2$3')
        } else {
          hash = url.split('#');
          url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        }
      } else {
        if (value != null) {
          separator = url.indexOf('?') !== -1 ? '&' : '?';
          hash = url.split('#');
          url = hash[0] + separator + key + '=' + value;
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        } else {
          return url
        }
      }
    };
    exports.updateQuery = function (url, data) {
      var k, v;
      if (typeof data !== 'object') {
        return url
      }
      for (k in data) {
        v = data[k];
        url = updateParam(url, k, v)
      }
      return url
    }  //# sourceMappingURL=utils.js.map
  });
  // source: node_modules/hanzo.js/lib/client/xhr.js
  rqzt.define('hanzo.js/lib/client/xhr', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.12.4
    var Xhr, XhrClient, cookie, isFunction, newError, ref, updateQuery;
    Xhr = rqzt('xhr-promise-es6/lib');
    Xhr.Promise = rqzt('broken/dist/broken');
    cookie = rqzt('js-cookie/src/js.cookie');
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, newError = ref.newError, updateQuery = ref.updateQuery;
    module.exports = XhrClient = function () {
      XhrClient.prototype.debug = false;
      XhrClient.prototype.endpoint = 'https://api.hanzo.io';
      XhrClient.prototype.sessionName = 'hnzo';
      function XhrClient(opts) {
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof XhrClient)) {
          return new XhrClient(opts)
        }
        this.key = opts.key, this.debug = opts.debug;
        if (opts.endpoint) {
          this.setEndpoint(opts.endpoint)
        }
        this.getCustomerToken()
      }
      XhrClient.prototype.setEndpoint = function (endpoint) {
        return this.endpoint = endpoint.replace(/\/$/, '')
      };
      XhrClient.prototype.setStore = function (id) {
        return this.storeId = id
      };
      XhrClient.prototype.setKey = function (key) {
        return this.key = key
      };
      XhrClient.prototype.getKey = function () {
        return this.key || this.constructor.KEY
      };
      XhrClient.prototype.getCustomerToken = function () {
        var session;
        if ((session = cookie.getJSON(this.sessionName)) != null) {
          if (session.customerToken != null) {
            this.customerToken = session.customerToken
          }
        }
        return this.customerToken
      };
      XhrClient.prototype.setCustomerToken = function (key) {
        cookie.set(this.sessionName, { customerToken: key }, { expires: 7 * 24 * 3600 * 1000 });
        return this.customerToken = key
      };
      XhrClient.prototype.deleteCustomerToken = function () {
        cookie.set(this.sessionName, { customerToken: null }, { expires: 7 * 24 * 3600 * 1000 });
        return this.customerToken = null
      };
      XhrClient.prototype.getUrl = function (url, data, key) {
        if (isFunction(url)) {
          url = url.call(this, data)
        }
        return updateQuery(this.endpoint + url, { token: key })
      };
      XhrClient.prototype.request = function (blueprint, data, key) {
        var opts;
        if (data == null) {
          data = {}
        }
        if (key == null) {
          key = this.getKey()
        }
        opts = {
          url: this.getUrl(blueprint.url, data, key),
          method: blueprint.method
        };
        if (blueprint.method !== 'GET') {
          opts.headers = { 'Content-Type': 'application/json' }
        }
        if (blueprint.method === 'GET') {
          opts.url = updateQuery(opts.url, data)
        } else {
          opts.data = JSON.stringify(data)
        }
        if (this.debug) {
          void 0;
          void 0;
          void 0;
          void 0
        }
        return new Xhr().send(opts).then(function (res) {
          if (this.debug) {
            void 0;
            void 0
          }
          res.data = res.responseText;
          return res
        })['catch'](function (res) {
          var err, ref1;
          try {
            res.data = (ref1 = res.responseText) != null ? ref1 : JSON.parse(res.xhr.responseText)
          } catch (error) {
            err = error
          }
          err = newError(data, res);
          if (this.debug) {
            void 0;
            void 0;
            void 0
          }
          throw err
        })
      };
      return XhrClient
    }()  //# sourceMappingURL=xhr.js.map
  });
  // source: node_modules/xhr-promise-es6/lib/index.js
  rqzt.define('xhr-promise-es6/lib', function (module, exports, __dirname, __filename, process) {
    /*
 * Copyright 2015 Scott Brady
 * MIT License
 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
 */
    var ParseHeaders, XMLHttpRequestPromise, objectAssign;
    ParseHeaders = rqzt('parse-headers/parse-headers');
    objectAssign = rqzt('object-assign');
    /*
 * Module to wrap an XMLHttpRequest in a promise.
 */
    module.exports = XMLHttpRequestPromise = function () {
      function XMLHttpRequestPromise() {
      }
      XMLHttpRequestPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';
      XMLHttpRequestPromise.Promise = global.Promise;
      /*
   * XMLHttpRequestPromise.send(options) -> Promise
   * - options (Object): URL, method, data, etc.
   *
   * Create the XHR object and wire up event handlers to use a promise.
   */
      XMLHttpRequestPromise.prototype.send = function (options) {
        var defaults;
        if (options == null) {
          options = {}
        }
        defaults = {
          method: 'GET',
          data: null,
          headers: {},
          async: true,
          username: null,
          password: null
        };
        options = objectAssign({}, defaults, options);
        return new this.constructor.Promise(function (_this) {
          return function (resolve, reject) {
            var e, header, ref, value, xhr;
            if (!XMLHttpRequest) {
              _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
              return
            }
            if (typeof options.url !== 'string' || options.url.length === 0) {
              _this._handleError('url', reject, null, 'URL is a required parameter');
              return
            }
            _this._xhr = xhr = new XMLHttpRequest;
            xhr.onload = function () {
              var responseText;
              _this._detachWindowUnload();
              try {
                responseText = _this._getResponseText()
              } catch (_error) {
                _this._handleError('parse', reject, null, 'invalid JSON response');
                return
              }
              return resolve({
                url: _this._getResponseUrl(),
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: responseText,
                headers: _this._getHeaders(),
                xhr: xhr
              })
            };
            xhr.onerror = function () {
              return _this._handleError('error', reject)
            };
            xhr.ontimeout = function () {
              return _this._handleError('timeout', reject)
            };
            xhr.onabort = function () {
              return _this._handleError('abort', reject)
            };
            _this._attachWindowUnload();
            xhr.open(options.method, options.url, options.async, options.username, options.password);
            if (options.data != null && !options.headers['Content-Type']) {
              options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE
            }
            ref = options.headers;
            for (header in ref) {
              value = ref[header];
              xhr.setRequestHeader(header, value)
            }
            try {
              return xhr.send(options.data)
            } catch (_error) {
              e = _error;
              return _this._handleError('send', reject, null, e.toString())
            }
          }
        }(this))
      };
      /*
   * XMLHttpRequestPromise.getXHR() -> XMLHttpRequest
   */
      XMLHttpRequestPromise.prototype.getXHR = function () {
        return this._xhr
      };
      /*
   * XMLHttpRequestPromise._attachWindowUnload()
   *
   * Fix for IE 9 and IE 10
   * Internet Explorer freezes when you close a webpage during an XHR request
   * https://support.microsoft.com/kb/2856746
   *
   */
      XMLHttpRequestPromise.prototype._attachWindowUnload = function () {
        this._unloadHandler = this._handleWindowUnload.bind(this);
        if (window.attachEvent) {
          return window.attachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._detachWindowUnload()
   */
      XMLHttpRequestPromise.prototype._detachWindowUnload = function () {
        if (window.detachEvent) {
          return window.detachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._getHeaders() -> Object
   */
      XMLHttpRequestPromise.prototype._getHeaders = function () {
        return ParseHeaders(this._xhr.getAllResponseHeaders())
      };
      /*
   * XMLHttpRequestPromise._getResponseText() -> Mixed
   *
   * Parses response text JSON if present.
   */
      XMLHttpRequestPromise.prototype._getResponseText = function () {
        var responseText;
        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
        switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '')
        }
        return responseText
      };
      /*
   * XMLHttpRequestPromise._getResponseUrl() -> String
   *
   * Actual response URL after following redirects.
   */
      XMLHttpRequestPromise.prototype._getResponseUrl = function () {
        if (this._xhr.responseURL != null) {
          return this._xhr.responseURL
        }
        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
          return this._xhr.getResponseHeader('X-Request-URL')
        }
        return ''
      };
      /*
   * XMLHttpRequestPromise._handleError(reason, reject, status, statusText)
   * - reason (String)
   * - reject (Function)
   * - status (String)
   * - statusText (String)
   */
      XMLHttpRequestPromise.prototype._handleError = function (reason, reject, status, statusText) {
        this._detachWindowUnload();
        return reject({
          reason: reason,
          status: status || this._xhr.status,
          statusText: statusText || this._xhr.statusText,
          xhr: this._xhr
        })
      };
      /*
   * XMLHttpRequestPromise._handleWindowUnload()
   */
      XMLHttpRequestPromise.prototype._handleWindowUnload = function () {
        return this._xhr.abort()
      };
      return XMLHttpRequestPromise
    }()
  });
  // source: node_modules/parse-headers/parse-headers.js
  rqzt.define('parse-headers/parse-headers', function (module, exports, __dirname, __filename, process) {
    var trim = rqzt('trim'), forEach = rqzt('for-each'), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]'
      };
    module.exports = function (headers) {
      if (!headers)
        return {};
      var result = {};
      forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [
            result[key],
            value
          ]
        }
      });
      return result
    }
  });
  // source: node_modules/trim/index.js
  rqzt.define('trim', function (module, exports, __dirname, __filename, process) {
    exports = module.exports = trim;
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function (str) {
      return str.replace(/^\s*/, '')
    };
    exports.right = function (str) {
      return str.replace(/\s*$/, '')
    }
  });
  // source: node_modules/for-each/index.js
  rqzt.define('for-each', function (module, exports, __dirname, __filename, process) {
    var isFunction = rqzt('is-function');
    module.exports = forEach;
    var toString = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
      }
      if (arguments.length < 3) {
        context = this
      }
      if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
      else if (typeof list === 'string')
        forEachString(list, iterator, context);
      else
        forEachObject(list, iterator, context)
    }
    function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array)
        }
      }
    }
    function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
      }
    }
    function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object)
        }
      }
    }
  });
  // source: node_modules/is-function/index.js
  rqzt.define('is-function', function (module, exports, __dirname, __filename, process) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/object-assign/index.js
  rqzt.define('object-assign', function (module, exports, __dirname, __filename, process) {
    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/
    'use strict';
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined')
      }
      return Object(val)
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false
        }
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc');
        // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2['_' + String.fromCharCode(i)] = i
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
          return test2[n]
        });
        if (order2.join('') !== '0123456789') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
          test3[letter] = letter
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
          return false
        }
        return true
      } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key]
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]]
            }
          }
        }
      }
      return to
    }
  });
  // source: node_modules/broken/dist/broken.js
  rqzt.define('broken/dist/broken', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var PromiseInspection;
    var PromiseInspection$1 = PromiseInspection = function () {
      function PromiseInspection(arg) {
        this.state = arg.state, this.value = arg.value, this.reason = arg.reason
      }
      PromiseInspection.prototype.isFulfilled = function () {
        return this.state === 'fulfilled'
      };
      PromiseInspection.prototype.isRejected = function () {
        return this.state === 'rejected'
      };
      return PromiseInspection
    }();
    var _undefined$1 = void 0;
    var _undefinedString$1 = 'undefined';
    var soon;
    soon = function () {
      var bufferSize, callQueue, cqYield, fq, fqStart;
      fq = [];
      fqStart = 0;
      bufferSize = 1024;
      callQueue = function () {
        var err;
        while (fq.length - fqStart) {
          try {
            fq[fqStart]()
          } catch (error) {
            err = error;
            if (global.console) {
              global.console.error(err)
            }
          }
          fq[fqStart++] = _undefined$1;
          if (fqStart === bufferSize) {
            fq.splice(0, bufferSize);
            fqStart = 0
          }
        }
      };
      cqYield = function () {
        var dd, mo;
        if (typeof MutationObserver !== _undefinedString$1) {
          dd = document.createElement('div');
          mo = new MutationObserver(callQueue);
          mo.observe(dd, { attributes: true });
          return function () {
            dd.setAttribute('a', 0)
          }
        }
        if (typeof setImmediate !== _undefinedString$1) {
          return function () {
            setImmediate(callQueue)
          }
        }
        return function () {
          setTimeout(callQueue, 0)
        }
      }();
      return function (fn) {
        fq.push(fn);
        if (fq.length - fqStart === 1) {
          cqYield()
        }
      }
    }();
    var soon$1 = soon;
    var Promise$1;
    var STATE_FULFILLED;
    var STATE_PENDING;
    var STATE_REJECTED;
    var _undefined;
    var rejectClient;
    var resolveClient;
    _undefined = void 0;
    STATE_PENDING = _undefined;
    STATE_FULFILLED = 'fulfilled';
    STATE_REJECTED = 'rejected';
    resolveClient = function (c, arg) {
      var err, yret;
      if (typeof c.y === 'function') {
        try {
          yret = c.y.call(_undefined, arg);
          c.p.resolve(yret)
        } catch (error) {
          err = error;
          c.p.reject(err)
        }
      } else {
        c.p.resolve(arg)
      }
    };
    rejectClient = function (c, reason) {
      var err, yret;
      if (typeof c.n === 'function') {
        try {
          yret = c.n.call(_undefined, reason);
          c.p.resolve(yret)
        } catch (error) {
          err = error;
          c.p.reject(err)
        }
      } else {
        c.p.reject(reason)
      }
    };
    Promise$1 = function () {
      function Promise(fn) {
        if (fn) {
          fn(function (_this) {
            return function (arg) {
              return _this.resolve(arg)
            }
          }(this), function (_this) {
            return function (arg) {
              return _this.reject(arg)
            }
          }(this))
        }
      }
      Promise.prototype.resolve = function (value) {
        var clients, err, first, next;
        if (this.state !== STATE_PENDING) {
          return
        }
        if (value === this) {
          return this.reject(new TypeError('Attempt to resolve promise with self'))
        }
        if (value && (typeof value === 'function' || typeof value === 'object')) {
          try {
            first = true;
            next = value.then;
            if (typeof next === 'function') {
              next.call(value, function (_this) {
                return function (ra) {
                  if (first) {
                    if (first) {
                      first = false
                    }
                    _this.resolve(ra)
                  }
                }
              }(this), function (_this) {
                return function (rr) {
                  if (first) {
                    first = false;
                    _this.reject(rr)
                  }
                }
              }(this));
              return
            }
          } catch (error) {
            err = error;
            if (first) {
              this.reject(err)
            }
            return
          }
        }
        this.state = STATE_FULFILLED;
        this.v = value;
        if (clients = this.c) {
          soon$1(function (_this) {
            return function () {
              var c, i, len;
              for (i = 0, len = clients.length; i < len; i++) {
                c = clients[i];
                resolveClient(c, value)
              }
            }
          }(this))
        }
      };
      Promise.prototype.reject = function (reason) {
        var clients;
        if (this.state !== STATE_PENDING) {
          return
        }
        this.state = STATE_REJECTED;
        this.v = reason;
        if (clients = this.c) {
          soon$1(function () {
            var c, i, len;
            for (i = 0, len = clients.length; i < len; i++) {
              c = clients[i];
              rejectClient(c, reason)
            }
          })
        } else if (!Promise.suppressUncaughtRejectionError && global.console) {
          global.console.log('Broken Promise, please catch rejections: ', reason, reason ? reason.stack : null)
        }
      };
      Promise.prototype.then = function (onFulfilled, onRejected) {
        var a, client, p, s;
        p = new Promise;
        client = {
          y: onFulfilled,
          n: onRejected,
          p: p
        };
        if (this.state === STATE_PENDING) {
          if (this.c) {
            this.c.push(client)
          } else {
            this.c = [client]
          }
        } else {
          s = this.state;
          a = this.v;
          soon$1(function () {
            if (s === STATE_FULFILLED) {
              resolveClient(client, a)
            } else {
              rejectClient(client, a)
            }
          })
        }
        return p
      };
      Promise.prototype['catch'] = function (cfn) {
        return this.then(null, cfn)
      };
      Promise.prototype['finally'] = function (cfn) {
        return this.then(cfn, cfn)
      };
      Promise.prototype.timeout = function (ms, msg) {
        msg = msg || 'timeout';
        return new Promise(function (_this) {
          return function (resolve, reject) {
            setTimeout(function () {
              return reject(Error(msg))
            }, ms);
            _this.then(function (val) {
              resolve(val)
            }, function (err) {
              reject(err)
            })
          }
        }(this))
      };
      Promise.prototype.callback = function (cb) {
        if (typeof cb === 'function') {
          this.then(function (val) {
            return cb(null, val)
          });
          this['catch'](function (err) {
            return cb(err, null)
          })
        }
        return this
      };
      return Promise
    }();
    var Promise$2 = Promise$1;
    var resolve = function (val) {
      var z;
      z = new Promise$2;
      z.resolve(val);
      return z
    };
    var reject = function (err) {
      var z;
      z = new Promise$2;
      z.reject(err);
      return z
    };
    var all = function (ps) {
      var i, j, len, p, rc, resolvePromise, results, retP;
      results = [];
      rc = 0;
      retP = new Promise$2;
      resolvePromise = function (p, i) {
        if (!p || typeof p.then !== 'function') {
          p = resolve(p)
        }
        p.then(function (yv) {
          results[i] = yv;
          rc++;
          if (rc === ps.length) {
            retP.resolve(results)
          }
        }, function (nv) {
          retP.reject(nv)
        })
      };
      for (i = j = 0, len = ps.length; j < len; i = ++j) {
        p = ps[i];
        resolvePromise(p, i)
      }
      if (!ps.length) {
        retP.resolve(results)
      }
      return retP
    };
    var reflect = function (promise) {
      return new Promise$2(function (resolve, reject) {
        return promise.then(function (value) {
          return resolve(new PromiseInspection$1({
            state: 'fulfilled',
            value: value
          }))
        })['catch'](function (err) {
          return resolve(new PromiseInspection$1({
            state: 'rejected',
            reason: err
          }))
        })
      })
    };
    var settle = function (promises) {
      return all(promises.map(reflect))
    };
    Promise$2.all = all;
    Promise$2.reflect = reflect;
    Promise$2.reject = reject;
    Promise$2.resolve = resolve;
    Promise$2.settle = settle;
    Promise$2.soon = soon$1;
    module.exports = Promise$2
  });
  // source: node_modules/js-cookie/src/js.cookie.js
  rqzt.define('js-cookie/src/js.cookie', function (module, exports, __dirname, __filename, process) {
    /*!
 * JavaScript Cookie v2.1.3
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
    ;
    (function (factory) {
      var registeredInModuleLoader = false;
      if (typeof define === 'function' && define.amd) {
        define(factory);
        registeredInModuleLoader = true
      }
      if (typeof exports === 'object') {
        module.exports = factory();
        registeredInModuleLoader = true
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function () {
          window.Cookies = OldCookies;
          return api
        }
      }
    }(function () {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key]
          }
        }
        return result
      }
      function init(converter) {
        function api(key, value, attributes) {
          var result;
          if (typeof document === 'undefined') {
            return
          }
          // Write
          if (arguments.length > 1) {
            attributes = extend({ path: '/' }, api.defaults, attributes);
            if (typeof attributes.expires === 'number') {
              var expires = new Date;
              expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 86400000);
              attributes.expires = expires
            }
            try {
              result = JSON.stringify(value);
              if (/^[\{\[]/.test(result)) {
                value = result
              }
            } catch (e) {
            }
            if (!converter.write) {
              value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
            } else {
              value = converter.write(value, key)
            }
            key = encodeURIComponent(String(key));
            key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
            key = key.replace(/[\(\)]/g, escape);
            return document.cookie = [
              key,
              '=',
              value,
              attributes.expires ? '; expires=' + attributes.expires.toUTCString() : '',
              // use expires attribute, max-age is not supported by IE
              attributes.path ? '; path=' + attributes.path : '',
              attributes.domain ? '; domain=' + attributes.domain : '',
              attributes.secure ? '; secure' : ''
            ].join('')
          }
          // Read
          if (!key) {
            result = {}
          }
          // To prevent the for loop in the first place assign an empty array
          // in case there are no cookies at all. Also prevents odd result when
          // calling "get()"
          var cookies = document.cookie ? document.cookie.split('; ') : [];
          var rdecode = /(%[0-9A-Z]{2})+/g;
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split('=');
            var cookie = parts.slice(1).join('=');
            if (cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1)
            }
            try {
              var name = parts[0].replace(rdecode, decodeURIComponent);
              cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
              if (this.json) {
                try {
                  cookie = JSON.parse(cookie)
                } catch (e) {
                }
              }
              if (key === name) {
                result = cookie;
                break
              }
              if (!key) {
                result[name] = cookie
              }
            } catch (e) {
            }
          }
          return result
        }
        api.set = api;
        api.get = function (key) {
          return api.call(api, key)
        };
        api.getJSON = function () {
          return api.apply({ json: true }, [].slice.call(arguments))
        };
        api.defaults = {};
        api.remove = function (key, attributes) {
          api(key, '', extend(attributes, { expires: -1 }))
        };
        api.withConverter = init;
        return api
      }
      return init(function () {
      })
    }))
  });
  // source: node_modules/hanzo.js/lib/blueprints/browser.js
  rqzt.define('hanzo.js/lib/blueprints/browser', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.12.4
    var blueprints, byId, createBlueprint, fn, i, isFunction, len, model, models, ref, ref1, statusCreated, statusNoContent, statusOk, storePrefixed;
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, statusCreated = ref.statusCreated, statusNoContent = ref.statusNoContent, statusOk = ref.statusOk;
    ref1 = rqzt('hanzo.js/lib/blueprints/url'), byId = ref1.byId, storePrefixed = ref1.storePrefixed;
    createBlueprint = function (name) {
      var endpoint;
      endpoint = '/' + name;
      return {
        list: {
          url: endpoint,
          method: 'GET',
          expects: statusOk
        },
        get: {
          url: byId(name),
          method: 'GET',
          expects: statusOk
        }
      }
    };
    blueprints = {
      account: {
        get: {
          url: '/account',
          method: 'GET',
          expects: statusOk,
          useCustomerToken: true
        },
        update: {
          url: '/account',
          method: 'PATCH',
          expects: statusOk,
          useCustomerToken: true
        },
        exists: {
          url: function (x) {
            var ref2, ref3, ref4;
            return '/account/exists/' + ((ref2 = (ref3 = (ref4 = x.email) != null ? ref4 : x.username) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk,
          process: function (res) {
            return res.data.exists
          }
        },
        create: {
          url: '/account/create',
          method: 'POST',
          expects: statusCreated
        },
        enable: {
          url: function (x) {
            var ref2;
            return '/account/enable/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk
        },
        login: {
          url: '/account/login',
          method: 'POST',
          expects: statusOk,
          process: function (res) {
            this.setCustomerToken(res.data.token);
            return res
          }
        },
        logout: function () {
          return this.deleteCustomerToken()
        },
        reset: {
          url: '/account/reset',
          method: 'POST',
          expects: statusOk,
          useCustomerToken: true
        },
        updateOrder: {
          url: function (x) {
            var ref2, ref3;
            return '/account/order/' + ((ref2 = (ref3 = x.orderId) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'PATCH',
          expects: statusOk,
          useCustomerToken: true
        },
        confirm: {
          url: function (x) {
            var ref2;
            return '/account/confirm/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk,
          useCustomerToken: true
        }
      },
      cart: {
        create: {
          url: '/cart',
          method: 'POST',
          expects: statusCreated
        },
        update: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'PATCH',
          expects: statusOk
        },
        discard: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x) + '/discard'
          },
          method: 'POST',
          expects: statusOk
        },
        set: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x) + '/set'
          },
          method: 'POST',
          expects: statusOk
        }
      },
      review: {
        create: {
          url: '/review',
          method: 'POST',
          expects: statusCreated
        },
        get: {
          url: function (x) {
            var ref2;
            return '/review/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk
        }
      },
      checkout: {
        authorize: {
          url: storePrefixed('/checkout/authorize'),
          method: 'POST',
          expects: statusOk
        },
        capture: {
          url: storePrefixed(function (x) {
            var ref2;
            return '/checkout/capture/' + ((ref2 = x.orderId) != null ? ref2 : x)
          }),
          method: 'POST',
          expects: statusOk
        },
        charge: {
          url: storePrefixed('/checkout/charge'),
          method: 'POST',
          expects: statusOk
        },
        paypal: {
          url: storePrefixed('/checkout/paypal'),
          method: 'POST',
          expects: statusOk
        }
      },
      referrer: {
        create: {
          url: '/referrer',
          method: 'POST',
          expects: statusCreated
        },
        get: {
          url: function (x) {
            var ref2;
            return '/referrer/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk
        }
      }
    };
    models = [
      'collection',
      'coupon',
      'product',
      'variant'
    ];
    fn = function (model) {
      return blueprints[model] = createBlueprint(model)
    };
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      fn(model)
    }
    module.exports = blueprints  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/hanzo.js/lib/blueprints/url.js
  rqzt.define('hanzo.js/lib/blueprints/url', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.12.4
    var isFunction, sp;
    isFunction = rqzt('hanzo.js/lib/utils').isFunction;
    exports.storePrefixed = sp = function (u) {
      return function (x) {
        var url;
        if (isFunction(u)) {
          url = u(x)
        } else {
          url = u
        }
        if (this.storeId != null) {
          return '/store/' + this.storeId + url
        } else {
          return url
        }
      }
    };
    exports.byId = function (name) {
      switch (name) {
      case 'coupon':
        return sp(function (x) {
          var ref;
          return '/coupon/' + ((ref = x.code) != null ? ref : x)
        });
      case 'collection':
        return sp(function (x) {
          var ref;
          return '/collection/' + ((ref = x.slug) != null ? ref : x)
        });
      case 'product':
        return sp(function (x) {
          var ref, ref1;
          return '/product/' + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x)
        });
      case 'variant':
        return sp(function (x) {
          var ref, ref1;
          return '/variant/' + ((ref = (ref1 = x.id) != null ? ref1 : x.sku) != null ? ref : x)
        });
      case 'site':
        return function (x) {
          var ref, ref1;
          return '/site/' + ((ref = (ref1 = x.id) != null ? ref1 : x.name) != null ? ref : x)
        };
      default:
        return function (x) {
          var ref;
          return '/' + name + '/' + ((ref = x.id) != null ? ref : x)
        }
      }
    }  //# sourceMappingURL=url.js.map
  });
  // source: src/blueprints.coffee
  rqzt.define('./blueprints', function (module, exports, __dirname, __filename, process) {
    var blueprints, byId, createBlueprint, fn, i, len, model, models, sp, statusCreated, statusNoContent, statusOk;
    sp = function (u) {
      return function (x) {
        var url;
        if (isFunction(u)) {
          url = u(x)
        } else {
          url = u
        }
        if (this.storeId != null) {
          return '/store/' + this.storeId + url
        } else {
          return url
        }
      }
    };
    byId = function (name) {
      switch (name) {
      case 'coupon':
        return sp(function (x) {
          var ref;
          return '/coupon/' + ((ref = x.code) != null ? ref : x)
        });
      case 'product':
        return sp(function (x) {
          var ref, ref1;
          return '/product/' + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x)
        });
      case 'user':
        return sp(function (x) {
          var ref, ref1;
          return '/user/' + ((ref = (ref1 = x.id) != null ? ref1 : x.email) != null ? ref : x)
        });
      default:
        return function (x) {
          var ref;
          return '/' + name + '/' + ((ref = x.id) != null ? ref : x)
        }
      }
    };
    statusOk = function (res) {
      return res.status === 200
    };
    statusCreated = function (res) {
      return res.status === 201
    };
    statusNoContent = function (res) {
      return res.status === 204
    };
    createBlueprint = function (name) {
      var endpoint, url;
      endpoint = '/' + name;
      url = byId(name);
      return {
        list: {
          url: endpoint,
          method: 'GET'
        },
        get: {
          url: url,
          method: 'GET',
          expects: statusOk
        },
        create: {
          url: endpoint,
          method: 'POST',
          expects: statusCreated
        },
        update: {
          url: url,
          method: 'PATCH',
          expects: statusOk
        },
        'delete': {
          url: url,
          method: 'DELETE',
          expects: statusNoContent
        }
      }
    };
    blueprints = {
      oauth: {
        auth: {
          method: 'POST',
          url: '/auth'
        }
      },
      account: {
        organization: {
          method: 'GET',
          url: '/_/account/organizations'
        }
      },
      dashv2: {
        login: {
          method: 'POST',
          url: '/dashv2/login'
        }
      },
      counter: {
        search: {
          method: 'POST',
          url: '/counter'
        }
      }
    };
    models = [
      'user',
      'order',
      'note'
    ];
    fn = function (model) {
      return blueprints[model] = createBlueprint(model)
    };
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      fn(model)
    }
    blueprints.note.search = {
      method: 'POST',
      url: '/search/note'
    };
    module.exports = blueprints
  });
  // source: node_modules/riot/riot.js
  rqzt.define('riot/riot', function (module, exports, __dirname, __filename, process) {
    /* Riot v3.3.1, @license MIT */
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.riot = global.riot || {})
    }(this, function (exports) {
      'use strict';
      var __TAGS_CACHE = [];
      var __TAG_IMPL = {};
      var GLOBAL_MIXIN = '__global_mixin';
      var ATTRS_PREFIX = 'riot-';
      var REF_DIRECTIVES = [
        'ref',
        'data-ref'
      ];
      var IS_DIRECTIVE = 'data-is';
      var CONDITIONAL_DIRECTIVE = 'if';
      var LOOP_DIRECTIVE = 'each';
      var LOOP_NO_REORDER_DIRECTIVE = 'no-reorder';
      var SHOW_DIRECTIVE = 'show';
      var HIDE_DIRECTIVE = 'hide';
      var T_STRING = 'string';
      var T_OBJECT = 'object';
      var T_UNDEF = 'undefined';
      var T_FUNCTION = 'function';
      var XLINK_NS = 'http://www.w3.org/1999/xlink';
      var XLINK_REGEX = /^xlink:(\w+)/;
      var WIN = typeof window === T_UNDEF ? undefined : window;
      var RE_SPECIAL_TAGS = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/;
      var RE_SPECIAL_TAGS_NO_OPTION = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;
      var RE_RESERVED_NAMES = /^(?:_(?:item|id|parent)|update|root|(?:un)?mount|mixin|is(?:Mounted|Loop)|tags|refs|parent|opts|trigger|o(?:n|ff|ne))$/;
      var RE_SVG_TAGS = /^(altGlyph|animate(?:Color)?|circle|clipPath|defs|ellipse|fe(?:Blend|ColorMatrix|ComponentTransfer|Composite|ConvolveMatrix|DiffuseLighting|DisplacementMap|Flood|GaussianBlur|Image|Merge|Morphology|Offset|SpecularLighting|Tile|Turbulence)|filter|font|foreignObject|g(?:lyph)?(?:Ref)?|image|line(?:arGradient)?|ma(?:rker|sk)|missing-glyph|path|pattern|poly(?:gon|line)|radialGradient|rect|stop|svg|switch|symbol|text(?:Path)?|tref|tspan|use)$/;
      var RE_HTML_ATTRS = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
      var CASE_SENSITIVE_ATTRIBUTES = { 'viewbox': 'viewBox' };
      var RE_BOOL_ATTRS = /^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/;
      var IE_VERSION = (WIN && WIN.document || {}).documentMode | 0;
      /**
 * Check whether a DOM node must be considered a part of an svg document
 * @param   { String } name -
 * @returns { Boolean } -
 */
      function isSVGTag(name) {
        return RE_SVG_TAGS.test(name)
      }
      /**
 * Check Check if the passed argument is undefined
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isBoolAttr(value) {
        return RE_BOOL_ATTRS.test(value)
      }
      /**
 * Check if passed argument is a function
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isFunction(value) {
        return typeof value === T_FUNCTION
      }
      /**
 * Check if passed argument is an object, exclude null
 * NOTE: use isObject(x) && !isArray(x) to excludes arrays.
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isObject(value) {
        return value && typeof value === T_OBJECT  // typeof null is 'object'
      }
      /**
 * Check if passed argument is undefined
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isUndefined(value) {
        return typeof value === T_UNDEF
      }
      /**
 * Check if passed argument is a string
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isString(value) {
        return typeof value === T_STRING
      }
      /**
 * Check if passed argument is empty. Different from falsy, because we dont consider 0 or false to be blank
 * @param { * } value -
 * @returns { Boolean } -
 */
      function isBlank(value) {
        return isUndefined(value) || value === null || value === ''
      }
      /**
 * Check if passed argument is a kind of array
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isArray(value) {
        return Array.isArray(value) || value instanceof Array
      }
      /**
 * Check whether object's property could be overridden
 * @param   { Object }  obj - source object
 * @param   { String }  key - object property
 * @returns { Boolean } -
 */
      function isWritable(obj, key) {
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        return isUndefined(obj[key]) || descriptor && descriptor.writable
      }
      /**
 * Check if passed argument is a reserved name
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isReservedName(value) {
        return RE_RESERVED_NAMES.test(value)
      }
      var check = Object.freeze({
        isSVGTag: isSVGTag,
        isBoolAttr: isBoolAttr,
        isFunction: isFunction,
        isObject: isObject,
        isUndefined: isUndefined,
        isString: isString,
        isBlank: isBlank,
        isArray: isArray,
        isWritable: isWritable,
        isReservedName: isReservedName
      });
      /**
 * Shorter and fast way to select multiple nodes in the DOM
 * @param   { String } selector - DOM selector
 * @param   { Object } ctx - DOM node where the targets of our search will is located
 * @returns { Object } dom nodes found
 */
      function $$(selector, ctx) {
        return (ctx || document).querySelectorAll(selector)
      }
      /**
 * Shorter and fast way to select a single node in the DOM
 * @param   { String } selector - unique dom selector
 * @param   { Object } ctx - DOM node where the target of our search will is located
 * @returns { Object } dom node found
 */
      function $(selector, ctx) {
        return (ctx || document).querySelector(selector)
      }
      /**
 * Create a document fragment
 * @returns { Object } document fragment
 */
      function createFrag() {
        return document.createDocumentFragment()
      }
      /**
 * Create a document text node
 * @returns { Object } create a text node to use as placeholder
 */
      function createDOMPlaceholder() {
        return document.createTextNode('')
      }
      /**
 * Create a generic DOM node
 * @param   { String } name - name of the DOM node we want to create
 * @param   { Boolean } isSvg - should we use a SVG as parent node?
 * @returns { Object } DOM node just created
 */
      function mkEl(name, isSvg) {
        return isSvg ? document.createElementNS('http://www.w3.org/2000/svg', 'svg') : document.createElement(name)
      }
      /**
 * Get the outer html of any DOM node SVGs included
 * @param   { Object } el - DOM node to parse
 * @returns { String } el.outerHTML
 */
      function getOuterHTML(el) {
        if (el.outerHTML) {
          return el.outerHTML
        }  // some browsers do not support outerHTML on the SVGs tags
        else {
          var container = mkEl('div');
          container.appendChild(el.cloneNode(true));
          return container.innerHTML
        }
      }
      /**
 * Set the inner html of any DOM node SVGs included
 * @param { Object } container - DOM node where we'll inject new html
 * @param { String } html - html to inject
 */
      function setInnerHTML(container, html) {
        if (!isUndefined(container.innerHTML)) {
          container.innerHTML = html
        }  // some browsers do not support innerHTML on the SVGs tags
        else {
          var doc = new DOMParser().parseFromString(html, 'application/xml');
          var node = container.ownerDocument.importNode(doc.documentElement, true);
          container.appendChild(node)
        }
      }
      /**
 * Remove any DOM attribute from a node
 * @param   { Object } dom - DOM node we want to update
 * @param   { String } name - name of the property we want to remove
 */
      function remAttr(dom, name) {
        dom.removeAttribute(name)
      }
      /**
 * Get the value of any DOM attribute on a node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { String } name - name of the attribute we want to get
 * @returns { String | undefined } name of the node attribute whether it exists
 */
      function getAttr(dom, name) {
        return dom.getAttribute(name)
      }
      /**
 * Set any DOM attribute
 * @param { Object } dom - DOM node we want to update
 * @param { String } name - name of the property we want to set
 * @param { String } val - value of the property we want to set
 */
      function setAttr(dom, name, val) {
        var xlink = XLINK_REGEX.exec(name);
        if (xlink && xlink[1]) {
          dom.setAttributeNS(XLINK_NS, xlink[1], val)
        } else {
          dom.setAttribute(name, val)
        }
      }
      /**
 * Insert safely a tag to fix #1962 #1649
 * @param   { HTMLElement } root - children container
 * @param   { HTMLElement } curr - node to insert
 * @param   { HTMLElement } next - node that should preceed the current node inserted
 */
      function safeInsert(root, curr, next) {
        root.insertBefore(curr, next.parentNode && next)
      }
      /**
 * Minimize risk: only zero or one _space_ between attr & value
 * @param   { String }   html - html string we want to parse
 * @param   { Function } fn - callback function to apply on any attribute found
 */
      function walkAttrs(html, fn) {
        if (!html) {
          return
        }
        var m;
        while (m = RE_HTML_ATTRS.exec(html)) {
          fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
        }
      }
      /**
 * Walk down recursively all the children tags starting dom node
 * @param   { Object }   dom - starting node where we will start the recursion
 * @param   { Function } fn - callback to transform the child node just found
 * @param   { Object }   context - fn can optionally return an object, which is passed to children
 */
      function walkNodes(dom, fn, context) {
        if (dom) {
          var res = fn(dom, context);
          var next;
          // stop the recursion
          if (res === false) {
            return
          }
          dom = dom.firstChild;
          while (dom) {
            next = dom.nextSibling;
            walkNodes(dom, fn, res);
            dom = next
          }
        }
      }
      var dom = Object.freeze({
        $$: $$,
        $: $,
        createFrag: createFrag,
        createDOMPlaceholder: createDOMPlaceholder,
        mkEl: mkEl,
        getOuterHTML: getOuterHTML,
        setInnerHTML: setInnerHTML,
        remAttr: remAttr,
        getAttr: getAttr,
        setAttr: setAttr,
        safeInsert: safeInsert,
        walkAttrs: walkAttrs,
        walkNodes: walkNodes
      });
      var styleNode;
      var cssTextProp;
      var byName = {};
      var remainder = [];
      var needsInject = false;
      // skip the following code on the server
      if (WIN) {
        styleNode = function () {
          // create a new style element with the correct type
          var newNode = mkEl('style');
          setAttr(newNode, 'type', 'text/css');
          // replace any user node or insert the new one into the head
          var userNode = $('style[type=riot]');
          if (userNode) {
            if (userNode.id) {
              newNode.id = userNode.id
            }
            userNode.parentNode.replaceChild(newNode, userNode)
          } else {
            document.getElementsByTagName('head')[0].appendChild(newNode)
          }
          return newNode
        }();
        cssTextProp = styleNode.styleSheet
      }
      /**
 * Object that will be used to inject and manage the css of every tag instance
 */
      var styleManager = {
        styleNode: styleNode,
        /**
   * Save a tag style to be later injected into DOM
   * @param { String } css - css string
   * @param { String } name - if it's passed we will map the css to a tagname
   */
        add: function add(css, name) {
          if (name) {
            byName[name] = css
          } else {
            remainder.push(css)
          }
          needsInject = true
        },
        /**
   * Inject all previously saved tag styles into DOM
   * innerHTML seems slow: http://jsperf.com/riot-insert-style
   */
        inject: function inject() {
          if (!WIN || !needsInject) {
            return
          }
          needsInject = false;
          var style = Object.keys(byName).map(function (k) {
            return byName[k]
          }).concat(remainder).join('\n');
          if (cssTextProp) {
            cssTextProp.cssText = style
          } else {
            styleNode.innerHTML = style
          }
        }
      };
      /**
 * The riot template engine
 * @version v3.0.2
 */
      /**
 * riot.util.brackets
 *
 * - `brackets    ` - Returns a string or regex based on its parameter
 * - `brackets.set` - Change the current riot brackets
 *
 * @module
 */
      /* global riot */
      var brackets = function (UNDEF) {
        var REGLOB = 'g', R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g, R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, S_QBLOCKS = R_STRINGS.source + '|' + /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' + /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source, UNSUPPORTED = RegExp('[\\' + 'x00-\\x1F<>a-zA-Z0-9\'",;\\\\]'), NEED_ESCAPE = /(?=[[\]()*+?.^$|])/g, FINDBRACES = {
            '(': RegExp('([()])|' + S_QBLOCKS, REGLOB),
            '[': RegExp('([[\\]])|' + S_QBLOCKS, REGLOB),
            '{': RegExp('([{}])|' + S_QBLOCKS, REGLOB)
          }, DEFAULT = '{ }';
        var _pairs = [
          '{',
          '}',
          '{',
          '}',
          /{[^}]*}/,
          /\\([{}])/g,
          /\\({)|{/g,
          RegExp('\\\\(})|([[({])|(})|' + S_QBLOCKS, REGLOB),
          DEFAULT,
          /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
          /(^|[^\\]){=[\S\s]*?}/
        ];
        var cachedBrackets = UNDEF, _regex, _cache = [], _settings;
        function _loopback(re) {
          return re
        }
        function _rewrite(re, bp) {
          if (!bp) {
            bp = _cache
          }
          return new RegExp(re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : '')
        }
        function _create(pair) {
          if (pair === DEFAULT) {
            return _pairs
          }
          var arr = pair.split(' ');
          if (arr.length !== 2 || UNSUPPORTED.test(pair)) {
            throw new Error('Unsupported brackets "' + pair + '"')
          }
          arr = arr.concat(pair.replace(NEED_ESCAPE, '\\').split(' '));
          arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
          arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
          arr[6] = _rewrite(_pairs[6], arr);
          arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCKS, REGLOB);
          arr[8] = pair;
          return arr
        }
        function _brackets(reOrIdx) {
          return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
        }
        _brackets.split = function split(str, tmpl, _bp) {
          // istanbul ignore next: _bp is for the compiler
          if (!_bp) {
            _bp = _cache
          }
          var parts = [], match, isexpr, start, pos, re = _bp[6];
          isexpr = start = re.lastIndex = 0;
          while (match = re.exec(str)) {
            pos = match.index;
            if (isexpr) {
              if (match[2]) {
                re.lastIndex = skipBraces(str, match[2], re.lastIndex);
                continue
              }
              if (!match[3]) {
                continue
              }
            }
            if (!match[1]) {
              unescapeStr(str.slice(start, pos));
              start = re.lastIndex;
              re = _bp[6 + (isexpr ^= 1)];
              re.lastIndex = start
            }
          }
          if (str && start < str.length) {
            unescapeStr(str.slice(start))
          }
          return parts;
          function unescapeStr(s) {
            if (tmpl || isexpr) {
              parts.push(s && s.replace(_bp[5], '$1'))
            } else {
              parts.push(s)
            }
          }
          function skipBraces(s, ch, ix) {
            var match, recch = FINDBRACES[ch];
            recch.lastIndex = ix;
            ix = 1;
            while (match = recch.exec(s)) {
              if (match[1] && !(match[1] === ch ? ++ix : --ix)) {
                break
              }
            }
            return ix ? s.length : recch.lastIndex
          }
        };
        _brackets.hasExpr = function hasExpr(str) {
          return _cache[4].test(str)
        };
        _brackets.loopKeys = function loopKeys(expr) {
          var m = expr.match(_cache[9]);
          return m ? {
            key: m[1],
            pos: m[2],
            val: _cache[0] + m[3].trim() + _cache[1]
          } : { val: expr.trim() }
        };
        _brackets.array = function array(pair) {
          return pair ? _create(pair) : _cache
        };
        function _reset(pair) {
          if ((pair || (pair = DEFAULT)) !== _cache[8]) {
            _cache = _create(pair);
            _regex = pair === DEFAULT ? _loopback : _rewrite;
            _cache[9] = _regex(_pairs[9])
          }
          cachedBrackets = pair
        }
        function _setSettings(o) {
          var b;
          o = o || {};
          b = o.brackets;
          Object.defineProperty(o, 'brackets', {
            set: _reset,
            get: function () {
              return cachedBrackets
            },
            enumerable: true
          });
          _settings = o;
          _reset(b)
        }
        Object.defineProperty(_brackets, 'settings', {
          set: _setSettings,
          get: function () {
            return _settings
          }
        });
        /* istanbul ignore next: in the browser riot is always in the scope */
        _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
        _brackets.set = _reset;
        _brackets.R_STRINGS = R_STRINGS;
        _brackets.R_MLCOMMS = R_MLCOMMS;
        _brackets.S_QBLOCKS = S_QBLOCKS;
        return _brackets
      }();
      /**
 * @module tmpl
 *
 * tmpl          - Root function, returns the template value, render with data
 * tmpl.hasExpr  - Test the existence of a expression inside a string
 * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
 */
      var tmpl = function () {
        var _cache = {};
        function _tmpl(str, data) {
          if (!str) {
            return str
          }
          return (_cache[str] || (_cache[str] = _create(str))).call(data, _logErr)
        }
        _tmpl.hasExpr = brackets.hasExpr;
        _tmpl.loopKeys = brackets.loopKeys;
        // istanbul ignore next
        _tmpl.clearCache = function () {
          _cache = {}
        };
        _tmpl.errorHandler = null;
        function _logErr(err, ctx) {
          err.riotData = {
            tagName: ctx && ctx.__ && ctx.__.tagName,
            _riot_id: ctx && ctx._riot_id
          };
          if (_tmpl.errorHandler) {
            _tmpl.errorHandler(err)
          } else if (typeof console !== 'undefined' && typeof console.error === 'function') {
            if (err.riotData.tagName) {
              void 0
            }
            void 0
          }
        }
        function _create(str) {
          var expr = _getTmpl(str);
          if (expr.slice(0, 11) !== 'try{return ') {
            expr = 'return ' + expr
          }
          return new Function('E', expr + ';')  // eslint-disable-line no-new-func
        }
        var CH_IDEXPR = String.fromCharCode(8279), RE_CSNAME = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/, RE_QBLOCK = RegExp(brackets.S_QBLOCKS, 'g'), RE_DQUOTE = /\u2057/g, RE_QBMARK = /\u2057(\d+)~/g;
        function _getTmpl(str) {
          var qstr = [], expr, parts = brackets.split(str.replace(RE_DQUOTE, '"'), 1);
          if (parts.length > 2 || parts[0]) {
            var i, j, list = [];
            for (i = j = 0; i < parts.length; ++i) {
              expr = parts[i];
              if (expr && (expr = i & 1 ? _parseExpr(expr, 1, qstr) : '"' + expr.replace(/\\/g, '\\\\').replace(/\r\n?|\n/g, '\\n').replace(/"/g, '\\"') + '"')) {
                list[j++] = expr
              }
            }
            expr = j < 2 ? list[0] : '[' + list.join(',') + '].join("")'
          } else {
            expr = _parseExpr(parts[1], 0, qstr)
          }
          if (qstr[0]) {
            expr = expr.replace(RE_QBMARK, function (_, pos) {
              return qstr[pos].replace(/\r/g, '\\r').replace(/\n/g, '\\n')
            })
          }
          return expr
        }
        var RE_BREND = {
          '(': /[()]/g,
          '[': /[[\]]/g,
          '{': /[{}]/g
        };
        function _parseExpr(expr, asText, qstr) {
          expr = expr.replace(RE_QBLOCK, function (s, div) {
            return s.length > 2 && !div ? CH_IDEXPR + (qstr.push(s) - 1) + '~' : s
          }).replace(/\s+/g, ' ').trim().replace(/\ ?([[\({},?\.:])\ ?/g, '$1');
          if (expr) {
            var list = [], cnt = 0, match;
            while (expr && (match = expr.match(RE_CSNAME)) && !match.index) {
              var key, jsb, re = /,|([[{(])|$/g;
              expr = RegExp.rightContext;
              key = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];
              while (jsb = (match = re.exec(expr))[1]) {
                skipBraces(jsb, re)
              }
              jsb = expr.slice(0, match.index);
              expr = RegExp.rightContext;
              list[cnt++] = _wrapExpr(jsb, 1, key)
            }
            expr = !cnt ? _wrapExpr(expr, asText) : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0]
          }
          return expr;
          function skipBraces(ch, re) {
            var mm, lv = 1, ir = RE_BREND[ch];
            ir.lastIndex = re.lastIndex;
            while (mm = ir.exec(expr)) {
              if (mm[0] === ch) {
                ++lv
              } else if (!--lv) {
                break
              }
            }
            re.lastIndex = lv ? expr.length : ir.lastIndex
          }
        }
        // istanbul ignore next: not both
        var
          // eslint-disable-next-line max-len
          JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').', JS_VARNAME = /[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g, JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;
        function _wrapExpr(expr, asText, key) {
          var tb;
          expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
            if (mvar) {
              pos = tb ? 0 : pos + match.length;
              if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
                match = p + '("' + mvar + JS_CONTEXT + mvar;
                if (pos) {
                  tb = (s = s[pos]) === '.' || s === '(' || s === '['
                }
              } else if (pos) {
                tb = !JS_NOPROPS.test(s.slice(pos))
              }
            }
            return match
          });
          if (tb) {
            expr = 'try{return ' + expr + '}catch(e){E(e,this)}'
          }
          if (key) {
            expr = (tb ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')') + '?"' + key + '":""'
          } else if (asText) {
            expr = 'function(v){' + (tb ? expr.replace('return ', 'v=') : 'v=(' + expr + ')') + ';return v||v===0?v:""}.call(this)'
          }
          return expr
        }
        _tmpl.version = brackets.version = 'v3.0.2';
        return _tmpl
      }();
      var observable$1 = function (el) {
        /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
        el = el || {};
        /**
   * Private variables
   */
        var callbacks = {}, slice = Array.prototype.slice;
        /**
   * Public Api
   */
        // extend the el object adding the observable methods
        Object.defineProperties(el, {
          /**
     * Listen to the given `event` ands
     * execute the `callback` each time an event is triggered.
     * @param  { String } event - event id
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
          on: {
            value: function (event, fn) {
              if (typeof fn == 'function') {
                (callbacks[event] = callbacks[event] || []).push(fn)
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Removes the given `event` listeners
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          off: {
            value: function (event, fn) {
              if (event == '*' && !fn) {
                callbacks = {}
              } else {
                if (fn) {
                  var arr = callbacks[event];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn) {
                      arr.splice(i--, 1)
                    }
                  }
                } else {
                  delete callbacks[event]
                }
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Listen to the given `event` and
     * execute the `callback` at most once
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          one: {
            value: function (event, fn) {
              function on() {
                el.off(event, on);
                fn.apply(el, arguments)
              }
              return el.on(event, on)
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Execute all callback functions that listen to
     * the given `event`
     * @param   { String } event - event id
     * @returns { Object } el
     */
          trigger: {
            value: function (event) {
              var arguments$1 = arguments;
              // getting the arguments
              var arglen = arguments.length - 1, args = new Array(arglen), fns, fn, i;
              for (i = 0; i < arglen; i++) {
                args[i] = arguments$1[i + 1]  // skip first argument
              }
              fns = slice.call(callbacks[event] || [], 0);
              for (i = 0; fn = fns[i]; ++i) {
                fn.apply(el, args)
              }
              if (callbacks['*'] && event != '*') {
                el.trigger.apply(el, [
                  '*',
                  event
                ].concat(args))
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          }
        });
        return el
      };
      /**
 * Specialized function for looping an array-like collection with `each={}`
 * @param   { Array } list - collection of items
 * @param   {Function} fn - callback function
 * @returns { Array } the array looped
 */
      function each(list, fn) {
        var len = list ? list.length : 0;
        for (var i = 0, el; i < len; ++i) {
          el = list[i];
          // return false -> current item was removed by fn during the loop
          if (fn(el, i) === false) {
            i--
          }
        }
        return list
      }
      /**
 * Check whether an array contains an item
 * @param   { Array } array - target array
 * @param   { * } item - item to test
 * @returns { Boolean } -
 */
      function contains(array, item) {
        return array.indexOf(item) !== -1
      }
      /**
 * Convert a string containing dashes to camel case
 * @param   { String } str - input string
 * @returns { String } my-string -> myString
 */
      function toCamel(str) {
        return str.replace(/-(\w)/g, function (_, c) {
          return c.toUpperCase()
        })
      }
      /**
 * Faster String startsWith alternative
 * @param   { String } str - source string
 * @param   { String } value - test string
 * @returns { Boolean } -
 */
      function startsWith(str, value) {
        return str.slice(0, value.length) === value
      }
      /**
 * Helper function to set an immutable property
 * @param   { Object } el - object where the new property will be set
 * @param   { String } key - object key where the new property will be stored
 * @param   { * } value - value of the new property
 * @param   { Object } options - set the propery overriding the default options
 * @returns { Object } - the initial object
 */
      function defineProperty(el, key, value, options) {
        Object.defineProperty(el, key, extend({
          value: value,
          enumerable: false,
          writable: false,
          configurable: true
        }, options));
        return el
      }
      /**
 * Extend any object with other properties
 * @param   { Object } src - source object
 * @returns { Object } the resulting extended object
 *
 * var obj = { foo: 'baz' }
 * extend(obj, {bar: 'bar', foo: 'bar'})
 * console.log(obj) => {bar: 'bar', foo: 'bar'}
 *
 */
      function extend(src) {
        var obj, args = arguments;
        for (var i = 1; i < args.length; ++i) {
          if (obj = args[i]) {
            for (var key in obj) {
              // check if this property of the source object could be overridden
              if (isWritable(src, key)) {
                src[key] = obj[key]
              }
            }
          }
        }
        return src
      }
      var misc = Object.freeze({
        each: each,
        contains: contains,
        toCamel: toCamel,
        startsWith: startsWith,
        defineProperty: defineProperty,
        extend: extend
      });
      var settings$1 = extend(Object.create(brackets.settings), { skipAnonymousTags: true });
      var EVENTS_PREFIX_REGEX = /^on/;
      /**
 * Trigger DOM events
 * @param   { HTMLElement } dom - dom element target of the event
 * @param   { Function } handler - user function
 * @param   { Object } e - event object
 */
      function handleEvent(dom, handler, e) {
        var ptag = this.__.parent, item = this.__.item;
        if (!item) {
          while (ptag && !item) {
            item = ptag.__.item;
            ptag = ptag.__.parent
          }
        }
        // override the event properties
        if (isWritable(e, 'currentTarget')) {
          e.currentTarget = dom
        }
        if (isWritable(e, 'target')) {
          e.target = e.srcElement
        }
        if (isWritable(e, 'which')) {
          e.which = e.charCode || e.keyCode
        }
        e.item = item;
        handler.call(this, e);
        if (!e.preventUpdate) {
          var p = getImmediateCustomParentTag(this);
          // fixes #2083
          if (p.isMounted) {
            p.update()
          }
        }
      }
      /**
 * Attach an event to a DOM node
 * @param { String } name - event name
 * @param { Function } handler - event callback
 * @param { Object } dom - dom node
 * @param { Tag } tag - tag instance
 */
      function setEventHandler(name, handler, dom, tag) {
        var eventName, cb = handleEvent.bind(tag, dom, handler);
        if (!dom.addEventListener) {
          dom[name] = cb;
          return
        }
        // avoid to bind twice the same event
        dom[name] = null;
        // normalize event name
        eventName = name.replace(EVENTS_PREFIX_REGEX, '');
        // cache the callback directly on the DOM node
        if (!dom._riotEvents) {
          dom._riotEvents = {}
        }
        if (dom._riotEvents[name]) {
          dom.removeEventListener(eventName, dom._riotEvents[name])
        }
        dom._riotEvents[name] = cb;
        dom.addEventListener(eventName, cb, false)
      }
      /**
 * Update dynamically created data-is tags with changing expressions
 * @param { Object } expr - expression tag and expression info
 * @param { Tag } parent - parent for tag creation
 */
      function updateDataIs(expr, parent) {
        var tagName = tmpl(expr.value, parent), conf, isVirtual, head, ref;
        if (expr.tag && expr.tagName === tagName) {
          expr.tag.update();
          return
        }
        isVirtual = expr.dom.tagName === 'VIRTUAL';
        // sync _parent to accommodate changing tagnames
        if (expr.tag) {
          // need placeholder before unmount
          if (isVirtual) {
            head = expr.tag.__.head;
            ref = createDOMPlaceholder();
            head.parentNode.insertBefore(ref, head)
          }
          expr.tag.unmount(true)
        }
        expr.impl = __TAG_IMPL[tagName];
        conf = {
          root: expr.dom,
          parent: parent,
          hasImpl: true,
          tagName: tagName
        };
        expr.tag = initChildTag(expr.impl, conf, expr.dom.innerHTML, parent);
        each(expr.attrs, function (a) {
          return setAttr(expr.tag.root, a.name, a.value)
        });
        expr.tagName = tagName;
        expr.tag.mount();
        if (isVirtual) {
          makeReplaceVirtual(expr.tag, ref || expr.tag.root)
        }
        // root exist first time, after use placeholder
        // parent is the placeholder tag, not the dynamic tag so clean up
        parent.__.onUnmount = function () {
          var delName = expr.tag.opts.dataIs, tags = expr.tag.parent.tags, _tags = expr.tag.__.parent.tags;
          arrayishRemove(tags, delName, expr.tag);
          arrayishRemove(_tags, delName, expr.tag);
          expr.tag.unmount()
        }
      }
      /**
 * Update on single tag expression
 * @this Tag
 * @param { Object } expr - expression logic
 * @returns { undefined }
 */
      function updateExpression(expr) {
        if (this.root && getAttr(this.root, 'virtualized')) {
          return
        }
        var dom = expr.dom, attrName = expr.attr, isToggle = contains([
            SHOW_DIRECTIVE,
            HIDE_DIRECTIVE
          ], attrName), value = tmpl(expr.expr, this), isValueAttr = attrName === 'riot-value', isVirtual = expr.root && expr.root.tagName === 'VIRTUAL', parent = dom && (expr.parent || dom.parentNode), old;
        if (expr.bool) {
          value = value ? attrName : false
        } else if (isUndefined(value) || value === null) {
          value = ''
        }
        if (expr._riot_id) {
          // if it's a tag
          if (expr.isMounted) {
            expr.update()  // if it hasn't been mounted yet, do that now.
          } else {
            expr.mount();
            if (isVirtual) {
              makeReplaceVirtual(expr, expr.root)
            }
          }
          return
        }
        old = expr.value;
        expr.value = value;
        if (expr.update) {
          expr.update();
          return
        }
        if (expr.isRtag && value) {
          return updateDataIs(expr, this)
        }
        if (old === value) {
          return
        }
        // no change, so nothing more to do
        if (isValueAttr && dom.value === value) {
          return
        }
        // textarea and text nodes have no attribute name
        if (!attrName) {
          // about #815 w/o replace: the browser converts the value to a string,
          // the comparison by "==" does too, but not in the server
          value += '';
          // test for parent avoids error with invalid assignment to nodeValue
          if (parent) {
            // cache the parent node because somehow it will become null on IE
            // on the next iteration
            expr.parent = parent;
            if (parent.tagName === 'TEXTAREA') {
              parent.value = value;
              // #1113
              if (!IE_VERSION) {
                dom.nodeValue = value
              }  // #1625 IE throws here, nodeValue
            }  // will be available on 'updated'
            else {
              dom.nodeValue = value
            }
          }
          return
        }
        // remove original attribute
        if (!expr.isAttrRemoved || !value) {
          remAttr(dom, attrName);
          expr.isAttrRemoved = true
        }
        // event handler
        if (isFunction(value)) {
          setEventHandler(attrName, value, dom, this)  // show / hide
        } else if (isToggle) {
          if (attrName === HIDE_DIRECTIVE) {
            value = !value
          }
          dom.style.display = value ? '' : 'none'  // field value
        } else if (isValueAttr) {
          dom.value = value  // <img src="{ expr }">
        } else if (startsWith(attrName, ATTRS_PREFIX) && attrName !== IS_DIRECTIVE) {
          attrName = attrName.slice(ATTRS_PREFIX.length);
          if (CASE_SENSITIVE_ATTRIBUTES[attrName]) {
            attrName = CASE_SENSITIVE_ATTRIBUTES[attrName]
          }
          if (value != null) {
            setAttr(dom, attrName, value)
          }
        } else {
          if (expr.bool) {
            dom[attrName] = value;
            if (!value) {
              return
            }
          }
          if (value === 0 || value && typeof value !== T_OBJECT) {
            setAttr(dom, attrName, value)
          }
        }
      }
      /**
 * Update all the expressions in a Tag instance
 * @this Tag
 * @param { Array } expressions - expression that must be re evaluated
 */
      function updateAllExpressions(expressions) {
        each(expressions, updateExpression.bind(this))
      }
      var IfExpr = {
        init: function init(dom, tag, expr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE);
          this.tag = tag;
          this.expr = expr;
          this.stub = document.createTextNode('');
          this.pristine = dom;
          var p = dom.parentNode;
          p.insertBefore(this.stub, dom);
          p.removeChild(dom);
          return this
        },
        update: function update() {
          var newValue = tmpl(this.expr, this.tag);
          if (newValue && !this.current) {
            // insert
            this.current = this.pristine.cloneNode(true);
            this.stub.parentNode.insertBefore(this.current, this.stub);
            this.expressions = [];
            parseExpressions.apply(this.tag, [
              this.current,
              this.expressions,
              true
            ])
          } else if (!newValue && this.current) {
            // remove
            unmountAll(this.expressions);
            if (this.current._tag) {
              this.current._tag.unmount()
            } else if (this.current.parentNode) {
              this.current.parentNode.removeChild(this.current)
            }
            this.current = null;
            this.expressions = []
          }
          if (newValue) {
            updateAllExpressions.call(this.tag, this.expressions)
          }
        },
        unmount: function unmount() {
          unmountAll(this.expressions || []);
          delete this.pristine;
          delete this.parentNode;
          delete this.stub
        }
      };
      var RefExpr = {
        init: function init(dom, parent, attrName, attrValue) {
          this.dom = dom;
          this.attr = attrName;
          this.rawValue = attrValue;
          this.parent = parent;
          this.hasExp = tmpl.hasExpr(attrValue);
          this.firstRun = true;
          return this
        },
        update: function update() {
          var value = this.rawValue;
          if (this.hasExp) {
            value = tmpl(this.rawValue, this.parent)
          }
          // if nothing changed, we're done
          if (!this.firstRun && value === this.value) {
            return
          }
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          // if the referenced element is a custom tag, then we set the tag itself, rather than DOM
          var tagOrDom = this.tag || this.dom;
          // the name changed, so we need to remove it from the old key (if present)
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          if (isBlank(value)) {
            // if the value is blank, we remove it
            remAttr(this.dom, this.attr)
          } else {
            // add it to the refs of parent tag (this behavior was changed >=3.0)
            if (customParent) {
              arrayishAdd(customParent.refs, value, tagOrDom, // use an array if it's a looped node and the ref is not an expression
              null, this.parent.__.index)
            }
            // set the actual DOM attr
            setAttr(this.dom, this.attr, value)
          }
          this.value = value;
          this.firstRun = false
        },
        unmount: function unmount() {
          var tagOrDom = this.tag || this.dom;
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          delete this.dom;
          delete this.parent
        }
      };
      /**
 * Convert the item looped into an object used to extend the child tag properties
 * @param   { Object } expr - object containing the keys used to extend the children tags
 * @param   { * } key - value to assign to the new object returned
 * @param   { * } val - value containing the position of the item in the array
 * @param   { Object } base - prototype object for the new item
 * @returns { Object } - new object containing the values of the original item
 *
 * The variables 'key' and 'val' are arbitrary.
 * They depend on the collection type looped (Array, Object)
 * and on the expression used on the each tag
 *
 */
      function mkitem(expr, key, val, base) {
        var item = base ? Object.create(base) : {};
        item[expr.key] = key;
        if (expr.pos) {
          item[expr.pos] = val
        }
        return item
      }
      /**
 * Unmount the redundant tags
 * @param   { Array } items - array containing the current items to loop
 * @param   { Array } tags - array containing all the children tags
 */
      function unmountRedundant(items, tags) {
        var i = tags.length, j = items.length;
        while (i > j) {
          i--;
          remove.apply(tags[i], [
            tags,
            i
          ])
        }
      }
      /**
 * Remove a child tag
 * @this Tag
 * @param   { Array } tags - tags collection
 * @param   { Number } i - index of the tag to remove
 */
      function remove(tags, i) {
        tags.splice(i, 1);
        this.unmount();
        arrayishRemove(this.parent, this, this.__.tagName, true)
      }
      /**
 * Move the nested custom tags in non custom loop tags
 * @this Tag
 * @param   { Number } i - current position of the loop tag
 */
      function moveNestedTags(i) {
        var this$1 = this;
        each(Object.keys(this.tags), function (tagName) {
          var tag = this$1.tags[tagName];
          if (isArray(tag)) {
            each(tag, function (t) {
              moveChildTag.apply(t, [
                tagName,
                i
              ])
            })
          } else {
            moveChildTag.apply(tag, [
              tagName,
              i
            ])
          }
        })
      }
      /**
 * Move a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to move
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function move(root, nextTag, isVirtual) {
        if (isVirtual) {
          moveVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Insert and mount a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to insert
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function insert(root, nextTag, isVirtual) {
        if (isVirtual) {
          makeVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Append a new tag into the DOM
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function append(root, isVirtual) {
        if (isVirtual) {
          makeVirtual.call(this, root)
        } else {
          root.appendChild(this.root)
        }
      }
      /**
 * Manage tags having the 'each'
 * @param   { HTMLElement } dom - DOM node we need to loop
 * @param   { Tag } parent - parent tag instance where the dom node is contained
 * @param   { String } expr - string contained in the 'each' attribute
 * @returns { Object } expression object for this each loop
 */
      function _each(dom, parent, expr) {
        // remove the each property from the original tag
        remAttr(dom, LOOP_DIRECTIVE);
        var mustReorder = typeof getAttr(dom, LOOP_NO_REORDER_DIRECTIVE) !== T_STRING || remAttr(dom, LOOP_NO_REORDER_DIRECTIVE), tagName = getTagName(dom), impl = __TAG_IMPL[tagName], parentNode = dom.parentNode, placeholder = createDOMPlaceholder(), child = getTag(dom), ifExpr = getAttr(dom, CONDITIONAL_DIRECTIVE), tags = [], oldItems = [], hasKeys, isLoop = true, isAnonymous = !__TAG_IMPL[tagName], isVirtual = dom.tagName === 'VIRTUAL';
        // parse the each expression
        expr = tmpl.loopKeys(expr);
        expr.isLoop = true;
        if (ifExpr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE)
        }
        // insert a marked where the loop tags will be injected
        parentNode.insertBefore(placeholder, dom);
        parentNode.removeChild(dom);
        expr.update = function updateEach() {
          // get the new items collection
          var items = tmpl(expr.val, parent), frag = createFrag(), isObject$$1 = !isArray(items) && !isString(items), root = placeholder.parentNode;
          // object loop. any changes cause full redraw
          if (isObject$$1) {
            hasKeys = items || false;
            items = hasKeys ? Object.keys(items).map(function (key) {
              return mkitem(expr, items[key], key)
            }) : []
          } else {
            hasKeys = false
          }
          if (ifExpr) {
            items = items.filter(function (item, i) {
              if (expr.key && !isObject$$1) {
                return !!tmpl(ifExpr, mkitem(expr, item, i, parent))
              }
              return !!tmpl(ifExpr, extend(Object.create(parent), item))
            })
          }
          // loop all the new items
          each(items, function (item, i) {
            // reorder only if the items are objects
            var doReorder = mustReorder && typeof item === T_OBJECT && !hasKeys, oldPos = oldItems.indexOf(item), isNew = oldPos === -1, pos = !isNew && doReorder ? oldPos : i,
              // does a tag exist in this position?
              tag = tags[pos], mustAppend = i >= oldItems.length, mustCreate = doReorder && isNew || !doReorder && !tag;
            item = !hasKeys && expr.key ? mkitem(expr, item, i) : item;
            // new tag
            if (mustCreate) {
              tag = new Tag$1(impl, {
                parent: parent,
                isLoop: isLoop,
                isAnonymous: isAnonymous,
                tagName: tagName,
                root: dom.cloneNode(isAnonymous),
                item: item,
                index: i
              }, dom.innerHTML);
              // mount the tag
              tag.mount();
              if (mustAppend) {
                append.apply(tag, [
                  frag || root,
                  isVirtual
                ])
              } else {
                insert.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ])
              }
              if (!mustAppend) {
                oldItems.splice(i, 0, item)
              }
              tags.splice(i, 0, tag);
              if (child) {
                arrayishAdd(parent.tags, tagName, tag, true)
              }
            } else if (pos !== i && doReorder) {
              // move
              if (contains(items, oldItems[pos])) {
                move.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ]);
                // move the old tag instance
                tags.splice(i, 0, tags.splice(pos, 1)[0]);
                // move the old item
                oldItems.splice(i, 0, oldItems.splice(pos, 1)[0])
              } else {
                // remove
                remove.apply(tags[i], [
                  tags,
                  i
                ]);
                oldItems.splice(i, 1)
              }
              // update the position attribute if it exists
              if (expr.pos) {
                tag[expr.pos] = i
              }
              // if the loop tags are not custom
              // we need to move all their custom tags into the right position
              if (!child && tag.tags) {
                moveNestedTags.call(tag, i)
              }
            }
            // cache the original item to use it in the events bound to this node
            // and its children
            tag.__.item = item;
            tag.__.index = i;
            tag.__.parent = parent;
            if (!mustCreate) {
              tag.update(item)
            }
          });
          // remove the redundant tags
          unmountRedundant(items, tags);
          // clone the items array
          oldItems = items.slice();
          root.insertBefore(frag, placeholder)
        };
        expr.unmount = function () {
          each(tags, function (t) {
            t.unmount()
          })
        };
        return expr
      }
      /**
 * Walk the tag DOM to detect the expressions to evaluate
 * @this Tag
 * @param   { HTMLElement } root - root tag where we will start digging the expressions
 * @param   { Array } expressions - empty array where the expressions will be added
 * @param   { Boolean } mustIncludeRoot - flag to decide whether the root must be parsed as well
 * @returns { Object } an object containing the root noode and the dom tree
 */
      function parseExpressions(root, expressions, mustIncludeRoot) {
        var this$1 = this;
        var tree = { parent: { children: expressions } };
        walkNodes(root, function (dom, ctx) {
          var type = dom.nodeType, parent = ctx.parent, attr, expr, tagImpl;
          if (!mustIncludeRoot && dom === root) {
            return { parent: parent }
          }
          // text node
          if (type === 3 && dom.parentNode.tagName !== 'STYLE' && tmpl.hasExpr(dom.nodeValue)) {
            parent.children.push({
              dom: dom,
              expr: dom.nodeValue
            })
          }
          if (type !== 1) {
            return ctx
          }
          // not an element
          var isVirtual = dom.tagName === 'VIRTUAL';
          // loop. each does it's own thing (for now)
          if (attr = getAttr(dom, LOOP_DIRECTIVE)) {
            if (isVirtual) {
              setAttr(dom, 'loopVirtual', true)
            }
            // ignore here, handled in _each
            parent.children.push(_each(dom, this$1, attr));
            return false
          }
          // if-attrs become the new parent. Any following expressions (either on the current
          // element, or below it) become children of this expression.
          if (attr = getAttr(dom, CONDITIONAL_DIRECTIVE)) {
            parent.children.push(Object.create(IfExpr).init(dom, this$1, attr));
            return false
          }
          if (expr = getAttr(dom, IS_DIRECTIVE)) {
            if (tmpl.hasExpr(expr)) {
              parent.children.push({
                isRtag: true,
                expr: expr,
                dom: dom,
                attrs: [].slice.call(dom.attributes)
              });
              return false
            }
          }
          // if this is a tag, stop traversing here.
          // we ignore the root, since parseExpressions is called while we're mounting that root
          tagImpl = getTag(dom);
          if (isVirtual) {
            if (getAttr(dom, 'virtualized')) {
              dom.parentElement.removeChild(dom)
            }
            // tag created, remove from dom
            if (!tagImpl && !getAttr(dom, 'virtualized') && !getAttr(dom, 'loopVirtual'))
              // ok to create virtual tag
              {
                tagImpl = { tmpl: dom.outerHTML }
              }
          }
          if (tagImpl && (dom !== root || mustIncludeRoot)) {
            if (isVirtual && !getAttr(dom, IS_DIRECTIVE)) {
              // handled in update
              // can not remove attribute like directives
              // so flag for removal after creation to prevent maximum stack error
              setAttr(dom, 'virtualized', true);
              var tag = new Tag$1({ tmpl: dom.outerHTML }, {
                root: dom,
                parent: this$1
              }, dom.innerHTML);
              parent.children.push(tag)  // no return, anonymous tag, keep parsing
            } else {
              var conf = {
                root: dom,
                parent: this$1,
                hasImpl: true
              };
              parent.children.push(initChildTag(tagImpl, conf, dom.innerHTML, this$1));
              return false
            }
          }
          // attribute expressions
          parseAttributes.apply(this$1, [
            dom,
            dom.attributes,
            function (attr, expr) {
              if (!expr) {
                return
              }
              parent.children.push(expr)
            }
          ]);
          // whatever the parent is, all child elements get the same parent.
          // If this element had an if-attr, that's the parent for all child elements
          return { parent: parent }
        }, tree);
        return {
          tree: tree,
          root: root
        }
      }
      /**
 * Calls `fn` for every attribute on an element. If that attr has an expression,
 * it is also passed to fn.
 * @this Tag
 * @param   { HTMLElement } dom - dom node to parse
 * @param   { Array } attrs - array of attributes
 * @param   { Function } fn - callback to exec on any iteration
 */
      function parseAttributes(dom, attrs, fn) {
        var this$1 = this;
        each(attrs, function (attr) {
          var name = attr.name, bool = isBoolAttr(name), expr;
          if (contains(REF_DIRECTIVES, name)) {
            expr = Object.create(RefExpr).init(dom, this$1, name, attr.value)
          } else if (tmpl.hasExpr(attr.value)) {
            expr = {
              dom: dom,
              expr: attr.value,
              attr: attr.name,
              bool: bool
            }
          }
          fn(attr, expr)
        })
      }
      /*
  Includes hacks needed for the Internet Explorer version 9 and below
  See: http://kangax.github.io/compat-table/es5/#ie8
       http://codeplanet.io/dropping-ie8/
*/
      var reHasYield = /<yield\b/i;
      var reYieldAll = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi;
      var reYieldSrc = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi;
      var reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi;
      var rootEls = {
        tr: 'tbody',
        th: 'tr',
        td: 'tr',
        col: 'colgroup'
      };
      var tblTags = IE_VERSION && IE_VERSION < 10 ? RE_SPECIAL_TAGS : RE_SPECIAL_TAGS_NO_OPTION;
      var GENERIC = 'div';
      /*
  Creates the root element for table or select child elements:
  tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
*/
      function specialTags(el, tmpl, tagName) {
        var select = tagName[0] === 'o', parent = select ? 'select>' : 'table>';
        // trim() is important here, this ensures we don't have artifacts,
        // so we can check if we have only one element inside the parent
        el.innerHTML = '<' + parent + tmpl.trim() + '</' + parent;
        parent = el.firstChild;
        // returns the immediate parent if tr/th/td/col is the only element, if not
        // returns the whole tree, as this can include additional elements
        if (select) {
          parent.selectedIndex = -1  // for IE9, compatible w/current riot behavior
        } else {
          // avoids insertion of cointainer inside container (ex: tbody inside tbody)
          var tname = rootEls[tagName];
          if (tname && parent.childElementCount === 1) {
            parent = $(tname, parent)
          }
        }
        return parent
      }
      /*
  Replace the yield tag from any tag template with the innerHTML of the
  original tag in the page
*/
      function replaceYield(tmpl, html) {
        // do nothing if no yield
        if (!reHasYield.test(tmpl)) {
          return tmpl
        }
        // be careful with #1343 - string on the source having `$1`
        var src = {};
        html = html && html.replace(reYieldSrc, function (_, ref, text) {
          src[ref] = src[ref] || text;
          // preserve first definition
          return ''
        }).trim();
        return tmpl.replace(reYieldDest, function (_, ref, def) {
          // yield with from - to attrs
          return src[ref] || def || ''
        }).replace(reYieldAll, function (_, def) {
          // yield without any "from"
          return html || def || ''
        })
      }
      /**
 * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
 * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
 *
 * @param   { String } tmpl  - The template coming from the custom tag definition
 * @param   { String } html - HTML content that comes from the DOM element where you
 *           will mount the tag, mostly the original tag in the page
 * @param   { Boolean } checkSvg - flag needed to know if we need to force the svg rendering in case of loop nodes
 * @returns { HTMLElement } DOM element with _tmpl_ merged through `YIELD` with the _html_.
 */
      function mkdom(tmpl, html, checkSvg) {
        var match = tmpl && tmpl.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), el = mkEl(GENERIC, checkSvg && isSVGTag(tagName));
        // replace all the yield tags with the tag inner html
        tmpl = replaceYield(tmpl, html);
        /* istanbul ignore next */
        if (tblTags.test(tagName)) {
          el = specialTags(el, tmpl, tagName)
        } else {
          setInnerHTML(el, tmpl)
        }
        return el
      }
      /**
 * Another way to create a riot tag a bit more es6 friendly
 * @param { HTMLElement } el - tag DOM selector or DOM node/s
 * @param { Object } opts - tag logic
 * @returns { Tag } new riot tag instance
 */
      function Tag$2(el, opts) {
        // get the tag properties from the class constructor
        var ref = this;
        var name = ref.name;
        var tmpl = ref.tmpl;
        var css = ref.css;
        var attrs = ref.attrs;
        var onCreate = ref.onCreate;
        // register a new tag and cache the class prototype
        if (!__TAG_IMPL[name]) {
          tag$1(name, tmpl, css, attrs, onCreate);
          // cache the class constructor
          __TAG_IMPL[name].class = this.constructor
        }
        // mount the tag using the class instance
        mountTo(el, name, opts, this);
        // inject the component css
        if (css) {
          styleManager.inject()
        }
        return this
      }
      /**
 * Create a new riot tag implementation
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag$1(name, tmpl, css, attrs, fn) {
        if (isFunction(attrs)) {
          fn = attrs;
          if (/^[\w\-]+\s?=/.test(css)) {
            attrs = css;
            css = ''
          } else {
            attrs = ''
          }
        }
        if (css) {
          if (isFunction(css)) {
            fn = css
          } else {
            styleManager.add(css)
          }
        }
        name = name.toLowerCase();
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        return name
      }
      /**
 * Create a new riot tag implementation (for use by the compiler)
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag2$1(name, tmpl, css, attrs, fn) {
        if (css) {
          styleManager.add(css, name)
        }
        var exists = !!__TAG_IMPL[name];
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        if (exists && util.hotReloader) {
          util.hotReloader(name)
        }
        return name
      }
      /**
 * Mount a tag using a specific tag implementation
 * @param   { * } selector - tag DOM selector or DOM node/s
 * @param   { String } tagName - tag implementation name
 * @param   { Object } opts - tag logic
 * @returns { Array } new tags instances
 */
      function mount$1(selector, tagName, opts) {
        var tags = [];
        function pushTagsTo(root) {
          if (root.tagName) {
            var riotTag = getAttr(root, IS_DIRECTIVE);
            // have tagName? force riot-tag to be the same
            if (tagName && riotTag !== tagName) {
              riotTag = tagName;
              setAttr(root, IS_DIRECTIVE, tagName)
            }
            var tag$$1 = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);
            if (tag$$1) {
              tags.push(tag$$1)
            }
          } else if (root.length) {
            each(root, pushTagsTo)
          }  // assume nodeList
        }
        // inject styles into DOM
        styleManager.inject();
        if (isObject(tagName)) {
          opts = tagName;
          tagName = 0
        }
        var elem;
        var allTags;
        // crawl the DOM to find the tag
        if (isString(selector)) {
          selector = selector === '*' ? // select all registered tags
          // & tags found with the riot-tag attribute set
          allTags = selectTags() : // or just the ones named like the selector
          selector + selectTags(selector.split(/, */));
          // make sure to pass always a selector
          // to the querySelectorAll function
          elem = selector ? $$(selector) : []
        } else
          // probably you have passed already a tag or a NodeList
          {
            elem = selector
          }
        // select all the registered and mount them inside their root elements
        if (tagName === '*') {
          // get all custom tags
          tagName = allTags || selectTags();
          // if the root els it's just a single tag
          if (elem.tagName) {
            elem = $$(tagName, elem)
          } else {
            // select all the children for all the different root elements
            var nodeList = [];
            each(elem, function (_el) {
              return nodeList.push($$(tagName, _el))
            });
            elem = nodeList
          }
          // get rid of the tagName
          tagName = 0
        }
        pushTagsTo(elem);
        return tags
      }
      // Create a mixin that could be globally shared across all the tags
      var mixins = {};
      var globals = mixins[GLOBAL_MIXIN] = {};
      var _id = 0;
      /**
 * Create/Return a mixin by its name
 * @param   { String }  name - mixin name (global mixin if object)
 * @param   { Object }  mix - mixin logic
 * @param   { Boolean } g - is global?
 * @returns { Object }  the mixin logic
 */
      function mixin$1(name, mix, g) {
        // Unnamed global
        if (isObject(name)) {
          mixin$1('__unnamed_' + _id++, name, true);
          return
        }
        var store = g ? globals : mixins;
        // Getter
        if (!mix) {
          if (isUndefined(store[name])) {
            throw new Error('Unregistered mixin: ' + name)
          }
          return store[name]
        }
        // Setter
        store[name] = isFunction(mix) ? extend(mix.prototype, store[name] || {}) && mix : extend(store[name] || {}, mix)
      }
      /**
 * Update all the tags instances created
 * @returns { Array } all the tags instances
 */
      function update$1() {
        return each(__TAGS_CACHE, function (tag$$1) {
          return tag$$1.update()
        })
      }
      function unregister$1(name) {
        delete __TAG_IMPL[name]
      }
      var core = Object.freeze({
        Tag: Tag$2,
        tag: tag$1,
        tag2: tag2$1,
        mount: mount$1,
        mixin: mixin$1,
        update: update$1,
        unregister: unregister$1
      });
      // counter to give a unique id to all the Tag instances
      var __uid = 0;
      /**
 * We need to update opts for this tag. That requires updating the expressions
 * in any attributes on the tag, and then copying the result onto opts.
 * @this Tag
 * @param   {Boolean} isLoop - is it a loop tag?
 * @param   { Tag }  parent - parent tag node
 * @param   { Boolean }  isAnonymous - is it a tag without any impl? (a tag not registered)
 * @param   { Object }  opts - tag options
 * @param   { Array }  instAttrs - tag attributes array
 */
      function updateOpts(isLoop, parent, isAnonymous, opts, instAttrs) {
        // isAnonymous `each` tags treat `dom` and `root` differently. In this case
        // (and only this case) we don't need to do updateOpts, because the regular parse
        // will update those attrs. Plus, isAnonymous tags don't need opts anyway
        if (isLoop && isAnonymous) {
          return
        }
        var ctx = !isAnonymous && isLoop ? this : parent || this;
        each(instAttrs, function (attr) {
          if (attr.expr) {
            updateAllExpressions.call(ctx, [attr.expr])
          }
          opts[toCamel(attr.name)] = attr.expr ? attr.expr.value : attr.value
        })
      }
      /**
 * Tag class
 * @constructor
 * @param { Object } impl - it contains the tag template, and logic
 * @param { Object } conf - tag options
 * @param { String } innerHTML - html that eventually we need to inject in the tag
 */
      function Tag$1(impl, conf, innerHTML) {
        if (impl === void 0)
          impl = {};
        if (conf === void 0)
          conf = {};
        var opts = extend({}, conf.opts), parent = conf.parent, isLoop = conf.isLoop, isAnonymous = !!conf.isAnonymous, skipAnonymous = settings$1.skipAnonymousTags && isAnonymous, item = cleanUpData(conf.item), index = conf.index,
          // available only for the looped nodes
          instAttrs = [],
          // All attributes on the Tag when it's first parsed
          implAttrs = [],
          // expressions on this type of Tag
          expressions = [], root = conf.root, tagName = conf.tagName || getTagName(root), isVirtual = tagName === 'virtual', propsInSyncWithParent = [], dom;
        // make this tag observable
        if (!skipAnonymous) {
          observable$1(this)
        }
        // only call unmount if we have a valid __TAG_IMPL (has name property)
        if (impl.name && root._tag) {
          root._tag.unmount(true)
        }
        // not yet mounted
        this.isMounted = false;
        defineProperty(this, '__', {
          isAnonymous: isAnonymous,
          instAttrs: instAttrs,
          innerHTML: innerHTML,
          tagName: tagName,
          index: index,
          isLoop: isLoop,
          // these vars will be needed only for the virtual tags
          virts: [],
          tail: null,
          head: null,
          parent: null,
          item: null
        });
        // create a unique id to this tag
        // it could be handy to use it also to improve the virtual dom rendering speed
        defineProperty(this, '_riot_id', ++__uid);
        // base 1 allows test !t._riot_id
        defineProperty(this, 'root', root);
        extend(this, { opts: opts }, item);
        // protect the "tags" and "refs" property from being overridden
        defineProperty(this, 'parent', parent || null);
        defineProperty(this, 'tags', {});
        defineProperty(this, 'refs', {});
        dom = isLoop && isAnonymous ? root : mkdom(impl.tmpl, innerHTML, isLoop);
        /**
   * Update the tag expressions and options
   * @param   { * }  data - data we want to use to extend the tag properties
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'update', function tagUpdate(data) {
          var nextOpts = {}, canTrigger = this.isMounted && !skipAnonymous;
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            nextOpts,
            instAttrs
          ]);
          if (this.isMounted && isFunction(this.shouldUpdate) && !this.shouldUpdate(data, nextOpts)) {
            return this
          }
          // make sure the data passed will not override
          // the component core methods
          data = cleanUpData(data);
          // inherit properties from the parent, but only for isAnonymous tags
          if (isLoop && isAnonymous) {
            inheritFrom.apply(this, [
              this.parent,
              propsInSyncWithParent
            ])
          }
          extend(this, data);
          extend(opts, nextOpts);
          if (canTrigger) {
            this.trigger('update', data)
          }
          updateAllExpressions.call(this, expressions);
          if (canTrigger) {
            this.trigger('updated')
          }
          return this
        }.bind(this));
        /**
   * Add a mixin to this tag
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mixin', function tagMixin() {
          var this$1 = this;
          each(arguments, function (mix) {
            var instance, props = [], obj;
            mix = isString(mix) ? mixin$1(mix) : mix;
            // check if the mixin is a function
            if (isFunction(mix)) {
              // create the new mixin instance
              instance = new mix
            } else {
              instance = mix
            }
            var proto = Object.getPrototypeOf(instance);
            // build multilevel prototype inheritance chain property list
            do {
              props = props.concat(Object.getOwnPropertyNames(obj || instance))
            } while (obj = Object.getPrototypeOf(obj || instance));
            // loop the keys in the function prototype or the all object keys
            each(props, function (key) {
              // bind methods to this
              // allow mixins to override other properties/parent mixins
              if (key !== 'init') {
                // check for getters/setters
                var descriptor = Object.getOwnPropertyDescriptor(instance, key) || Object.getOwnPropertyDescriptor(proto, key);
                var hasGetterSetter = descriptor && (descriptor.get || descriptor.set);
                // apply method only if it does not already exist on the instance
                if (!this$1.hasOwnProperty(key) && hasGetterSetter) {
                  Object.defineProperty(this$1, key, descriptor)
                } else {
                  this$1[key] = isFunction(instance[key]) ? instance[key].bind(this$1) : instance[key]
                }
              }
            });
            // init method will be called automatically
            if (instance.init) {
              instance.init.bind(this$1)()
            }
          });
          return this
        }.bind(this));
        /**
   * Mount the current tag instance
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mount', function tagMount() {
          var this$1 = this;
          var _parent = this.__.parent;
          root._tag = this;
          // keep a reference to the tag just created
          // Read all the attrs on this instance. This give us the info we need for updateOpts
          parseAttributes.apply(parent, [
            root,
            root.attributes,
            function (attr, expr) {
              if (!isAnonymous && RefExpr.isPrototypeOf(expr)) {
                expr.tag = this$1
              }
              attr.expr = expr;
              instAttrs.push(attr)
            }
          ]);
          // update the root adding custom attributes coming from the compiler
          implAttrs = [];
          walkAttrs(impl.attrs, function (k, v) {
            implAttrs.push({
              name: k,
              value: v
            })
          });
          parseAttributes.apply(this, [
            root,
            implAttrs,
            function (attr, expr) {
              if (expr) {
                expressions.push(expr)
              } else {
                setAttr(root, attr.name, attr.value)
              }
            }
          ]);
          // children in loop should inherit from true parent
          if (_parent && isAnonymous) {
            inheritFrom.apply(this, [
              _parent,
              propsInSyncWithParent
            ])
          }
          // initialiation
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            opts,
            instAttrs
          ]);
          // add global mixins
          var globalMixin = mixin$1(GLOBAL_MIXIN);
          if (globalMixin && !skipAnonymous) {
            for (var i in globalMixin) {
              if (globalMixin.hasOwnProperty(i)) {
                this$1.mixin(globalMixin[i])
              }
            }
          }
          if (impl.fn) {
            impl.fn.call(this, opts)
          }
          if (!skipAnonymous) {
            this.trigger('before-mount')
          }
          // parse layout after init. fn may calculate args for nested custom tags
          parseExpressions.apply(this, [
            dom,
            expressions,
            isAnonymous
          ]);
          this.update(item);
          if (!isAnonymous) {
            while (dom.firstChild) {
              root.appendChild(dom.firstChild)
            }
          }
          defineProperty(this, 'root', root);
          defineProperty(this, 'isMounted', true);
          if (skipAnonymous) {
            return
          }
          // if it's not a child tag we can trigger its mount event
          if (!this.parent) {
            this.trigger('mount')
          }  // otherwise we need to wait that the parent "mount" or "updated" event gets triggered
          else {
            var p = getImmediateCustomParentTag(this.parent);
            p.one(!p.isMounted ? 'mount' : 'updated', function () {
              this$1.trigger('mount')
            })
          }
          return this
        }.bind(this));
        /**
   * Unmount the tag instance
   * @param { Boolean } mustKeepRoot - if it's true the root node will not be removed
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'unmount', function tagUnmount(mustKeepRoot) {
          var this$1 = this;
          var el = this.root, p = el.parentNode, ptag, tagIndex = __TAGS_CACHE.indexOf(this);
          if (!skipAnonymous) {
            this.trigger('before-unmount')
          }
          // clear all attributes coming from the mounted tag
          walkAttrs(impl.attrs, function (name) {
            if (startsWith(name, ATTRS_PREFIX)) {
              name = name.slice(ATTRS_PREFIX.length)
            }
            remAttr(root, name)
          });
          // remove this tag instance from the global virtualDom variable
          if (tagIndex !== -1) {
            __TAGS_CACHE.splice(tagIndex, 1)
          }
          if (p || isVirtual) {
            if (parent) {
              ptag = getImmediateCustomParentTag(parent);
              if (isVirtual) {
                Object.keys(this.tags).forEach(function (tagName) {
                  arrayishRemove(ptag.tags, tagName, this$1.tags[tagName])
                })
              } else {
                arrayishRemove(ptag.tags, tagName, this);
                if (parent !== ptag)
                  // remove from _parent too
                  {
                    arrayishRemove(parent.tags, tagName, this)
                  }
              }
            } else {
              while (el.firstChild) {
                el.removeChild(el.firstChild)
              }
            }
            if (p) {
              if (!mustKeepRoot) {
                p.removeChild(el)
              } else {
                // the riot-tag and the data-is attributes aren't needed anymore, remove them
                remAttr(p, IS_DIRECTIVE)
              }
            }
          }
          if (this.__.virts) {
            each(this.__.virts, function (v) {
              if (v.parentNode) {
                v.parentNode.removeChild(v)
              }
            })
          }
          // allow expressions to unmount themselves
          unmountAll(expressions);
          each(instAttrs, function (a) {
            return a.expr && a.expr.unmount && a.expr.unmount()
          });
          // custom internal unmount function to avoid relying on the observable
          if (this.__.onUnmount) {
            this.__.onUnmount()
          }
          if (!skipAnonymous) {
            this.trigger('unmount');
            this.off('*')
          }
          defineProperty(this, 'isMounted', false);
          delete this.root._tag;
          return this
        }.bind(this))
      }
      /**
 * Detect the tag implementation by a DOM node
 * @param   { Object } dom - DOM node we need to parse to get its tag implementation
 * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
 */
      function getTag(dom) {
        return dom.tagName && __TAG_IMPL[getAttr(dom, IS_DIRECTIVE) || getAttr(dom, IS_DIRECTIVE) || dom.tagName.toLowerCase()]
      }
      /**
 * Inherit properties from a target tag instance
 * @this Tag
 * @param   { Tag } target - tag where we will inherit properties
 * @param   { Array } propsInSyncWithParent - array of properties to sync with the target
 */
      function inheritFrom(target, propsInSyncWithParent) {
        var this$1 = this;
        each(Object.keys(target), function (k) {
          // some properties must be always in sync with the parent tag
          var mustSync = !isReservedName(k) && contains(propsInSyncWithParent, k);
          if (isUndefined(this$1[k]) || mustSync) {
            // track the property to keep in sync
            // so we can keep it updated
            if (!mustSync) {
              propsInSyncWithParent.push(k)
            }
            this$1[k] = target[k]
          }
        })
      }
      /**
 * Move the position of a custom tag in its parent tag
 * @this Tag
 * @param   { String } tagName - key where the tag was stored
 * @param   { Number } newPos - index where the new tag will be stored
 */
      function moveChildTag(tagName, newPos) {
        var parent = this.parent, tags;
        // no parent no move
        if (!parent) {
          return
        }
        tags = parent.tags[tagName];
        if (isArray(tags)) {
          tags.splice(newPos, 0, tags.splice(tags.indexOf(this), 1)[0])
        } else {
          arrayishAdd(parent.tags, tagName, this)
        }
      }
      /**
 * Create a new child tag including it correctly into its parent
 * @param   { Object } child - child tag implementation
 * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
 * @param   { String } innerHTML - inner html of the child node
 * @param   { Object } parent - instance of the parent tag including the child custom tag
 * @returns { Object } instance of the new child tag just created
 */
      function initChildTag(child, opts, innerHTML, parent) {
        var tag = new Tag$1(child, opts, innerHTML), tagName = opts.tagName || getTagName(opts.root, true), ptag = getImmediateCustomParentTag(parent);
        // fix for the parent attribute in the looped elements
        defineProperty(tag, 'parent', ptag);
        // store the real parent tag
        // in some cases this could be different from the custom parent tag
        // for example in nested loops
        tag.__.parent = parent;
        // add this tag to the custom parent tag
        arrayishAdd(ptag.tags, tagName, tag);
        // and also to the real parent tag
        if (ptag !== parent) {
          arrayishAdd(parent.tags, tagName, tag)
        }
        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        opts.root.innerHTML = '';
        return tag
      }
      /**
 * Loop backward all the parents tree to detect the first custom parent tag
 * @param   { Object } tag - a Tag instance
 * @returns { Object } the instance of the first custom parent tag found
 */
      function getImmediateCustomParentTag(tag) {
        var ptag = tag;
        while (ptag.__.isAnonymous) {
          if (!ptag.parent) {
            break
          }
          ptag = ptag.parent
        }
        return ptag
      }
      /**
 * Trigger the unmount method on all the expressions
 * @param   { Array } expressions - DOM expressions
 */
      function unmountAll(expressions) {
        each(expressions, function (expr) {
          if (expr instanceof Tag$1) {
            expr.unmount(true)
          } else if (expr.unmount) {
            expr.unmount()
          }
        })
      }
      /**
 * Get the tag name of any DOM node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { Boolean } skipDataIs - hack to ignore the data-is attribute when attaching to parent
 * @returns { String } name to identify this dom node in riot
 */
      function getTagName(dom, skipDataIs) {
        var child = getTag(dom), namedTag = !skipDataIs && getAttr(dom, IS_DIRECTIVE);
        return namedTag && !tmpl.hasExpr(namedTag) ? namedTag : child ? child.name : dom.tagName.toLowerCase()
      }
      /**
 * With this function we avoid that the internal Tag methods get overridden
 * @param   { Object } data - options we want to use to extend the tag instance
 * @returns { Object } clean object without containing the riot internal reserved words
 */
      function cleanUpData(data) {
        if (!(data instanceof Tag$1) && !(data && isFunction(data.trigger))) {
          return data
        }
        var o = {};
        for (var key in data) {
          if (!RE_RESERVED_NAMES.test(key)) {
            o[key] = data[key]
          }
        }
        return o
      }
      /**
 * Set the property of an object for a given key. If something already
 * exists there, then it becomes an array containing both the old and new value.
 * @param { Object } obj - object on which to set the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be set
 * @param { Boolean } ensureArray - ensure that the property remains an array
 * @param { Number } index - add the new item in a certain array position
 */
      function arrayishAdd(obj, key, value, ensureArray, index) {
        var dest = obj[key];
        var isArr = isArray(dest);
        var hasIndex = !isUndefined(index);
        if (dest && dest === value) {
          return
        }
        // if the key was never set, set it once
        if (!dest && ensureArray) {
          obj[key] = [value]
        } else if (!dest) {
          obj[key] = value
        }  // if it was an array and not yet set
        else {
          if (isArr) {
            var oldIndex = dest.indexOf(value);
            // this item never changed its position
            if (oldIndex === index) {
              return
            }
            // remove the item from its old position
            if (oldIndex !== -1) {
              dest.splice(oldIndex, 1)
            }
            // move or add the item
            if (hasIndex) {
              dest.splice(index, 0, value)
            } else {
              dest.push(value)
            }
          } else {
            obj[key] = [
              dest,
              value
            ]
          }
        }
      }
      /**
 * Removes an item from an object at a given key. If the key points to an array,
 * then the item is just removed from the array.
 * @param { Object } obj - object on which to remove the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be removed
 * @param { Boolean } ensureArray - ensure that the property remains an array
*/
      function arrayishRemove(obj, key, value, ensureArray) {
        if (isArray(obj[key])) {
          var index = obj[key].indexOf(value);
          if (index !== -1) {
            obj[key].splice(index, 1)
          }
          if (!obj[key].length) {
            delete obj[key]
          } else if (obj[key].length === 1 && !ensureArray) {
            obj[key] = obj[key][0]
          }
        } else {
          delete obj[key]
        }  // otherwise just delete the key
      }
      /**
 * Check whether a DOM node is in stub mode, useful for the riot 'if' directive
 * @param   { Object }  dom - DOM node we want to parse
 * @returns { Boolean } -
 */
      function isInStub(dom) {
        while (dom) {
          if (dom.inStub) {
            return true
          }
          dom = dom.parentNode
        }
        return false
      }
      /**
 * Mount a tag creating new Tag instance
 * @param   { Object } root - dom node where the tag will be mounted
 * @param   { String } tagName - name of the riot tag we want to mount
 * @param   { Object } opts - options to pass to the Tag instance
 * @param   { Object } ctx - optional context that will be used to extend an existing class ( used in riot.Tag )
 * @returns { Tag } a new Tag instance
 */
      function mountTo(root, tagName, opts, ctx) {
        var impl = __TAG_IMPL[tagName], implClass = __TAG_IMPL[tagName].class, tag = ctx || (implClass ? Object.create(implClass.prototype) : {}),
          // cache the inner HTML to fix #855
          innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
        // clear the inner html
        root.innerHTML = '';
        var conf = {
          root: root,
          opts: opts
        };
        if (opts && opts.parent) {
          conf.parent = opts.parent
        }
        if (impl && root) {
          Tag$1.apply(tag, [
            impl,
            conf,
            innerHTML
          ])
        }
        if (tag && tag.mount) {
          tag.mount(true);
          // add this tag to the virtualDom variable
          if (!contains(__TAGS_CACHE, tag)) {
            __TAGS_CACHE.push(tag)
          }
        }
        return tag
      }
      /**
 * makes a tag virtual and replaces a reference in the dom
 * @this Tag
 * @param { tag } the tag to make virtual
 * @param { ref } the dom reference location
 */
      function makeReplaceVirtual(tag, ref) {
        var frag = createFrag();
        makeVirtual.call(tag, frag);
        ref.parentNode.replaceChild(frag, ref)
      }
      /**
 * Adds the elements for a virtual tag
 * @this Tag
 * @param { Node } src - the node that will do the inserting or appending
 * @param { Tag } target - only if inserting, insert before this tag's first child
 */
      function makeVirtual(src, target) {
        var this$1 = this;
        var head = createDOMPlaceholder(), tail = createDOMPlaceholder(), frag = createFrag(), sib, el;
        this.__.head = this.root.insertBefore(head, this.root.firstChild);
        this.__.tail = this.root.appendChild(tail);
        el = this.__.head;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          this$1.__.virts.push(el);
          // hold for unmounting
          el = sib
        }
        if (target) {
          src.insertBefore(frag, target.__.head)
        } else {
          src.appendChild(frag)
        }
      }
      /**
 * Move virtual tag and all child nodes
 * @this Tag
 * @param { Node } src  - the node that will do the inserting
 * @param { Tag } target - insert before this tag's first child
 */
      function moveVirtual(src, target) {
        var this$1 = this;
        var el = this.__.head, frag = createFrag(), sib;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          el = sib;
          if (el === this$1.__.tail) {
            frag.appendChild(el);
            src.insertBefore(frag, target.__.head);
            break
          }
        }
      }
      /**
 * Get selectors for tags
 * @param   { Array } tags - tag names to select
 * @returns { String } selector
 */
      function selectTags(tags) {
        // select all tags
        if (!tags) {
          var keys = Object.keys(__TAG_IMPL);
          return keys + selectTags(keys)
        }
        return tags.filter(function (t) {
          return !/[^-\w]/.test(t)
        }).reduce(function (list, t) {
          var name = t.trim().toLowerCase();
          return list + ',[' + IS_DIRECTIVE + '="' + name + '"]'
        }, '')
      }
      var tags = Object.freeze({
        getTag: getTag,
        inheritFrom: inheritFrom,
        moveChildTag: moveChildTag,
        initChildTag: initChildTag,
        getImmediateCustomParentTag: getImmediateCustomParentTag,
        unmountAll: unmountAll,
        getTagName: getTagName,
        cleanUpData: cleanUpData,
        arrayishAdd: arrayishAdd,
        arrayishRemove: arrayishRemove,
        isInStub: isInStub,
        mountTo: mountTo,
        makeReplaceVirtual: makeReplaceVirtual,
        makeVirtual: makeVirtual,
        moveVirtual: moveVirtual,
        selectTags: selectTags
      });
      /**
 * Riot public api
 */
      var settings = settings$1;
      var util = {
        tmpl: tmpl,
        brackets: brackets,
        styleManager: styleManager,
        vdom: __TAGS_CACHE,
        styleNode: styleManager.styleNode,
        // export the riot internal utils as well
        dom: dom,
        check: check,
        misc: misc,
        tags: tags
      };
      // export the core props/methods
      var Tag$$1 = Tag$2;
      var tag$$1 = tag$1;
      var tag2$$1 = tag2$1;
      var mount$$1 = mount$1;
      var mixin$$1 = mixin$1;
      var update$$1 = update$1;
      var unregister$$1 = unregister$1;
      var observable = observable$1;
      var riot$1 = extend({}, core, {
        observable: observable$1,
        settings: settings,
        util: util
      });
      exports.settings = settings;
      exports.util = util;
      exports.Tag = Tag$$1;
      exports.tag = tag$$1;
      exports.tag2 = tag2$$1;
      exports.mount = mount$$1;
      exports.mixin = mixin$$1;
      exports.update = update$$1;
      exports.unregister = unregister$$1;
      exports.observable = observable;
      exports['default'] = riot$1;
      Object.defineProperty(exports, '__esModule', { value: true })
    }))
  });
  // source: node_modules/riot-observable/dist/observable.js
  rqzt.define('riot-observable/dist/observable', function (module, exports, __dirname, __filename, process) {
    ;
    (function (window, undefined) {
      var observable = function (el) {
        /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
        el = el || {};
        /**
   * Private variables
   */
        var callbacks = {}, slice = Array.prototype.slice;
        /**
   * Public Api
   */
        // extend the el object adding the observable methods
        Object.defineProperties(el, {
          /**
     * Listen to the given `event` ands
     * execute the `callback` each time an event is triggered.
     * @param  { String } event - event id
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
          on: {
            value: function (event, fn) {
              if (typeof fn == 'function')
                (callbacks[event] = callbacks[event] || []).push(fn);
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Removes the given `event` listeners
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          off: {
            value: function (event, fn) {
              if (event == '*' && !fn)
                callbacks = {};
              else {
                if (fn) {
                  var arr = callbacks[event];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn)
                      arr.splice(i--, 1)
                  }
                } else
                  delete callbacks[event]
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Listen to the given `event` and
     * execute the `callback` at most once
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          one: {
            value: function (event, fn) {
              function on() {
                el.off(event, on);
                fn.apply(el, arguments)
              }
              return el.on(event, on)
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Execute all callback functions that listen to
     * the given `event`
     * @param   { String } event - event id
     * @returns { Object } el
     */
          trigger: {
            value: function (event) {
              // getting the arguments
              var arglen = arguments.length - 1, args = new Array(arglen), fns, fn, i;
              for (i = 0; i < arglen; i++) {
                args[i] = arguments[i + 1]  // skip first argument
              }
              fns = slice.call(callbacks[event] || [], 0);
              for (i = 0; fn = fns[i]; ++i) {
                fn.apply(el, args)
              }
              if (callbacks['*'] && event != '*')
                el.trigger.apply(el, [
                  '*',
                  event
                ].concat(args));
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          }
        });
        return el
      };
      /* istanbul ignore next */
      // support CommonJS, AMD & browser
      if (typeof exports === 'object')
        module.exports = observable;
      else if (typeof define === 'function' && define.amd)
        define(function () {
          return observable
        });
      else
        window.observable = observable
    }(typeof window != 'undefined' ? window : undefined))
  });
  // source: node_modules/raf/index.js
  rqzt.define('raf', function (module, exports, __dirname, __filename, process) {
    var now = rqzt('performance-now/lib/performance-now'), root = typeof window === 'undefined' ? global : window, vendors = [
        'moz',
        'webkit'
      ], suffix = 'AnimationFrame', raf = root['request' + suffix], caf = root['cancel' + suffix] || root['cancelRequest' + suffix];
    for (var i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + 'Request' + suffix];
      caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix]
    }
    // Some versions of FF have rAF but not cAF
    if (!raf || !caf) {
      var last = 0, id = 0, queue = [], frameDuration = 1000 / 60;
      raf = function (callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function () {
            var cp = queue.slice(0);
            // Clear queue here to prevent
            // callbacks from appending listeners
            // to the current frame's queue
            queue.length = 0;
            for (var i = 0; i < cp.length; i++) {
              if (!cp[i].cancelled) {
                try {
                  cp[i].callback(last)
                } catch (e) {
                  setTimeout(function () {
                    throw e
                  }, 0)
                }
              }
            }
          }, Math.round(next))
        }
        queue.push({
          handle: ++id,
          callback: callback,
          cancelled: false
        });
        return id
      };
      caf = function (handle) {
        for (var i = 0; i < queue.length; i++) {
          if (queue[i].handle === handle) {
            queue[i].cancelled = true
          }
        }
      }
    }
    module.exports = function (fn) {
      // Wrap in a new function to prevent
      // `cancel` potentially being assigned
      // to the native rAF function
      return raf.call(root, fn)
    };
    module.exports.cancel = function () {
      caf.apply(root, arguments)
    };
    module.exports.polyfill = function () {
      root.requestAnimationFrame = raf;
      root.cancelAnimationFrame = caf
    }
  });
  // source: node_modules/performance-now/lib/performance-now.js
  rqzt.define('performance-now/lib/performance-now', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.7.1
    (function () {
      var getNanoSeconds, hrtime, loadTime;
      if (typeof performance !== 'undefined' && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now()
        }
      } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - loadTime) / 1000000
        };
        hrtime = process.hrtime;
        getNanoSeconds = function () {
          var hr;
          hr = hrtime();
          return hr[0] * 1000000000 + hr[1]
        };
        loadTime = getNanoSeconds()
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime
        };
        loadTime = Date.now()
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime
        };
        loadTime = new Date().getTime()
      }
    }.call(this))
  });
  // source: node_modules/crowdcontrol/lib/index.js
  rqzt.define('crowdcontrol/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var CrowdControl, r, riot;
    r = rqzt('crowdcontrol/lib/riot');
    riot = r();
    CrowdControl = {
      Views: rqzt('crowdcontrol/lib/views'),
      tags: [],
      start: function (opts) {
        return this.tags = riot.mount('*', opts)
      },
      update: function () {
        var i, len, ref, results, tag;
        ref = this.tags;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          tag = ref[i];
          results.push(tag.update())
        }
        return results
      },
      riot: r
    };
    if (module.exports != null) {
      module.exports = CrowdControl
    }
    if (typeof window !== 'undefined' && window !== null) {
      if (window.Crowdstart != null) {
        window.Crowdstart.Crowdcontrol = CrowdControl
      } else {
        window.Crowdstart = { CrowdControl: CrowdControl }
      }
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/riot.js
  rqzt.define('crowdcontrol/lib/riot', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var r;
    r = function () {
      return r.riot
    };
    r.set = function (riot) {
      return r.riot = riot
    };
    r.riot = typeof window !== 'undefined' && window !== null ? window.riot : void 0;
    module.exports = r  //# sourceMappingURL=riot.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/index.js
  rqzt.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      Form: rqzt('crowdcontrol/lib/views/form'),
      Input: rqzt('crowdcontrol/lib/views/input'),
      View: rqzt('crowdcontrol/lib/views/view')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/form.js
  rqzt.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    inputify = rqzt('crowdcontrol/lib/views/inputify');
    observable = rqzt('crowdcontrol/lib/riot')().observable;
    Promise = rqzt('broken/dist/broken');
    settle = rqzt('promise-settle');
    Form = function (superClass) {
      extend(Form, superClass);
      function Form() {
        return Form.__super__.constructor.apply(this, arguments)
      }
      Form.prototype.configs = null;
      Form.prototype.inputs = null;
      Form.prototype.data = null;
      Form.prototype.initInputs = function () {
        var input, name, ref, results1;
        this.inputs = {};
        if (this.configs != null) {
          this.inputs = inputify(this.data, this.configs);
          ref = this.inputs;
          results1 = [];
          for (name in ref) {
            input = ref[name];
            results1.push(observable(input))
          }
          return results1
        }
      };
      Form.prototype.init = function () {
        return this.initInputs()
      };
      Form.prototype.submit = function (e) {
        var input, name, pRef, ps, ref;
        ps = [];
        ref = this.inputs;
        for (name in ref) {
          input = ref[name];
          pRef = {};
          input.trigger('validate', pRef);
          ps.push(pRef.p)
        }
        settle(ps).then(function (_this) {
          return function (results) {
            var i, len, result;
            for (i = 0, len = results.length; i < len; i++) {
              result = results[i];
              if (!result.isFulfilled()) {
                return
              }
            }
            return _this._submit.apply(_this, arguments)
          }
        }(this));
        if (e != null) {
          e.preventDefault();
          e.stopPropagation()
        }
        return false
      };
      Form.prototype._submit = function () {
      };
      return Form
    }(View);
    module.exports = Form  //# sourceMappingURL=form.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/view.js
  rqzt.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
    riot = rqzt('crowdcontrol/lib/riot')();
    objectAssign = rqzt('object-assign');
    setPrototypeOf = function () {
      var mixinProperties, setProtoOf;
      setProtoOf = function (obj, proto) {
        return obj.__proto__ = proto
      };
      mixinProperties = function (obj, proto) {
        var prop, results;
        results = [];
        for (prop in proto) {
          if (obj[prop] == null) {
            results.push(obj[prop] = proto[prop])
          } else {
            results.push(void 0)
          }
        }
        return results
      };
      if (Object.setPrototypeOf || { __proto__: [] } instanceof Array) {
        return setProtoOf
      } else {
        return mixinProperties
      }
    }();
    isFunction = rqzt('is-function');
    collapsePrototype = function (collapse, proto) {
      var parentProto;
      if (proto === View.prototype) {
        return
      }
      parentProto = Object.getPrototypeOf(proto);
      collapsePrototype(collapse, parentProto);
      return objectAssign(collapse, parentProto)
    };
    View = function () {
      View.register = function () {
        return new this
      };
      View.prototype.tag = '';
      View.prototype.html = '';
      View.prototype.css = '';
      View.prototype.attrs = '';
      View.prototype.events = null;
      function View() {
        var newProto;
        newProto = collapsePrototype({}, this);
        this.beforeInit();
        riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
          var fn, handler, k, name, parent, proto, ref, ref1, self, v;
          if (newProto != null) {
            for (k in newProto) {
              v = newProto[k];
              if (isFunction(v)) {
                (function (_this) {
                  return function (v) {
                    var oldFn;
                    if (_this[k] != null) {
                      oldFn = _this[k];
                      return _this[k] = function () {
                        oldFn.apply(_this, arguments);
                        return v.apply(_this, arguments)
                      }
                    } else {
                      return _this[k] = function () {
                        return v.apply(_this, arguments)
                      }
                    }
                  }
                }(this)(v))
              } else {
                this[k] = v
              }
            }
          }
          self = this;
          parent = (ref = self.parent) != null ? ref : opts.parent;
          proto = Object.getPrototypeOf(self);
          while (parent && parent !== proto) {
            setPrototypeOf(self, parent);
            self = parent;
            parent = self.parent;
            proto = Object.getPrototypeOf(self)
          }
          if (opts != null) {
            for (k in opts) {
              v = opts[k];
              this[k] = v
            }
          }
          if (this.events != null) {
            ref1 = this.events;
            fn = function (_this) {
              return function (name, handler) {
                if (typeof handler === 'string') {
                  return _this.on(name, function () {
                    return _this[handler].apply(_this, arguments)
                  })
                } else {
                  return _this.on(name, function () {
                    return handler.apply(_this, arguments)
                  })
                }
              }
            }(this);
            for (name in ref1) {
              handler = ref1[name];
              fn(name, handler)
            }
          }
          return this.init(opts)
        })
      }
      View.prototype.beforeInit = function () {
      };
      View.prototype.init = function () {
      };
      return View
    }();
    module.exports = View  //# sourceMappingURL=view.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/inputify.js
  rqzt.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Promise, inputify, isFunction, isRef, refer;
    Promise = rqzt('broken/dist/broken');
    isFunction = rqzt('is-function');
    refer = rqzt('referential/lib');
    isRef = function (o) {
      return o != null && isFunction(o.ref)
    };
    inputify = function (data, configs) {
      var config, fn, inputs, name, ref;
      ref = data;
      if (!isRef(ref)) {
        ref = refer(data)
      }
      inputs = {};
      fn = function (name, config) {
        var fn1, i, input, len, middleware, middlewareFn, validate;
        middleware = [];
        if (config && config.length > 0) {
          fn1 = function (name, middlewareFn) {
            return middleware.push(function (pair) {
              ref = pair[0], name = pair[1];
              return Promise.resolve(pair).then(function (pair) {
                return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
              }).then(function (v) {
                ref.set(name, v);
                return pair
              })
            })
          };
          for (i = 0, len = config.length; i < len; i++) {
            middlewareFn = config[i];
            fn1(name, middlewareFn)
          }
        }
        middleware.push(function (pair) {
          ref = pair[0], name = pair[1];
          return Promise.resolve(ref.get(name))
        });
        validate = function (ref, name) {
          var j, len1, p;
          p = Promise.resolve([
            ref,
            name
          ]);
          for (j = 0, len1 = middleware.length; j < len1; j++) {
            middlewareFn = middleware[j];
            p = p.then(middlewareFn)
          }
          return p
        };
        input = {
          name: name,
          ref: ref,
          config: config,
          validate: validate
        };
        return inputs[name] = input
      };
      for (name in configs) {
        config = configs[name];
        fn(name, config)
      }
      return inputs
    };
    module.exports = inputify  //# sourceMappingURL=inputify.js.map
  });
  // source: node_modules/referential/lib/index.js
  rqzt.define('referential/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var refer;
    refer = rqzt('referential/lib/refer');
    refer.Ref = rqzt('referential/lib/ref');
    module.exports = refer  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/referential/lib/refer.js
  rqzt.define('referential/lib/refer', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Ref, refer;
    Ref = rqzt('referential/lib/ref');
    module.exports = refer = function (state, ref) {
      var fn, i, len, method, ref1, wrapper;
      if (ref == null) {
        ref = null
      }
      if (ref == null) {
        ref = new Ref(state)
      }
      wrapper = function (key) {
        return ref.get(key)
      };
      ref1 = [
        'value',
        'get',
        'set',
        'extend',
        'index',
        'ref'
      ];
      fn = function (method) {
        return wrapper[method] = function () {
          return ref[method].apply(ref, arguments)
        }
      };
      for (i = 0, len = ref1.length; i < len; i++) {
        method = ref1[i];
        fn(method)
      }
      wrapper.refer = function (key) {
        return refer(null, ref.ref(key))
      };
      wrapper.clone = function (key) {
        return refer(null, ref.clone(key))
      };
      return wrapper
    }  //# sourceMappingURL=refer.js.map
  });
  // source: node_modules/referential/lib/ref.js
  rqzt.define('referential/lib/ref', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Ref, extend, isArray, isNumber, isObject, isString;
    extend = rqzt('node.extend');
    isArray = rqzt('is-array');
    isNumber = rqzt('is-number');
    isObject = rqzt('is-object');
    isString = rqzt('is-string');
    module.exports = Ref = function () {
      function Ref(_value, parent, key1) {
        this._value = _value;
        this.parent = parent;
        this.key = key1;
        this._cache = {}
      }
      Ref.prototype._mutate = function () {
        return this._cache = {}
      };
      Ref.prototype.value = function (state) {
        if (!this.parent) {
          if (state != null) {
            this._value = state
          }
          return this._value
        }
        if (state != null) {
          return this.parent.set(this.key, state)
        } else {
          return this.parent.get(this.key)
        }
      };
      Ref.prototype.ref = function (key) {
        if (!key) {
          return this
        }
        return new Ref(null, this, key)
      };
      Ref.prototype.get = function (key) {
        if (!key) {
          return this.value()
        } else {
          if (this._cache[key]) {
            return this._cache[key]
          }
          return this._cache[key] = this.index(key)
        }
      };
      Ref.prototype.set = function (key, value) {
        this._mutate();
        if (value == null) {
          this.value(extend(this.value(), key))
        } else {
          this.index(key, value)
        }
        return this
      };
      Ref.prototype.extend = function (key, value) {
        var clone;
        this._mutate();
        if (value == null) {
          this.value(extend(true, this.value(), key))
        } else {
          if (isObject(value)) {
            this.value(extend(true, this.ref(key).get(), value))
          } else {
            clone = this.clone();
            this.set(key, value);
            this.value(extend(true, clone.get(), this.value()))
          }
        }
        return this
      };
      Ref.prototype.clone = function (key) {
        return new Ref(extend(true, {}, this.get(key)))
      };
      Ref.prototype.index = function (key, value, obj, prev) {
        var next, prop, props;
        if (obj == null) {
          obj = this.value()
        }
        if (this.parent) {
          return this.parent.index(this.key + '.' + key, value)
        }
        if (isNumber(key)) {
          key = String(key)
        }
        props = key.split('.');
        if (value == null) {
          while (prop = props.shift()) {
            if (!props.length) {
              return obj != null ? obj[prop] : void 0
            }
            obj = obj != null ? obj[prop] : void 0
          }
          return
        }
        while (prop = props.shift()) {
          if (!props.length) {
            return obj[prop] = value
          } else {
            next = props[0];
            if (obj[next] == null) {
              if (isNumber(next)) {
                if (obj[prop] == null) {
                  obj[prop] = []
                }
              } else {
                if (obj[prop] == null) {
                  obj[prop] = {}
                }
              }
            }
          }
          obj = obj[prop]
        }
      };
      return Ref
    }()  //# sourceMappingURL=ref.js.map
  });
  // source: node_modules/node.extend/index.js
  rqzt.define('node.extend', function (module, exports, __dirname, __filename, process) {
    module.exports = rqzt('node.extend/lib/extend')
  });
  // source: node_modules/node.extend/lib/extend.js
  rqzt.define('node.extend/lib/extend', function (module, exports, __dirname, __filename, process) {
    /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
    var is = rqzt('is');
    function extend() {
      var target = arguments[0] || {};
      var i = 1;
      var length = arguments.length;
      var deep = false;
      var options, name, src, copy, copy_is_array, clone;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      }
      // Handle case when target is a string or something (possible in deep copy)
      if (typeof target !== 'object' && !is.fn(target)) {
        target = {}
      }
      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        options = arguments[i];
        if (options != null) {
          if (typeof options === 'string') {
            options = options.split('')
          }
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
              if (copy_is_array) {
                copy_is_array = false;
                clone = src && is.array(src) ? src : []
              } else {
                clone = src && is.hash(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    }
    ;
    /**
 * @public
 */
    extend.version = '1.1.3';
    /**
 * Exports module.
 */
    module.exports = extend
  });
  // source: node_modules/is/index.js
  rqzt.define('is', function (module, exports, __dirname, __filename, process) {
    /* globals window, HTMLElement */
    'use strict';
    /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
    var objProto = Object.prototype;
    var owns = objProto.hasOwnProperty;
    var toStr = objProto.toString;
    var symbolValueOf;
    if (typeof Symbol === 'function') {
      symbolValueOf = Symbol.prototype.valueOf
    }
    var isActualNaN = function (value) {
      return value !== value
    };
    var NON_HOST_TYPES = {
      'boolean': 1,
      number: 1,
      string: 1,
      undefined: 1
    };
    var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
    var hexRegex = /^[A-Fa-f0-9]+$/;
    /**
 * Expose `is`
 */
    var is = {};
    /**
 * Test general.
 */
    /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
    is.a = is.type = function (value, type) {
      return typeof value === type
    };
    /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
    is.defined = function (value) {
      return typeof value !== 'undefined'
    };
    /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
    is.empty = function (value) {
      var type = toStr.call(value);
      var key;
      if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
        return value.length === 0
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (owns.call(value, key)) {
            return false
          }
        }
        return true
      }
      return !value
    };
    /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
    is.equal = function equal(value, other) {
      if (value === other) {
        return true
      }
      var type = toStr.call(value);
      var key;
      if (type !== toStr.call(other)) {
        return false
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (!is.equal(value[key], other[key]) || !(key in other)) {
            return false
          }
        }
        for (key in other) {
          if (!is.equal(value[key], other[key]) || !(key in value)) {
            return false
          }
        }
        return true
      }
      if (type === '[object Array]') {
        key = value.length;
        if (key !== other.length) {
          return false
        }
        while (key--) {
          if (!is.equal(value[key], other[key])) {
            return false
          }
        }
        return true
      }
      if (type === '[object Function]') {
        return value.prototype === other.prototype
      }
      if (type === '[object Date]') {
        return value.getTime() === other.getTime()
      }
      return false
    };
    /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
    is.hosted = function (value, host) {
      var type = typeof host[value];
      return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
    };
    /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
    is.instance = is['instanceof'] = function (value, constructor) {
      return value instanceof constructor
    };
    /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
    is.nil = is['null'] = function (value) {
      return value === null
    };
    /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
    is.undef = is.undefined = function (value) {
      return typeof value === 'undefined'
    };
    /**
 * Test arguments.
 */
    /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.args = is.arguments = function (value) {
      var isStandardArguments = toStr.call(value) === '[object Arguments]';
      var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
      return isStandardArguments || isOldArguments
    };
    /**
 * Test array.
 */
    /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
    is.array = Array.isArray || function (value) {
      return toStr.call(value) === '[object Array]'
    };
    /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
    is.args.empty = function (value) {
      return is.args(value) && value.length === 0
    };
    /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
    is.array.empty = function (value) {
      return is.array(value) && value.length === 0
    };
    /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.arraylike = function (value) {
      return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
    };
    /**
 * Test boolean.
 */
    /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
    is.bool = is['boolean'] = function (value) {
      return toStr.call(value) === '[object Boolean]'
    };
    /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
    is['false'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === false
    };
    /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
    is['true'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === true
    };
    /**
 * Test date.
 */
    /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
    is.date = function (value) {
      return toStr.call(value) === '[object Date]'
    };
    /**
 * is.date.valid
 * Test if `value` is a valid date.
 *
 * @param {Mixed} value value to test
 * @returns {Boolean} true if `value` is a valid date, false otherwise
 */
    is.date.valid = function (value) {
      return is.date(value) && !isNaN(Number(value))
    };
    /**
 * Test element.
 */
    /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
    is.element = function (value) {
      return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
    };
    /**
 * Test error.
 */
    /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
    is.error = function (value) {
      return toStr.call(value) === '[object Error]'
    };
    /**
 * Test function.
 */
    /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
    is.fn = is['function'] = function (value) {
      var isAlert = typeof window !== 'undefined' && value === window.alert;
      if (isAlert) {
        return true
      }
      var str = toStr.call(value);
      return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]'
    };
    /**
 * Test number.
 */
    /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
    is.number = function (value) {
      return toStr.call(value) === '[object Number]'
    };
    /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
    is.infinite = function (value) {
      return value === Infinity || value === -Infinity
    };
    /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
    is.decimal = function (value) {
      return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
    };
    /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
    is.divisibleBy = function (value, n) {
      var isDividendInfinite = is.infinite(value);
      var isDivisorInfinite = is.infinite(n);
      var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
      return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
    };
    /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
    is.integer = is['int'] = function (value) {
      return is.number(value) && !isActualNaN(value) && value % 1 === 0
    };
    /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
    is.maximum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value < others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
    is.minimum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value > others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
    is.nan = function (value) {
      return !is.number(value) || value !== value
    };
    /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
    is.even = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
    };
    /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
    is.odd = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
    };
    /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.ge = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value >= other
    };
    /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.gt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value > other
    };
    /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
    is.le = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value <= other
    };
    /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
    is.lt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value < other
    };
    /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
    is.within = function (value, start, finish) {
      if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
        throw new TypeError('all arguments must be numbers')
      }
      var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
      return isAnyInfinite || value >= start && value <= finish
    };
    /**
 * Test object.
 */
    /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
    is.object = function (value) {
      return toStr.call(value) === '[object Object]'
    };
    /**
 * is.primitive
 * Test if `value` is a primitive.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a primitive, false otherwise
 * @api public
 */
    is.primitive = function isPrimitive(value) {
      if (!value) {
        return true
      }
      if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {
        return false
      }
      return true
    };
    /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
    is.hash = function (value) {
      return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
    };
    /**
 * Test regexp.
 */
    /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
    is.regexp = function (value) {
      return toStr.call(value) === '[object RegExp]'
    };
    /**
 * Test string.
 */
    /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
    is.string = function (value) {
      return toStr.call(value) === '[object String]'
    };
    /**
 * Test base64 string.
 */
    /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
    is.base64 = function (value) {
      return is.string(value) && (!value.length || base64Regex.test(value))
    };
    /**
 * Test base64 string.
 */
    /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
    is.hex = function (value) {
      return is.string(value) && (!value.length || hexRegex.test(value))
    };
    /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
    is.symbol = function (value) {
      return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
    };
    module.exports = is
  });
  // source: node_modules/is-array/index.js
  rqzt.define('is-array', function (module, exports, __dirname, __filename, process) {
    /**
 * isArray
 */
    var isArray = Array.isArray;
    /**
 * toString
 */
    var str = Object.prototype.toString;
    /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
    module.exports = isArray || function (val) {
      return !!val && '[object Array]' == str.call(val)
    }
  });
  // source: node_modules/is-number/index.js
  rqzt.define('is-number', function (module, exports, __dirname, __filename, process) {
    /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
    'use strict';
    var typeOf = rqzt('kind-of');
    module.exports = function isNumber(num) {
      var type = typeOf(num);
      if (type !== 'number' && type !== 'string') {
        return false
      }
      var n = +num;
      return n - n + 1 >= 0 && num !== ''
    }
  });
  // source: node_modules/kind-of/index.js
  rqzt.define('kind-of', function (module, exports, __dirname, __filename, process) {
    var isBuffer = rqzt('is-buffer');
    var toString = Object.prototype.toString;
    /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
    module.exports = function kindOf(val) {
      // primitivies
      if (typeof val === 'undefined') {
        return 'undefined'
      }
      if (val === null) {
        return 'null'
      }
      if (val === true || val === false || val instanceof Boolean) {
        return 'boolean'
      }
      if (typeof val === 'string' || val instanceof String) {
        return 'string'
      }
      if (typeof val === 'number' || val instanceof Number) {
        return 'number'
      }
      // functions
      if (typeof val === 'function' || val instanceof Function) {
        return 'function'
      }
      // array
      if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
        return 'array'
      }
      // check for instances of RegExp and Date before calling `toString`
      if (val instanceof RegExp) {
        return 'regexp'
      }
      if (val instanceof Date) {
        return 'date'
      }
      // other objects
      var type = toString.call(val);
      if (type === '[object RegExp]') {
        return 'regexp'
      }
      if (type === '[object Date]') {
        return 'date'
      }
      if (type === '[object Arguments]') {
        return 'arguments'
      }
      if (type === '[object Error]') {
        return 'error'
      }
      // buffer
      if (typeof Buffer !== 'undefined' && isBuffer(val)) {
        return 'buffer'
      }
      // es6: Map, WeakMap, Set, WeakSet
      if (type === '[object Set]') {
        return 'set'
      }
      if (type === '[object WeakSet]') {
        return 'weakset'
      }
      if (type === '[object Map]') {
        return 'map'
      }
      if (type === '[object WeakMap]') {
        return 'weakmap'
      }
      if (type === '[object Symbol]') {
        return 'symbol'
      }
      // typed arrays
      if (type === '[object Int8Array]') {
        return 'int8array'
      }
      if (type === '[object Uint8Array]') {
        return 'uint8array'
      }
      if (type === '[object Uint8ClampedArray]') {
        return 'uint8clampedarray'
      }
      if (type === '[object Int16Array]') {
        return 'int16array'
      }
      if (type === '[object Uint16Array]') {
        return 'uint16array'
      }
      if (type === '[object Int32Array]') {
        return 'int32array'
      }
      if (type === '[object Uint32Array]') {
        return 'uint32array'
      }
      if (type === '[object Float32Array]') {
        return 'float32array'
      }
      if (type === '[object Float64Array]') {
        return 'float64array'
      }
      // must be a plain object
      return 'object'
    }
  });
  // source: node_modules/is-buffer/index.js
  rqzt.define('is-buffer', function (module, exports, __dirname, __filename, process) {
    /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }
    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }
  });
  // source: node_modules/is-object/index.js
  rqzt.define('is-object', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: node_modules/is-string/index.js
  rqzt.define('is-string', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject(value) {
      try {
        strValue.call(value);
        return true
      } catch (e) {
        return false
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = '[object String]';
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
    module.exports = function isString(value) {
      if (typeof value === 'string') {
        return true
      }
      if (typeof value !== 'object') {
        return false
      }
      return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
    }
  });
  // source: node_modules/promise-settle/index.js
  rqzt.define('promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = rqzt('promise-settle/lib/promise-settle')
  });
  // source: node_modules/promise-settle/lib/promise-settle.js
  rqzt.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = settle;
    function settle(promises) {
      return Promise.resolve().then(function () {
        return promises
      }).then(function (promises) {
        if (!Array.isArray(promises))
          throw new TypeError('Expected an array of Promises');
        var promiseResults = promises.map(function (promise) {
          return Promise.resolve().then(function () {
            return promise
          }).then(function (result) {
            return promiseResult(result)
          }).catch(function (err) {
            return promiseResult(null, err)
          })
        });
        return Promise.all(promiseResults)
      })
    }
    function promiseResult(result, err) {
      var isFulfilled = typeof err === 'undefined';
      var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
      var isRejected = !isFulfilled;
      var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
      return {
        isFulfilled: returns.bind(isFulfilled),
        isRejected: returns.bind(isRejected),
        value: value,
        reason: reason
      }
    }
    function returns() {
      return this
    }
    function throws() {
      throw this
    }
  });
  // source: node_modules/crowdcontrol/lib/views/input.js
  rqzt.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Input, View, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    Input = function (superClass) {
      extend(Input, superClass);
      function Input() {
        return Input.__super__.constructor.apply(this, arguments)
      }
      Input.prototype.input = null;
      Input.prototype.valid = false;
      Input.prototype.errorMessage = '';
      Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
      Input.prototype.beforeInit = function () {
        return this.html += this.errorHtml
      };
      Input.prototype.init = function () {
        return this.input.on('validate', function (_this) {
          return function (pRef) {
            return _this.validate(pRef)
          }
        }(this))
      };
      Input.prototype.getValue = function (event) {
        return event.target.value
      };
      Input.prototype.change = function (event) {
        var name, ref, ref1, value;
        ref1 = this.input, ref = ref1.ref, name = ref1.name;
        value = this.getValue(event);
        if (value === ref.get(name)) {
          return
        }
        this.input.ref.set(name, value);
        this.clearError();
        return this.validate()
      };
      Input.prototype.error = function (err) {
        var ref1;
        return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
      };
      Input.prototype.changed = function () {
      };
      Input.prototype.clearError = function () {
        return this.errorMessage = ''
      };
      Input.prototype.validate = function (pRef) {
        var p;
        p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
          return function (value) {
            _this.changed(value);
            _this.valid = true;
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.error(err);
            _this.valid = false;
            _this.update();
            throw err
          }
        }(this));
        if (pRef != null) {
          pRef.p = p
        }
        return p
      };
      return Input
    }(View);
    module.exports = Input  //# sourceMappingURL=input.js.map
  });
  // source: node_modules/tween.js/src/Tween.js
  rqzt.define('tween.js/src/Tween', function (module, exports, __dirname, __filename, process) {
    /**
 * Tween.js - Licensed under the MIT license
 * https://github.com/tweenjs/tween.js
 * ----------------------------------------------
 *
 * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
 * Thank you all, you're awesome!
 */
    var TWEEN = TWEEN || function () {
      var _tweens = [];
      return {
        getAll: function () {
          return _tweens
        },
        removeAll: function () {
          _tweens = []
        },
        add: function (tween) {
          _tweens.push(tween)
        },
        remove: function (tween) {
          var i = _tweens.indexOf(tween);
          if (i !== -1) {
            _tweens.splice(i, 1)
          }
        },
        update: function (time, preserve) {
          if (_tweens.length === 0) {
            return false
          }
          var i = 0;
          time = time !== undefined ? time : TWEEN.now();
          while (i < _tweens.length) {
            if (_tweens[i].update(time) || preserve) {
              i++
            } else {
              _tweens.splice(i, 1)
            }
          }
          return true
        }
      }
    }();
    // Include a performance.now polyfill.
    // In node.js, use process.hrtime.
    if (typeof window === 'undefined' && typeof process !== 'undefined') {
      TWEEN.now = function () {
        var time = process.hrtime();
        // Convert [seconds, nanoseconds] to milliseconds.
        return time[0] * 1000 + time[1] / 1000000
      }
    }  // In a browser, use window.performance.now if it is available.
    else if (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {
      // This must be bound, because directly assigning this function
      // leads to an invocation exception in Chrome.
      TWEEN.now = window.performance.now.bind(window.performance)
    }  // Use Date.now if it is available.
    else if (Date.now !== undefined) {
      TWEEN.now = Date.now
    }  // Otherwise, use 'new Date().getTime()'.
    else {
      TWEEN.now = function () {
        return new Date().getTime()
      }
    }
    TWEEN.Tween = function (object) {
      var _object = object;
      var _valuesStart = {};
      var _valuesEnd = {};
      var _valuesStartRepeat = {};
      var _duration = 1000;
      var _repeat = 0;
      var _repeatDelayTime;
      var _yoyo = false;
      var _isPlaying = false;
      var _reversed = false;
      var _delayTime = 0;
      var _startTime = null;
      var _easingFunction = TWEEN.Easing.Linear.None;
      var _interpolationFunction = TWEEN.Interpolation.Linear;
      var _chainedTweens = [];
      var _onStartCallback = null;
      var _onStartCallbackFired = false;
      var _onUpdateCallback = null;
      var _onCompleteCallback = null;
      var _onStopCallback = null;
      this.to = function (properties, duration) {
        _valuesEnd = properties;
        if (duration !== undefined) {
          _duration = duration
        }
        return this
      };
      this.start = function (time) {
        TWEEN.add(this);
        _isPlaying = true;
        _onStartCallbackFired = false;
        _startTime = time !== undefined ? time : TWEEN.now();
        _startTime += _delayTime;
        for (var property in _valuesEnd) {
          // Check if an Array was provided as property value
          if (_valuesEnd[property] instanceof Array) {
            if (_valuesEnd[property].length === 0) {
              continue
            }
            // Create a local copy of the Array with the start value at the front
            _valuesEnd[property] = [_object[property]].concat(_valuesEnd[property])
          }
          // If `to()` specifies a property that doesn't exist in the source object,
          // we should not set that property in the object
          if (_object[property] === undefined) {
            continue
          }
          // Save the starting value.
          _valuesStart[property] = _object[property];
          if (_valuesStart[property] instanceof Array === false) {
            _valuesStart[property] *= 1  // Ensures we're using numbers, not strings
          }
          _valuesStartRepeat[property] = _valuesStart[property] || 0
        }
        return this
      };
      this.stop = function () {
        if (!_isPlaying) {
          return this
        }
        TWEEN.remove(this);
        _isPlaying = false;
        if (_onStopCallback !== null) {
          _onStopCallback.call(_object, _object)
        }
        this.stopChainedTweens();
        return this
      };
      this.end = function () {
        this.update(_startTime + _duration);
        return this
      };
      this.stopChainedTweens = function () {
        for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
          _chainedTweens[i].stop()
        }
      };
      this.delay = function (amount) {
        _delayTime = amount;
        return this
      };
      this.repeat = function (times) {
        _repeat = times;
        return this
      };
      this.repeatDelay = function (amount) {
        _repeatDelayTime = amount;
        return this
      };
      this.yoyo = function (yoyo) {
        _yoyo = yoyo;
        return this
      };
      this.easing = function (easing) {
        _easingFunction = easing;
        return this
      };
      this.interpolation = function (interpolation) {
        _interpolationFunction = interpolation;
        return this
      };
      this.chain = function () {
        _chainedTweens = arguments;
        return this
      };
      this.onStart = function (callback) {
        _onStartCallback = callback;
        return this
      };
      this.onUpdate = function (callback) {
        _onUpdateCallback = callback;
        return this
      };
      this.onComplete = function (callback) {
        _onCompleteCallback = callback;
        return this
      };
      this.onStop = function (callback) {
        _onStopCallback = callback;
        return this
      };
      this.update = function (time) {
        var property;
        var elapsed;
        var value;
        if (time < _startTime) {
          return true
        }
        if (_onStartCallbackFired === false) {
          if (_onStartCallback !== null) {
            _onStartCallback.call(_object, _object)
          }
          _onStartCallbackFired = true
        }
        elapsed = (time - _startTime) / _duration;
        elapsed = elapsed > 1 ? 1 : elapsed;
        value = _easingFunction(elapsed);
        for (property in _valuesEnd) {
          // Don't update properties that do not exist in the source object
          if (_valuesStart[property] === undefined) {
            continue
          }
          var start = _valuesStart[property] || 0;
          var end = _valuesEnd[property];
          if (end instanceof Array) {
            _object[property] = _interpolationFunction(end, value)
          } else {
            // Parses relative end values with start as base (e.g.: +10, -3)
            if (typeof end === 'string') {
              if (end.charAt(0) === '+' || end.charAt(0) === '-') {
                end = start + parseFloat(end)
              } else {
                end = parseFloat(end)
              }
            }
            // Protect against non numeric properties.
            if (typeof end === 'number') {
              _object[property] = start + (end - start) * value
            }
          }
        }
        if (_onUpdateCallback !== null) {
          _onUpdateCallback.call(_object, value)
        }
        if (elapsed === 1) {
          if (_repeat > 0) {
            if (isFinite(_repeat)) {
              _repeat--
            }
            // Reassign starting values, restart by making startTime = now
            for (property in _valuesStartRepeat) {
              if (typeof _valuesEnd[property] === 'string') {
                _valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property])
              }
              if (_yoyo) {
                var tmp = _valuesStartRepeat[property];
                _valuesStartRepeat[property] = _valuesEnd[property];
                _valuesEnd[property] = tmp
              }
              _valuesStart[property] = _valuesStartRepeat[property]
            }
            if (_yoyo) {
              _reversed = !_reversed
            }
            if (_repeatDelayTime !== undefined) {
              _startTime = time + _repeatDelayTime
            } else {
              _startTime = time + _delayTime
            }
            return true
          } else {
            if (_onCompleteCallback !== null) {
              _onCompleteCallback.call(_object, _object)
            }
            for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
              // Make the chained tweens start exactly at the time they should,
              // even if the `update()` method was called way past the duration of the tween
              _chainedTweens[i].start(_startTime + _duration)
            }
            return false
          }
        }
        return true
      }
    };
    TWEEN.Easing = {
      Linear: {
        None: function (k) {
          return k
        }
      },
      Quadratic: {
        In: function (k) {
          return k * k
        },
        Out: function (k) {
          return k * (2 - k)
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k
          }
          return -0.5 * (--k * (k - 2) - 1)
        }
      },
      Cubic: {
        In: function (k) {
          return k * k * k
        },
        Out: function (k) {
          return --k * k * k + 1
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k * k
          }
          return 0.5 * ((k -= 2) * k * k + 2)
        }
      },
      Quartic: {
        In: function (k) {
          return k * k * k * k
        },
        Out: function (k) {
          return 1 - --k * k * k * k
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k * k * k
          }
          return -0.5 * ((k -= 2) * k * k * k - 2)
        }
      },
      Quintic: {
        In: function (k) {
          return k * k * k * k * k
        },
        Out: function (k) {
          return --k * k * k * k * k + 1
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return 0.5 * k * k * k * k * k
          }
          return 0.5 * ((k -= 2) * k * k * k * k + 2)
        }
      },
      Sinusoidal: {
        In: function (k) {
          return 1 - Math.cos(k * Math.PI / 2)
        },
        Out: function (k) {
          return Math.sin(k * Math.PI / 2)
        },
        InOut: function (k) {
          return 0.5 * (1 - Math.cos(Math.PI * k))
        }
      },
      Exponential: {
        In: function (k) {
          return k === 0 ? 0 : Math.pow(1024, k - 1)
        },
        Out: function (k) {
          return k === 1 ? 1 : 1 - Math.pow(2, -10 * k)
        },
        InOut: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          if ((k *= 2) < 1) {
            return 0.5 * Math.pow(1024, k - 1)
          }
          return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2)
        }
      },
      Circular: {
        In: function (k) {
          return 1 - Math.sqrt(1 - k * k)
        },
        Out: function (k) {
          return Math.sqrt(1 - --k * k)
        },
        InOut: function (k) {
          if ((k *= 2) < 1) {
            return -0.5 * (Math.sqrt(1 - k * k) - 1)
          }
          return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1)
        }
      },
      Elastic: {
        In: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
        },
        Out: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1
        },
        InOut: function (k) {
          if (k === 0) {
            return 0
          }
          if (k === 1) {
            return 1
          }
          k *= 2;
          if (k < 1) {
            return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
          }
          return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1
        }
      },
      Back: {
        In: function (k) {
          var s = 1.70158;
          return k * k * ((s + 1) * k - s)
        },
        Out: function (k) {
          var s = 1.70158;
          return --k * k * ((s + 1) * k + s) + 1
        },
        InOut: function (k) {
          var s = 1.70158 * 1.525;
          if ((k *= 2) < 1) {
            return 0.5 * (k * k * ((s + 1) * k - s))
          }
          return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2)
        }
      },
      Bounce: {
        In: function (k) {
          return 1 - TWEEN.Easing.Bounce.Out(1 - k)
        },
        Out: function (k) {
          if (k < 1 / 2.75) {
            return 7.5625 * k * k
          } else if (k < 2 / 2.75) {
            return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75
          } else if (k < 2.5 / 2.75) {
            return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375
          } else {
            return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375
          }
        },
        InOut: function (k) {
          if (k < 0.5) {
            return TWEEN.Easing.Bounce.In(k * 2) * 0.5
          }
          return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5
        }
      }
    };
    TWEEN.Interpolation = {
      Linear: function (v, k) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = TWEEN.Interpolation.Utils.Linear;
        if (k < 0) {
          return fn(v[0], v[1], f)
        }
        if (k > 1) {
          return fn(v[m], v[m - 1], m - f)
        }
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i)
      },
      Bezier: function (v, k) {
        var b = 0;
        var n = v.length - 1;
        var pw = Math.pow;
        var bn = TWEEN.Interpolation.Utils.Bernstein;
        for (var i = 0; i <= n; i++) {
          b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i)
        }
        return b
      },
      CatmullRom: function (v, k) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = TWEEN.Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
          if (k < 0) {
            i = Math.floor(f = m * (1 + k))
          }
          return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i)
        } else {
          if (k < 0) {
            return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0])
          }
          if (k > 1) {
            return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m])
          }
          return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i)
        }
      },
      Utils: {
        Linear: function (p0, p1, t) {
          return (p1 - p0) * t + p0
        },
        Bernstein: function (n, i) {
          var fc = TWEEN.Interpolation.Utils.Factorial;
          return fc(n) / fc(i) / fc(n - i)
        },
        Factorial: function () {
          var a = [1];
          return function (n) {
            var s = 1;
            if (a[n]) {
              return a[n]
            }
            for (var i = n; i > 1; i--) {
              s *= i
            }
            a[n] = s;
            return s
          }
        }(),
        CatmullRom: function (p0, p1, p2, p3, t) {
          var v0 = (p2 - p0) * 0.5;
          var v1 = (p3 - p1) * 0.5;
          var t2 = t * t;
          var t3 = t * t2;
          return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1
        }
      }
    };
    // UMD (Universal Module Definition)
    (function (root) {
      if (typeof define === 'function' && define.amd) {
        // AMD
        define([], function () {
          return TWEEN
        })
      } else if (typeof module !== 'undefined' && typeof exports === 'object') {
        // Node.js
        module.exports = TWEEN
      } else if (root !== undefined) {
        // Global variable
        root.TWEEN = TWEEN
      }
    }(this))
  });
  // source: src/views/index.coffee
  rqzt.define('./views', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Controls: rqzt('./views/controls'),
      Graphics: rqzt('./views/graphics'),
      List: rqzt('./views/list'),
      ListItem: rqzt('./views/list-item'),
      CommandBar: rqzt('./views/command-bar'),
      Dynamic: rqzt('./views/dynamic'),
      Login: rqzt('./views/login'),
      Main: rqzt('./views/main'),
      Menu: rqzt('./views/menu'),
      register: function () {
        this.Controls.register();
        this.Graphics.register();
        this.List.register();
        this.ListItem.register();
        this.CommandBar.register();
        this.Login.register();
        this.Main.register();
        return this.Menu.register()
      }
    }
  });
  // source: src/views/controls/index.coffee
  rqzt.define('./views/controls', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Checkbox: rqzt('./views/controls/checkbox'),
      DateRangePicker: rqzt('./views/controls/date-range-picker'),
      Password: rqzt('./views/controls/password'),
      Select: rqzt('./views/controls/select'),
      SelectCountry: rqzt('./views/controls/select-country'),
      SelectState: rqzt('./views/controls/select-state'),
      Text: rqzt('./views/controls/text'),
      TextArea: rqzt('./views/controls/textarea'),
      register: function () {
        this.Checkbox.register();
        this.DateRangePicker.register();
        this.Password.register();
        this.Select.register();
        this.SelectCountry.register();
        this.SelectState.register();
        this.Text.register();
        return this.TextArea.register()
      }
    }
  });
  // source: src/views/controls/checkbox.coffee
  rqzt.define('./views/controls/checkbox', function (module, exports, __dirname, __filename, process) {
    var Checkbox, Control, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./views/controls/control');
    module.exports = Checkbox = function (superClass) {
      extend(Checkbox, superClass);
      function Checkbox() {
        return Checkbox.__super__.constructor.apply(this, arguments)
      }
      Checkbox.prototype.tag = 'checkbox-control';
      Checkbox.prototype.html = rqzt('./templates/controls/checkbox');
      Checkbox.prototype.getValue = function (event) {
        return event.target.checked
      };
      return Checkbox
    }(Control)
  });
  // source: src/views/controls/control.coffee
  rqzt.define('./views/controls/control', function (module, exports, __dirname, __filename, process) {
    var Control, CrowdControl, Events, m, riot, scrolling, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    riot = rqzt('riot/riot');
    scrolling = false;
    module.exports = Control = function (superClass) {
      extend(Control, superClass);
      function Control() {
        return Control.__super__.constructor.apply(this, arguments)
      }
      Control.prototype.init = function () {
        if (this.input == null && this.inputs != null) {
          this.input = this.inputs[this.lookup]
        }
        if (this.input != null) {
          return Control.__super__.init.apply(this, arguments)
        }
      };
      Control.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim() : void 0
      };
      Control.prototype.error = function (err) {
        if (err instanceof DOMException) {
          void 0;
          return
        }
        Control.__super__.error.apply(this, arguments);
        if (!scrolling) {
          scrolling = true;
          $('html, body').animate({ scrollTop: $(this.root).offset().top - $(window).height() / 2 }, {
            complete: function () {
              return scrolling = false
            },
            duration: 500
          })
        }
        return m.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.change = function () {
        Control.__super__.change.apply(this, arguments);
        return m.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.changed = function (value) {
        m.trigger(Events.ChangeSuccess, this.input.name, value);
        return riot.update()
      };
      Control.prototype.value = function () {
        return this.input.ref(this.input.name)
      };
      return Control
    }(CrowdControl.Views.Input)
  });
  // source: src/mediator.coffee
  rqzt.define('./mediator', function (module, exports, __dirname, __filename, process) {
    var riot;
    riot = rqzt('riot/riot');
    module.exports = riot.observable({})
  });
  // source: src/events.coffee
  rqzt.define('./events', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Change: 'daisho.change',
      ChangeSuccess: 'daisho.change.success',
      ChangeFailed: 'daisho.change.failed',
      Login: 'daisho.login',
      LoginSuccess: 'daisho.login.success',
      LoginFailed: 'daisho.login.failed',
      Logout: 'daisho.logout',
      Refresh: 'daisho.refresh',
      ForceRefresh: 'daisho.refresh.force'
    }
  });
  // source: src/templates/controls/checkbox.pug
  rqzt.define('./templates/controls/checkbox', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="checkbox" onchange="{ change }" onblur="{ change }" checked="{ input.ref.get(input.name) }"/>\n<yield></yield>'
  });
  // source: src/views/controls/date-range-picker.coffee
  rqzt.define('./views/controls/date-range-picker', function (module, exports, __dirname, __filename, process) {
    var $, Calendar, DateRangePicker, Text, moment, util, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    $ = rqzt('jquery/dist/jquery');
    moment = rqzt('moment-timezone');
    Calendar = rqzt('./vendor/baremetrics-calendar/calendar');
    util = rqzt('./util');
    module.exports = DateRangePicker = function (superClass) {
      extend(DateRangePicker, superClass);
      function DateRangePicker() {
        return DateRangePicker.__super__.constructor.apply(this, arguments)
      }
      DateRangePicker.prototype.tag = 'date-range-picker-control';
      DateRangePicker.prototype.html = rqzt('./templates/controls/date-range-picker');
      DateRangePicker.prototype.after = '2015-01-01';
      DateRangePicker.prototype.before = moment();
      DateRangePicker.prototype.init = function () {
        DateRangePicker.__super__.init.apply(this, arguments);
        return this.on('updated', function (_this) {
          return function () {
            var filter, self;
            if (!_this.calendar) {
              filter = _this.data.get('filter');
              self = _this;
              return _this.calendar = new Calendar({
                element: $(_this.root).find('.daterange'),
                earliest_date: moment(_this.after),
                latest_date: moment(_this.before),
                start_date: filter[0],
                end_date: filter[1],
                callback: function () {
                  var end, start;
                  start = moment(this.start_date).format(util.rfc3339);
                  end = moment(this.end_date).format(util.rfc3339);
                  void 0;
                  self.data.set('filter', [
                    start,
                    end
                  ]);
                  self.change();
                  return self.daisho.update()
                }
              })
            }
          }
        }(this))
      };
      DateRangePicker.prototype.getValue = function (e) {
        return this.data.get('filter')
      };
      return DateRangePicker
    }(Text)
  });
  // source: src/views/controls/text.coffee
  rqzt.define('./views/controls/text', function (module, exports, __dirname, __filename, process) {
    var Control, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./views/controls/control');
    module.exports = Text = function (superClass) {
      extend(Text, superClass);
      function Text() {
        return Text.__super__.constructor.apply(this, arguments)
      }
      Text.prototype.tag = 'text-control';
      Text.prototype.html = rqzt('./templates/controls/text');
      Text.prototype.type = 'text';
      Text.prototype.formElement = 'input';
      Text.prototype.autoComplete = 'on';
      Text.prototype.init = function () {
        Text.__super__.init.apply(this, arguments);
        return this.on('updated', function (_this) {
          return function () {
            var el;
            return el = _this.root.getElementsByTagName(_this.formElement)[0]
          }
        }(this))
      };
      return Text
    }(Control)
  });
  // source: src/templates/controls/text.pug
  rqzt.define('./templates/controls/text', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="{ type }" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref.get(input.name) }" placeholder="{ placeholder }" autocomplete="{ autoComplete }"/>\n<yield></yield>'
  });
  // source: node_modules/moment-timezone/index.js
  rqzt.define('moment-timezone', function (module, exports, __dirname, __filename, process) {
    var moment = module.exports = rqzt('moment-timezone/moment-timezone');
    moment.tz.load(rqzt('moment-timezone/data/packed/latest'))
  });
  // source: node_modules/moment-timezone/moment-timezone.js
  rqzt.define('moment-timezone/moment-timezone', function (module, exports, __dirname, __filename, process) {
    //! moment-timezone.js
    //! version : 0.5.11
    //! Copyright (c) JS Foundation and other contributors
    //! license : MIT
    //! github.com/moment/moment-timezone
    (function (root, factory) {
      'use strict';
      /*global define*/
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory)  // AMD
      } else if (typeof module === 'object' && module.exports) {
        module.exports = factory(rqzt('moment/moment'))  // Node
      } else {
        factory(root.moment)  // Browser
      }
    }(this, function (moment) {
      'use strict';
      // Do not load moment-timezone a second time.
      // if (moment.tz !== undefined) {
      // 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
      // 	return moment;
      // }
      var VERSION = '0.5.11', zones = {}, links = {}, names = {}, guesses = {}, cachedGuess, momentVersion = moment.version.split('.'), major = +momentVersion[0], minor = +momentVersion[1];
      // Moment.js version check
      if (major < 2 || major === 2 && minor < 6) {
        logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com')
      }
      /************************************
		Unpacking
	************************************/
      function charCodeToInt(charCode) {
        if (charCode > 96) {
          return charCode - 87
        } else if (charCode > 64) {
          return charCode - 29
        }
        return charCode - 48
      }
      function unpackBase60(string) {
        var i = 0, parts = string.split('.'), whole = parts[0], fractional = parts[1] || '', multiplier = 1, num, out = 0, sign = 1;
        // handle negative numbers
        if (string.charCodeAt(0) === 45) {
          i = 1;
          sign = -1
        }
        // handle digits before the decimal
        for (i; i < whole.length; i++) {
          num = charCodeToInt(whole.charCodeAt(i));
          out = 60 * out + num
        }
        // handle digits after the decimal
        for (i = 0; i < fractional.length; i++) {
          multiplier = multiplier / 60;
          num = charCodeToInt(fractional.charCodeAt(i));
          out += num * multiplier
        }
        return out * sign
      }
      function arrayToInt(array) {
        for (var i = 0; i < array.length; i++) {
          array[i] = unpackBase60(array[i])
        }
      }
      function intToUntil(array, length) {
        for (var i = 0; i < length; i++) {
          array[i] = Math.round((array[i - 1] || 0) + array[i] * 60000)  // minutes to milliseconds
        }
        array[length - 1] = Infinity
      }
      function mapIndices(source, indices) {
        var out = [], i;
        for (i = 0; i < indices.length; i++) {
          out[i] = source[indices[i]]
        }
        return out
      }
      function unpack(string) {
        var data = string.split('|'), offsets = data[2].split(' '), indices = data[3].split(''), untils = data[4].split(' ');
        arrayToInt(offsets);
        arrayToInt(indices);
        arrayToInt(untils);
        intToUntil(untils, indices.length);
        return {
          name: data[0],
          abbrs: mapIndices(data[1].split(' '), indices),
          offsets: mapIndices(offsets, indices),
          untils: untils,
          population: data[5] | 0
        }
      }
      /************************************
		Zone object
	************************************/
      function Zone(packedString) {
        if (packedString) {
          this._set(unpack(packedString))
        }
      }
      Zone.prototype = {
        _set: function (unpacked) {
          this.name = unpacked.name;
          this.abbrs = unpacked.abbrs;
          this.untils = unpacked.untils;
          this.offsets = unpacked.offsets;
          this.population = unpacked.population
        },
        _index: function (timestamp) {
          var target = +timestamp, untils = this.untils, i;
          for (i = 0; i < untils.length; i++) {
            if (target < untils[i]) {
              return i
            }
          }
        },
        parse: function (timestamp) {
          var target = +timestamp, offsets = this.offsets, untils = this.untils, max = untils.length - 1, offset, offsetNext, offsetPrev, i;
          for (i = 0; i < max; i++) {
            offset = offsets[i];
            offsetNext = offsets[i + 1];
            offsetPrev = offsets[i ? i - 1 : i];
            if (offset < offsetNext && tz.moveAmbiguousForward) {
              offset = offsetNext
            } else if (offset > offsetPrev && tz.moveInvalidForward) {
              offset = offsetPrev
            }
            if (target < untils[i] - offset * 60000) {
              return offsets[i]
            }
          }
          return offsets[max]
        },
        abbr: function (mom) {
          return this.abbrs[this._index(mom)]
        },
        offset: function (mom) {
          return this.offsets[this._index(mom)]
        }
      };
      /************************************
		Current Timezone
	************************************/
      function OffsetAt(at) {
        var timeString = at.toTimeString();
        var abbr = timeString.match(/\([a-z ]+\)/i);
        if (abbr && abbr[0]) {
          // 17:56:31 GMT-0600 (CST)
          // 17:56:31 GMT-0600 (Central Standard Time)
          abbr = abbr[0].match(/[A-Z]/g);
          abbr = abbr ? abbr.join('') : undefined
        } else {
          // 17:56:31 CST
          // 17:56:31 GMT+0800 (台北標準時間)
          abbr = timeString.match(/[A-Z]{3,5}/g);
          abbr = abbr ? abbr[0] : undefined
        }
        if (abbr === 'GMT') {
          abbr = undefined
        }
        this.at = +at;
        this.abbr = abbr;
        this.offset = at.getTimezoneOffset()
      }
      function ZoneScore(zone) {
        this.zone = zone;
        this.offsetScore = 0;
        this.abbrScore = 0
      }
      ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
        this.offsetScore += Math.abs(this.zone.offset(offsetAt.at) - offsetAt.offset);
        if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
          this.abbrScore++
        }
      };
      function findChange(low, high) {
        var mid, diff;
        while (diff = ((high.at - low.at) / 120000 | 0) * 60000) {
          mid = new OffsetAt(new Date(low.at + diff));
          if (mid.offset === low.offset) {
            low = mid
          } else {
            high = mid
          }
        }
        return low
      }
      function userOffsets() {
        var startYear = new Date().getFullYear() - 2, last = new OffsetAt(new Date(startYear, 0, 1)), offsets = [last], change, next, i;
        for (i = 1; i < 48; i++) {
          next = new OffsetAt(new Date(startYear, i, 1));
          if (next.offset !== last.offset) {
            change = findChange(last, next);
            offsets.push(change);
            offsets.push(new OffsetAt(new Date(change.at + 60000)))
          }
          last = next
        }
        for (i = 0; i < 4; i++) {
          offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
          offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)))
        }
        return offsets
      }
      function sortZoneScores(a, b) {
        if (a.offsetScore !== b.offsetScore) {
          return a.offsetScore - b.offsetScore
        }
        if (a.abbrScore !== b.abbrScore) {
          return a.abbrScore - b.abbrScore
        }
        return b.zone.population - a.zone.population
      }
      function addToGuesses(name, offsets) {
        var i, offset;
        arrayToInt(offsets);
        for (i = 0; i < offsets.length; i++) {
          offset = offsets[i];
          guesses[offset] = guesses[offset] || {};
          guesses[offset][name] = true
        }
      }
      function guessesForUserOffsets(offsets) {
        var offsetsLength = offsets.length, filteredGuesses = {}, out = [], i, j, guessesOffset;
        for (i = 0; i < offsetsLength; i++) {
          guessesOffset = guesses[offsets[i].offset] || {};
          for (j in guessesOffset) {
            if (guessesOffset.hasOwnProperty(j)) {
              filteredGuesses[j] = true
            }
          }
        }
        for (i in filteredGuesses) {
          if (filteredGuesses.hasOwnProperty(i)) {
            out.push(names[i])
          }
        }
        return out
      }
      function rebuildGuess() {
        // use Intl API when available and returning valid time zone
        try {
          var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
          if (intlName) {
            var name = names[normalizeName(intlName)];
            if (name) {
              return name
            }
            logError('Moment Timezone found ' + intlName + ' from the Intl api, but did not have that data loaded.')
          }
        } catch (e) {
        }
        var offsets = userOffsets(), offsetsLength = offsets.length, guesses = guessesForUserOffsets(offsets), zoneScores = [], zoneScore, i, j;
        for (i = 0; i < guesses.length; i++) {
          zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
          for (j = 0; j < offsetsLength; j++) {
            zoneScore.scoreOffsetAt(offsets[j])
          }
          zoneScores.push(zoneScore)
        }
        zoneScores.sort(sortZoneScores);
        return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined
      }
      function guess(ignoreCache) {
        if (!cachedGuess || ignoreCache) {
          cachedGuess = rebuildGuess()
        }
        return cachedGuess
      }
      /************************************
		Global Methods
	************************************/
      function normalizeName(name) {
        return (name || '').toLowerCase().replace(/\//g, '_')
      }
      function addZone(packed) {
        var i, name, split, normalized;
        if (typeof packed === 'string') {
          packed = [packed]
        }
        for (i = 0; i < packed.length; i++) {
          split = packed[i].split('|');
          name = split[0];
          normalized = normalizeName(name);
          zones[normalized] = packed[i];
          names[normalized] = name;
          if (split[5]) {
            addToGuesses(normalized, split[2].split(' '))
          }
        }
      }
      function getZone(name, caller) {
        name = normalizeName(name);
        var zone = zones[name];
        var link;
        if (zone instanceof Zone) {
          return zone
        }
        if (typeof zone === 'string') {
          zone = new Zone(zone);
          zones[name] = zone;
          return zone
        }
        // Pass getZone to prevent recursion more than 1 level deep
        if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
          zone = zones[name] = new Zone;
          zone._set(link);
          zone.name = names[name];
          return zone
        }
        return null
      }
      function getNames() {
        var i, out = [];
        for (i in names) {
          if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
            out.push(names[i])
          }
        }
        return out.sort()
      }
      function addLink(aliases) {
        var i, alias, normal0, normal1;
        if (typeof aliases === 'string') {
          aliases = [aliases]
        }
        for (i = 0; i < aliases.length; i++) {
          alias = aliases[i].split('|');
          normal0 = normalizeName(alias[0]);
          normal1 = normalizeName(alias[1]);
          links[normal0] = normal1;
          names[normal0] = alias[0];
          links[normal1] = normal0;
          names[normal1] = alias[1]
        }
      }
      function loadData(data) {
        addZone(data.zones);
        addLink(data.links);
        tz.dataVersion = data.version
      }
      function zoneExists(name) {
        if (!zoneExists.didShowError) {
          zoneExists.didShowError = true;
          logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')")
        }
        return !!getZone(name)
      }
      function needsOffset(m) {
        return !!(m._a && m._tzm === undefined)
      }
      function logError(message) {
        if (typeof console !== 'undefined' && typeof console.error === 'function') {
          void 0
        }
      }
      /************************************
		moment.tz namespace
	************************************/
      function tz(input) {
        var args = Array.prototype.slice.call(arguments, 0, -1), name = arguments[arguments.length - 1], zone = getZone(name), out = moment.utc.apply(null, args);
        if (zone && !moment.isMoment(input) && needsOffset(out)) {
          out.add(zone.parse(out), 'minutes')
        }
        out.tz(name);
        return out
      }
      tz.version = VERSION;
      tz.dataVersion = '';
      tz._zones = zones;
      tz._links = links;
      tz._names = names;
      tz.add = addZone;
      tz.link = addLink;
      tz.load = loadData;
      tz.zone = getZone;
      tz.zoneExists = zoneExists;
      // deprecated in 0.1.0
      tz.guess = guess;
      tz.names = getNames;
      tz.Zone = Zone;
      tz.unpack = unpack;
      tz.unpackBase60 = unpackBase60;
      tz.needsOffset = needsOffset;
      tz.moveInvalidForward = true;
      tz.moveAmbiguousForward = false;
      /************************************
		Interface with Moment.js
	************************************/
      var fn = moment.fn;
      moment.tz = tz;
      moment.defaultZone = null;
      moment.updateOffset = function (mom, keepTime) {
        var zone = moment.defaultZone, offset;
        if (mom._z === undefined) {
          if (zone && needsOffset(mom) && !mom._isUTC) {
            mom._d = moment.utc(mom._a)._d;
            mom.utc().add(zone.parse(mom), 'minutes')
          }
          mom._z = zone
        }
        if (mom._z) {
          offset = mom._z.offset(mom);
          if (Math.abs(offset) < 16) {
            offset = offset / 60
          }
          if (mom.utcOffset !== undefined) {
            mom.utcOffset(-offset, keepTime)
          } else {
            mom.zone(offset, keepTime)
          }
        }
      };
      fn.tz = function (name) {
        if (name) {
          this._z = getZone(name);
          if (this._z) {
            moment.updateOffset(this)
          } else {
            logError('Moment Timezone has no data for ' + name + '. See http://momentjs.com/timezone/docs/#/data-loading/.')
          }
          return this
        }
        if (this._z) {
          return this._z.name
        }
      };
      function abbrWrap(old) {
        return function () {
          if (this._z) {
            return this._z.abbr(this)
          }
          return old.call(this)
        }
      }
      function resetZoneWrap(old) {
        return function () {
          this._z = null;
          return old.apply(this, arguments)
        }
      }
      fn.zoneName = abbrWrap(fn.zoneName);
      fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
      fn.utc = resetZoneWrap(fn.utc);
      moment.tz.setDefault = function (name) {
        if (major < 2 || major === 2 && minor < 9) {
          logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.')
        }
        moment.defaultZone = name ? getZone(name) : null;
        return moment
      };
      // Cloning a moment should include the _z property.
      var momentProperties = moment.momentProperties;
      if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
        // moment 2.8.1+
        momentProperties.push('_z');
        momentProperties.push('_a')
      } else if (momentProperties) {
        // moment 2.7.0
        momentProperties._z = null
      }
      // INJECT DATA
      return moment
    }))
  });
  // source: node_modules/moment/moment.js
  rqzt.define('moment/moment', function (module, exports, __dirname, __filename, process) {
    //! moment.js
    //! version : 2.17.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    ;
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory()
    }(this, function () {
      'use strict';
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments)
      }
      // This is done to register the method called with moment()
      // without creating circular dependencies.
      function setHookCallback(callback) {
        hookCallback = callback
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]'
      }
      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]'
      }
      function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
          // even if its not own property I'd still call it non-empty
          return false
        }
        return true
      }
      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]'
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]'
      }
      function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i))
        }
        return res
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b)
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i]
          }
        }
        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString
        }
        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf
        }
        return a
      }
      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc()
      }
      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          meridiem: null
        }
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags()
        }
        return m._pf
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some
      } else {
        some = function (fun) {
          var t = Object(this);
          var len = t.length >>> 0;
          for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true
            }
          }
          return false
        }
      }
      var some$1 = some;
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null
          });
          var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid
          } else {
            return isNowValid
          }
        }
        return m._isValid
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags)
        } else {
          getParsingFlags(m).userInvalidated = true
        }
        return m
      }
      function isUndefined(input) {
        return input === void 0
      }
      // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.
      var momentProperties = hooks.momentProperties = [];
      function copyConfig(to, from) {
        var i, prop, val;
        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject
        }
        if (!isUndefined(from._i)) {
          to._i = from._i
        }
        if (!isUndefined(from._f)) {
          to._f = from._f
        }
        if (!isUndefined(from._l)) {
          to._l = from._l
        }
        if (!isUndefined(from._strict)) {
          to._strict = from._strict
        }
        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm
        }
        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC
        }
        if (!isUndefined(from._offset)) {
          to._offset = from._offset
        }
        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from)
        }
        if (!isUndefined(from._locale)) {
          to._locale = from._locale
        }
        if (momentProperties.length > 0) {
          for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
              to[prop] = val
            }
          }
        }
        return to
      }
      var updateInProgress = false;
      // Moment prototype object
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN)
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null
      }
      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0
        } else {
          return Math.floor(number)
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber)
        }
        return value
      }
      // compare two arrays, return the number of differences
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++
          }
        }
        return diffs + lengthDiff
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          void 0
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg)
          }
          if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
              arg = '';
              if (typeof arguments[i] === 'object') {
                arg += '\n[' + i + '] ';
                for (var key in arguments[0]) {
                  arg += key + ': ' + arguments[0][key] + ', '
                }
                arg = arg.slice(0, -2)  // Remove trailing comma and space
              } else {
                arg = arguments[i]
              }
              args.push(arg)
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false
          }
          return fn.apply(this, arguments)
        }, fn)
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg)
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]'
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          prop = config[i];
          if (isFunction(prop)) {
            this[i] = prop
          } else {
            this['_' + i] = prop
          }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source)
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop])
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop]
            } else {
              delete res[prop]
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop])
          }
        }
        return res
      }
      function Locale(config) {
        if (config != null) {
          this.set(config)
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys
      } else {
        keys = function (obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i)
            }
          }
          return res
        }
      }
      var keys$1 = keys;
      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };
      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output
      }
      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };
      function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
          return format
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1)
        });
        return this._longDateFormat[key]
      }
      var defaultInvalidDate = 'Invalid date';
      function invalidDate() {
        return this._invalidDate
      }
      var defaultOrdinal = '%d';
      var defaultOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace('%d', number)
      }
      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number)
      }
      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output)
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit
      }
      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop]
            }
          }
        }
        return normalizedInput
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
          units.push({
            unit: u,
            priority: priorities[u]
          })
        }
        units.sort(function (a, b) {
          return a.priority - b.priority
        });
        return units
      }
      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this
          } else {
            return get(this, unit)
          }
        }
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN
      }
      function set$1(mom, unit, value) {
        if (mom.isValid()) {
          mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value)
        }
      }
      // MOMENTS
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]()
        }
        return this
      }
      function stringSet(units, value) {
        if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);
          for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit])
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value)
          }
        }
        return this
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
      var formatFunctions = {};
      var formatTokenFunctions = {};
      // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }
      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
          func = function () {
            return this[callback]()
          }
        }
        if (token) {
          formatTokenFunctions[token] = func
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2])
          }
        }
        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token)
          }
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '')
        }
        return input.replace(/\\/g, '')
      }
      function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]]
          } else {
            array[i] = removeFormattingTokens(array[i])
          }
        }
        return function (mom) {
          var output = '', i;
          for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i]
          }
          return output
        }
      }
      // format date using native date object
      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate()
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m)
      }
      function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1
        }
        return format
      }
      var match1 = /\d/;
      //       0 - 9
      var match2 = /\d\d/;
      //      00 - 99
      var match3 = /\d{3}/;
      //     000 - 999
      var match4 = /\d{4}/;
      //    0000 - 9999
      var match6 = /[+-]?\d{6}/;
      // -999999 - 999999
      var match1to2 = /\d\d?/;
      //       0 - 99
      var match3to4 = /\d\d\d\d?/;
      //     999 - 9999
      var match5to6 = /\d\d\d\d\d\d?/;
      //   99999 - 999999
      var match1to3 = /\d{1,3}/;
      //       0 - 999
      var match1to4 = /\d{1,4}/;
      //       0 - 9999
      var match1to6 = /[+-]?\d{1,6}/;
      // -999999 - 999999
      var matchUnsigned = /\d+/;
      //       0 - inf
      var matchSigned = /[+-]?\d+/;
      //    -inf - inf
      var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
      // +00:00 -00:00 +0000 -0000 or Z
      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
      // +00 -00 +00:00 -00:00 +0000 -0000 or Z
      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
      // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months
      var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
      var regexes = {};
      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return isStrict && strictRegex ? strictRegex : regex
        }
      }
      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token))
        }
        return regexes[token](config._strict, config._locale)
      }
      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4
        }))
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')
      }
      var tokens = {};
      function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
          token = [token]
        }
        if (isNumber(callback)) {
          func = function (input, array) {
            array[callback] = toInt(input)
          }
        }
        for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func
        }
      }
      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token)
        })
      }
      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token)
        }
      }
      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8;
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf
      } else {
        indexOf = function (o) {
          // I know
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i
            }
          }
          return -1
        }
      }
      var indexOf$1 = indexOf;
      function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate()
      }
      // FORMATTING
      addFormatToken('M', [
        'MM',
        2
      ], 'Mo', function () {
        return this.month() + 1
      });
      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format)
      });
      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format)
      });
      // ALIASES
      addUnitAlias('month', 'M');
      // PRIORITY
      addUnitPriority('month', 8);
      // PARSING
      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict)
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict)
      });
      addParseToken([
        'M',
        'MM'
      ], function (input, array) {
        array[MONTH] = toInt(input) - 1
      });
      addParseToken([
        'MMM',
        'MMMM'
      ], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
          array[MONTH] = month
        } else {
          getParsingFlags(config).invalidMonth = input
        }
      });
      // LOCALES
      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
      function localeMonths(m, format) {
        if (!m) {
          return this._months
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()]
      }
      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
      function localeMonthsShort(m, format) {
        if (!m) {
          return this._monthsShort
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()]
      }
      function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([
              2000,
              i
            ]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase()
          }
        }
        if (strict) {
          if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null
          }
        }
      }
      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict)
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = []
        }
        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            i
          ]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i')
          }
          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i')
          }
          // test the regex
          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i
          }
        }
      }
      // MOMENTS
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          // No op
          return mom
        }
        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value)
          } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
              return mom
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this
        } else {
          return get(this, 'Month')
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month())
      }
      var defaultMonthsShortRegex = matchWord;
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this)
          }
          if (isStrict) {
            return this._monthsShortStrictRegex
          } else {
            return this._monthsShortRegex
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex
        }
      }
      var defaultMonthsRegex = matchWord;
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this)
          }
          if (isStrict) {
            return this._monthsStrictRegex
          } else {
            return this._monthsRegex
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            i
          ]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''))
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i])
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i])
        }
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i')
      }
      // FORMATTING
      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y
      });
      addFormatToken(0, [
        'YY',
        2
      ], 0, function () {
        return this.year() % 100
      });
      addFormatToken(0, [
        'YYYY',
        4
      ], 0, 'year');
      addFormatToken(0, [
        'YYYYY',
        5
      ], 0, 'year');
      addFormatToken(0, [
        'YYYYYY',
        6,
        true
      ], 0, 'year');
      // ALIASES
      addUnitAlias('year', 'y');
      // PRIORITIES
      addUnitPriority('year', 1);
      // PARSING
      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken([
        'YYYYY',
        'YYYYYY'
      ], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input)
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input)
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10)
      });
      // HELPERS
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
      }
      // HOOKS
      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000)
      };
      // MOMENTS
      var getSetYear = makeGetSet('FullYear', true);
      function getIsLeapYear() {
        return isLeapYear(this.year())
      }
      function createDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);
        //the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
          date.setFullYear(y)
        }
        return date
      }
      function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        //the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y)
        }
        return date
      }
      // start-of-first-week - start-of-year
      function firstWeekOffset(year, dow, doy) {
        var
          // first-week day -- which january is always in the first week (4 for iso, 1 for other)
          fwd = 7 + dow - doy,
          // first-week day local weekday -- which local weekday is fwd
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1
      }
      //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year)
        } else {
          resYear = year;
          resDayOfYear = dayOfYear
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        }
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy)
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1
        } else {
          resYear = mom.year();
          resWeek = week
        }
        return {
          week: resWeek,
          year: resYear
        }
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7
      }
      // FORMATTING
      addFormatToken('w', [
        'ww',
        2
      ], 'wo', 'week');
      addFormatToken('W', [
        'WW',
        2
      ], 'Wo', 'isoWeek');
      // ALIASES
      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W');
      // PRIORITIES
      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5);
      // PARSING
      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
      ], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input)
      });
      // HELPERS
      // LOCALES
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6  // The week that contains Jan 1st is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow
      }
      function localeFirstDayOfYear() {
        return this._week.doy
      }
      // MOMENTS
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd')
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd')
      }
      // FORMATTING
      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format)
      });
      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format)
      });
      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format)
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');
      // ALIASES
      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E');
      // PRIORITY
      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11);
      // PARSING
      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict)
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict)
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict)
      });
      addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
      ], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
          week.d = weekday
        } else {
          getParsingFlags(config).invalidWeekday = input
        }
      });
      addWeekParseToken([
        'd',
        'e',
        'E'
      ], function (input, week, config, token) {
        week[token] = toInt(input)
      });
      // HELPERS
      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input
        }
        if (!isNaN(input)) {
          return parseInt(input, 10)
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
          return input
        }
        return null
      }
      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7
        }
        return isNaN(input) ? null : input
      }
      // LOCALES
      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
      function localeWeekdays(m, format) {
        if (!m) {
          return this._weekdays
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()]
      }
      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
      function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort
      }
      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
      function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin
      }
      function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([
              2000,
              1
            ]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase()
          }
        }
        if (strict) {
          if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict)
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = []
        }
        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            1
          ]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '.?') + '$', 'i')
          }
          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i')
          }
          // test the regex
          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i
          }
        }
      }
      // MOMENTS
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd')
        } else {
          return day
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd')
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7)
        } else {
          return this.day() || 7
        }
      }
      var defaultWeekdaysRegex = matchWord;
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this)
          }
          if (isStrict) {
            return this._weekdaysStrictRegex
          } else {
            return this._weekdaysRegex
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex
        }
      }
      var defaultWeekdaysShortRegex = matchWord;
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this)
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex
          } else {
            return this._weekdaysShortRegex
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex
        }
      }
      var defaultWeekdaysMinRegex = matchWord;
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this)
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex
          } else {
            return this._weekdaysMinRegex
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            1
          ]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp)
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i])
        }
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i')
      }
      // FORMATTING
      function hFormat() {
        return this.hours() % 12 || 12
      }
      function kFormat() {
        return this.hours() || 24
      }
      addFormatToken('H', [
        'HH',
        2
      ], 0, 'hour');
      addFormatToken('h', [
        'hh',
        2
      ], 0, hFormat);
      addFormatToken('k', [
        'kk',
        2
      ], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2)
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2)
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
      });
      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase)
        })
      }
      meridiem('a', true);
      meridiem('A', false);
      // ALIASES
      addUnitAlias('hour', 'h');
      // PRIORITY
      addUnitPriority('hour', 13);
      // PARSING
      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse
      }
      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken([
        'H',
        'HH'
      ], HOUR);
      addParseToken([
        'a',
        'A'
      ], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input
      });
      addParseToken([
        'h',
        'hh'
      ], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos))
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2))
      });
      // LOCALES
      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p'
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM'
        } else {
          return isLower ? 'am' : 'AM'
        }
      }
      // MOMENTS
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour he wants. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.
      var getSetHour = makeGetSet('Hours', true);
      // months
      // week
      // weekdays
      // meridiem
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        ordinalParse: defaultOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      // internal storage for locale config files
      var locales = {};
      var localeFamilies = {};
      var globalLocale;
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key
      }
      // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
      function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
              return locale
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break
            }
            j--
          }
          i++
        }
        return null
      }
      function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale)
          } catch (e) {
          }
        }
        return locales[name]
      }
      // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key)
          } else {
            data = defineLocale(key, values)
          }
          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data
          }
        }
        return globalLocale._abbr
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config
            } else {
              if (!localeFamilies[config.parentLocale]) {
                localeFamilies[config.parentLocale] = []
              }
              localeFamilies[config.parentLocale].push({
                name: name,
                config: config
              });
              return null
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config)
            })
          }
          // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.
          getSetGlobalLocale(name);
          return locales[name]
        } else {
          // useful for testing
          delete locales[name];
          return null
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale, parentConfig = baseConfig;
          // MERGE
          if (locales[name] != null) {
            parentConfig = locales[name]._config
          }
          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale;
          // backwards compat for now: also set the locale
          getSetGlobalLocale(name)
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale
            } else if (locales[name] != null) {
              delete locales[name]
            }
          }
        }
        return locales[name]
      }
      // returns locale data
      function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr
        }
        if (!key) {
          return globalLocale
        }
        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);
          if (locale) {
            return locale
          }
          key = [key]
        }
        return chooseLocale(key)
      }
      function listLocales() {
        return keys$1(locales)
      }
      function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY
          }
          getParsingFlags(m).overflow = overflow
        }
        return m
      }
      // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
      var isoDates = [
        [
          'YYYYYY-MM-DD',
          /[+-]\d{6}-\d\d-\d\d/
        ],
        [
          'YYYY-MM-DD',
          /\d{4}-\d\d-\d\d/
        ],
        [
          'GGGG-[W]WW-E',
          /\d{4}-W\d\d-\d/
        ],
        [
          'GGGG-[W]WW',
          /\d{4}-W\d\d/,
          false
        ],
        [
          'YYYY-DDD',
          /\d{4}-\d{3}/
        ],
        [
          'YYYY-MM',
          /\d{4}-\d\d/,
          false
        ],
        [
          'YYYYYYMMDD',
          /[+-]\d{10}/
        ],
        [
          'YYYYMMDD',
          /\d{8}/
        ],
        // YYYYMM is NOT allowed by the standard
        [
          'GGGG[W]WWE',
          /\d{4}W\d{3}/
        ],
        [
          'GGGG[W]WW',
          /\d{4}W\d{2}/,
          false
        ],
        [
          'YYYYDDD',
          /\d{7}/
        ]
      ];
      // iso time formats and regexes
      var isoTimes = [
        [
          'HH:mm:ss.SSSS',
          /\d\d:\d\d:\d\d\.\d+/
        ],
        [
          'HH:mm:ss,SSSS',
          /\d\d:\d\d:\d\d,\d+/
        ],
        [
          'HH:mm:ss',
          /\d\d:\d\d:\d\d/
        ],
        [
          'HH:mm',
          /\d\d:\d\d/
        ],
        [
          'HHmmss.SSSS',
          /\d\d\d\d\d\d\.\d+/
        ],
        [
          'HHmmss,SSSS',
          /\d\d\d\d\d\d,\d+/
        ],
        [
          'HHmmss',
          /\d\d\d\d\d\d/
        ],
        [
          'HHmm',
          /\d\d\d\d/
        ],
        [
          'HH',
          /\d\d/
        ]
      ];
      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
      // date from iso format
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return
          }
          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z'
            } else {
              config._isValid = false;
              return
            }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config)
        } else {
          config._isValid = false
        }
      }
      // date from iso format or fallback
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
          hooks.createFromInputFallback(config)
        }
      }
      hooks.createFromInputFallback = deprecate('value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''))
      });
      // Pick the first defined of two or three arguments.
      function defaults(a, b, c) {
        if (a != null) {
          return a
        }
        if (b != null) {
          return b
        }
        return c
      }
      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ]
        }
        return [
          nowValue.getFullYear(),
          nowValue.getMonth(),
          nowValue.getDate()
        ]
      }
      // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]
      function configFromArray(config) {
        var i, date, input = [], currentDate, yearToUse;
        if (config._d) {
          return
        }
        currentDate = currentDateArray(config);
        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config)
        }
        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate()
        }
        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i]
        }
        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i]
        }
        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm)
        }
        if (config._nextDay) {
          config._a[HOUR] = 24
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          var curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          // Default to current week.
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true
            }
          } else {
            // default to begining of week
            weekday = dow
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear
        }
      }
      // constant that refers to the ISO standard
      hooks.ISO_8601 = function () {
      };
      // date from string and format string
      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
          // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped)
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length
          }
          // don't parse if it's not a known token
          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false
            } else {
              getParsingFlags(config).unusedTokens.push(token)
            }
            addTimeToArrayFromToken(token, parsedInput, config)
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token)
          }
        }
        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string)
        }
        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config)
      }
      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
          // nothing to do
          return hour
        }
        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem)
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);
          if (isPm && hour < 12) {
            hour += 12
          }
          if (!isPm && hour === 12) {
            hour = 0
          }
          return hour
        } else {
          // this is not supposed to happen
          return hour
        }
      }
      // date from string and array of format strings
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return
        }
        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (!isValid(tempConfig)) {
            continue
          }
          // if there is any input that was not parsed add a penalty for that format
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          //or tokens
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig
          }
        }
        extend(config, bestMoment || tempConfig)
      }
      function configFromObject(config) {
        if (config._d) {
          return
        }
        var i = normalizeObjectUnits(config._i);
        config._a = map([
          i.year,
          i.month,
          i.day || i.date,
          i.hour,
          i.minute,
          i.second,
          i.millisecond
        ], function (obj) {
          return obj && parseInt(obj, 10)
        });
        configFromArray(config)
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined
        }
        return res
      }
      function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') {
          return createInvalid({ nullInput: true })
        }
        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input)
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input))
        } else if (isDate(input)) {
          config._d = input
        } else if (isArray(format)) {
          configFromStringAndArray(config)
        } else if (format) {
          configFromStringAndFormat(config)
        } else {
          configFromInput(config)
        }
        if (!isValid(config)) {
          config._d = null
        }
        return config
      }
      function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
          config._d = new Date(hooks.now())
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf())
        } else if (typeof input === 'string') {
          configFromString(config)
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10)
          });
          configFromArray(config)
        } else if (typeof input === 'object') {
          configFromObject(config)
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input)
        } else {
          hooks.createFromInputFallback(config)
        }
      }
      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = undefined
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c)
      }
      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false)
      }
      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other
        } else {
          return createInvalid()
        }
      });
      var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other
        } else {
          return createInvalid()
        }
      });
      // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0]
        }
        if (!moments.length) {
          return createLocal()
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i]
          }
        }
        return res
      }
      // TODO: Use [].sort instead?
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args)
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args)
      }
      var now = function () {
        return Date.now ? Date.now() : +new Date
      };
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1000 + // 1000
        minutes * 60000 + // 1000 * 60
        hours * 1000 * 60 * 60;
        //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble()
      }
      function isDuration(obj) {
        return obj instanceof Duration
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1
        } else {
          return Math.round(number)
        }
      }
      // FORMATTING
      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';
          if (offset < 0) {
            offset = -offset;
            sign = '-'
          }
          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2)
        })
      }
      offset('Z', ':');
      offset('ZZ', '');
      // PARSING
      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken([
        'Z',
        'ZZ'
      ], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input)
      });
      // HELPERS
      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);
        if (matches === null) {
          return null
        }
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || [
          '-',
          0,
          0
        ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes
      }
      // Return a moment from input, that is local/utc/zone equivalent to model.
      function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          // Use low-level api, because this fn is low-level api.
          res._d.setTime(res._d.valueOf() + diff);
          hooks.updateOffset(res, false);
          return res
        } else {
          return createLocal(input).local()
        }
      }
      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15
      }
      // HOOKS
      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.
      hooks.updateOffset = function () {
      };
      // MOMENTS
      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.
      function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this
            }
          } else if (Math.abs(input) < 16) {
            input = input * 60
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this)
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, 'm')
          }
          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false)
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null
            }
          }
          return this
        } else {
          return this._isUTC ? offset : getDateOffset(this)
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input
          }
          this.utcOffset(input, keepLocalTime);
          return this
        } else {
          return -this.utcOffset()
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime)
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm')
          }
        }
        return this
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm)
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone)
          } else {
            this.utcOffset(0, true)
          }
        }
        return this
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0
        } else {
          this._isDSTShifted = false
        }
        return this._isDSTShifted
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false
      }
      // ASP.NET json date format regex
      var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day
      var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input,
          // matching against regexp is expensive, do it on demand
          match = null, sign, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          }
        } else if (isNumber(input)) {
          duration = {};
          if (key) {
            duration[key] = input
          } else {
            duration.milliseconds = input
          }
        } else if (!!(match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign  // the millisecond decimal point is included in the match
          }
        } else if (!!(match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign)
          }
        } else if (duration == null) {
          // checks for null or undefined
          duration = {}
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale
        }
        return ret
      }
      createDuration.fn = Duration.prototype;
      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign
      }
      function positiveMomentsDifference(base, other) {
        var res = {
          milliseconds: 0,
          months: 0
        };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          }
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other)
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months
        }
        return res
      }
      // TODO: remove 'name' arg after deprecation is removed
      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp;
          //invert the arguments, but complain about it
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp
          }
          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this
        }
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) {
          // No op
          return
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding)
        }
        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding)
        }
        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding)
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days || months)
        }
      }
      var add = createAdder(1, 'add');
      var subtract = createAdder(-1, 'subtract');
      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse'
      }
      function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)))
      }
      function clone() {
        return new Moment(this)
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf()
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf()
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf()
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf()
        }
      }
      function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units))
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf()
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf()
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units)
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units)
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, delta, output;
        if (!this.isValid()) {
          return NaN
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
        units = normalizeUnits(units);
        if (units === 'year' || units === 'month' || units === 'quarter') {
          output = monthDiff(this, that);
          if (units === 'quarter') {
            output = output / 3
          } else if (units === 'year') {
            output = output / 12
          }
        } else {
          delta = this - that;
          output = units === 'second' ? delta / 1000 : // 1000
          units === 'minute' ? delta / 60000 : // 1000 * 60
          units === 'hour' ? delta / 3600000 : // 1000 * 60 * 60
          units === 'day' ? (delta - zoneDelta) / 86400000 : // 1000 * 60 * 60 * 24, negate dst
          units === 'week' ? (delta - zoneDelta) / 604800000 : // 1000 * 60 * 60 * 24 * 7, negate dst
          delta
        }
        return asFloat ? output : absFloor(output)
      }
      function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
          // b is in (anchor - 1 month, anchor + 1 month)
          anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor - anchor2)
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor2 - anchor)
        }
        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0
      }
      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ')
      }
      function toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
          if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString()
          } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
          }
        } else {
          return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
        }
      }
      /**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)'
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z'
        }
        var prefix = '[' + func + '("]';
        var year = 0 < this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix)
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output)
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix)
        } else {
          return this.localeData().invalidDate()
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix)
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix)
        } else {
          return this.localeData().invalidDate()
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix)
      }
      // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.
      function locale(key) {
        var newLocaleData;
        if (key === undefined) {
          return this._locale._abbr
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData
          }
          return this
        }
      }
      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
          return this.localeData()
        } else {
          return this.locale(key)
        }
      });
      function localeData() {
        return this._locale
      }
      function startOf(units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
          this.month(0);
        /* falls through */
        case 'quarter':
        case 'month':
          this.date(1);
        /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
          this.hours(0);
        /* falls through */
        case 'hour':
          this.minutes(0);
        /* falls through */
        case 'minute':
          this.seconds(0);
        /* falls through */
        case 'second':
          this.milliseconds(0)
        }
        // weeks are a special case
        if (units === 'week') {
          this.weekday(0)
        }
        if (units === 'isoWeek') {
          this.isoWeekday(1)
        }
        // quarters are also special
        if (units === 'quarter') {
          this.month(Math.floor(this.month() / 3) * 3)
        }
        return this
      }
      function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
          return this
        }
        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
          units = 'day'
        }
        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms')
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000
      }
      function unix() {
        return Math.floor(this.valueOf() / 1000)
      }
      function toDate() {
        return new Date(this.valueOf())
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ]
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        }
      }
      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null
      }
      function isValid$1() {
        return isValid(this)
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this))
      }
      function invalidAt() {
        return getParsingFlags(this).overflow
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        }
      }
      // FORMATTING
      addFormatToken(0, [
        'gg',
        2
      ], 0, function () {
        return this.weekYear() % 100
      });
      addFormatToken(0, [
        'GG',
        2
      ], 0, function () {
        return this.isoWeekYear() % 100
      });
      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
          token,
          token.length
        ], 0, getter)
      }
      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');
      // ALIASES
      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG');
      // PRIORITY
      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1);
      // PARSING
      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
      ], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input)
      });
      addWeekParseToken([
        'gg',
        'GG'
      ], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input)
      });
      // MOMENTS
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4)
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4)
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy)
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy)
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this
      }
      // FORMATTING
      addFormatToken('Q', 0, 'Qo', 'quarter');
      // ALIASES
      addUnitAlias('quarter', 'Q');
      // PRIORITY
      addUnitPriority('quarter', 7);
      // PARSING
      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3
      });
      // MOMENTS
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3)
      }
      // FORMATTING
      addFormatToken('D', [
        'DD',
        2
      ], 'Do', 'date');
      // ALIASES
      addUnitAlias('date', 'D');
      // PRIOROITY
      addUnitPriority('date', 9);
      // PARSING
      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient
      });
      addParseToken([
        'D',
        'DD'
      ], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10)
      });
      // MOMENTS
      var getSetDayOfMonth = makeGetSet('Date', true);
      // FORMATTING
      addFormatToken('DDD', [
        'DDDD',
        3
      ], 'DDDo', 'dayOfYear');
      // ALIASES
      addUnitAlias('dayOfYear', 'DDD');
      // PRIORITY
      addUnitPriority('dayOfYear', 4);
      // PARSING
      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken([
        'DDD',
        'DDDD'
      ], function (input, array, config) {
        config._dayOfYear = toInt(input)
      });
      // HELPERS
      // MOMENTS
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd')
      }
      // FORMATTING
      addFormatToken('m', [
        'mm',
        2
      ], 0, 'minute');
      // ALIASES
      addUnitAlias('minute', 'm');
      // PRIORITY
      addUnitPriority('minute', 14);
      // PARSING
      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken([
        'm',
        'mm'
      ], MINUTE);
      // MOMENTS
      var getSetMinute = makeGetSet('Minutes', false);
      // FORMATTING
      addFormatToken('s', [
        'ss',
        2
      ], 0, 'second');
      // ALIASES
      addUnitAlias('second', 's');
      // PRIORITY
      addUnitPriority('second', 15);
      // PARSING
      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken([
        's',
        'ss'
      ], SECOND);
      // MOMENTS
      var getSetSecond = makeGetSet('Seconds', false);
      // FORMATTING
      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100)
      });
      addFormatToken(0, [
        'SS',
        2
      ], 0, function () {
        return ~~(this.millisecond() / 10)
      });
      addFormatToken(0, [
        'SSS',
        3
      ], 0, 'millisecond');
      addFormatToken(0, [
        'SSSS',
        4
      ], 0, function () {
        return this.millisecond() * 10
      });
      addFormatToken(0, [
        'SSSSS',
        5
      ], 0, function () {
        return this.millisecond() * 100
      });
      addFormatToken(0, [
        'SSSSSS',
        6
      ], 0, function () {
        return this.millisecond() * 1000
      });
      addFormatToken(0, [
        'SSSSSSS',
        7
      ], 0, function () {
        return this.millisecond() * 10000
      });
      addFormatToken(0, [
        'SSSSSSSS',
        8
      ], 0, function () {
        return this.millisecond() * 100000
      });
      addFormatToken(0, [
        'SSSSSSSSS',
        9
      ], 0, function () {
        return this.millisecond() * 1000000
      });
      // ALIASES
      addUnitAlias('millisecond', 'ms');
      // PRIORITY
      addUnitPriority('millisecond', 16);
      // PARSING
      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned)
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000)
      }
      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs)
      }
      // MOMENTS
      var getSetMillisecond = makeGetSet('Milliseconds', false);
      // FORMATTING
      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');
      // MOMENTS
      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : ''
      }
      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : ''
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$1;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      // Year
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      // Week Year
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      // Quarter
      proto.quarter = proto.quarters = getSetQuarter;
      // Month
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      // Week
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      // Day
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      // Hour
      proto.hour = proto.hours = getSetHour;
      // Minute
      proto.minute = proto.minutes = getSetMinute;
      // Second
      proto.second = proto.seconds = getSetSecond;
      // Millisecond
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      // Offset
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      // Timezone
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      // Deprecations
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1000)
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone()
      }
      function preParsePostFormat(string) {
        return string
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      // Month
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      // Week
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      // Day of Week
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      // Hours
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format)
      }
      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined
        }
        format = format || '';
        if (index != null) {
          return get$1(format, index, field, 'month')
        }
        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month')
        }
        return out
      }
      // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)
      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined
          }
          format = format || ''
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;
          if (isNumber(format)) {
            index = format;
            format = undefined
          }
          format = format || ''
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0;
        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day')
        }
        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day')
        }
        return out
      }
      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months')
      }
      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort')
      }
      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays')
      }
      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort')
      }
      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin')
      }
      getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output
        }
      });
      // Side effect imports
      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble()
      }
      // supports only 2.0-style add(1, 's') or add(duration)
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1)
      }
      // supports only 2.0-style subtract(1, 's') or subtract(duration)
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1)
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number)
        } else {
          return Math.ceil(number)
        }
      }
      function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
          milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
          days = 0;
          months = 0
        }
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this
      }
      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097
      }
      function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800
      }
      function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'year') {
          days = this._days + milliseconds / 86400000;
          months = this._months + daysToMonths(days);
          return units === 'month' ? months : months / 12
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
          case 'week':
            return days / 7 + milliseconds / 604800000;
          case 'day':
            return days + milliseconds / 86400000;
          case 'hour':
            return days * 24 + milliseconds / 3600000;
          case 'minute':
            return days * 1440 + milliseconds / 60000;
          case 'second':
            return days * 86400 + milliseconds / 1000;
          // Math.floor prevents floating point math errors here
          case 'millisecond':
            return Math.floor(days * 86400000) + milliseconds;
          default:
            throw new Error('Unknown unit ' + units)
          }
        }
      }
      // TODO: Use this.as('ms')?
      function valueOf$1() {
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000
      }
      function makeAs(alias) {
        return function () {
          return this.as(alias)
        }
      }
      var asMilliseconds = makeAs('ms');
      var asSeconds = makeAs('s');
      var asMinutes = makeAs('m');
      var asHours = makeAs('h');
      var asDays = makeAs('d');
      var asWeeks = makeAs('w');
      var asMonths = makeAs('M');
      var asYears = makeAs('y');
      function get$2(units) {
        units = normalizeUnits(units);
        return this[units + 's']()
      }
      function makeGetter(name) {
        return function () {
          return this._data[name]
        }
      }
      var milliseconds = makeGetter('milliseconds');
      var seconds = makeGetter('seconds');
      var minutes = makeGetter('minutes');
      var hours = makeGetter('hours');
      var days = makeGetter('days');
      var months = makeGetter('months');
      var years = makeGetter('years');
      function weeks() {
        return absFloor(this.days() / 7)
      }
      var round = Math.round;
      var thresholds = {
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month
        M: 11  // months to year
      };
      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture)
      }
      function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds < thresholds.s && [
          's',
          seconds
        ] || minutes <= 1 && ['m'] || minutes < thresholds.m && [
          'mm',
          minutes
        ] || hours <= 1 && ['h'] || hours < thresholds.h && [
          'hh',
          hours
        ] || days <= 1 && ['d'] || days < thresholds.d && [
          'dd',
          days
        ] || months <= 1 && ['M'] || months < thresholds.M && [
          'MM',
          months
        ] || years <= 1 && ['y'] || [
          'yy',
          years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a)
      }
      // This function allows you to set the rounding function for relative time strings
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round
        }
        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true
        }
        return false
      }
      // This function allows you to set a threshold for relative time strings
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false
        }
        if (limit === undefined) {
          return thresholds[threshold]
        }
        thresholds[threshold] = limit;
        return true
      }
      function humanize(withSuffix) {
        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);
        if (withSuffix) {
          output = locale.pastFuture(+this, output)
        }
        return locale.postformat(output)
      }
      var abs$1 = Math.abs;
      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;
        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();
        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D'
        }
        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '')
      }
      var proto$2 = Duration.prototype;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      // Deprecations
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang;
      // Side effect imports
      // FORMATTING
      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');
      // PARSING
      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000)
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input))
      });
      // Side effect imports
      hooks.version = '2.17.1';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      return hooks
    }))
  });
  // source: node_modules/moment-timezone/data/packed/latest.json
  rqzt.define('moment-timezone/data/packed/latest', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      'version': '2016j',
      'zones': [
        'Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5',
        'Africa/Accra|LMT GMT GHST|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5',
        'Africa/Nairobi|LMT EAT BEAT BEAUT|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5',
        'Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5',
        'Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6',
        'Africa/Bissau|LMT WAT GMT|12.k 10 0|012|-2ldWV.E 2xonV.E|39e4',
        'Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5',
        'Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6',
        'Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|32e5',
        'Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1y7p0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3',
        'Africa/El_Aaiun|LMT WAT WET WEST|Q.M 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|20e4',
        'Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5',
        'Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|01212121212121212121212121212121213|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0|51e5',
        'Africa/Monrovia|MMT LRT GMT|H.8 I.u 0|012|-23Lzg.Q 29s01.m|11e5',
        'Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5',
        'Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5',
        'Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5',
        'Africa/Windhoek|SWAT SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|012134545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2GJdu 1Ajdu 1cL0 1SqL0 9NA0 11D0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0|32e4',
        'America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326',
        'America/Anchorage|CAT CAWT CAPT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4',
        'America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3',
        'America/Araguaina|LMT BRT BRST|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4',
        'America/Argentina/Buenos_Aires|CMT ART ARST ART ARST|4g.M 40 30 30 20|0121212121212121212121212121212121212121213434343434343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0',
        'America/Argentina/Catamarca|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0',
        'America/Argentina/Cordoba|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0',
        'America/Argentina/Jujuy|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 g0p0 10M0 j3c0 uL0',
        'America/Argentina/La_Rioja|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0',
        'America/Argentina/Mendoza|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|0121212121212121212121212121212121212121213434345656543235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 g0p0 10M0 agM0 Op0 7TX0 uL0',
        'America/Argentina/Rio_Gallegos|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0',
        'America/Argentina/Salta|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0',
        'America/Argentina/San_Juan|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ak00 m10 8lb0 uL0',
        'America/Argentina/San_Luis|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456536353465653|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 kin0 10M0 ak00 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0',
        'America/Argentina/Tucuman|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|012121212121212121212121212121212121212121343434345434323534343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 4N0 8BX0 uL0 1qN0 WL0',
        'America/Argentina/Ushuaia|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ajA0 8p0 8zb0 uL0',
        'America/Curacao|LMT ANT AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4',
        'America/Asuncion|AMT PYT PYT PYST|3O.E 40 30 30|012131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5',
        'America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2',
        'America/Bahia|LMT BRT BRST|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5',
        'America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3',
        'America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4',
        'America/Belem|LMT BRT BRST|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5',
        'America/Belize|LMT CST CHDT CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3',
        'America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2',
        'America/Boa_Vista|LMT AMT AMST|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2',
        'America/Bogota|BMT COT COST|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5',
        'America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4',
        'America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2',
        'America/Campo_Grande|LMT AMT AMST|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|77e4',
        'America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4',
        'America/Caracas|CMT VET VET|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5',
        'America/Cayenne|LMT GFT GFT|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3',
        'America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5',
        'America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5',
        'America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4',
        'America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5',
        'America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2',
        'America/Cuiaba|LMT AMT AMST|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|54e4',
        'America/Danmarkshavn|LMT WGT WGST GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8',
        'America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|13e2',
        'America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3',
        'America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5',
        'America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|01234252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 Jy10 SL0 dnB0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5',
        'America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5',
        'America/Eirunepe|LMT ACT ACST AMT|4D.s 50 40 40|0121212121212121212121212121212131|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3',
        'America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5',
        'America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5',
        'America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2',
        'America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Fortaleza|LMT BRT BRST|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5',
        'America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3',
        'America/Godthab|LMT WGT WGST|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3',
        'America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2',
        'America/Grand_Turk|KMT EST EDT AST|57.b 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212123|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2',
        'America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5',
        'America/Guayaquil|QMT ECT|5e 50|01|-1yVSK|27e5',
        'America/Guyana|LMT GBGT GYT GYT GYT|3Q.E 3J 3J 30 40|01234|-2dvU7.k 24JzQ.k mlc0 Bxbf|80e4',
        'America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4',
        'America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5',
        'America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4',
        'America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2',
        'America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2',
        'America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2uM1Q.N 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4',
        'America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3',
        'America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/La_Paz|CMT BOST BOT|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5',
        'America/Lima|LMT PET PEST|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6',
        'America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6',
        'America/Maceio|LMT BRT BRST|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4',
        'America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5',
        'America/Manaus|LMT AMT AMST|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5',
        'America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4',
        'America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4',
        'America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4',
        'America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2',
        'America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5',
        'America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|0120303030303030303030303030303030454545454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2',
        'America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6',
        'America/Miquelon|LMT AST PMST PMDT|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2',
        'America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3',
        'America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5',
        'America/Montevideo|MMT UYT UYHST UYST UYT UYHST|3I.I 3u 30 20 30 2u|012121212121212121212121213434343434345454543453434343434343434343434343434343434343434|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5',
        'America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5',
        'America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4',
        'America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6',
        'America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2',
        'America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2',
        'America/Noronha|LMT FNT FNST|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2',
        'America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3',
        'America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2',
        'America/Paramaribo|LMT PMT PMT NEGT SRT SRT|3E.E 3E.Q 3E.A 3u 3u 30|012345|-2nDUj.k Wqo0.c qanX.I 1dmLN.o lzc0|24e4',
        'America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5',
        'America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5',
        'America/Rio_Branco|LMT ACT ACST AMT|4v.c 50 40 40|01212121212121212121212121212131|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4',
        'America/Porto_Velho|LMT AMT AMST|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4',
        'America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5',
        'America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842',
        'America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2',
        'America/Recife|LMT BRT BRST|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5',
        'America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4',
        'America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229',
        'America/Santarem|LMT AMT AMST BRT|3C.M 40 30 30|0121212121212121212121212121213|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4',
        'America/Santiago|SMT CLT CLT CLST CLST|4G.K 50 40 40 30|010203131313131212421242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|62e5',
        'America/Santo_Domingo|SDMT EST EDT EHDT AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5',
        'America/Sao_Paulo|LMT BRT BRST|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|20e6',
        'America/Scoresbysund|LMT CGT CGST EGST EGT|1r.Q 20 10 0 10|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452',
        'America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2',
        'America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4',
        'America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3',
        'America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5',
        'America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656',
        'America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4',
        'America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5',
        'America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3',
        'America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4',
        'America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642',
        'America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3',
        'Antarctica/Casey|-00 +08 +11|0 -80 -b0|0121212|-2q00 1DjS0 T90 40P0 KL0 blz0|10',
        'Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70',
        'Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80',
        'Antarctica/Macquarie|AEST AEDT -00 MIST|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1',
        'Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60',
        'Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5',
        'Antarctica/Palmer|-00 ARST ART ART ARST CLT CLST|0 30 40 30 20 40 30|0121212121234356565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|40',
        'Antarctica/Rothera|-00 -03|0 30|01|gOo0|130',
        'Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20',
        'Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40',
        'Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25',
        'Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4',
        'Asia/Riyadh|LMT AST|-36.Q -30|01|-TvD6.Q|57e5',
        'Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5',
        'Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5',
        'Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3',
        'Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4',
        'Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4',
        'Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4',
        'Asia/Atyrau|LMT +04 +05 +06|-3r.I -40 -50 -60|01232323232323232323212323232323232321212121212|-1Pc3r.I eUnr.I 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0',
        'Asia/Baghdad|BMT AST ADT|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5',
        'Asia/Qatar|LMT GST AST|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4',
        'Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5',
        'Asia/Bangkok|BMT ICT|-6G.4 -70|01|-218SG.4|15e6',
        'Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0',
        'Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5',
        'Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4',
        'Asia/Brunei|LMT BNT BNT|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4',
        'Asia/Kolkata|HMT BURT IST IST|-5R.k -6u -5u -6u|01232|-18LFR.k 1unn.k HB0 7zX0|15e6',
        'Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4',
        'Asia/Choibalsan|LMT ULAT ULAT CHOST CHOT CHOT CHOST|-7C -70 -80 -a0 -90 -80 -90|0123434343434343434343434343434343434343434343456565656565656565656565656565656565656565656565|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|38e3',
        'Asia/Shanghai|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6',
        'Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5',
        'Asia/Dhaka|HMT BURT IST DACT BDT BDST|-5R.k -6u -5u -60 -60 -70|01213454|-18LFR.k 1unn.k HB0 m6n0 LqMu 1x6n0 1i00|16e6',
        'Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5',
        'Asia/Dili|LMT TLT JST TLT WITA|-8m.k -80 -90 -90 -80|012343|-2le8m.k 1dnXm.k 8HA0 1ew00 Xld0|19e4',
        'Asia/Dubai|LMT GST|-3F.c -40|01|-21JfF.c|39e5',
        'Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4',
        'Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212123|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0',
        'Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0|18e5',
        'Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0|25e4',
        'Asia/Ho_Chi_Minh|LMT PLMT ICT IDT JST|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5',
        'Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5',
        'Asia/Hovd|LMT HOVT HOVT HOVST|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|81e3',
        'Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4',
        'Europe/Istanbul|IMT EET EEST +04 +03|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212124|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1de0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6',
        'Asia/Jakarta|BMT JAVT WIB JST WIB WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6',
        'Asia/Jayapura|LMT WIT ACST|-9m.M -90 -9u|0121|-1uu9m.M sMMm.M L4nu|26e4',
        'Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4',
        'Asia/Kabul|AFT AFT|-40 -4u|01|-10Qs0|46e5',
        'Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4',
        'Asia/Karachi|LMT IST IST KART PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6',
        'Asia/Urumqi|LMT XJT|-5O.k -60|01|-1GgtO.k|32e5',
        'Asia/Kathmandu|LMT IST NPT|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5',
        'Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2',
        'Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5',
        'Asia/Kuala_Lumpur|SMT MALT MALST MALT MALT JST MYT|-6T.p -70 -7k -7k -7u -90 -80|01234546|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu 1so1u|71e5',
        'Asia/Kuching|LMT BORT BORT BORTST JST MYT|-7l.k -7u -80 -8k -90 -80|01232323232323232425|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0 1so10|13e4',
        'Asia/Macau|LMT MOT MOST CST|-7y.k -80 -90 -80|0121212121212121212121212121212121212121213|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0 KEp0|57e4',
        'Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3',
        'Asia/Makassar|LMT MMT WITA JST|-7V.A -7V.A -80 -90|01232|-21JjV.A vfc0 myLV.A 8ML0|15e5',
        'Asia/Manila|PHT PHST JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6',
        'Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4',
        'Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4',
        'Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5',
        'Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5',
        'Asia/Oral|LMT +04 +05 +06|-3p.o -40 -50 -60|01232323232323232121212121212121212121212121212|-1Pc3p.o eUnp.o 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4',
        'Asia/Pontianak|LMT PMT WIB JST WIB WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4',
        'Asia/Pyongyang|LMT KST JCST JST KST|-8n -8u -90 -90 -90|012341|-2um8n 97XR 12FXu jdA0 2Onc0|29e5',
        'Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|0123232323232323232323232323232323232323232323|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|73e4',
        'Asia/Rangoon|RMT BURT JST MMT|-6o.E -6u -90 -6u|0123|-21Jio.E SmnS.E 7j9u|48e5',
        'Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4',
        'Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4',
        'Asia/Seoul|LMT KST JCST JST KST KDT KDT|-8r.Q -8u -90 -90 -90 -9u -a0|01234151515151515146464|-2um8r.Q 97XV.Q 12FXu jjA0 kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6',
        'Asia/Singapore|SMT MALT MALST MALT MALT JST SGT SGT|-6T.p -70 -7k -7k -7u -90 -7u -80|012345467|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu Mspu DTA0|56e5',
        'Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2',
        'Asia/Taipei|JWST JST CST CDT|-80 -90 -80 -90|01232323232323232323232323232323232323232|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5',
        'Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5',
        'Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5',
        'Asia/Tehran|LMT TMT IRST IRST IRDT IRDT|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6',
        'Asia/Thimphu|LMT IST BTT|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3',
        'Asia/Tokyo|JCST JST JDT|-90 -90 -a0|0121212121|-1iw90 pKq0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0|38e6',
        'Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5',
        'Asia/Ulaanbaatar|LMT ULAT ULAT ULAST|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|12e5',
        'Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2',
        'Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4',
        'Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4',
        'Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5',
        'Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5',
        'Atlantic/Azores|HMT AZOT AZOST AZOMT AZOT AZOST WET|1S.w 20 10 0 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545456545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldW5.s aPX5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4',
        'Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3',
        'Atlantic/Canary|LMT CANT WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4',
        'Atlantic/Cape_Verde|LMT CVT CVST CVT|1y.4 20 10 10|01213|-2xomp.U 1qOMp.U 7zX0 1djf0|50e4',
        'Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3',
        'Atlantic/Madeira|FMT MADT MADST MADMT WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldWQ.o aPWQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4',
        'Atlantic/Reykjavik|LMT IST ISST GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4',
        'Atlantic/South_Georgia|GST|20|0||30',
        'Atlantic/Stanley|SMT FKT FKST FKT FKST|3P.o 40 30 30 20|0121212121212134343212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 U10 1qM0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2',
        'Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5',
        'Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5',
        'Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5',
        'Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3',
        'Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746',
        'Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4',
        'Australia/Eucla|ACWST ACWDT|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368',
        'Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4',
        'Australia/Lord_Howe|AEST LHST LHDT LHDT|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347',
        'Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10',
        'Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5',
        'Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5',
        'CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
        'CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'Pacific/Easter|EMT EAST EASST EAST EASST|7h.s 70 60 60 50|0121212121212121212121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|30e2',
        'EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
        'EST|EST|50|0|',
        'EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g5X0 14p0 1wn0 17d0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
        'Etc/GMT+0|GMT|0|0|',
        'Etc/GMT+1|-01|10|0|',
        'Etc/GMT+10|-10|a0|0|',
        'Etc/GMT+11|-11|b0|0|',
        'Etc/GMT+12|-12|c0|0|',
        'Etc/GMT+2|-02|20|0|',
        'Etc/GMT+3|-03|30|0|',
        'Etc/GMT+4|-04|40|0|',
        'Etc/GMT+5|-05|50|0|',
        'Etc/GMT+6|-06|60|0|',
        'Etc/GMT+7|-07|70|0|',
        'Etc/GMT+8|-08|80|0|',
        'Etc/GMT+9|-09|90|0|',
        'Etc/GMT-1|+01|-10|0|',
        'Etc/GMT-10|+10|-a0|0|',
        'Etc/GMT-11|+11|-b0|0|',
        'Etc/GMT-12|+12|-c0|0|',
        'Etc/GMT-13|+13|-d0|0|',
        'Etc/GMT-14|+14|-e0|0|',
        'Etc/GMT-2|+02|-20|0|',
        'Etc/GMT-3|+03|-30|0|',
        'Etc/GMT-4|+04|-40|0|',
        'Etc/GMT-5|+05|-50|0|',
        'Etc/GMT-6|+06|-60|0|',
        'Etc/GMT-7|+07|-70|0|',
        'Etc/GMT-8|+08|-80|0|',
        'Etc/GMT-9|+09|-90|0|',
        'Etc/UCT|UCT|0|0|',
        'Etc/UTC|UTC|0|0|',
        'Europe/Amsterdam|AMT NST NEST NET CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5',
        'Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3',
        'Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0',
        'Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5',
        'Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6',
        'Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
        'Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5',
        'Europe/Prague|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5',
        'Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5',
        'Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5',
        'Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5',
        'Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4',
        'Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4',
        'Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
        'Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3',
        'Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
        'Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET +03|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454546767676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4',
        'Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5',
        'Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4',
        'Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.f aPWn.f Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5',
        'Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4',
        'Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|01010101010101010101010121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-28dd0 11A0 1go0 19A0 1co0 1dA0 b1A0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 iyo0 Rc0 18o0 1hc0 1io0 1a00 14o0 5aL0 MM0 1vc0 17A0 1i00 1bc0 1eo0 17d0 1in0 17A0 6hA0 10N0 XIL0 1a10 1in0 17d0 19X0 1cN0 1fz0 1a10 1fX0 1cp0 1cO0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5',
        'Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4',
        'Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5',
        'Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3',
        'Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6',
        'Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6',
        'Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4',
        'Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5',
        'Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5',
        'Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810',
        'Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4',
        'Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5',
        'Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5',
        'Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4',
        'Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4',
        'Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0',
        'Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4',
        'Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5',
        'Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4',
        'Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|01232323232323232121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5',
        'Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5',
        'Europe/Zaporozhye|CUT EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4',
        'HST|HST|a0|0|',
        'Indian/Chagos|LMT IOT IOT|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2',
        'Indian/Christmas|CXT|-70|0||21e2',
        'Indian/Cocos|CCT|-6u|0||596',
        'Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130',
        'Indian/Mahe|LMT SCT|-3F.M -40|01|-2yO3F.M|79e3',
        'Indian/Maldives|MMT MVT|-4S -50|01|-olgS|35e4',
        'Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4',
        'Indian/Reunion|LMT RET|-3F.Q -40|01|-2mDDF.Q|84e4',
        'Pacific/Kwajalein|MHT KWAT MHT|-b0 c0 -c0|012|-AX0 W9X0|14e3',
        'MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00',
        'MST|MST|70|0|',
        'MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'Pacific/Chatham|CHAST CHAST CHADT|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600',
        'PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0',
        'Pacific/Apia|LMT WSST SST SDT WSDT WSST|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3',
        'Pacific/Bougainville|PGT JST BST|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4',
        'Pacific/Chuuk|CHUT|-a0|0||49e3',
        'Pacific/Efate|LMT VUT VUST|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3',
        'Pacific/Enderbury|PHOT PHOT PHOT|c0 b0 -d0|012|nIc0 B8n0|1',
        'Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0|483',
        'Pacific/Fiji|LMT FJT FJST|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0|88e4',
        'Pacific/Funafuti|TVT|-c0|0||45e2',
        'Pacific/Galapagos|LMT ECT GALT|5W.o 50 60|012|-1yVS1.A 2dTz1.A|25e3',
        'Pacific/Gambier|LMT GAMT|8X.M 90|01|-2jof0.c|125',
        'Pacific/Guadalcanal|LMT SBT|-aD.M -b0|01|-2joyD.M|11e4',
        'Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0|17e4',
        'Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0|37e4',
        'Pacific/Kiritimati|LINT LINT LINT|aE a0 -e0|012|nIaE B8nk|51e2',
        'Pacific/Kosrae|KOST KOST|-b0 -c0|010|-AX0 1bdz0|66e2',
        'Pacific/Majuro|MHT MHT|-b0 -c0|01|-AX0|28e3',
        'Pacific/Marquesas|LMT MART|9i 9u|01|-2joeG|86e2',
        'Pacific/Pago_Pago|LMT NST BST SST|bm.M b0 b0 b0|0123|-2nDMB.c 2gVzB.c EyM0|37e2',
        'Pacific/Nauru|LMT NRT JST NRT|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu|10e3',
        'Pacific/Niue|NUT NUT NUT|bk bu b0|012|-KfME 17y0a|12e2',
        'Pacific/Norfolk|NMT NFT NFST NFT|-bc -bu -cu -b0|01213|-Kgbc W01G On0 1COp0|25e4',
        'Pacific/Noumea|LMT NCT NCST|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3',
        'Pacific/Palau|PWT|-90|0||21e3',
        'Pacific/Pitcairn|PNT PST|8u 80|01|18Vku|56',
        'Pacific/Pohnpei|PONT|-b0|0||34e3',
        'Pacific/Port_Moresby|PGT|-a0|0||25e4',
        'Pacific/Rarotonga|CKT CKHST CKT|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3',
        'Pacific/Tahiti|LMT TAHT|9W.g a0|01|-2joe1.I|18e4',
        'Pacific/Tarawa|GILT|-c0|0||29e3',
        'Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121212121212121212121212121212121212121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0|75e3',
        'Pacific/Wake|WAKT|-c0|0||16e3',
        'Pacific/Wallis|WFT|-c0|0||94',
        'WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00'
      ],
      'links': [
        'Africa/Abidjan|Africa/Bamako',
        'Africa/Abidjan|Africa/Banjul',
        'Africa/Abidjan|Africa/Conakry',
        'Africa/Abidjan|Africa/Dakar',
        'Africa/Abidjan|Africa/Freetown',
        'Africa/Abidjan|Africa/Lome',
        'Africa/Abidjan|Africa/Nouakchott',
        'Africa/Abidjan|Africa/Ouagadougou',
        'Africa/Abidjan|Africa/Sao_Tome',
        'Africa/Abidjan|Africa/Timbuktu',
        'Africa/Abidjan|Atlantic/St_Helena',
        'Africa/Cairo|Egypt',
        'Africa/Johannesburg|Africa/Maseru',
        'Africa/Johannesburg|Africa/Mbabane',
        'Africa/Khartoum|Africa/Juba',
        'Africa/Lagos|Africa/Bangui',
        'Africa/Lagos|Africa/Brazzaville',
        'Africa/Lagos|Africa/Douala',
        'Africa/Lagos|Africa/Kinshasa',
        'Africa/Lagos|Africa/Libreville',
        'Africa/Lagos|Africa/Luanda',
        'Africa/Lagos|Africa/Malabo',
        'Africa/Lagos|Africa/Niamey',
        'Africa/Lagos|Africa/Porto-Novo',
        'Africa/Maputo|Africa/Blantyre',
        'Africa/Maputo|Africa/Bujumbura',
        'Africa/Maputo|Africa/Gaborone',
        'Africa/Maputo|Africa/Harare',
        'Africa/Maputo|Africa/Kigali',
        'Africa/Maputo|Africa/Lubumbashi',
        'Africa/Maputo|Africa/Lusaka',
        'Africa/Nairobi|Africa/Addis_Ababa',
        'Africa/Nairobi|Africa/Asmara',
        'Africa/Nairobi|Africa/Asmera',
        'Africa/Nairobi|Africa/Dar_es_Salaam',
        'Africa/Nairobi|Africa/Djibouti',
        'Africa/Nairobi|Africa/Kampala',
        'Africa/Nairobi|Africa/Mogadishu',
        'Africa/Nairobi|Indian/Antananarivo',
        'Africa/Nairobi|Indian/Comoro',
        'Africa/Nairobi|Indian/Mayotte',
        'Africa/Tripoli|Libya',
        'America/Adak|America/Atka',
        'America/Adak|US/Aleutian',
        'America/Anchorage|US/Alaska',
        'America/Argentina/Buenos_Aires|America/Buenos_Aires',
        'America/Argentina/Catamarca|America/Argentina/ComodRivadavia',
        'America/Argentina/Catamarca|America/Catamarca',
        'America/Argentina/Cordoba|America/Cordoba',
        'America/Argentina/Cordoba|America/Rosario',
        'America/Argentina/Jujuy|America/Jujuy',
        'America/Argentina/Mendoza|America/Mendoza',
        'America/Atikokan|America/Coral_Harbour',
        'America/Chicago|US/Central',
        'America/Curacao|America/Aruba',
        'America/Curacao|America/Kralendijk',
        'America/Curacao|America/Lower_Princes',
        'America/Denver|America/Shiprock',
        'America/Denver|Navajo',
        'America/Denver|US/Mountain',
        'America/Detroit|US/Michigan',
        'America/Edmonton|Canada/Mountain',
        'America/Fort_Wayne|America/Indiana/Indianapolis',
        'America/Fort_Wayne|America/Indianapolis',
        'America/Fort_Wayne|US/East-Indiana',
        'America/Halifax|Canada/Atlantic',
        'America/Havana|Cuba',
        'America/Indiana/Knox|America/Knox_IN',
        'America/Indiana/Knox|US/Indiana-Starke',
        'America/Jamaica|Jamaica',
        'America/Kentucky/Louisville|America/Louisville',
        'America/Los_Angeles|US/Pacific',
        'America/Los_Angeles|US/Pacific-New',
        'America/Manaus|Brazil/West',
        'America/Mazatlan|Mexico/BajaSur',
        'America/Mexico_City|Mexico/General',
        'America/New_York|US/Eastern',
        'America/Noronha|Brazil/DeNoronha',
        'America/Panama|America/Cayman',
        'America/Phoenix|US/Arizona',
        'America/Port_of_Spain|America/Anguilla',
        'America/Port_of_Spain|America/Antigua',
        'America/Port_of_Spain|America/Dominica',
        'America/Port_of_Spain|America/Grenada',
        'America/Port_of_Spain|America/Guadeloupe',
        'America/Port_of_Spain|America/Marigot',
        'America/Port_of_Spain|America/Montserrat',
        'America/Port_of_Spain|America/St_Barthelemy',
        'America/Port_of_Spain|America/St_Kitts',
        'America/Port_of_Spain|America/St_Lucia',
        'America/Port_of_Spain|America/St_Thomas',
        'America/Port_of_Spain|America/St_Vincent',
        'America/Port_of_Spain|America/Tortola',
        'America/Port_of_Spain|America/Virgin',
        'America/Regina|Canada/East-Saskatchewan',
        'America/Regina|Canada/Saskatchewan',
        'America/Rio_Branco|America/Porto_Acre',
        'America/Rio_Branco|Brazil/Acre',
        'America/Santiago|Chile/Continental',
        'America/Sao_Paulo|Brazil/East',
        'America/St_Johns|Canada/Newfoundland',
        'America/Tijuana|America/Ensenada',
        'America/Tijuana|America/Santa_Isabel',
        'America/Tijuana|Mexico/BajaNorte',
        'America/Toronto|America/Montreal',
        'America/Toronto|Canada/Eastern',
        'America/Vancouver|Canada/Pacific',
        'America/Whitehorse|Canada/Yukon',
        'America/Winnipeg|Canada/Central',
        'Asia/Ashgabat|Asia/Ashkhabad',
        'Asia/Bangkok|Asia/Phnom_Penh',
        'Asia/Bangkok|Asia/Vientiane',
        'Asia/Dhaka|Asia/Dacca',
        'Asia/Dubai|Asia/Muscat',
        'Asia/Ho_Chi_Minh|Asia/Saigon',
        'Asia/Hong_Kong|Hongkong',
        'Asia/Jerusalem|Asia/Tel_Aviv',
        'Asia/Jerusalem|Israel',
        'Asia/Kathmandu|Asia/Katmandu',
        'Asia/Kolkata|Asia/Calcutta',
        'Asia/Macau|Asia/Macao',
        'Asia/Makassar|Asia/Ujung_Pandang',
        'Asia/Nicosia|Europe/Nicosia',
        'Asia/Qatar|Asia/Bahrain',
        'Asia/Rangoon|Asia/Yangon',
        'Asia/Riyadh|Asia/Aden',
        'Asia/Riyadh|Asia/Kuwait',
        'Asia/Seoul|ROK',
        'Asia/Shanghai|Asia/Chongqing',
        'Asia/Shanghai|Asia/Chungking',
        'Asia/Shanghai|Asia/Harbin',
        'Asia/Shanghai|PRC',
        'Asia/Singapore|Singapore',
        'Asia/Taipei|ROC',
        'Asia/Tehran|Iran',
        'Asia/Thimphu|Asia/Thimbu',
        'Asia/Tokyo|Japan',
        'Asia/Ulaanbaatar|Asia/Ulan_Bator',
        'Asia/Urumqi|Asia/Kashgar',
        'Atlantic/Faroe|Atlantic/Faeroe',
        'Atlantic/Reykjavik|Iceland',
        'Australia/Adelaide|Australia/South',
        'Australia/Brisbane|Australia/Queensland',
        'Australia/Broken_Hill|Australia/Yancowinna',
        'Australia/Darwin|Australia/North',
        'Australia/Hobart|Australia/Tasmania',
        'Australia/Lord_Howe|Australia/LHI',
        'Australia/Melbourne|Australia/Victoria',
        'Australia/Perth|Australia/West',
        'Australia/Sydney|Australia/ACT',
        'Australia/Sydney|Australia/Canberra',
        'Australia/Sydney|Australia/NSW',
        'Etc/GMT+0|Etc/GMT',
        'Etc/GMT+0|Etc/GMT-0',
        'Etc/GMT+0|Etc/GMT0',
        'Etc/GMT+0|Etc/Greenwich',
        'Etc/GMT+0|GMT',
        'Etc/GMT+0|GMT+0',
        'Etc/GMT+0|GMT-0',
        'Etc/GMT+0|GMT0',
        'Etc/GMT+0|Greenwich',
        'Etc/UCT|UCT',
        'Etc/UTC|Etc/Universal',
        'Etc/UTC|Etc/Zulu',
        'Etc/UTC|UTC',
        'Etc/UTC|Universal',
        'Etc/UTC|Zulu',
        'Europe/Belgrade|Europe/Ljubljana',
        'Europe/Belgrade|Europe/Podgorica',
        'Europe/Belgrade|Europe/Sarajevo',
        'Europe/Belgrade|Europe/Skopje',
        'Europe/Belgrade|Europe/Zagreb',
        'Europe/Chisinau|Europe/Tiraspol',
        'Europe/Dublin|Eire',
        'Europe/Helsinki|Europe/Mariehamn',
        'Europe/Istanbul|Asia/Istanbul',
        'Europe/Istanbul|Turkey',
        'Europe/Lisbon|Portugal',
        'Europe/London|Europe/Belfast',
        'Europe/London|Europe/Guernsey',
        'Europe/London|Europe/Isle_of_Man',
        'Europe/London|Europe/Jersey',
        'Europe/London|GB',
        'Europe/London|GB-Eire',
        'Europe/Moscow|W-SU',
        'Europe/Oslo|Arctic/Longyearbyen',
        'Europe/Oslo|Atlantic/Jan_Mayen',
        'Europe/Prague|Europe/Bratislava',
        'Europe/Rome|Europe/San_Marino',
        'Europe/Rome|Europe/Vatican',
        'Europe/Warsaw|Poland',
        'Europe/Zurich|Europe/Busingen',
        'Europe/Zurich|Europe/Vaduz',
        'Pacific/Auckland|Antarctica/McMurdo',
        'Pacific/Auckland|Antarctica/South_Pole',
        'Pacific/Auckland|NZ',
        'Pacific/Chatham|NZ-CHAT',
        'Pacific/Chuuk|Pacific/Truk',
        'Pacific/Chuuk|Pacific/Yap',
        'Pacific/Easter|Chile/EasterIsland',
        'Pacific/Guam|Pacific/Saipan',
        'Pacific/Honolulu|Pacific/Johnston',
        'Pacific/Honolulu|US/Hawaii',
        'Pacific/Kwajalein|Kwajalein',
        'Pacific/Pago_Pago|Pacific/Midway',
        'Pacific/Pago_Pago|Pacific/Samoa',
        'Pacific/Pago_Pago|US/Samoa',
        'Pacific/Pohnpei|Pacific/Ponape'
      ]
    }
  });
  // source: src/vendor/baremetrics-calendar/calendar.coffee
  rqzt.define('./vendor/baremetrics-calendar/calendar', function (module, exports, __dirname, __filename, process) {
    'use strict';
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define([
          'jquery',
          'moment'
        ], factory)
      } else if (typeof exports === 'object') {
        module.exports = factory(rqzt('jquery/dist/jquery'), rqzt('moment/moment'))
      } else {
        root.Calendar = factory(jQuery, moment)
      }
    }(this, function ($, moment) {
      var Calendar, selectOneDate;
      Calendar = function (settings) {
        var self;
        self = this;
        this.settings = settings;
        this.calIsOpen = false;
        this.presetIsOpen = false;
        this.sameDayRange = settings.same_day_range || false;
        this.element = settings.element || $('.daterange');
        this.selected = null;
        this.type = this.element.hasClass('daterange--single') ? 'single' : 'double';
        this.required = settings.required === false ? false : true;
        this.format = settings.format || {};
        this.format.input = settings.format && settings.format.input || 'MMMM D, YYYY';
        this.format.preset = settings.format && settings.format.preset || 'll';
        this.format.jump_month = settings.format && settings.format.jump_month || 'MMMM';
        this.format.jump_year = settings.format && settings.format.jump_year || 'YYYY';
        this.placeholder = settings.placeholder || this.format.input;
        this.days_array = settings.days_array && settings.days_array.length === 7 ? settings.days_array : moment.weekdaysMin();
        this.orig_start_date = null;
        this.orig_end_date = null;
        this.orig_current_date = null;
        this.earliest_date = settings.earliest_date ? moment(settings.earliest_date) : moment('1900-01-01');
        this.latest_date = settings.latest_date ? moment(settings.latest_date) : moment('2900-12-31');
        this.end_date = settings.end_date ? moment(settings.end_date) : this.type === 'double' ? moment() : null;
        this.start_date = settings.start_date ? moment(settings.start_date) : this.type === 'double' ? this.end_date.clone().subtract(1, 'month') : null;
        this.current_date = settings.current_date ? moment(settings.current_date) : this.type === 'single' ? moment() : null;
        this.presets = settings.presets === false || this.type === 'single' ? false : true;
        this.callback = settings.callback || this.calendarSetDates;
        this.calendarHTML(this.type);
        $('.dr-presets', this.element).click(function () {
          self.presetToggle()
        });
        $('.dr-list-item', this.element).click(function () {
          var end, start;
          start = $('.dr-item-aside', this).data('start');
          end = $('.dr-item-aside', this).data('end');
          self.start_date = self.calendarCheckDate(start);
          self.end_date = self.calendarCheckDate(end);
          self.calendarSetDates();
          self.presetToggle();
          self.calendarSaveDates()
        });
        $('.dr-date', this.element).on({
          'click': function () {
            self.calendarOpen(this)
          },
          'keyup': function (event) {
            if (event.keyCode === 9 && !self.calIsOpen && !self.start_date && !self.end_date) {
              self.calendarOpen(this)
            }
          },
          'keydown': function (event) {
            var timeframe;
            var back, forward, timeframe;
            switch (event.keyCode) {
            case 9:
              if ($(self.selected).hasClass('dr-date-start')) {
                event.preventDefault();
                self.calendarCheckDates();
                self.calendarSetDates();
                $('.dr-date-end', self.element).trigger('click')
              } else {
                self.calendarCheckDates();
                self.calendarSetDates();
                self.calendarSaveDates();
                self.calendarClose('force')
              }
              break;
            case 13:
              event.preventDefault();
              self.calendarCheckDates();
              self.calendarSetDates();
              self.calendarSaveDates();
              self.calendarClose('force');
              break;
            case 27:
              self.calendarSetDates();
              self.calendarClose('force');
              break;
            case 38:
              event.preventDefault();
              timeframe = 'day';
              if (event.shiftKey) {
                timeframe = 'week'
              }
              if (event.metaKey) {
                timeframe = 'month'
              }
              back = moment(self.current_date).subtract(1, timeframe);
              $(this).html(back.format(self.format.input));
              self.current_date = back;
              break;
            case 40:
              event.preventDefault();
              timeframe = 'day';
              if (event.shiftKey) {
                timeframe = 'week'
              }
              if (event.metaKey) {
                timeframe = 'month'
              }
              forward = moment(self.current_date).add(1, timeframe);
              $(this).html(forward.format(self.format.input));
              self.current_date = forward
            }
          }
        });
        $('.dr-month-switcher i', this.element).click(function () {
          var back, forward, m, this_moment, y;
          m = $('.dr-month-switcher span', self.element).data('month');
          y = $('.dr-year-switcher span', self.element).data('year');
          this_moment = moment([
            y,
            m,
            1
          ]);
          back = this_moment.clone().subtract(1, 'month');
          forward = this_moment.clone().add(1, 'month').startOf('day');
          if ($(this).hasClass('dr-left')) {
            self.calendarOpen(self.selected, back)
          } else if ($(this).hasClass('dr-right')) {
            self.calendarOpen(self.selected, forward)
          }
        });
        $('.dr-year-switcher i', this.element).click(function () {
          var back, forward, m, this_moment, y;
          m = $('.dr-month-switcher span', self.element).data('month');
          y = $('.dr-year-switcher span', self.element).data('year');
          this_moment = moment([
            y,
            m,
            1
          ]);
          back = this_moment.clone().subtract(1, 'year');
          forward = this_moment.clone().add(1, 'year').startOf('day');
          if ($(this).hasClass('dr-left')) {
            self.calendarOpen(self.selected, back)
          } else if ($(this).hasClass('dr-right')) {
            self.calendarOpen(self.selected, forward)
          }
        });
        $('.dr-dates-dash', this.element).click(function () {
          $('.dr-date-start', self.element).trigger('click')
        });
        this.element.on('click', function () {
          document.addEventListener('click', function (f) {
            var contains;
            contains = self.element.find(f.path[0]);
            if (!contains.length) {
              if (self.presetIsOpen) {
                self.presetToggle()
              }
              if (self.calIsOpen) {
                if ($(self.selected).hasClass('dr-date-end')) {
                  self.calendarSaveDates()
                }
                self.calendarSetDates();
                self.calendarClose('force')
              }
            }
          })
        })
      };
      selectOneDate = function (other, cal, date) {
        var string;
        string = moment(date).format(cal.format.input);
        if (other) {
          $('.dr-date', cal.element).not(cal.selected).html(other.format(cal.format.input))
        }
        $(cal.selected).html(string);
        cal.calendarOpen(cal.selected);
        if ($(cal.selected).hasClass('dr-date-start')) {
          $('.dr-date-end', cal.element).trigger('click')
        } else {
          cal.calendarSaveDates();
          cal.calendarClose('force')
        }
      };
      Calendar.prototype.presetToggle = function () {
        if (this.presetIsOpen === false) {
          this.orig_start_date = this.start_date;
          this.orig_end_date = this.end_date;
          this.orig_current_date = this.current_date;
          this.presetIsOpen = true
        } else if (this.presetIsOpen) {
          this.presetIsOpen = false
        }
        if (this.calIsOpen === true) {
          this.calendarClose()
        }
        $('.dr-preset-list', this.element).slideToggle(200);
        $('.dr-input', this.element).toggleClass('dr-active');
        $('.dr-presets', this.element).toggleClass('dr-active');
        this.element.toggleClass('dr-active')
      };
      Calendar.prototype.presetCreate = function () {
        var presets, self, ul_presets;
        self = this;
        ul_presets = $('<ul class="dr-preset-list" style="display: none;"></ul>');
        presets = typeof self.settings.presets === 'object' ? self.settings.presets : [
          {
            label: 'Last 30 days',
            start: moment(self.latest_date).subtract(29, 'days'),
            end: self.latest_date
          },
          {
            label: 'Last month',
            start: moment(self.latest_date).subtract(1, 'month').startOf('month'),
            end: moment(self.latest_date).subtract(1, 'month').endOf('month')
          },
          {
            label: 'Last 3 months',
            start: moment(self.latest_date).subtract(3, 'month').startOf('month'),
            end: moment(self.latest_date).subtract(1, 'month').endOf('month')
          },
          {
            label: 'Last 6 months',
            start: moment(self.latest_date).subtract(6, 'month').startOf('month'),
            end: moment(self.latest_date).subtract(1, 'month').endOf('month')
          },
          {
            label: 'Last year',
            start: moment(self.latest_date).subtract(12, 'month').startOf('month'),
            end: moment(self.latest_date).subtract(1, 'month').endOf('month')
          },
          {
            label: 'All time',
            start: self.earliest_date,
            end: self.latest_date
          }
        ];
        if (moment(self.latest_date).diff(moment(self.latest_date).startOf('month'), 'days') >= 6 && typeof self.settings.presets !== 'object') {
          presets.splice(1, 0, {
            label: 'This month',
            start: moment(self.latest_date).startOf('month'),
            end: self.latest_date
          })
        }
        $.each(presets, function (i, d) {
          var endISO, item, startISO, string;
          if (moment(d.start).isBefore(self.earliest_date)) {
            d.start = self.earliest_date
          }
          if (moment(d.start).isAfter(self.latest_date)) {
            d.start = self.latest_date
          }
          if (moment(d.end).isBefore(self.earliest_date)) {
            d.end = self.earliest_date
          }
          if (moment(d.end).isAfter(self.latest_date)) {
            d.end = self.latest_date
          }
          startISO = moment(d.start).toISOString();
          endISO = moment(d.end).toISOString();
          string = moment(d.start).format(self.format.preset) + ' &ndash; ' + moment(d.end).format(self.format.preset);
          if ($('.dr-preset-list', self.element).length) {
            item = $('.dr-preset-list .dr-list-item:nth-of-type(' + i + 1 + ') .dr-item-aside', self.element);
            item.data('start', startISO);
            item.data('end', endISO);
            item.html(string)
          } else {
            ul_presets.append('<li class="dr-list-item">' + d.label + '<span class="dr-item-aside" data-start="' + startISO + '" data-end="' + endISO + '">' + string + '</span>' + '</li>')
          }
        });
        return ul_presets
      };
      Calendar.prototype.calendarSetDates = function () {
        var new_date, old_date;
        $('.dr-date-start', this.element).html(moment(this.start_date).format(this.format.input));
        $('.dr-date-end', this.element).html(moment(this.end_date).format(this.format.input));
        if (!this.start_date && !this.end_date) {
          old_date = $('.dr-date', this.element).html();
          new_date = moment(this.current_date).format(this.format.input);
          if (old_date.length === 0 && !this.required) {
            new_date = ''
          }
          if (old_date !== new_date) {
            $('.dr-date', this.element).html(new_date)
          }
        }
      };
      Calendar.prototype.calendarSaveDates = function () {
        if (this.type === 'double') {
          if (!moment(this.orig_end_date).isSame(this.end_date) || !moment(this.orig_start_date).isSame(this.start_date)) {
            return this.callback()
          }
        } else {
          if (!this.required || !moment(this.orig_current_date).isSame(this.current_date)) {
            return this.callback()
          }
        }
      };
      Calendar.prototype.calendarCheckDate = function (d) {
        var d_array, parsed_d, regex;
        if (d === 'today' || d === 'now') {
          if (moment().isAfter(this.latest_date)) {
            return this.latest_date
          } else if (moment().isBefore(this.earliest_date)) {
            return this.earliest_date
          } else {
            return moment()
          }
        }
        if (d === 'earliest') {
          return this.earliest_date
        }
        if (d === 'latest') {
          return this.latest_date
        }
        if (d && (/\bago\b/.test(d) || /\bahead\b/.test(d))) {
          return this.stringToDate(d)
        }
        regex = /(?:\d)((?:st|nd|rd|th)?,?)/;
        d_array = d ? d.replace(regex, '').split(' ') : [];
        if (d_array.length === 2) {
          d_array.push(moment().format(this.format.jump_year));
          d = d_array.join(' ')
        }
        parsed_d = this.parseDate(d);
        if (!parsed_d.isValid()) {
          return moment(d)
        }
        return parsed_d
      };
      Calendar.prototype.calendarCheckDates = function () {
        var c, e, endTxt, s, startTxt;
        startTxt = $('.dr-date-start', this.element).html();
        endTxt = $('.dr-date-end', this.element).html();
        c = this.calendarCheckDate($(this.selected).html());
        s = void 0;
        e = void 0;
        if (startTxt === 'ytd' || endTxt === 'ytd') {
          s = moment().startOf('year');
          e = moment().endOf('year')
        } else {
          s = this.calendarCheckDate(startTxt);
          e = this.calendarCheckDate(endTxt)
        }
        if (c.isBefore(this.earliest_date)) {
          c = this.earliest_date
        }
        if (s.isBefore(this.earliest_date)) {
          s = this.earliest_date
        }
        if (e.isBefore(this.earliest_date) || e.isBefore(s)) {
          e = s.clone().add(6, 'day')
        }
        if (c.isAfter(this.latest_date)) {
          c = this.latest_date
        }
        if (e.isAfter(this.latest_date)) {
          e = this.latest_date
        }
        if (s.isAfter(this.latest_date) || s.isAfter(e)) {
          s = e.clone().subtract(6, 'day')
        }
        if (this.type === 'double') {
          if (s.isSame(e) && !this.sameDayRange) {
            return this.calendarSetDates()
          }
          this.start_date = s.isValid() ? s : this.start_date;
          this.end_date = e.isValid() ? e : this.end_date
        }
        this.current_date = c.isValid() ? c : this.current_date
      };
      Calendar.prototype.stringToDate = function (str) {
        var date_arr;
        date_arr = str.split(' ');
        if (date_arr[2] === 'ago') {
          return moment(this.current_date).subtract(date_arr[0], date_arr[1])
        } else if (date_arr[2] === 'ahead') {
          return moment(this.current_date).add(date_arr[0], date_arr[1])
        }
        return this.current_date
      };
      Calendar.prototype.calendarOpen = function (selected, switcher) {
        var cal_width, next_month, next_year, other, past_month, past_year, self, this_moment;
        self = this;
        other = void 0;
        cal_width = $('.dr-dates', this.element).innerWidth() - 8;
        this.selected = selected || this.selected;
        if (this.presetIsOpen === true) {
          this.presetToggle()
        }
        if (this.calIsOpen === true) {
          this.calendarClose(switcher ? 'switcher' : void 0)
        } else if ($(this.selected).html().length) {
          this.orig_start_date = this.start_date;
          this.orig_end_date = this.end_date;
          this.orig_current_date = this.current_date
        }
        this.calendarCheckDates();
        this.calendarCreate(switcher);
        this.calendarSetDates();
        next_month = moment(switcher || this.current_date).add(1, 'month').startOf('month').startOf('day');
        past_month = moment(switcher || this.current_date).subtract(1, 'month').endOf('month');
        next_year = moment(switcher || this.current_date).add(1, 'year').startOf('month').startOf('day');
        past_year = moment(switcher || this.current_date).subtract(1, 'year').endOf('month');
        this_moment = moment(switcher || this.current_date);
        $('.dr-month-switcher span', this.element).data('month', this_moment.month()).html(this_moment.format(this.format.jump_month));
        $('.dr-year-switcher span', this.element).data('year', this_moment.year()).html(this_moment.format(this.format.jump_year));
        $('.dr-switcher i', this.element).removeClass('dr-disabled');
        if (next_month.isAfter(this.latest_date)) {
          $('.dr-month-switcher .dr-right', this.element).addClass('dr-disabled')
        }
        if (past_month.isBefore(this.earliest_date)) {
          $('.dr-month-switcher .dr-left', this.element).addClass('dr-disabled')
        }
        if (next_year.isAfter(this.latest_date)) {
          $('.dr-year-switcher .dr-right', this.element).addClass('dr-disabled')
        }
        if (past_year.isBefore(this.earliest_date)) {
          $('.dr-year-switcher .dr-left', this.element).addClass('dr-disabled')
        }
        $('.dr-day', this.element).on({
          mouseenter: function () {
            var selected;
            var current_date, end_date, setMaybeRange, start_date;
            selected = $(this);
            start_date = moment(self.start_date);
            end_date = moment(self.end_date);
            current_date = moment(self.current_date);
            setMaybeRange = function (type) {
              other = void 0;
              self.range(6 * 7).forEach(function (i) {
                var curr, next, prev;
                next = selected.next().data('date');
                prev = selected.prev().data('date');
                curr = selected.data('date');
                if (!curr) {
                  return false
                }
                if (!prev) {
                  prev = curr
                }
                if (!next) {
                  next = curr
                }
                if (type === 'start') {
                  if (moment(next).isSame(self.end_date) || self.sameDayRange && moment(curr).isSame(self.end_date)) {
                    return false
                  }
                  if (moment(curr).isAfter(self.end_date)) {
                    other = other || moment(curr).add(6, 'day').startOf('day');
                    if (i > 5 || (next ? moment(next).isAfter(self.latest_date) : false)) {
                      $(selected).addClass('dr-end');
                      other = moment(curr);
                      return false
                    }
                  }
                  selected = selected.next().addClass('dr-maybe')
                } else if (type === 'end') {
                  if (moment(prev).isSame(self.start_date) || self.sameDayRange && moment(curr).isSame(self.start_date)) {
                    return false
                  }
                  if (moment(curr).isBefore(self.start_date)) {
                    other = other || moment(curr).subtract(6, 'day');
                    if (i > 5 || (prev ? moment(prev).isBefore(self.earliest_date) : false)) {
                      $(selected).addClass('dr-start');
                      other = moment(curr);
                      return false
                    }
                  }
                  selected = selected.prev().addClass('dr-maybe')
                }
              })
            };
            if ($(self.selected).hasClass('dr-date-start')) {
              selected.addClass('dr-hover dr-hover-before');
              $('.dr-start', self.element).css({
                'border': 'none',
                'padding-left': '0.3125rem'
              });
              setMaybeRange('start')
            }
            if ($(self.selected).hasClass('dr-date-end')) {
              selected.addClass('dr-hover dr-hover-after');
              $('.dr-end', self.element).css({
                'border': 'none',
                'padding-right': '0.3125rem'
              });
              setMaybeRange('end')
            }
            if (!self.start_date && !self.end_date) {
              selected.addClass('dr-maybe')
            }
            $('.dr-selected', self.element).css('background-color', 'transparent')
          },
          mouseleave: function () {
            if ($(this).hasClass('dr-hover-before dr-end')) {
              $(this).removeClass('dr-end')
            }
            if ($(this).hasClass('dr-hover-after dr-start')) {
              $(this).removeClass('dr-start')
            }
            $(this).removeClass('dr-hover dr-hover-before dr-hover-after');
            $('.dr-start, .dr-end', self.element).css({
              'border': '',
              'padding': ''
            });
            $('.dr-maybe:not(.dr-current)', self.element).removeClass('dr-start dr-end');
            $('.dr-day', self.element).removeClass('dr-maybe');
            $('.dr-selected', self.element).css('background-color', '')
          }
        });
        if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
          $('.dr-day', this.element).on({
            touchstart: function () {
              selectOneDate(other, self, $(this).data('date'))
            }
          });
          $('div[contenteditable]', this.element).removeAttr('contenteditable')
        } else {
          $('.dr-day', this.element).on({
            mousedown: function () {
              selectOneDate(other, self, $(this).data('date'))
            }
          })
        }
        $('.dr-calendar', this.element).css('width', cal_width).slideDown(200);
        $('.dr-input', this.element).addClass('dr-active');
        $(selected).addClass('dr-active').focus();
        this.element.addClass('dr-active');
        this.calIsOpen = true
      };
      Calendar.prototype.calendarClose = function (type) {
        var self;
        self = this;
        if (!this.calIsOpen || this.presetIsOpen || type === 'force') {
          $('.dr-calendar', this.element).slideUp(200, function () {
            $('.dr-day', self.element).remove()
          })
        } else {
          $('.dr-day', this.element).remove()
        }
        if (type === 'switcher') {
          return false
        }
        $('.dr-input, .dr-date', this.element).removeClass('dr-active');
        this.element.removeClass('dr-active');
        this.calIsOpen = false
      };
      Calendar.prototype.calendarCreate = function (switcher) {
        var array, self;
        self = this;
        array = this.calendarArray(this.start_date, this.end_date, this.current_date, switcher);
        array.forEach(function (d, i) {
          var classString;
          classString = 'dr-day';
          if (d.fade) {
            classString += ' dr-fade'
          }
          if (d.start) {
            classString += ' dr-start'
          }
          if (d.end) {
            classString += ' dr-end'
          }
          if (d.current) {
            classString += ' dr-current'
          }
          if (d.selected) {
            classString += ' dr-selected'
          }
          if (d.outside) {
            classString += ' dr-outside'
          }
          $('.dr-day-list', self.element).append('<li class="' + classString + '" data-date="' + d.date + '">' + d.str + '</li>')
        })
      };
      Calendar.prototype.calendarArray = function (start, end, current, switcher) {
        var d, daysInRange, endRange, reference, self, startRange;
        self = this;
        current = moment(current || start || end).startOf('day');
        reference = switcher || current || start || end;
        startRange = moment(reference).startOf('month').startOf('week');
        endRange = moment(startRange).add(6 * 7 - 1, 'days').endOf('day');
        daysInRange = [];
        d = moment(startRange);
        while (d.isBefore(endRange)) {
          daysInRange.push({
            str: +d.format('D'),
            start: start && d.isSame(start, 'day'),
            end: end && d.isSame(end, 'day'),
            current: current && d.isSame(current, 'day'),
            selected: start && end && d.isBetween(start, end),
            date: d.toISOString(),
            outside: d.isBefore(self.earliest_date) || d.isAfter(self.latest_date),
            fade: !d.isSame(reference, 'month')
          });
          d.add(1, 'd')
        }
        return daysInRange
      };
      Calendar.prototype.calendarHTML = function (type) {
        var days, ul_days_of_the_week;
        ul_days_of_the_week = $('<ul class="dr-days-of-week-list"></ul>');
        days = this.days_array.splice(moment.localeData().firstDayOfWeek()).concat(this.days_array.splice(0, moment.localeData().firstDayOfWeek()));
        $.each(days, function (i, elem) {
          ul_days_of_the_week.append('<li class="dr-day-of-week">' + elem + '</li>')
        });
        if (type === 'double') {
          return this.element.append('<div class="dr-input">' + '<div class="dr-dates">' + '<div class="dr-date dr-date-start" contenteditable>' + moment(this.start_date).format(this.format.input) + '</div>' + '<span class="dr-dates-dash">&ndash;</span>' + '<div class="dr-date dr-date-end" contenteditable>' + moment(this.end_date).format(this.format.input) + '</div>' + '</div>' + (this.presets ? '<div class="dr-presets">' + '<span class="dr-preset-bar"></span>' + '<span class="dr-preset-bar"></span>' + '<span class="dr-preset-bar"></span>' + '</div>' : '') + '</div>' + '<div class="dr-selections">' + '<div class="dr-calendar" style="display: none;">' + '<div class="dr-range-switcher">' + '<div class="dr-switcher dr-month-switcher">' + '<i class="dr-left"></i>' + '<span>April</span>' + '<i class="dr-right"></i>' + '</div>' + '<div class="dr-switcher dr-year-switcher">' + '<i class="dr-left"></i>' + '<span>2015</span>' + '<i class="dr-right"></i>' + '</div>' + '</div>' + ul_days_of_the_week[0].outerHTML + '<ul class="dr-day-list"></ul>' + '</div>' + (this.presets ? this.presetCreate()[0].outerHTML : '') + '</div>')
        }
        return this.element.append('<div class="dr-input">' + '<div class="dr-dates">' + '<div class="dr-date" contenteditable placeholder="' + this.placeholder + '">' + (this.settings.current_date ? moment(this.current_date).format(this.format.input) : '') + '</div>' + '</div>' + '</div>' + '<div class="dr-selections">' + '<div class="dr-calendar" style="display: none;">' + '<div class="dr-range-switcher">' + '<div class="dr-switcher dr-month-switcher">' + '<i class="dr-left"></i>' + '<span></span>' + '<i class="dr-right"></i>' + '</div>' + '<div class="dr-switcher dr-year-switcher">' + '<i class="dr-left"></i>' + '<span></span>' + '<i class="dr-right"></i>' + '</div>' + '</div>' + ul_days_of_the_week[0].outerHTML + '<ul class="dr-day-list"></ul>' + '</div>' + '</div>')
      };
      Calendar.prototype.parseDate = function (d) {
        if (moment.defaultZone !== null && moment.hasOwnProperty('tz')) {
          return moment.tz(d, this.format.input, moment.defaultZone.name)
        } else {
          return moment(d, this.format.input)
        }
      };
      Calendar.prototype.range = function (length) {
        var idx, range;
        range = new Array(length);
        idx = 0;
        while (idx < length) {
          range[idx] = idx;
          idx++
        }
        return range
      };
      return Calendar
    }))
  });
  // source: src/util/index.coffee
  rqzt.define('./util', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      time: {
        rfc3339: 'YYYY-MM-DDTHH:mm:ssZ',
        yyyymmdd: 'YYYY-MM-DD'
      }
    }
  });
  // source: src/templates/controls/date-range-picker.pug
  rqzt.define('./templates/controls/date-range-picker', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<div class="daterange daterange--double"></div>'
  });
  // source: src/views/controls/password.coffee
  rqzt.define('./views/controls/password', function (module, exports, __dirname, __filename, process) {
    var Password, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    module.exports = Password = function (superClass) {
      extend(Password, superClass);
      function Password() {
        return Password.__super__.constructor.apply(this, arguments)
      }
      Password.prototype.tag = 'password-control';
      Password.prototype.type = 'password';
      return Password
    }(Text)
  });
  // source: src/views/controls/select.coffee
  rqzt.define('./views/controls/select', function (module, exports, __dirname, __filename, process) {
    var Select, Text, coolDown, isABrokenBrowser, isObject, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    riot = rqzt('riot/riot');
    isObject = rqzt('is-object');
    isABrokenBrowser = window.navigator.userAgent.indexOf('MSIE') > 0 || window.navigator.userAgent.indexOf('Trident') > 0;
    coolDown = -1;
    module.exports = Select = function (superClass) {
      extend(Select, superClass);
      function Select() {
        return Select.__super__.constructor.apply(this, arguments)
      }
      Select.prototype.tag = 'select-control';
      Select.prototype.html = rqzt('./templates/controls/select');
      Select.prototype.tags = false;
      Select.prototype.min = 10;
      Select.prototype.selectOptions = {};
      Select.prototype.options = function () {
        return this.selectOptions
      };
      Select.prototype.readOnly = false;
      Select.prototype.ignore = false;
      Select.prototype.events = {
        updated: function () {
          return this.onUpdated()
        },
        mount: function () {
          return this.onUpdated()
        }
      };
      Select.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim().toLowerCase() : void 0
      };
      Select.prototype.change = function () {
        Select.__super__.change.apply(this, arguments);
        return riot.update()
      };
      Select.prototype.initSelect = function ($select) {
        var $input, invertedOptions, name, options, ref, select, value;
        options = [];
        invertedOptions = {};
        ref = this.options();
        for (value in ref) {
          name = ref[value];
          options.push({
            text: name,
            value: value
          });
          invertedOptions[name] = value
        }
        $select.selectize({ dropdownParent: 'body' }).on('change', function (_this) {
          return function (event) {
            if (coolDown !== -1) {
              return
            }
            coolDown = setTimeout(function () {
              return coolDown = -1
            }, 100);
            _this.change(event);
            event.preventDefault();
            event.stopPropagation();
            return false
          }
        }(this));
        select = $select[0];
        select.selectize.addOption(options);
        select.selectize.addItem([this.input.ref.get(this.input.name)] || [], true);
        select.selectize.refreshOptions(false);
        $input = $select.parent().find('.selectize-input input:first');
        $input.on('change', function (event) {
          var val;
          val = $(event.target).val();
          if (invertedOptions[val] != null) {
            return $select[0].selectize.setValue(invertedOptions[val])
          }
        });
        if (this.readOnly) {
          return $input.attr('readonly', true)
        }
      };
      Select.prototype.init = function (opts) {
        Select.__super__.init.apply(this, arguments);
        return this.style = this.style || 'width:100%'
      };
      Select.prototype.onUpdated = function () {
        var $control, $select, select, v;
        if (this.input == null) {
          return
        }
        $select = $(this.root).find('select');
        select = $select[0];
        if (select != null) {
          v = this.input.ref.get(this.input.name);
          if (!this.initialized) {
            return requestAnimationFrame(function (_this) {
              return function () {
                _this.initSelect($select);
                return _this.initialized = true
              }
            }(this))
          } else if (select.selectize != null && v !== select.selectize.getValue()) {
            select.selectize.clear(true);
            return select.selectize.addItem(v, true)
          }
        } else {
          $control = $(this.root).find('.selectize-control');
          if ($control[0] == null) {
            return requestAnimationFrame(function (_this) {
              return function () {
                return _this.update()
              }
            }(this))
          }
        }
      };
      return Select
    }(Text)
  });
  // source: src/templates/controls/select.pug
  rqzt.define('./templates/controls/select', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<select class="{invalid: errorMessage, valid: valid}" id="{ input.name }" style="{ style };" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/views/controls/select-country.coffee
  rqzt.define('./views/controls/select-country', function (module, exports, __dirname, __filename, process) {
    var Select, SelectCountry, countries, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./views/controls/select');
    countries = rqzt('./data/countries');
    module.exports = SelectCountry = function (superClass) {
      extend(SelectCountry, superClass);
      function SelectCountry() {
        return SelectCountry.__super__.constructor.apply(this, arguments)
      }
      SelectCountry.prototype.tag = 'select-country-control';
      SelectCountry.prototype.options = function () {
        return countries.data
      };
      SelectCountry.prototype.lookup = 'country';
      SelectCountry.prototype.init = function () {
        SelectCountry.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var country, k, ref, v;
            country = _this.input.ref.get(_this.lookup);
            if (country) {
              country = country.toLowerCase();
              if (country.length === 2) {
                return _this.input.ref.set(_this.lookup, country)
              } else {
                ref = countries.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === country) {
                    _this.input.ref.set(_this.lookup, k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      return SelectCountry
    }(Select)
  });
  // source: src/data/countries.coffee
  rqzt.define('./data/countries', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        af: 'Afghanistan',
        ax: 'Åland Islands',
        al: 'Albania',
        dz: 'Algeria',
        as: 'American Samoa',
        ad: 'Andorra',
        ao: 'Angola',
        ai: 'Anguilla',
        aq: 'Antarctica',
        ag: 'Antigua and Barbuda',
        ar: 'Argentina',
        am: 'Armenia',
        aw: 'Aruba',
        au: 'Australia',
        at: 'Austria',
        az: 'Azerbaijan',
        bs: 'Bahamas',
        bh: 'Bahrain',
        bd: 'Bangladesh',
        bb: 'Barbados',
        by: 'Belarus',
        be: 'Belgium',
        bz: 'Belize',
        bj: 'Benin',
        bm: 'Bermuda',
        bt: 'Bhutan',
        bo: 'Bolivia',
        bq: 'Bonaire, Sint Eustatius and Saba',
        ba: 'Bosnia and Herzegovina',
        bw: 'Botswana',
        bv: 'Bouvet Island',
        br: 'Brazil',
        io: 'British Indian Ocean Territory',
        bn: 'Brunei Darussalam',
        bg: 'Bulgaria',
        bf: 'Burkina Faso',
        bi: 'Burundi',
        kh: 'Cambodia',
        cm: 'Cameroon',
        ca: 'Canada',
        cv: 'Cabo Verde',
        ky: 'Cayman Islands',
        cf: 'Central African Republic',
        td: 'Chad',
        cl: 'Chile',
        cn: 'China',
        cx: 'Christmas Island',
        cc: 'Cocos (Keeling) Islands',
        co: 'Colombia',
        km: 'Comoros',
        cg: 'Congo',
        cd: 'Congo (Democratic Republic)',
        ck: 'Cook Islands',
        cr: 'Costa Rica',
        ci: "Côte d'Ivoire",
        hr: 'Croatia',
        cu: 'Cuba',
        cw: 'Curaçao',
        cy: 'Cyprus',
        cz: 'Czech Republic',
        dk: 'Denmark',
        dj: 'Djibouti',
        dm: 'Dominica',
        'do': 'Dominican Republic',
        ec: 'Ecuador',
        eg: 'Egypt',
        sv: 'El Salvador',
        gq: 'Equatorial Guinea',
        er: 'Eritrea',
        ee: 'Estonia',
        et: 'Ethiopia',
        fk: 'Falkland Islands',
        fo: 'Faroe Islands',
        fj: 'Fiji',
        fi: 'Finland',
        fr: 'France',
        gf: 'French Guiana',
        pf: 'French Polynesia',
        tf: 'French Southern Territories',
        ga: 'Gabon',
        gm: 'Gambia',
        ge: 'Georgia',
        de: 'Germany',
        gh: 'Ghana',
        gi: 'Gibraltar',
        gr: 'Greece',
        gl: 'Greenland',
        gd: 'Grenada',
        gp: 'Guadeloupe',
        gu: 'Guam',
        gt: 'Guatemala',
        gg: 'Guernsey',
        gn: 'Guinea',
        gw: 'Guinea-Bissau',
        gy: 'Guyana',
        ht: 'Haiti',
        hm: 'Heard Island and McDonald Islands',
        va: 'Holy See',
        hn: 'Honduras',
        hk: 'Hong Kong',
        hu: 'Hungary',
        is: 'Iceland',
        'in': 'India',
        id: 'Indonesia',
        ir: 'Iran',
        iq: 'Iraq',
        ie: 'Ireland',
        im: 'Isle of Man',
        il: 'Israel',
        it: 'Italy',
        jm: 'Jamaica',
        jp: 'Japan',
        je: 'Jersey',
        jo: 'Jordan',
        kz: 'Kazakhstan',
        ke: 'Kenya',
        ki: 'Kiribati',
        kp: "Korea (Democratic People's Republic of)",
        kr: 'Korea (Republic of)',
        kw: 'Kuwait',
        kg: 'Kyrgyzstan',
        la: "Lao People's Democratic Republic",
        lv: 'Latvia',
        lb: 'Lebanon',
        ls: 'Lesotho',
        lr: 'Liberia',
        ly: 'Libya',
        li: 'Liechtenstein',
        lt: 'Lithuania',
        lu: 'Luxembourg',
        mo: 'Macao',
        mk: 'Macedonia',
        mg: 'Madagascar',
        mw: 'Malawi',
        my: 'Malaysia',
        mv: 'Maldives',
        ml: 'Mali',
        mt: 'Malta',
        mh: 'Marshall Islands',
        mq: 'Martinique',
        mr: 'Mauritania',
        mu: 'Mauritius',
        yt: 'Mayotte',
        mx: 'Mexico',
        fm: 'Micronesia',
        md: 'Moldova',
        mc: 'Monaco',
        mn: 'Mongolia',
        me: 'Montenegro',
        ms: 'Montserrat',
        ma: 'Morocco',
        mz: 'Mozambique',
        mm: 'Myanmar',
        na: 'Namibia',
        nr: 'Nauru',
        np: 'Nepal',
        nl: 'Netherlands',
        nc: 'New Caledonia',
        nz: 'New Zealand',
        ni: 'Nicaragua',
        ne: 'Niger',
        ng: 'Nigeria',
        nu: 'Niue',
        nf: 'Norfolk Island',
        mp: 'Northern Mariana Islands',
        no: 'Norway',
        om: 'Oman',
        pk: 'Pakistan',
        pw: 'Palau',
        ps: 'Palestine',
        pa: 'Panama',
        pg: 'Papua New Guinea',
        py: 'Paraguay',
        pe: 'Peru',
        ph: 'Philippines',
        pn: 'Pitcairn',
        pl: 'Poland',
        pt: 'Portugal',
        pr: 'Puerto Rico',
        qa: 'Qatar',
        re: 'Réunion',
        ro: 'Romania',
        ru: 'Russian Federation',
        rw: 'Rwanda',
        bl: 'Saint Barthélemy',
        sh: 'Saint Helena, Ascension and Tristan da Cunha',
        kn: 'Saint Kitts and Nevis',
        lc: 'Saint Lucia',
        mf: 'Saint Martin (French)',
        pm: 'Saint Pierre and Miquelon',
        vc: 'Saint Vincent and the Grenadines',
        ws: 'Samoa',
        sm: 'San Marino',
        st: 'Sao Tome and Principe',
        sa: 'Saudi Arabia',
        sn: 'Senegal',
        rs: 'Serbia',
        sc: 'Seychelles',
        sl: 'Sierra Leone',
        sg: 'Singapore',
        sx: 'Sint Maarten (Dutch)',
        sk: 'Slovakia',
        si: 'Slovenia',
        sb: 'Solomon Islands',
        so: 'Somalia',
        za: 'South Africa',
        gs: 'South Georgia and the South Sandwich Islands',
        ss: 'South Sudan',
        es: 'Spain',
        lk: 'Sri Lanka',
        sd: 'Sudan',
        sr: 'Suriname',
        sj: 'Svalbard and Jan Mayen',
        sz: 'Swaziland',
        se: 'Sweden',
        ch: 'Switzerland',
        sy: 'Syrian Arab Republic',
        tw: 'Taiwan',
        tj: 'Tajikistan',
        tz: 'Tanzania',
        th: 'Thailand',
        tl: 'Timor-Leste',
        tg: 'Togo',
        tk: 'Tokelau',
        to: 'Tonga',
        tt: 'Trinidad and Tobago',
        tn: 'Tunisia',
        tr: 'Turkey',
        tm: 'Turkmenistan',
        tc: 'Turks and Caicos Islands',
        tv: 'Tuvalu',
        ug: 'Uganda',
        ua: 'Ukraine',
        ae: 'United Arab Emirates',
        gb: 'United Kingdom of Great Britain and Northern Ireland',
        us: 'United States of America',
        um: 'United States Minor Outlying Islands',
        uy: 'Uruguay',
        uz: 'Uzbekistan',
        vu: 'Vanuatu',
        ve: 'Venezuela',
        vn: 'Viet Nam',
        vg: 'Virgin Islands (British)',
        vi: 'Virgin Islands (U.S.)',
        wf: 'Wallis and Futuna',
        eh: 'Western Sahara',
        ye: 'Yemen',
        zm: 'Zambia',
        zw: 'Zimbabwe'
      }
    }
  });
  // source: src/views/controls/select-state.coffee
  rqzt.define('./views/controls/select-state', function (module, exports, __dirname, __filename, process) {
    var Select, SelectState, states, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./views/controls/select');
    states = rqzt('./data/states');
    module.exports = SelectState = function (superClass) {
      extend(SelectState, superClass);
      function SelectState() {
        return SelectState.__super__.constructor.apply(this, arguments)
      }
      SelectState.prototype.tag = 'select-state-control';
      SelectState.prototype.html = rqzt('./templates/controls/select-state');
      SelectState.prototype.options = function () {
        return states.data
      };
      SelectState.prototype.countryField = 'country';
      SelectState.prototype.lookup = 'state';
      SelectState.prototype.init = function () {
        SelectState.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var k, ref, state, v;
            if (_this.input == null) {
              return
            }
            state = _this.input.ref.get(_this.lookup);
            if (state) {
              state = state.toLowerCase();
              if (state.length === 2) {
                return _this.input.ref.set(_this.lookup, state)
              } else {
                ref = states.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === state) {
                    _this.input.ref.set(_this.lookup, k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      SelectState.prototype.onUpdated = function () {
        var value;
        if (this.input == null) {
          return
        }
        if (this.input.ref.get(this.countryField) === 'us') {
          $(this.root).find('.selectize-control').show()
        } else {
          $(this.root).find('.selectize-control').hide();
          value = this.input.ref.get(this.input.name);
          if (value) {
            this.input.ref.set(this.input.name, value.toUpperCase())
          }
        }
        return SelectState.__super__.onUpdated.apply(this, arguments)
      };
      return SelectState
    }(Select)
  });
  // source: src/data/states.coffee
  rqzt.define('./data/states', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        ak: 'Alaska',
        al: 'Alabama',
        ar: 'Arkansas',
        az: 'Arizona',
        ca: 'California',
        co: 'Colorado',
        ct: 'Connecticut',
        dc: 'District of Columbia',
        de: 'Delaware',
        fl: 'Florida',
        ga: 'Georgia',
        hi: 'Hawaii',
        ia: 'Iowa',
        id: 'Idaho',
        il: 'Illinois',
        'in': 'Indiana',
        ks: 'Kansas',
        ky: 'Kentucky',
        la: 'Louisiana',
        ma: 'Massachusetts',
        md: 'Maryland',
        me: 'Maine',
        mi: 'Michigan',
        mn: 'Minnesota',
        mo: 'Missouri',
        ms: 'Mississippi',
        mt: 'Montana',
        nc: 'North Carolina',
        nd: 'North Dakota',
        ne: 'Nebraska',
        nh: 'New Hampshire',
        nj: 'New Jersey',
        nm: 'New Mexico',
        nv: 'Nevada',
        ny: 'New York',
        oh: 'Ohio',
        ok: 'Oklahoma',
        or: 'Oregon',
        pa: 'Pennsylvania',
        ri: 'Rhode Island',
        sc: 'South Carolina',
        sd: 'South Dakota',
        tn: 'Tennessee',
        tx: 'Texas',
        ut: 'Utah',
        va: 'Virginia',
        vt: 'Vermont',
        wa: 'Washington',
        wi: 'Wisconsin',
        wv: 'West Virginia',
        wy: 'Wyoming',
        aa: 'U.S. Armed Forces – Americas',
        ae: 'U.S. Armed Forces – Europe',
        ap: 'U.S. Armed Forces – Pacific'
      }
    }
  });
  // source: src/templates/controls/select-state.pug
  rqzt.define('./templates/controls/select-state', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" if="{ input.ref.get(countryField) !== &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" type="text" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref.get(input.name) }" placeholder="{ placeholder }"/>\n<select class="{invalid: errorMessage, valid: valid}" if="{ input.ref.get(countryField) == &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" data-placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/views/controls/textarea.coffee
  rqzt.define('./views/controls/textarea', function (module, exports, __dirname, __filename, process) {
    var Text, TextArea, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    module.exports = TextArea = function (superClass) {
      extend(TextArea, superClass);
      function TextArea() {
        return TextArea.__super__.constructor.apply(this, arguments)
      }
      TextArea.prototype.tag = 'textarea-control';
      TextArea.prototype.html = rqzt('./templates/controls/textarea');
      TextArea.prototype.formElement = 'textarea';
      return TextArea
    }(Text)
  });
  // source: src/templates/controls/textarea.pug
  rqzt.define('./templates/controls/textarea', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<textarea class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" rows="{ rows }" cols="{ cols }" type="text" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }">{ input.ref.get(input.name) }</textarea>\n<yield></yield>'
  });
  // source: src/views/graphics/index.coffee
  rqzt.define('./views/graphics', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Model: rqzt('./views/graphics/model'),
      Chart: rqzt('./views/graphics/chart'),
      Counter: rqzt('./views/graphics/counter'),
      register: function () {
        this.Chart.register();
        return this.Counter.register()
      }
    }
  });
  // source: src/views/graphics/model.coffee
  rqzt.define('./views/graphics/model', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      'new': function () {
        return [this.newSeries()]
      },
      newSeries: function () {
        return {
          series: '',
          type: 'line',
          xs: [],
          ys: [],
          fmt: {
            x: function (n) {
              return n
            },
            y: function (n) {
              return n
            }
          },
          tip: {
            x: function (n) {
              return n
            },
            y: function (n) {
              return n
            }
          },
          axis: {
            x: {
              name: '',
              fmt: function (n) {
                return n
              },
              scale: null,
              ticks: function (n) {
                return n
              }
            },
            y: {
              name: '',
              fmt: function (n) {
                return n
              },
              scale: null,
              ticks: function (n) {
                return n
              }
            }
          }
        }
      }
    }
  });
  // source: src/views/graphics/chart.coffee
  rqzt.define('./views/graphics/chart', function (module, exports, __dirname, __filename, process) {
    var Chart, Dynamic, Tween, d3, randomColor, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Dynamic = rqzt('./views/dynamic');
    Tween = rqzt('tween.js/src/Tween');
    d3 = rqzt('d3sho/dist/d3sho');
    randomColor = rqzt('randomcolor/randomColor');
    module.exports = Chart = function (superClass) {
      extend(Chart, superClass);
      function Chart() {
        return Chart.__super__.constructor.apply(this, arguments)
      }
      Chart.prototype.tag = 'daisho-graphics-chart';
      Chart.prototype.html = rqzt('./templates/graphics/chart');
      Chart.prototype.margin = {
        top: 40,
        right: 40,
        bottom: 50,
        left: 90
      };
      Chart.prototype.width = 0;
      Chart.prototype.height = 400;
      Chart.prototype.yMin = 10;
      Chart.prototype.interpolationTime = 3000;
      Chart.prototype.redrawTime = 300;
      Chart.prototype.svg = null;
      Chart.prototype.chart = null;
      Chart.prototype.xA = null;
      Chart.prototype.yA = null;
      Chart.prototype.xAxis = null;
      Chart.prototype.yAxis = null;
      Chart.prototype.lines = null;
      Chart.prototype.points = null;
      Chart.prototype.notes = null;
      Chart.prototype.legend = null;
      Chart.prototype.lineWidth = 3;
      Chart.prototype.pointRadius = 6;
      Chart.prototype.dataHash = '';
      Chart.prototype.colorSeed = 10;
      Chart.prototype.colors = [];
      Chart.prototype.refreshTiming = 'after';
      Chart.prototype.nextColor = function () {
        var x;
        x = Math.sin(this._colorSeed++) * 10000;
        return randomColor({ seed: Math.floor((x - Math.floor(x)) * 1000) })
      };
      Chart.prototype.init = function () {
        Chart.__super__.init.apply(this, arguments);
        this.colors = [];
        return this.on('mount', function (_this) {
          return function () {
            var chart, svg;
            _this.svg = svg = d3.select(_this.root).select('svg');
            _this.parseTime = d3.timeParse('%Y-%m-%dT%H:%M:%S%Z');
            _this.chart = chart = svg.append('g').attr('transform', 'translate(' + _this.margin.left + ',' + _this.margin.top + ')');
            _this.lines = _this.chart.append('g').classed('lines', true);
            _this.points = _this.chart.append('g').classed('points-group', true);
            _this.notes = _this.chart.append('g').classed('notes', true);
            _this.xAxis = chart.append('g').classed('axis', true).classed('x-axis', true);
            _this.xAxis.append('text');
            _this.yAxis = chart.append('g').classed('axis', true).classed('y-axis', true);
            _this.yAxis.append('text');
            _this.legend = svg.append('g').classed('legend', true).attr('transform', 'translate(50,30)');
            _this.xScale = d3.scaleTime();
            return _this.yScale = d3.scaleLinear()
          }
        }(this))
      };
      Chart.prototype._refresh = function () {
        var color, datum, height, i, k, l, legendOrdinal, len1, len2, len3, line, lineFn, m, maxes, notes, ordinal, point, series, serieses, tip, width, x, xScale, xs, xys, yScale, ys, ysBuf;
        width = this.width || $(this.root).parent().width();
        height = this.height;
        if (width <= 0 || height <= 0) {
          return
        }
        this.svg.attr('width', width).attr('height', height);
        serieses = this.data.get();
        if (!serieses[0]) {
          return
        }
        this._colorSeed = this.colorSeed;
        this.colors.length = 0;
        width -= this.margin.left + this.margin.right;
        height -= this.margin.top + this.margin.bottom;
        xs = [];
        ys = [];
        xScale = this.xScale;
        yScale = this.yScale;
        xScale.rangeRound([
          0,
          width
        ]).ticks(d3.timeDay.every(1));
        yScale.rangeRound([
          height,
          0
        ]);
        for (i in serieses) {
          series = serieses[i];
          if (series.type === 'line' || series.type === 'bar') {
            xs = xs.concat(series.xs);
            ys = ys.concat(series.ys)
          }
        }
        ysBuf = ys.map(series.fmt.y);
        ysBuf.push(this.yMin);
        xScale.domain(d3.extent(xs.map(series.fmt.x), function (_this) {
          return function (x) {
            return _this.parseTime(x)
          }
        }(this)));
        yScale.domain(d3.extent(ysBuf, function (y) {
          return y
        }));
        if (this.xA && this.yA) {
          this.xAxis.transition().duration(this.redrawTime).call(this.xA.scale(xScale));
          this.yAxis.transition().duration(this.redrawTime).call(this.yA.scale(yScale))
        } else {
          this.xA = d3.axisBottom(xScale).tickFormat(serieses[0].axis.x.ticks);
          this.xAxis.call(this.xA).attr('transform', 'translate(0,' + height + ')').select('text').attr('fill', '#000').attr('x', width).attr('y', -12).attr('dy', '0.71em').attr('text-anchor', 'end').text(series.axis.x.name);
          this.yA = d3.axisLeft(yScale).tickFormat(serieses[0].axis.y.ticks);
          this.yAxis.call(this.yA).select('text').attr('fill', '#000').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '0.71em').attr('text-anchor', 'end').text(series.axis.y.name)
        }
        this.lines.selectAll('*').attr('opacity', 1).transition().duration(this.redrawTime).attr('opacity', 0).attr('d', lineFn).remove();
        this.points.selectAll('*').attr('opacity', 1).transition().duration(this.redrawTime).attr('opacity', 0).remove();
        this.notes.selectAll('*').attr('opacity', 1).transition().duration(this.redrawTime).attr('opacity', 0).remove();
        notes = [];
        for (i in serieses) {
          series = serieses[i];
          if (series.xs.length === 0 || series.ys.length === 0) {
            return
          }
          if (series.type === 'line') {
            xys = series.xs.map(function (x, j) {
              return [
                x,
                series.ys[j]
              ]
            });
            lineFn = d3.line().x(function (_this) {
              return function (d) {
                return xScale(_this.parseTime(series.fmt.x(d[0] || 0)))
              }
            }(this)).y(function (d) {
              return yScale(series.fmt.y(d[1] || 0))
            });
            line = this.lines.append('path').classed('line', true).classed('line-' + series.series, true);
            color = this.nextColor();
            this.colors.push(color);
            line.datum(xys).attr('fill', 'none').attr('stroke', color).attr('stroke-linejoin', 'round').attr('stroke-linecap', 'round').attr('stroke-width', this.lineWidth).attr('d', lineFn);
            point = this.points.append('g').classed('points', true).classed('points-' + series.series, true);
            (function (_this) {
              return function (series, point, line, color) {
                var lineLength, tip;
                lineLength = line.node().getTotalLength();
                tip = d3.tip().attr('class', 'tip tip-' + series.series).offset([
                  -10,
                  0
                ]).html(function (d) {
                  return "<div class='tip-group'>\n  <span class='tip-label'>" + series.axis.x.name + ":</span>\n  <span class='tip-value' style='color:" + color + "'>" + series.tip.x(series.fmt.x(d[0] || 0)) + "</span>\n</div>\n<div class='tip-group'>\n  <span class='tip-label'>" + series.axis.y.name + ":</span>\n  <span class='tip-value' style='color:" + color + "'>" + series.tip.y(series.fmt.y(d[1] || 0)) + '</span>\n</div>'
                });
                point.call(tip);
                return line.attr('stroke-dashoffset', lineLength).attr('stroke-dasharray', lineLength + ' ' + lineLength).transition().duration(_this.interpolationTime).attrTween('stroke-dashoffset', function (ds) {
                  var j, len, lineInterpolator;
                  j = 0;
                  len = ds.length;
                  lineInterpolator = d3.interpolate(lineLength, 0);
                  return function (t) {
                    var p;
                    if (t >= j / len && ds[j]) {
                      p = point.append('circle').classed('point', true).classed('point-' + series.series, true).datum(ds[j]).attr('stroke', color).attr('stroke-width', 0).attr('stroke-opacity', 0).attr('fill', color).attr('cx', function (d) {
                        return xScale(_this.parseTime(series.fmt.x(d[0] || 0)))
                      }).attr('cy', function (d) {
                        return yScale(series.fmt.y(d[1] || 0))
                      }).on('mouseover', tip.show).on('mouseout', tip.hide);
                      p.transition().duration(_this.redrawTime).attrTween('r', function (d) {
                        return d3.interpolate(0, _this.pointRadius)
                      });
                      j++
                    }
                    return lineInterpolator(t)
                  }
                })
              }
            }(this)(series, point, line, color))
          }
        }
        notes = {};
        maxes = [];
        for (k = 0, len1 = serieses.length; k < len1; k++) {
          series = serieses[k];
          if (series.type === 'notes') {
            xs = series.xs;
            ys = series.ys;
            for (x = l = 0, len2 = xs.length; l < len2; x = ++l) {
              i = xs[x];
              if (notes[x]) {
                notes[x].push(ys[i])
              } else {
                notes[x] = [ys[i]]
              }
            }
          } else {
            xs = series.xs;
            ys = series.ys;
            for (x = m = 0, len3 = xs.length; m < len3; x = ++m) {
              i = xs[x];
              if (maxes[x] < ys[i]) {
                maxes[x] = ys[i]
              }
            }
          }
        }
        for (x in notes) {
          ys = notes[x];
          datum = [
            x,
            maxes[x]
          ];
          tip = d3.tip().attr('class', 'tip tip-notes').offset([
            -10,
            0
          ]).html(function (d) {
            return "<div class='tip-group'>\n  <span class='tip-label'>" + serieses[0].axis.x.name + ":</span>\n  <span class='tip-value'>" + serieses[0].tip.x(series.fmt.x(d[0] || 0)) + "</span>\n</div>\n<div class='tip-group'>\n  <span class='tip-label'>Notes:</span>\n  <span class='tip-value'>" + ys.join('\n') + '</span>\n</div>'
          });
          notes.append('circle').classed('point', true).classed('point-' + series.series, true).datum(datum).attr('stroke', '#048ba8').attr('stroke-width', 0).attr('stroke-opacity', 0).attr('fill', '#048ba8').attr('cx', function (_this) {
            return function (d) {
              return xScale(_this.parseTime(serieses[0].fmt.x(d[0] || 0)))
            }
          }(this)).attr('cy', function (d) {
            return yScale(serieses[0].fmt.y(d[1] || 0))
          }).on('mouseover', tip.show).on('mouseout', tip.hide)
        }
        ordinal = d3.scaleOrdinal().domain(serieses.map(function (s) {
          return s.series
        })).range(this.colors);
        this.legend.attr('transform', 'translate(' + width + ',' + this.margin.top + ')');
        legendOrdinal = d3.legendColor().shape('path', d3.symbol().type(d3.symbolCircle).size(150)()).shapePadding(10).scale(ordinal);
        return this.legend.call(legendOrdinal)
      };
      return Chart
    }(Dynamic)
  });
  // source: src/views/dynamic.coffee
  rqzt.define('./views/dynamic', function (module, exports, __dirname, __filename, process) {
    var $, CrowdControl, DynamicView, Events, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    Events = rqzt('./events');
    $ = rqzt('jquery/dist/jquery');
    module.exports = DynamicView = function (superClass) {
      extend(DynamicView, superClass);
      function DynamicView() {
        return DynamicView.__super__.constructor.apply(this, arguments)
      }
      DynamicView.prototype.tag = 'daisho-dynamic';
      DynamicView.prototype.html = '';
      DynamicView.prototype._dataStaleField = null;
      DynamicView.prototype._dataStaleCached = '';
      DynamicView.prototype.autoRefresh = true;
      DynamicView.prototype.refreshTiming = 'before';
      DynamicView.prototype._p = false;
      DynamicView.prototype.init = function () {
        var r;
        r = this._refresh;
        this._refresh = function (_this) {
          return function () {
            var e, p;
            p = r.apply(_this, arguments);
            if ((p != null ? p.then : void 0) != null) {
              p.then(function () {
                var e;
                try {
                  return _this._dataStaleCached = JSON.stringify(_this.data.get(_this._dataStaleField))
                } catch (error) {
                  e = error;
                  return void 0
                }
              })['catch'](function (e) {
                return void 0
              })
            } else {
              try {
                _this._dataStaleCached = JSON.stringify(_this.data.get(_this._dataStaleField))
              } catch (error) {
                e = error;
                void 0
              }
            }
            return p
          }
        }(this);
        if (this.autoRefresh) {
          if (this.mediator != null) {
            this.mediator.on(Events.Refresh, function (_this) {
              return function () {
                return _this.refresh.apply(_this, arguments)
              }
            }(this))
          }
          if (this.refreshTiming === 'before') {
            this.on('update', function (_this) {
              return function () {
                return _this.refresh.apply(_this, arguments)
              }
            }(this))
          } else {
            this.on('updated', function (_this) {
              return function () {
                return _this.refresh.apply(_this, arguments)
              }
            }(this))
          }
        }
        if (this.mediator != null) {
          this.mediator.on(Events.ForceRefresh, function (_this) {
            return function () {
              return _this._refresh.apply(_this, arguments)
            }
          }(this))
        }
        return DynamicView.__super__.init.apply(this, arguments)
      };
      DynamicView.prototype.refresh = function () {
        var _dataStaleCached;
        if ($(this.root).closest('body')[0] == null) {
          return
        }
        _dataStaleCached = JSON.stringify(this.data.get(this._dataStaleField));
        if (_dataStaleCached === this._dataStaleCached) {
          return
        }
        return this._refresh.apply(this, arguments)
      };
      DynamicView.prototype._refresh = function () {
      };
      return DynamicView
    }(CrowdControl.Views.Form)
  });
  // source: node_modules/d3sho/dist/d3sho.js
  rqzt.define('d3sho/dist/d3sho', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var slice = Array.prototype.slice;
    var identity = function (x) {
      return x
    };
    var top = 1;
    var right = 2;
    var bottom = 3;
    var left = 4;
    var epsilon = 0.000001;
    function translateX(x) {
      return 'translate(' + x + ',0)'
    }
    function translateY(y) {
      return 'translate(0,' + y + ')'
    }
    function center(scale) {
      var offset = scale.bandwidth() / 2;
      if (scale.round()) {
        offset = Math.round(offset)
      }
      return function (d) {
        return scale(d) + offset
      }
    }
    function entering() {
      return !this.__axis
    }
    function axis(orient, scale) {
      var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, k = orient === top || orient === left ? -1 : 1, x, y = orient === left || orient === right ? (x = 'x', 'y') : (x = 'y', 'x'), transform = orient === top || orient === bottom ? translateX : translateY;
      function axis(context) {
        var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, range = scale.range(), range0 = range[0] + 0.5, range1 = range[range.length - 1] + 0.5, position = (scale.bandwidth ? center : identity)(scale.copy()), selection = context.selection ? context.selection() : context, path = selection.selectAll('.domain').data([null]), tick = selection.selectAll('.tick').data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append('g').attr('class', 'tick'), line = tick.select('line'), text = tick.select('text');
        path = path.merge(path.enter().insert('path', '.tick').attr('class', 'domain').attr('stroke', '#000'));
        tick = tick.merge(tickEnter);
        line = line.merge(tickEnter.append('line').attr('stroke', '#000').attr(x + '2', k * tickSizeInner).attr(y + '1', 0.5).attr(y + '2', 0.5));
        text = text.merge(tickEnter.append('text').attr('fill', '#000').attr(x, k * spacing).attr(y, 0.5).attr('dy', orient === top ? '0em' : orient === bottom ? '0.71em' : '0.32em'));
        if (context !== selection) {
          path = path.transition(context);
          tick = tick.transition(context);
          line = line.transition(context);
          text = text.transition(context);
          tickExit = tickExit.transition(context).attr('opacity', epsilon).attr('transform', function (d) {
            return isFinite(d = position(d)) ? transform(d) : this.getAttribute('transform')
          });
          tickEnter.attr('opacity', epsilon).attr('transform', function (d) {
            var p = this.parentNode.__axis;
            return transform(p && isFinite(p = p(d)) ? p : position(d))
          })
        }
        tickExit.remove();
        path.attr('d', orient === left || orient == right ? 'M' + k * tickSizeOuter + ',' + range0 + 'H0.5V' + range1 + 'H' + k * tickSizeOuter : 'M' + range0 + ',' + k * tickSizeOuter + 'V0.5H' + range1 + 'V' + k * tickSizeOuter);
        tick.attr('opacity', 1).attr('transform', function (d) {
          return transform(position(d))
        });
        line.attr(x + '2', k * tickSizeInner);
        text.attr(x, k * spacing).text(format);
        selection.filter(entering).attr('fill', 'none').attr('font-size', 10).attr('font-family', 'sans-serif').attr('text-anchor', orient === right ? 'start' : orient === left ? 'end' : 'middle');
        selection.each(function () {
          this.__axis = position
        })
      }
      axis.scale = function (_) {
        return arguments.length ? (scale = _, axis) : scale
      };
      axis.ticks = function () {
        return tickArguments = slice.call(arguments), axis
      };
      axis.tickArguments = function (_) {
        return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice()
      };
      axis.tickValues = function (_) {
        return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice()
      };
      axis.tickFormat = function (_) {
        return arguments.length ? (tickFormat = _, axis) : tickFormat
      };
      axis.tickSize = function (_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner
      };
      axis.tickSizeInner = function (_) {
        return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner
      };
      axis.tickSizeOuter = function (_) {
        return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter
      };
      axis.tickPadding = function (_) {
        return arguments.length ? (tickPadding = +_, axis) : tickPadding
      };
      return axis
    }
    function axisBottom(scale) {
      return axis(bottom, scale)
    }
    function axisLeft(scale) {
      return axis(left, scale)
    }
    var ascending = function (a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
    };
    var bisector = function (compare) {
      if (compare.length === 1) {
        compare = ascendingComparator(compare)
      }
      return {
        left: function (a, x, lo, hi) {
          if (lo == null) {
            lo = 0
          }
          if (hi == null) {
            hi = a.length
          }
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) {
              lo = mid + 1
            } else {
              hi = mid
            }
          }
          return lo
        },
        right: function (a, x, lo, hi) {
          if (lo == null) {
            lo = 0
          }
          if (hi == null) {
            hi = a.length
          }
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) {
              hi = mid
            } else {
              lo = mid + 1
            }
          }
          return lo
        }
      }
    };
    function ascendingComparator(f) {
      return function (d, x) {
        return ascending(f(d), x)
      }
    }
    var ascendingBisect = bisector(ascending);
    var bisectRight = ascendingBisect.right;
    function pair(a, b) {
      return [
        a,
        b
      ]
    }
    var number = function (x) {
      return x === null ? NaN : +x
    };
    var extent = function (array, f) {
      var i = -1, n = array.length, a, b, c;
      if (f == null) {
        while (++i < n) {
          if ((b = array[i]) != null && b >= b) {
            a = c = b;
            break
          }
        }
        while (++i < n) {
          if ((b = array[i]) != null) {
            if (a > b) {
              a = b
            }
            if (c < b) {
              c = b
            }
          }
        }
      } else {
        while (++i < n) {
          if ((b = f(array[i], i, array)) != null && b >= b) {
            a = c = b;
            break
          }
        }
        while (++i < n) {
          if ((b = f(array[i], i, array)) != null) {
            if (a > b) {
              a = b
            }
            if (c < b) {
              c = b
            }
          }
        }
      }
      return [
        a,
        c
      ]
    };
    var identity$1 = function (x) {
      return x
    };
    var sequence = function (start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
      var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
      while (++i < n) {
        range[i] = start + i * step
      }
      return range
    };
    var e10 = Math.sqrt(50);
    var e5 = Math.sqrt(10);
    var e2 = Math.sqrt(2);
    var ticks = function (start, stop, count) {
      var step = tickStep(start, stop, count);
      return sequence(Math.ceil(start / step) * step, Math.floor(stop / step) * step + step / 2, // inclusive
      step)
    };
    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
      if (error >= e10) {
        step1 *= 10
      } else if (error >= e5) {
        step1 *= 5
      } else if (error >= e2) {
        step1 *= 2
      }
      return stop < start ? -step1 : step1
    }
    var sturges = function (values) {
      return Math.ceil(Math.log(values.length) / Math.LN2) + 1
    };
    var threshold = function (array, p, f) {
      if (f == null) {
        f = number
      }
      if (!(n = array.length)) {
        return
      }
      if ((p = +p) <= 0 || n < 2) {
        return +f(array[0], 0, array)
      }
      if (p >= 1) {
        return +f(array[n - 1], n - 1, array)
      }
      var n, h = (n - 1) * p, i = Math.floor(h), a = +f(array[i], i, array), b = +f(array[i + 1], i + 1, array);
      return a + (b - a) * (h - i)
    };
    var min = function (array, f) {
      var i = -1, n = array.length, a, b;
      if (f == null) {
        while (++i < n) {
          if ((b = array[i]) != null && b >= b) {
            a = b;
            break
          }
        }
        while (++i < n) {
          if ((b = array[i]) != null && a > b) {
            a = b
          }
        }
      } else {
        while (++i < n) {
          if ((b = f(array[i], i, array)) != null && b >= b) {
            a = b;
            break
          }
        }
        while (++i < n) {
          if ((b = f(array[i], i, array)) != null && a > b) {
            a = b
          }
        }
      }
      return a
    };
    function length(d) {
      return d.length
    }
    var define = function (constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor
    };
    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) {
        prototype[key] = definition[key]
      }
      return prototype
    }
    function Color() {
    }
    var darker = 0.7;
    var brighter = 1 / darker;
    var reI = '\\s*([+-]?\\d+)\\s*';
    var reN = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*';
    var reP = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*';
    var reHex3 = /^#([0-9a-f]{3})$/;
    var reHex6 = /^#([0-9a-f]{6})$/;
    var reRgbInteger = new RegExp('^rgb\\(' + [
      reI,
      reI,
      reI
    ] + '\\)$');
    var reRgbPercent = new RegExp('^rgb\\(' + [
      reP,
      reP,
      reP
    ] + '\\)$');
    var reRgbaInteger = new RegExp('^rgba\\(' + [
      reI,
      reI,
      reI,
      reN
    ] + '\\)$');
    var reRgbaPercent = new RegExp('^rgba\\(' + [
      reP,
      reP,
      reP,
      reN
    ] + '\\)$');
    var reHslPercent = new RegExp('^hsl\\(' + [
      reN,
      reP,
      reP
    ] + '\\)$');
    var reHslaPercent = new RegExp('^hsla\\(' + [
      reN,
      reP,
      reP,
      reN
    ] + '\\)$');
    var named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define(Color, color, {
      displayable: function () {
        return this.rgb().displayable()
      },
      toString: function () {
        return this.rgb() + ''
      }
    });
    function color(format) {
      var m;
      format = (format + '').trim().toLowerCase();
      return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1)) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16))  // #ff0000
 : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1)  // rgb(255, 0, 0)
 : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1)  // rgb(100%, 0%, 0%)
 : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4])  // rgba(255, 0, 0, 1)
 : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4])  // rgb(100%, 0%, 0%, 1)
 : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1)  // hsl(120, 50%, 50%)
 : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4])  // hsla(120, 50%, 50%, 1)
 : named.hasOwnProperty(format) ? rgbn(named[format]) : format === 'transparent' ? new Rgb(NaN, NaN, NaN, 0) : null
    }
    function rgbn(n) {
      return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1)
    }
    function rgba(r, g, b, a) {
      if (a <= 0) {
        r = g = b = NaN
      }
      return new Rgb(r, g, b, a)
    }
    function rgbConvert(o) {
      if (!(o instanceof Color)) {
        o = color(o)
      }
      if (!o) {
        return new Rgb
      }
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity)
    }
    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity)
    }
    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity
    }
    define(Rgb, rgb, extend(Color, {
      brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity)
      },
      darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity)
      },
      rgb: function () {
        return this
      },
      displayable: function () {
        return 0 <= this.r && this.r <= 255 && (0 <= this.g && this.g <= 255) && (0 <= this.b && this.b <= 255) && (0 <= this.opacity && this.opacity <= 1)
      },
      toString: function () {
        var a = this.opacity;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? 'rgb(' : 'rgba(') + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ')' : ', ' + a + ')')
      }
    }));
    function hsla(h, s, l, a) {
      if (a <= 0) {
        h = s = l = NaN
      } else if (l <= 0 || l >= 1) {
        h = s = NaN
      } else if (s <= 0) {
        h = NaN
      }
      return new Hsl(h, s, l, a)
    }
    function hslConvert(o) {
      if (o instanceof Hsl) {
        return new Hsl(o.h, o.s, o.l, o.opacity)
      }
      if (!(o instanceof Color)) {
        o = color(o)
      }
      if (!o) {
        return new Hsl
      }
      if (o instanceof Hsl) {
        return o
      }
      o = o.rgb();
      var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
      if (s) {
        if (r === max) {
          h = (g - b) / s + (g < b) * 6
        } else if (g === max) {
          h = (b - r) / s + 2
        } else {
          h = (r - g) / s + 4
        }
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60
      } else {
        s = l > 0 && l < 1 ? 0 : h
      }
      return new Hsl(h, s, l, o.opacity)
    }
    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity)
    }
    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity
    }
    define(Hsl, hsl, extend(Color, {
      brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity)
      },
      darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity)
      },
      rgb: function () {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity)
      },
      displayable: function () {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1)
      }
    }));
    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255
    }
    var deg2rad = Math.PI / 180;
    var rad2deg = 180 / Math.PI;
    var Kn = 18;
    var Xn = 0.95047;
    var Yn = 1;
    var Zn = 1.08883;
    var t0 = 4 / 29;
    var t1 = 6 / 29;
    var t2 = 3 * t1 * t1;
    var t3 = t1 * t1 * t1;
    function labConvert(o) {
      if (o instanceof Lab) {
        return new Lab(o.l, o.a, o.b, o.opacity)
      }
      if (o instanceof Hcl) {
        var h = o.h * deg2rad;
        return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity)
      }
      if (!(o instanceof Rgb)) {
        o = rgbConvert(o)
      }
      var b = rgb2xyz(o.r), a = rgb2xyz(o.g), l = rgb2xyz(o.b), x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn), y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn), z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn);
      return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity)
    }
    function lab(l, a, b, opacity) {
      return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity)
    }
    function Lab(l, a, b, opacity) {
      this.l = +l;
      this.a = +a;
      this.b = +b;
      this.opacity = +opacity
    }
    define(Lab, lab, extend(Color, {
      brighter: function (k) {
        return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity)
      },
      darker: function (k) {
        return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity)
      },
      rgb: function () {
        var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
        y = Yn * lab2xyz(y);
        x = Xn * lab2xyz(x);
        z = Zn * lab2xyz(z);
        return new Rgb(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
        xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity)
      }
    }));
    function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0
    }
    function lab2xyz(t) {
      return t > t1 ? t * t * t : t2 * (t - t0)
    }
    function xyz2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055)
    }
    function rgb2xyz(x) {
      return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4)
    }
    function hclConvert(o) {
      if (o instanceof Hcl) {
        return new Hcl(o.h, o.c, o.l, o.opacity)
      }
      if (!(o instanceof Lab)) {
        o = labConvert(o)
      }
      var h = Math.atan2(o.b, o.a) * rad2deg;
      return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity)
    }
    function hcl(h, c, l, opacity) {
      return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity)
    }
    function Hcl(h, c, l, opacity) {
      this.h = +h;
      this.c = +c;
      this.l = +l;
      this.opacity = +opacity
    }
    define(Hcl, hcl, extend(Color, {
      brighter: function (k) {
        return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity)
      },
      darker: function (k) {
        return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity)
      },
      rgb: function () {
        return labConvert(this).rgb()
      }
    }));
    var A = -0.14861;
    var B = +1.78277;
    var C = -0.29227;
    var D = -0.90649;
    var E = +1.97294;
    var ED = E * D;
    var EB = E * B;
    var BC_DA = B * C - D * A;
    function cubehelixConvert(o) {
      if (o instanceof Cubehelix) {
        return new Cubehelix(o.h, o.s, o.l, o.opacity)
      }
      if (!(o instanceof Rgb)) {
        o = rgbConvert(o)
      }
      var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
        // NaN if l=0 or l=1
        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
      return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity)
    }
    function cubehelix(h, s, l, opacity) {
      return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity)
    }
    function Cubehelix(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity
    }
    define(Cubehelix, cubehelix, extend(Color, {
      brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity)
      },
      darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity)
      },
      rgb: function () {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity)
      }
    }));
    function basis(t1, v0, v1, v2, v3) {
      var t2 = t1 * t1, t3 = t2 * t1;
      return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6
    }
    var constant$1 = function (x) {
      return function () {
        return x
      }
    };
    function linear(a, d) {
      return function (t) {
        return a + t * d
      }
    }
    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
        return Math.pow(a + t * b, y)
      }
    }
    function hue(a, b) {
      var d = b - a;
      return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a)
    }
    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function (a, b) {
        return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a)
      }
    }
    function nogamma(a, b) {
      var d = b - a;
      return d ? linear(a, d) : constant$1(isNaN(a) ? b : a)
    }
    var interpolateRgb = function rgbGamma(y) {
      var color$$1 = gamma(y);
      function rgb$$1(start, end) {
        var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r), g = color$$1(start.g, end.g), b = color$$1(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
        return function (t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + ''
        }
      }
      rgb$$1.gamma = rgbGamma;
      return rgb$$1
    }(1);
    var array$1 = function (a, b) {
      var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(nb), c = new Array(nb), i;
      for (i = 0; i < na; ++i) {
        x[i] = interpolateValue(a[i], b[i])
      }
      for (; i < nb; ++i) {
        c[i] = b[i]
      }
      return function (t) {
        for (i = 0; i < na; ++i) {
          c[i] = x[i](t)
        }
        return c
      }
    };
    var date = function (a, b) {
      var d = new Date;
      return a = +a, b -= a, function (t) {
        return d.setTime(a + b * t), d
      }
    };
    var interpolateNumber = function (a, b) {
      return a = +a, b -= a, function (t) {
        return a + b * t
      }
    };
    var object = function (a, b) {
      var i = {}, c = {}, k;
      if (a === null || typeof a !== 'object') {
        a = {}
      }
      if (b === null || typeof b !== 'object') {
        b = {}
      }
      for (k in b) {
        if (k in a) {
          i[k] = interpolateValue(a[k], b[k])
        } else {
          c[k] = b[k]
        }
      }
      return function (t) {
        for (k in i) {
          c[k] = i[k](t)
        }
        return c
      }
    };
    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    var reB = new RegExp(reA.source, 'g');
    function zero(b) {
      return function () {
        return b
      }
    }
    function one(b) {
      return function (t) {
        return b(t) + ''
      }
    }
    var interpolateString = function (a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0,
        // scan index for next number in b
        am,
        // current match in a
        bm,
        // current match in b
        bs,
        // string preceding current number in b, if any
        i = -1,
        // index in s
        s = [],
        // string constants and placeholders
        q = [];
      // number interpolators
      // Coerce inputs to strings.
      a = a + '', b = b + '';
      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) {
          // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) {
            s[i] += bs
          }  // coalesce with previous string
          else {
            s[++i] = bs
          }
        }
        if ((am = am[0]) === (bm = bm[0])) {
          // numbers in a & b match
          if (s[i]) {
            s[i] += bm
          }  // coalesce with previous string
          else {
            s[++i] = bm
          }
        } else {
          // interpolate non-matching numbers
          s[++i] = null;
          q.push({
            i: i,
            x: interpolateNumber(am, bm)
          })
        }
        bi = reB.lastIndex
      }
      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) {
          s[i] += bs
        }  // coalesce with previous string
        else {
          s[++i] = bs
        }
      }
      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
        for (var i = 0, o; i < b; ++i) {
          s[(o = q[i]).i] = o.x(t)
        }
        return s.join('')
      })
    };
    var interpolateValue = function (a, b) {
      var t = typeof b, c;
      return b == null || t === 'boolean' ? constant$1(b) : (t === 'number' ? interpolateNumber : t === 'string' ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : Array.isArray(b) ? array$1 : isNaN(b) ? object : interpolateNumber)(a, b)
    };
    var interpolateRound = function (a, b) {
      return a = +a, b -= a, function (t) {
        return Math.round(a + b * t)
      }
    };
    var degrees = 180 / Math.PI;
    var identity$2 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };
    var decompose = function (a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) {
        a /= scaleX, b /= scaleX
      }
      if (skewX = a * c + b * d) {
        c -= a * skewX, d -= b * skewX
      }
      if (scaleY = Math.sqrt(c * c + d * d)) {
        c /= scaleY, d /= scaleY, skewX /= scaleY
      }
      if (a * d < b * c) {
        a = -a, b = -b, skewX = -skewX, scaleX = -scaleX
      }
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees,
        skewX: Math.atan(skewX) * degrees,
        scaleX: scaleX,
        scaleY: scaleY
      }
    };
    var cssNode;
    var cssRoot;
    var cssView;
    var svgNode;
    function parseCss(value) {
      if (value === 'none') {
        return identity$2
      }
      if (!cssNode) {
        cssNode = document.createElement('DIV'), cssRoot = document.documentElement, cssView = document.defaultView
      }
      cssNode.style.transform = value;
      value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue('transform');
      cssRoot.removeChild(cssNode);
      value = value.slice(7, -1).split(',');
      return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5])
    }
    function parseSvg(value) {
      if (value == null) {
        return identity$2
      }
      if (!svgNode) {
        svgNode = document.createElementNS('http://www.w3.org/2000/svg', 'g')
      }
      svgNode.setAttribute('transform', value);
      if (!(value = svgNode.transform.baseVal.consolidate())) {
        return identity$2
      }
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f)
    }
    function interpolateTransform(parse, pxComma, pxParen, degParen) {
      function pop(s) {
        return s.length ? s.pop() + ' ' : ''
      }
      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push('translate(', null, pxComma, null, pxParen);
          q.push({
            i: i - 4,
            x: interpolateNumber(xa, xb)
          }, {
            i: i - 2,
            x: interpolateNumber(ya, yb)
          })
        } else if (xb || yb) {
          s.push('translate(' + xb + pxComma + yb + pxParen)
        }
      }
      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) {
            b += 360
          } else if (b - a > 180) {
            a += 360
          }
          // shortest path
          q.push({
            i: s.push(pop(s) + 'rotate(', null, degParen) - 2,
            x: interpolateNumber(a, b)
          })
        } else if (b) {
          s.push(pop(s) + 'rotate(' + b + degParen)
        }
      }
      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({
            i: s.push(pop(s) + 'skewX(', null, degParen) - 2,
            x: interpolateNumber(a, b)
          })
        } else if (b) {
          s.push(pop(s) + 'skewX(' + b + degParen)
        }
      }
      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + 'scale(', null, ',', null, ')');
          q.push({
            i: i - 4,
            x: interpolateNumber(xa, xb)
          }, {
            i: i - 2,
            x: interpolateNumber(ya, yb)
          })
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + 'scale(' + xb + ',' + yb + ')')
        }
      }
      return function (a, b) {
        var s = [],
          // string constants and placeholders
          q = [];
        // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null;
        // gc
        return function (t) {
          var i = -1, n = q.length, o;
          while (++i < n) {
            s[(o = q[i]).i] = o.x(t)
          }
          return s.join('')
        }
      }
    }
    var interpolateTransformCss = interpolateTransform(parseCss, 'px, ', 'px)', 'deg)');
    var interpolateTransformSvg = interpolateTransform(parseSvg, ', ', ')', ')');
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function cubehelix$1(hue$$1) {
      return function cubehelixGamma(y) {
        y = +y;
        function cubehelix$$1(start, end) {
          var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
          return function (t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + ''
          }
        }
        cubehelix$$1.gamma = cubehelixGamma;
        return cubehelix$$1
      }(1)
    }
    cubehelix$1(hue);
    var cubehelixLong = cubehelix$1(nogamma);
    var pi = Math.PI;
    var tau = 2 * pi;
    var epsilon$1 = 0.000001;
    var tauEpsilon = tau - epsilon$1;
    function Path() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null;
      // end of current subpath
      this._ = ''
    }
    function path() {
      return new Path
    }
    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function (x, y) {
        this._ += 'M' + (this._x0 = this._x1 = +x) + ',' + (this._y0 = this._y1 = +y)
      },
      closePath: function () {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += 'Z'
        }
      },
      lineTo: function (x, y) {
        this._ += 'L' + (this._x1 = +x) + ',' + (this._y1 = +y)
      },
      quadraticCurveTo: function (x1, y1, x, y) {
        this._ += 'Q' + +x1 + ',' + +y1 + ',' + (this._x1 = +x) + ',' + (this._y1 = +y)
      },
      bezierCurveTo: function (x1, y1, x2, y2, x, y) {
        this._ += 'C' + +x1 + ',' + +y1 + ',' + +x2 + ',' + +y2 + ',' + (this._x1 = +x) + ',' + (this._y1 = +y)
      },
      arcTo: function (x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        // Is the radius negative? Error.
        if (r < 0) {
          throw new Error('negative radius: ' + r)
        }
        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += 'M' + (this._x1 = x1) + ',' + (this._y1 = y1)
        }  // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon$1)) {
        }  // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
           // Equivalently, is (x1,y1) coincident with (x2,y2)?
           // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
          this._ += 'L' + (this._x1 = x1) + ',' + (this._y1 = y1)
        }  // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon$1) {
            this._ += 'L' + (x1 + t01 * x01) + ',' + (y1 + t01 * y01)
          }
          this._ += 'A' + r + ',' + r + ',0,0,' + +(y01 * x20 > x01 * y20) + ',' + (this._x1 = x1 + t21 * x21) + ',' + (this._y1 = y1 + t21 * y21)
        }
      },
      arc: function (x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        // Is the radius negative? Error.
        if (r < 0) {
          throw new Error('negative radius: ' + r)
        }
        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += 'M' + x0 + ',' + y0
        }  // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
          this._ += 'L' + x0 + ',' + y0
        }
        // Is this arc empty? We’re done.
        if (!r) {
          return
        }
        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += 'A' + r + ',' + r + ',0,1,' + cw + ',' + (x - dx) + ',' + (y - dy) + 'A' + r + ',' + r + ',0,1,' + cw + ',' + (this._x1 = x0) + ',' + (this._y1 = y0)
        }  // Otherwise, draw an arc!
        else {
          if (da < 0) {
            da = da % tau + tau
          }
          this._ += 'A' + r + ',' + r + ',0,' + +(da >= pi) + ',' + cw + ',' + (this._x1 = x + r * Math.cos(a1)) + ',' + (this._y1 = y + r * Math.sin(a1))
        }
      },
      rect: function (x, y, w, h) {
        this._ += 'M' + (this._x0 = this._x1 = +x) + ',' + (this._y0 = this._y1 = +y) + 'h' + +w + 'v' + +h + 'h' + -w + 'Z'
      },
      toString: function () {
        return this._
      }
    };
    var constant$2 = function (x) {
      return function constant() {
        return x
      }
    };
    var pi$1 = Math.PI;
    var tau$1 = 2 * pi$1;
    function Linear(context) {
      this._context = context
    }
    Linear.prototype = {
      areaStart: function () {
        this._line = 0
      },
      areaEnd: function () {
        this._line = NaN
      },
      lineStart: function () {
        this._point = 0
      },
      lineEnd: function () {
        if (this._line || this._line !== 0 && this._point === 1) {
          this._context.closePath()
        }
        this._line = 1 - this._line
      },
      point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
        // proceed
        default:
          this._context.lineTo(x, y);
          break
        }
      }
    };
    var curveLinear = function (context) {
      return new Linear(context)
    };
    function x(p) {
      return p[0]
    }
    function y(p) {
      return p[1]
    }
    var line = function () {
      var x$$1 = x, y$$1 = y, defined = constant$2(true), context = null, curve = curveLinear, output = null;
      function line(data) {
        var i, n = data.length, d, defined0 = false, buffer;
        if (context == null) {
          output = curve(buffer = path())
        }
        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              output.lineStart()
            } else {
              output.lineEnd()
            }
          }
          if (defined0) {
            output.point(+x$$1(d, i, data), +y$$1(d, i, data))
          }
        }
        if (buffer) {
          return output = null, buffer + '' || null
        }
      }
      line.x = function (_) {
        return arguments.length ? (x$$1 = typeof _ === 'function' ? _ : constant$2(+_), line) : x$$1
      };
      line.y = function (_) {
        return arguments.length ? (y$$1 = typeof _ === 'function' ? _ : constant$2(+_), line) : y$$1
      };
      line.defined = function (_) {
        return arguments.length ? (defined = typeof _ === 'function' ? _ : constant$2(!!_), line) : defined
      };
      line.curve = function (_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve
      };
      line.context = function (_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context
      };
      return line
    };
    var circle = {
      draw: function (context, size) {
        var r = Math.sqrt(size / pi$1);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau$1)
      }
    };
    var symbol = function () {
      var type = constant$2(circle), size = constant$2(64), context = null;
      function symbol() {
        var buffer;
        if (!context) {
          context = buffer = path()
        }
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) {
          return context = null, buffer + '' || null
        }
      }
      symbol.type = function (_) {
        return arguments.length ? (type = typeof _ === 'function' ? _ : constant$2(_), symbol) : type
      };
      symbol.size = function (_) {
        return arguments.length ? (size = typeof _ === 'function' ? _ : constant$2(+_), symbol) : size
      };
      symbol.context = function (_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context
      };
      return symbol
    };
    function sign(x) {
      return x < 0 ? -1 : 1
    }
    // Calculate the slopes of the tangents (Hermite-type interpolation) based on
    // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
    // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
    // NOV(II), P. 443, 1990.
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0
    }
    // Calculate a one-sided slope.
    function slope2(that, t) {
      var h = that._x1 - that._x0;
      return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t
    }
    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
    // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
    function point$3(that, t0, t1) {
      var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1)
    }
    function MonotoneX(context) {
      this._context = context
    }
    MonotoneX.prototype = {
      areaStart: function () {
        this._line = 0
      },
      areaEnd: function () {
        this._line = NaN
      },
      lineStart: function () {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0
      },
      lineEnd: function () {
        switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point$3(this, this._t0, slope2(this, this._t0));
          break
        }
        if (this._line || this._line !== 0 && this._point === 1) {
          this._context.closePath()
        }
        this._line = 1 - this._line
      },
      point: function (x, y) {
        var t1 = NaN;
        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) {
          return
        }
        // Ignore coincident points.
        switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);
          break;
        default:
          point$3(this, this._t0, t1 = slope3(this, x, y));
          break
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1
      }
    };
    function MonotoneY(context) {
      this._context = new ReflectContext(context)
    }
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
      MonotoneX.prototype.point.call(this, y, x)
    };
    function ReflectContext(context) {
      this._context = context
    }
    ReflectContext.prototype = {
      moveTo: function (x, y) {
        this._context.moveTo(y, x)
      },
      closePath: function () {
        this._context.closePath()
      },
      lineTo: function (x, y) {
        this._context.lineTo(y, x)
      },
      bezierCurveTo: function (x1, y1, x2, y2, x, y) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y, x)
      }
    };
    var prefix = '$';
    function Map() {
    }
    Map.prototype = map$1.prototype = {
      constructor: Map,
      has: function (key) {
        return prefix + key in this
      },
      get: function (key) {
        return this[prefix + key]
      },
      set: function (key, value) {
        this[prefix + key] = value;
        return this
      },
      remove: function (key) {
        var property = prefix + key;
        return property in this && delete this[property]
      },
      clear: function () {
        var this$1 = this;
        for (var property in this$1) {
          if (property[0] === prefix) {
            delete this$1[property]
          }
        }
      },
      keys: function () {
        var this$1 = this;
        var keys = [];
        for (var property in this$1) {
          if (property[0] === prefix) {
            keys.push(property.slice(1))
          }
        }
        return keys
      },
      values: function () {
        var this$1 = this;
        var values = [];
        for (var property in this$1) {
          if (property[0] === prefix) {
            values.push(this$1[property])
          }
        }
        return values
      },
      entries: function () {
        var this$1 = this;
        var entries = [];
        for (var property in this$1) {
          if (property[0] === prefix) {
            entries.push({
              key: property.slice(1),
              value: this$1[property]
            })
          }
        }
        return entries
      },
      size: function () {
        var this$1 = this;
        var size = 0;
        for (var property in this$1) {
          if (property[0] === prefix) {
            ++size
          }
        }
        return size
      },
      empty: function () {
        var this$1 = this;
        for (var property in this$1) {
          if (property[0] === prefix) {
            return false
          }
        }
        return true
      },
      each: function (f) {
        var this$1 = this;
        for (var property in this$1) {
          if (property[0] === prefix) {
            f(this$1[property], property.slice(1), this$1)
          }
        }
      }
    };
    function map$1(object, f) {
      var map = new Map;
      // Copy constructor.
      if (object instanceof Map) {
        object.each(function (value, key) {
          map.set(key, value)
        })
      }  // Index array by numeric index or specified key function.
      else if (Array.isArray(object)) {
        var i = -1, n = object.length, o;
        if (f == null) {
          while (++i < n) {
            map.set(i, object[i])
          }
        } else {
          while (++i < n) {
            map.set(f(o = object[i], i, object), o)
          }
        }
      }  // Convert object to map.
      else if (object) {
        for (var key in object) {
          map.set(key, object[key])
        }
      }
      return map
    }
    var nest = function () {
      var keys = [], sortKeys = [], sortValues, rollup, nest;
      function apply(array, depth, createResult, setResult) {
        if (depth >= keys.length) {
          return rollup != null ? rollup(array) : sortValues != null ? array.sort(sortValues) : array
        }
        var i = -1, n = array.length, key = keys[depth++], keyValue, value, valuesByKey = map$1(), values, result = createResult();
        while (++i < n) {
          if (values = valuesByKey.get(keyValue = key(value = array[i]) + '')) {
            values.push(value)
          } else {
            valuesByKey.set(keyValue, [value])
          }
        }
        valuesByKey.each(function (values, key) {
          setResult(result, key, apply(values, depth, createResult, setResult))
        });
        return result
      }
      function entries(map, depth) {
        if (++depth > keys.length) {
          return map
        }
        var array, sortKey = sortKeys[depth - 1];
        if (rollup != null && depth >= keys.length) {
          array = map.entries()
        } else {
          array = [], map.each(function (v, k) {
            array.push({
              key: k,
              values: entries(v, depth)
            })
          })
        }
        return sortKey != null ? array.sort(function (a, b) {
          return sortKey(a.key, b.key)
        }) : array
      }
      return nest = {
        object: function (array) {
          return apply(array, 0, createObject, setObject)
        },
        map: function (array) {
          return apply(array, 0, createMap, setMap)
        },
        entries: function (array) {
          return entries(apply(array, 0, createMap, setMap), 0)
        },
        key: function (d) {
          keys.push(d);
          return nest
        },
        sortKeys: function (order) {
          sortKeys[keys.length - 1] = order;
          return nest
        },
        sortValues: function (order) {
          sortValues = order;
          return nest
        },
        rollup: function (f) {
          rollup = f;
          return nest
        }
      }
    };
    function createObject() {
      return {}
    }
    function setObject(object, key, value) {
      object[key] = value
    }
    function createMap() {
      return map$1()
    }
    function setMap(map, key, value) {
      map.set(key, value)
    }
    function Set() {
    }
    var proto = map$1.prototype;
    Set.prototype = set.prototype = {
      constructor: Set,
      has: proto.has,
      add: function (value) {
        value += '';
        this[prefix + value] = value;
        return this
      },
      remove: proto.remove,
      clear: proto.clear,
      values: proto.keys,
      size: proto.size,
      empty: proto.empty,
      each: proto.each
    };
    function set(object, f) {
      var set = new Set;
      // Copy constructor.
      if (object instanceof Set) {
        object.each(function (value) {
          set.add(value)
        })
      }  // Otherwise, assume it’s an array.
      else if (object) {
        var i = -1, n = object.length;
        if (f == null) {
          while (++i < n) {
            set.add(object[i])
          }
        } else {
          while (++i < n) {
            set.add(f(object[i], i, object))
          }
        }
      }
      return set
    }
    var keys = function (map) {
      var keys = [];
      for (var key in map) {
        keys.push(key)
      }
      return keys
    };
    var values = function (map) {
      var values = [];
      for (var key in map) {
        values.push(map[key])
      }
      return values
    };
    var entries = function (map) {
      var entries = [];
      for (var key in map) {
        entries.push({
          key: key,
          value: map[key]
        })
      }
      return entries
    };
    var index$1 = Object.freeze({
      nest: nest,
      set: set,
      map: map$1,
      keys: keys,
      values: values,
      entries: entries
    });
    var array$2 = Array.prototype;
    var map$3 = array$2.map;
    var slice$3 = array$2.slice;
    var implicit = { name: 'implicit' };
    function ordinal(range) {
      var index = map$1(), domain = [], unknown = implicit;
      range = range == null ? [] : slice$3.call(range);
      function scale(d) {
        var key = d + '', i = index.get(key);
        if (!i) {
          if (unknown !== implicit) {
            return unknown
          }
          index.set(key, i = domain.push(d))
        }
        return range[(i - 1) % range.length]
      }
      scale.domain = function (_) {
        if (!arguments.length) {
          return domain.slice()
        }
        domain = [], index = map$1();
        var i = -1, n = _.length, d, key;
        while (++i < n) {
          if (!index.has(key = (d = _[i]) + '')) {
            index.set(key, domain.push(d))
          }
        }
        return scale
      };
      scale.range = function (_) {
        return arguments.length ? (range = slice$3.call(_), scale) : range.slice()
      };
      scale.unknown = function (_) {
        return arguments.length ? (unknown = _, scale) : unknown
      };
      scale.copy = function () {
        return ordinal().domain(domain).range(range).unknown(unknown)
      };
      return scale
    }
    var constant$3 = function (x) {
      return function () {
        return x
      }
    };
    var number$1 = function (x) {
      return +x
    };
    var unit = [
      0,
      1
    ];
    function deinterpolateLinear(a, b) {
      return (b -= a = +a) ? function (x) {
        return (x - a) / b
      } : constant$3(b)
    }
    function deinterpolateClamp(deinterpolate) {
      return function (a, b) {
        var d = deinterpolate(a = +a, b = +b);
        return function (x) {
          return x <= a ? 0 : x >= b ? 1 : d(x)
        }
      }
    }
    function reinterpolateClamp(reinterpolate) {
      return function (a, b) {
        var r = reinterpolate(a = +a, b = +b);
        return function (t) {
          return t <= 0 ? a : t >= 1 ? b : r(t)
        }
      }
    }
    function bimap(domain, range$$1, deinterpolate, reinterpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
      if (d1 < d0) {
        d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0)
      } else {
        d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1)
      }
      return function (x) {
        return r0(d0(x))
      }
    }
    function polymap(domain, range$$1, deinterpolate, reinterpolate) {
      var j = Math.min(domain.length, range$$1.length) - 1, d = new Array(j), r = new Array(j), i = -1;
      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range$$1 = range$$1.slice().reverse()
      }
      while (++i < j) {
        d[i] = deinterpolate(domain[i], domain[i + 1]);
        r[i] = reinterpolate(range$$1[i], range$$1[i + 1])
      }
      return function (x) {
        var i = bisectRight(domain, x, 1, j) - 1;
        return r[i](d[i](x))
      }
    }
    function copy(source, target) {
      return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp())
    }
    // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
    function continuous(deinterpolate, reinterpolate) {
      var domain = unit, range$$1 = unit, interpolate$$1 = interpolateValue, clamp = false, piecewise, output, input;
      function rescale() {
        piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
        output = input = null;
        return scale
      }
      function scale(x) {
        return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x)
      }
      scale.invert = function (y) {
        return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y)
      };
      scale.domain = function (_) {
        return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice()
      };
      scale.range = function (_) {
        return arguments.length ? (range$$1 = slice$3.call(_), rescale()) : range$$1.slice()
      };
      scale.rangeRound = function (_) {
        return range$$1 = slice$3.call(_), interpolate$$1 = interpolateRound, rescale()
      };
      scale.clamp = function (_) {
        return arguments.length ? (clamp = !!_, rescale()) : clamp
      };
      scale.interpolate = function (_) {
        return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1
      };
      return rescale()
    }
    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimal(1.23) returns ["123", 0].
    var formatDecimal = function (x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf('e')) < 0) {
        return null
      }
      // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);
      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ]
    };
    var exponent = function (x) {
      return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN
    };
    var formatGroup = function (grouping, thousands) {
      return function (value, width) {
        var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
        while (i > 0 && g > 0) {
          if (length + g + 1 > width) {
            g = Math.max(1, width - length)
          }
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) {
            break
          }
          g = grouping[j = (j + 1) % grouping.length]
        }
        return t.reverse().join(thousands)
      }
    };
    var formatDefault = function (x, p) {
      x = x.toPrecision(p);
      out:
        for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
          switch (x[i]) {
          case '.':
            i0 = i1 = i;
            break;
          case '0':
            if (i0 === 0) {
              i0 = i
            }
            i1 = i;
            break;
          case 'e':
            break out;
          default:
            if (i0 > 0) {
              i0 = 0
            }
            break
          }
        }
      return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x
    };
    var prefixExponent;
    var formatPrefixAuto = function (x, p) {
      var d = formatDecimal(x, p);
      if (!d) {
        return x + ''
      }
      var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
      return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join('0') : i > 0 ? coefficient.slice(0, i) + '.' + coefficient.slice(i) : '0.' + new Array(1 - i).join('0') + formatDecimal(x, Math.max(0, p + i - 1))[0]  // less than 1y!
    };
    var formatRounded = function (x, p) {
      var d = formatDecimal(x, p);
      if (!d) {
        return x + ''
      }
      var coefficient = d[0], exponent = d[1];
      return exponent < 0 ? '0.' + new Array(-exponent).join('0') + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join('0')
    };
    var formatTypes = {
      '': formatDefault,
      '%': function (x, p) {
        return (x * 100).toFixed(p)
      },
      'b': function (x) {
        return Math.round(x).toString(2)
      },
      'c': function (x) {
        return x + ''
      },
      'd': function (x) {
        return Math.round(x).toString(10)
      },
      'e': function (x, p) {
        return x.toExponential(p)
      },
      'f': function (x, p) {
        return x.toFixed(p)
      },
      'g': function (x, p) {
        return x.toPrecision(p)
      },
      'o': function (x) {
        return Math.round(x).toString(8)
      },
      'p': function (x, p) {
        return formatRounded(x * 100, p)
      },
      'r': formatRounded,
      's': formatPrefixAuto,
      'X': function (x) {
        return Math.round(x).toString(16).toUpperCase()
      },
      'x': function (x) {
        return Math.round(x).toString(16)
      }
    };
    // [[fill]align][sign][symbol][0][width][,][.precision][type]
    var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
    var formatSpecifier = function (specifier) {
      return new FormatSpecifier(specifier)
    };
    function FormatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) {
        throw new Error('invalid format: ' + specifier)
      }
      var match, fill = match[1] || ' ', align = match[2] || '>', sign = match[3] || '-', symbol = match[4] || '', zero = !!match[5], width = match[6] && +match[6], comma = !!match[7], precision = match[8] && +match[8].slice(1), type = match[9] || '';
      // The "n" type is an alias for ",g".
      if (type === 'n') {
        comma = true, type = 'g'
      }  // Map invalid types to the default format.
      else if (!formatTypes[type]) {
        type = ''
      }
      // If zero fill is specified, padding goes after sign and before digits.
      if (zero || fill === '0' && align === '=') {
        zero = true, fill = '0', align = '='
      }
      this.fill = fill;
      this.align = align;
      this.sign = sign;
      this.symbol = symbol;
      this.zero = zero;
      this.width = width;
      this.comma = comma;
      this.precision = precision;
      this.type = type
    }
    FormatSpecifier.prototype.toString = function () {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? '0' : '') + (this.width == null ? '' : Math.max(1, this.width | 0)) + (this.comma ? ',' : '') + (this.precision == null ? '' : '.' + Math.max(0, this.precision | 0)) + this.type
    };
    var prefixes = [
      'y',
      'z',
      'a',
      'f',
      'p',
      'n',
      'µ',
      'm',
      '',
      'k',
      'M',
      'G',
      'T',
      'P',
      'E',
      'Z',
      'Y'
    ];
    function identity$5(x) {
      return x
    }
    var formatLocale = function (locale) {
      var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$5, currency = locale.currency, decimal = locale.decimal;
      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);
        var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type = specifier.type;
        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === '$' ? currency[0] : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '', suffix = symbol === '$' ? currency[1] : /[%p]/.test(type) ? '%' : '';
        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type], maybeSuffix = !type || /[defgprs%]/.test(type);
        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format(value) {
          var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
          if (type === 'c') {
            valueSuffix = formatType(value) + valueSuffix;
            value = ''
          } else {
            value = +value;
            // Convert negative to positive, and compute the prefix.
            // Note that -0 is not less than 0, but 1 / -0 is!
            var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
            // Perform the initial formatting.
            value = formatType(value, precision);
            // If the original value was negative, it may be rounded to zero during
            // formatting; treat this as (positive) zero.
            if (valueNegative) {
              i = -1, n = value.length;
              valueNegative = false;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 < c && c < 58 || type === 'x' && 96 < c && c < 103 || type === 'X' && 64 < c && c < 71) {
                  valueNegative = true;
                  break
                }
              }
            }
            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? sign === '(' ? sign : '-' : sign === '-' || sign === '(' ? '' : sign) + valuePrefix;
            valueSuffix = valueSuffix + (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + (valueNegative && sign === '(' ? ')' : '');
            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break
                }
              }
            }
          }
          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) {
            value = group(value, Infinity)
          }
          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : '';
          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) {
            value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ''
          }
          // Reconstruct the final output based on the desired alignment.
          switch (align) {
          case '<':
            return valuePrefix + value + valueSuffix + padding;
          case '=':
            return valuePrefix + padding + value + valueSuffix;
          case '^':
            return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length)
          }
          return padding + valuePrefix + value + valueSuffix
        }
        format.toString = function () {
          return specifier + ''
        };
        return format
      }
      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = 'f', specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
        return function (value) {
          return f(k * value) + prefix
        }
      }
      return {
        format: newFormat,
        formatPrefix: formatPrefix
      }
    };
    var locale$1;
    var format;
    var formatPrefix;
    defaultLocale({
      decimal: '.',
      thousands: ',',
      grouping: [3],
      currency: [
        '$',
        ''
      ]
    });
    function defaultLocale(definition) {
      locale$1 = formatLocale(definition);
      format = locale$1.format;
      formatPrefix = locale$1.formatPrefix;
      return locale$1
    }
    var precisionFixed = function (step) {
      return Math.max(0, -exponent(Math.abs(step)))
    };
    var precisionPrefix = function (step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)))
    };
    var precisionRound = function (step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1
    };
    var tickFormat = function (domain, count, specifier) {
      var start = domain[0], stop = domain[domain.length - 1], step = tickStep(start, stop, count == null ? 10 : count), precision;
      specifier = formatSpecifier(specifier == null ? ',f' : specifier);
      switch (specifier.type) {
      case 's': {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) {
            specifier.precision = precision
          }
          return formatPrefix(specifier, value)
        }
      case '':
      case 'e':
      case 'g':
      case 'p':
      case 'r': {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) {
            specifier.precision = precision - (specifier.type === 'e')
          }
          break
        }
      case 'f':
      case '%': {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) {
            specifier.precision = precision - (specifier.type === '%') * 2
          }
          break
        }
      }
      return format(specifier)
    };
    function linearish(scale) {
      var domain = scale.domain;
      scale.ticks = function (count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count)
      };
      scale.tickFormat = function (count, specifier) {
        return tickFormat(domain(), count, specifier)
      };
      scale.nice = function (count) {
        var d = domain(), i = d.length - 1, n = count == null ? 10 : count, start = d[0], stop = d[i], step = tickStep(start, stop, n);
        if (step) {
          step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
          d[0] = Math.floor(start / step) * step;
          d[i] = Math.ceil(stop / step) * step;
          domain(d)
        }
        return scale
      };
      return scale
    }
    function linear$1() {
      var scale = continuous(deinterpolateLinear, interpolateNumber);
      scale.copy = function () {
        return copy(scale, linear$1())
      };
      return linearish(scale)
    }
    var nice = function (domain, interval) {
      domain = domain.slice();
      var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
      if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t
      }
      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain
    };
    function deinterpolate(a, b) {
      return (b = Math.log(b / a)) ? function (x) {
        return Math.log(x / a) / b
      } : constant$3(b)
    }
    function reinterpolate(a, b) {
      return a < 0 ? function (t) {
        return -Math.pow(-b, t) * Math.pow(-a, 1 - t)
      } : function (t) {
        return Math.pow(b, t) * Math.pow(a, 1 - t)
      }
    }
    function pow10(x) {
      return isFinite(x) ? +('1e' + x) : x < 0 ? 0 : x
    }
    function powp(base) {
      return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
        return Math.pow(base, x)
      }
    }
    function logp(base) {
      return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
        return Math.log(x) / base
      })
    }
    var t0$1 = new Date;
    var t1$1 = new Date;
    function newInterval(floori, offseti, count, field) {
      function interval(date) {
        return floori(date = new Date(+date)), date
      }
      interval.floor = interval;
      interval.ceil = function (date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date
      };
      interval.round = function (date) {
        var d0 = interval(date), d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1
      };
      interval.offset = function (date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date
      };
      interval.range = function (start, stop, step) {
        var range = [];
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) {
          return range
        }
        // also handles Invalid Date
        do {
          range.push(new Date(+start))
        } while (offseti(start, step), floori(start), start < stop);
        return range
      };
      interval.filter = function (test) {
        return newInterval(function (date) {
          if (date >= date) {
            while (floori(date), !test(date)) {
              date.setTime(date - 1)
            }
          }
        }, function (date, step) {
          if (date >= date) {
            while (--step >= 0) {
              while (offseti(date, 1), !test(date)) {
              }
            }
          }  // eslint-disable-line no-empty
        })
      };
      if (count) {
        interval.count = function (start, end) {
          t0$1.setTime(+start), t1$1.setTime(+end);
          floori(t0$1), floori(t1$1);
          return Math.floor(count(t0$1, t1$1))
        };
        interval.every = function (step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
            return field(d) % step === 0
          } : function (d) {
            return interval.count(0, d) % step === 0
          })
        }
      }
      return interval
    }
    var millisecond = newInterval(function () {
    }, function (date, step) {
      date.setTime(+date + step)
    }, function (start, end) {
      return end - start
    });
    // An optimized implementation for this simple case.
    millisecond.every = function (k) {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) {
        return null
      }
      if (!(k > 1)) {
        return millisecond
      }
      return newInterval(function (date) {
        date.setTime(Math.floor(date / k) * k)
      }, function (date, step) {
        date.setTime(+date + step * k)
      }, function (start, end) {
        return (end - start) / k
      })
    };
    var durationSecond$1 = 1000;
    var durationMinute$1 = 60000;
    var durationHour$1 = 3600000;
    var durationDay$1 = 86400000;
    var durationWeek$1 = 604800000;
    var second = newInterval(function (date) {
      date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1)
    }, function (date, step) {
      date.setTime(+date + step * durationSecond$1)
    }, function (start, end) {
      return (end - start) / durationSecond$1
    }, function (date) {
      return date.getUTCSeconds()
    });
    var minute = newInterval(function (date) {
      date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1)
    }, function (date, step) {
      date.setTime(+date + step * durationMinute$1)
    }, function (start, end) {
      return (end - start) / durationMinute$1
    }, function (date) {
      return date.getMinutes()
    });
    var hour = newInterval(function (date) {
      var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;
      if (offset < 0) {
        offset += durationHour$1
      }
      date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset)
    }, function (date, step) {
      date.setTime(+date + step * durationHour$1)
    }, function (start, end) {
      return (end - start) / durationHour$1
    }, function (date) {
      return date.getHours()
    });
    var day = newInterval(function (date) {
      date.setHours(0, 0, 0, 0)
    }, function (date, step) {
      date.setDate(date.getDate() + step)
    }, function (start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1
    }, function (date) {
      return date.getDate() - 1
    });
    function weekday(i) {
      return newInterval(function (date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setDate(date.getDate() + step * 7)
      }, function (start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1
      })
    }
    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);
    var month = newInterval(function (date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0)
    }, function (date, step) {
      date.setMonth(date.getMonth() + step)
    }, function (start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12
    }, function (date) {
      return date.getMonth()
    });
    var year = newInterval(function (date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0)
    }, function (date, step) {
      date.setFullYear(date.getFullYear() + step)
    }, function (start, end) {
      return end.getFullYear() - start.getFullYear()
    }, function (date) {
      return date.getFullYear()
    });
    // An optimized implementation for this simple case.
    year.every = function (k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setFullYear(date.getFullYear() + step * k)
      })
    };
    var utcMinute = newInterval(function (date) {
      date.setUTCSeconds(0, 0)
    }, function (date, step) {
      date.setTime(+date + step * durationMinute$1)
    }, function (start, end) {
      return (end - start) / durationMinute$1
    }, function (date) {
      return date.getUTCMinutes()
    });
    var utcHour = newInterval(function (date) {
      date.setUTCMinutes(0, 0, 0)
    }, function (date, step) {
      date.setTime(+date + step * durationHour$1)
    }, function (start, end) {
      return (end - start) / durationHour$1
    }, function (date) {
      return date.getUTCHours()
    });
    var utcDay = newInterval(function (date) {
      date.setUTCHours(0, 0, 0, 0)
    }, function (date, step) {
      date.setUTCDate(date.getUTCDate() + step)
    }, function (start, end) {
      return (end - start) / durationDay$1
    }, function (date) {
      return date.getUTCDate() - 1
    });
    function utcWeekday(i) {
      return newInterval(function (date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7)
      }, function (start, end) {
        return (end - start) / durationWeek$1
      })
    }
    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);
    var utcMonth = newInterval(function (date) {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0)
    }, function (date, step) {
      date.setUTCMonth(date.getUTCMonth() + step)
    }, function (start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12
    }, function (date) {
      return date.getUTCMonth()
    });
    var utcYear = newInterval(function (date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0)
    }, function (date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step)
    }, function (start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear()
    }, function (date) {
      return date.getUTCFullYear()
    });
    // An optimized implementation for this simple case.
    utcYear.every = function (k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0)
      }, function (date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k)
      })
    };
    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L)
    }
    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L))
    }
    function newYear(y) {
      return {
        y: y,
        m: 0,
        d: 1,
        H: 0,
        M: 0,
        S: 0,
        L: 0
      }
    }
    function formatLocale$1(locale) {
      var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
      var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
      var formats = {
        'a': formatShortWeekday,
        'A': formatWeekday,
        'b': formatShortMonth,
        'B': formatMonth,
        'c': null,
        'd': formatDayOfMonth,
        'e': formatDayOfMonth,
        'H': formatHour24,
        'I': formatHour12,
        'j': formatDayOfYear,
        'L': formatMilliseconds,
        'm': formatMonthNumber,
        'M': formatMinutes,
        'p': formatPeriod,
        'S': formatSeconds,
        'U': formatWeekNumberSunday,
        'w': formatWeekdayNumber,
        'W': formatWeekNumberMonday,
        'x': null,
        'X': null,
        'y': formatYear,
        'Y': formatFullYear,
        'Z': formatZone,
        '%': formatLiteralPercent
      };
      var utcFormats = {
        'a': formatUTCShortWeekday,
        'A': formatUTCWeekday,
        'b': formatUTCShortMonth,
        'B': formatUTCMonth,
        'c': null,
        'd': formatUTCDayOfMonth,
        'e': formatUTCDayOfMonth,
        'H': formatUTCHour24,
        'I': formatUTCHour12,
        'j': formatUTCDayOfYear,
        'L': formatUTCMilliseconds,
        'm': formatUTCMonthNumber,
        'M': formatUTCMinutes,
        'p': formatUTCPeriod,
        'S': formatUTCSeconds,
        'U': formatUTCWeekNumberSunday,
        'w': formatUTCWeekdayNumber,
        'W': formatUTCWeekNumberMonday,
        'x': null,
        'X': null,
        'y': formatUTCYear,
        'Y': formatUTCFullYear,
        'Z': formatUTCZone,
        '%': formatLiteralPercent
      };
      var parses = {
        'a': parseShortWeekday,
        'A': parseWeekday,
        'b': parseShortMonth,
        'B': parseMonth,
        'c': parseLocaleDateTime,
        'd': parseDayOfMonth,
        'e': parseDayOfMonth,
        'H': parseHour24,
        'I': parseHour24,
        'j': parseDayOfYear,
        'L': parseMilliseconds,
        'm': parseMonthNumber,
        'M': parseMinutes,
        'p': parsePeriod,
        'S': parseSeconds,
        'U': parseWeekNumberSunday,
        'w': parseWeekdayNumber,
        'W': parseWeekNumberMonday,
        'x': parseLocaleDate,
        'X': parseLocaleTime,
        'y': parseYear,
        'Y': parseFullYear,
        'Z': parseZone,
        '%': parseLiteralPercent
      };
      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);
      function newFormat(specifier, formats) {
        return function (date) {
          var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
          if (!(date instanceof Date)) {
            date = new Date(+date)
          }
          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) {
                c = specifier.charAt(++i)
              } else {
                pad = c === 'e' ? ' ' : '0'
              }
              if (format = formats[c]) {
                c = format(date, pad)
              }
              string.push(c);
              j = i + 1
            }
          }
          string.push(specifier.slice(j, i));
          return string.join('')
        }
      }
      function newParse(specifier, newDate) {
        return function (string) {
          var d = newYear(1900), i = parseSpecifier(d, specifier, string += '', 0);
          if (i != string.length) {
            return null
          }
          // The am-pm flag is 0 for AM, and 1 for PM.
          if ('p' in d) {
            d.H = d.H % 12 + d.p * 12
          }
          // Convert day-of-week and week-of-year to day-of-year.
          if ('W' in d || 'U' in d) {
            if (!('w' in d)) {
              d.w = 'W' in d ? 1 : 0
            }
            var day$$1 = 'Z' in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
            d.m = 0;
            d.d = 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7
          }
          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ('Z' in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d)
          }
          // Otherwise, all fields are in local time.
          return newDate(d)
        }
      }
      function parseSpecifier(d, specifier, string, j) {
        var i = 0, n = specifier.length, m = string.length, c, parse;
        while (i < n) {
          if (j >= m) {
            return -1
          }
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || (j = parse(d, string, j)) < 0) {
              return -1
            }
          } else if (c != string.charCodeAt(j++)) {
            return -1
          }
        }
        return j
      }
      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1
      }
      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1
      }
      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1
      }
      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1
      }
      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1
      }
      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i)
      }
      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i)
      }
      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i)
      }
      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()]
      }
      function formatWeekday(d) {
        return locale_weekdays[d.getDay()]
      }
      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()]
      }
      function formatMonth(d) {
        return locale_months[d.getMonth()]
      }
      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)]
      }
      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()]
      }
      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()]
      }
      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()]
      }
      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()]
      }
      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)]
      }
      return {
        format: function (specifier) {
          var f = newFormat(specifier += '', formats);
          f.toString = function () {
            return specifier
          };
          return f
        },
        parse: function (specifier) {
          var p = newParse(specifier += '', localDate);
          p.toString = function () {
            return specifier
          };
          return p
        },
        utcFormat: function (specifier) {
          var f = newFormat(specifier += '', utcFormats);
          f.toString = function () {
            return specifier
          };
          return f
        },
        utcParse: function (specifier) {
          var p = newParse(specifier, utcDate);
          p.toString = function () {
            return specifier
          };
          return p
        }
      }
    }
    var pads = {
      '-': '',
      '_': ' ',
      '0': '0'
    };
    var numberRe = /^\s*\d+/;
    var percentRe = /^%/;
    var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    function pad(value, fill, width) {
      var sign = value < 0 ? '-' : '', string = (sign ? -value : value) + '', length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string)
    }
    function requote(s) {
      return s.replace(requoteRe, '\\$&')
    }
    function formatRe(names) {
      return new RegExp('^(?:' + names.map(requote).join('|') + ')', 'i')
    }
    function formatLookup(names) {
      var map = {}, i = -1, n = names.length;
      while (++i < n) {
        map[names[i].toLowerCase()] = i
      }
      return map
    }
    function parseWeekdayNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1
    }
    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.U = +n[0], i + n[0].length) : -1
    }
    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.W = +n[0], i + n[0].length) : -1
    }
    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1
    }
    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1
    }
    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || '00')), i + n[0].length) : -1
    }
    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1
    }
    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1
    }
    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1
    }
    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1
    }
    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1
    }
    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1
    }
    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1
    }
    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1
    }
    function formatDayOfMonth(d, p) {
      return pad(d.getDate(), p, 2)
    }
    function formatHour24(d, p) {
      return pad(d.getHours(), p, 2)
    }
    function formatHour12(d, p) {
      return pad(d.getHours() % 12 || 12, p, 2)
    }
    function formatDayOfYear(d, p) {
      return pad(1 + day.count(year(d), d), p, 3)
    }
    function formatMilliseconds(d, p) {
      return pad(d.getMilliseconds(), p, 3)
    }
    function formatMonthNumber(d, p) {
      return pad(d.getMonth() + 1, p, 2)
    }
    function formatMinutes(d, p) {
      return pad(d.getMinutes(), p, 2)
    }
    function formatSeconds(d, p) {
      return pad(d.getSeconds(), p, 2)
    }
    function formatWeekNumberSunday(d, p) {
      return pad(sunday.count(year(d), d), p, 2)
    }
    function formatWeekdayNumber(d) {
      return d.getDay()
    }
    function formatWeekNumberMonday(d, p) {
      return pad(monday.count(year(d), d), p, 2)
    }
    function formatYear(d, p) {
      return pad(d.getFullYear() % 100, p, 2)
    }
    function formatFullYear(d, p) {
      return pad(d.getFullYear() % 10000, p, 4)
    }
    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? '-' : (z *= -1, '+')) + pad(z / 60 | 0, '0', 2) + pad(z % 60, '0', 2)
    }
    function formatUTCDayOfMonth(d, p) {
      return pad(d.getUTCDate(), p, 2)
    }
    function formatUTCHour24(d, p) {
      return pad(d.getUTCHours(), p, 2)
    }
    function formatUTCHour12(d, p) {
      return pad(d.getUTCHours() % 12 || 12, p, 2)
    }
    function formatUTCDayOfYear(d, p) {
      return pad(1 + utcDay.count(utcYear(d), d), p, 3)
    }
    function formatUTCMilliseconds(d, p) {
      return pad(d.getUTCMilliseconds(), p, 3)
    }
    function formatUTCMonthNumber(d, p) {
      return pad(d.getUTCMonth() + 1, p, 2)
    }
    function formatUTCMinutes(d, p) {
      return pad(d.getUTCMinutes(), p, 2)
    }
    function formatUTCSeconds(d, p) {
      return pad(d.getUTCSeconds(), p, 2)
    }
    function formatUTCWeekNumberSunday(d, p) {
      return pad(utcSunday.count(utcYear(d), d), p, 2)
    }
    function formatUTCWeekdayNumber(d) {
      return d.getUTCDay()
    }
    function formatUTCWeekNumberMonday(d, p) {
      return pad(utcMonday.count(utcYear(d), d), p, 2)
    }
    function formatUTCYear(d, p) {
      return pad(d.getUTCFullYear() % 100, p, 2)
    }
    function formatUTCFullYear(d, p) {
      return pad(d.getUTCFullYear() % 10000, p, 4)
    }
    function formatUTCZone() {
      return '+0000'
    }
    function formatLiteralPercent() {
      return '%'
    }
    var locale$2;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;
    defaultLocale$1({
      dateTime: '%x, %X',
      date: '%-m/%-d/%Y',
      time: '%-I:%M:%S %p',
      periods: [
        'AM',
        'PM'
      ],
      days: [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday'
      ],
      shortDays: [
        'Sun',
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat'
      ],
      months: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
      ],
      shortMonths: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
      ]
    });
    function defaultLocale$1(definition) {
      locale$2 = formatLocale$1(definition);
      timeFormat = locale$2.format;
      timeParse = locale$2.parse;
      utcFormat = locale$2.utcFormat;
      utcParse = locale$2.utcParse;
      return locale$2
    }
    var isoSpecifier = '%Y-%m-%dT%H:%M:%S.%LZ';
    function formatIsoNative(date) {
      return date.toISOString()
    }
    var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);
    function parseIsoNative(string) {
      var date = new Date(string);
      return isNaN(date) ? null : date
    }
    var parseIso = +new Date('2000-01-01T00:00:00.000Z') ? parseIsoNative : utcParse(isoSpecifier);
    var durationSecond = 1000;
    var durationMinute = durationSecond * 60;
    var durationHour = durationMinute * 60;
    var durationDay = durationHour * 24;
    var durationWeek = durationDay * 7;
    var durationMonth = durationDay * 30;
    var durationYear = durationDay * 365;
    function date$1(t) {
      return new Date(t)
    }
    function number$2(t) {
      return t instanceof Date ? +t : +new Date(+t)
    }
    function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
      var scale = continuous(deinterpolateLinear, interpolateNumber), invert = scale.invert, domain = scale.domain;
      var formatMillisecond = format('.%L'), formatSecond = format(':%S'), formatMinute = format('%I:%M'), formatHour = format('%I %p'), formatDay = format('%a %d'), formatWeek = format('%b %d'), formatMonth = format('%B'), formatYear = format('%Y');
      var tickIntervals = [
        [
          second$$1,
          1,
          durationSecond
        ],
        [
          second$$1,
          5,
          5 * durationSecond
        ],
        [
          second$$1,
          15,
          15 * durationSecond
        ],
        [
          second$$1,
          30,
          30 * durationSecond
        ],
        [
          minute$$1,
          1,
          durationMinute
        ],
        [
          minute$$1,
          5,
          5 * durationMinute
        ],
        [
          minute$$1,
          15,
          15 * durationMinute
        ],
        [
          minute$$1,
          30,
          30 * durationMinute
        ],
        [
          hour$$1,
          1,
          durationHour
        ],
        [
          hour$$1,
          3,
          3 * durationHour
        ],
        [
          hour$$1,
          6,
          6 * durationHour
        ],
        [
          hour$$1,
          12,
          12 * durationHour
        ],
        [
          day$$1,
          1,
          durationDay
        ],
        [
          day$$1,
          2,
          2 * durationDay
        ],
        [
          week,
          1,
          durationWeek
        ],
        [
          month$$1,
          1,
          durationMonth
        ],
        [
          month$$1,
          3,
          3 * durationMonth
        ],
        [
          year$$1,
          1,
          durationYear
        ]
      ];
      function tickFormat(date) {
        return (second$$1(date) < date ? formatMillisecond : minute$$1(date) < date ? formatSecond : hour$$1(date) < date ? formatMinute : day$$1(date) < date ? formatHour : month$$1(date) < date ? week(date) < date ? formatDay : formatWeek : year$$1(date) < date ? formatMonth : formatYear)(date)
      }
      function tickInterval(interval, start, stop, step) {
        if (interval == null) {
          interval = 10
        }
        // If a desired tick count is specified, pick a reasonable tick interval
        // based on the extent of the domain and a rough estimate of tick size.
        // Otherwise, assume interval is already a time interval and use it.
        if (typeof interval === 'number') {
          var target = Math.abs(stop - start) / interval, i = bisector(function (i) {
              return i[2]
            }).right(tickIntervals, target);
          if (i === tickIntervals.length) {
            step = tickStep(start / durationYear, stop / durationYear, interval);
            interval = year$$1
          } else if (i) {
            i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
            step = i[1];
            interval = i[0]
          } else {
            step = tickStep(start, stop, interval);
            interval = millisecond$$1
          }
        }
        return step == null ? interval : interval.every(step)
      }
      scale.invert = function (y) {
        return new Date(invert(y))
      };
      scale.domain = function (_) {
        return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1)
      };
      scale.ticks = function (interval, step) {
        var d = domain(), t0 = d[0], t1 = d[d.length - 1], r = t1 < t0, t;
        if (r) {
          t = t0, t0 = t1, t1 = t
        }
        t = tickInterval(interval, t0, t1, step);
        t = t ? t.range(t0, t1 + 1) : [];
        // inclusive stop
        return r ? t.reverse() : t
      };
      scale.tickFormat = function (count, specifier) {
        return specifier == null ? tickFormat : format(specifier)
      };
      scale.nice = function (interval, step) {
        var d = domain();
        return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale
      };
      scale.copy = function () {
        return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format))
      };
      return scale
    }
    var scaleTime = function () {
      return calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([
        new Date(2000, 0, 1),
        new Date(2000, 0, 2)
      ])
    };
    var colors = function (s) {
      return s.match(/.{6}/g).map(function (x) {
        return '#' + x
      })
    };
    colors('1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf');
    colors('393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6');
    colors('3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9');
    colors('1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5');
    cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));
    var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    var rainbow = cubehelix();
    var xhtml = 'http://www.w3.org/1999/xhtml';
    var namespaces = {
      svg: 'http://www.w3.org/2000/svg',
      xhtml: xhtml,
      xlink: 'http://www.w3.org/1999/xlink',
      xml: 'http://www.w3.org/XML/1998/namespace',
      xmlns: 'http://www.w3.org/2000/xmlns/'
    };
    var namespace = function (name) {
      var prefix = name += '', i = prefix.indexOf(':');
      if (i >= 0 && (prefix = name.slice(0, i)) !== 'xmlns') {
        name = name.slice(i + 1)
      }
      return namespaces.hasOwnProperty(prefix) ? {
        space: namespaces[prefix],
        local: name
      } : name
    };
    function creatorInherit(name) {
      return function () {
        var document = this.ownerDocument, uri = this.namespaceURI;
        return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name)
      }
    }
    function creatorFixed(fullname) {
      return function () {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local)
      }
    }
    var creator = function (name) {
      var fullname = namespace(name);
      return (fullname.local ? creatorFixed : creatorInherit)(fullname)
    };
    var nextId = 0;
    function local() {
      return new Local
    }
    function Local() {
      this._ = '@' + (++nextId).toString(36)
    }
    Local.prototype = local.prototype = {
      constructor: Local,
      get: function (node) {
        var id = this._;
        while (!(id in node)) {
          if (!(node = node.parentNode)) {
            return
          }
        }
        return node[id]
      },
      set: function (node, value) {
        return node[this._] = value
      },
      remove: function (node) {
        return this._ in node && delete node[this._]
      },
      toString: function () {
        return this._
      }
    };
    var matcher = function (selector) {
      return function () {
        return this.matches(selector)
      }
    };
    if (typeof document !== 'undefined') {
      var element = document.documentElement;
      if (!element.matches) {
        var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
        matcher = function (selector) {
          return function () {
            return vendorMatches.call(this, selector)
          }
        }
      }
    }
    var matcher$1 = matcher;
    var filterEvents = {};
    var event = null;
    if (typeof document !== 'undefined') {
      var element$1 = document.documentElement;
      if (!('onmouseenter' in element$1)) {
        filterEvents = {
          mouseenter: 'mouseover',
          mouseleave: 'mouseout'
        }
      }
    }
    function filterContextListener(listener, index, group) {
      listener = contextListener(listener, index, group);
      return function (event) {
        var related = event.relatedTarget;
        if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
          listener.call(this, event)
        }
      }
    }
    function contextListener(listener, index, group) {
      return function (event1) {
        var event0 = event;
        // Events can be reentrant (e.g., focus).
        event = event1;
        try {
          listener.call(this, this.__data__, index, group)
        } finally {
          event = event0
        }
      }
    }
    function parseTypenames(typenames) {
      return typenames.trim().split(/^|\s+/).map(function (t) {
        var name = '', i = t.indexOf('.');
        if (i >= 0) {
          name = t.slice(i + 1), t = t.slice(0, i)
        }
        return {
          type: t,
          name: name
        }
      })
    }
    function onRemove(typename) {
      return function () {
        var this$1 = this;
        var on = this.__on;
        if (!on) {
          return
        }
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this$1.removeEventListener(o.type, o.listener, o.capture)
          } else {
            on[++i] = o
          }
        }
        if (++i) {
          on.length = i
        } else {
          delete this.__on
        }
      }
    }
    function onAdd(typename, value, capture) {
      var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
      return function (d, i, group) {
        var this$1 = this;
        var on = this.__on, o, listener = wrap(value, i, group);
        if (on) {
          for (var j = 0, m = on.length; j < m; ++j) {
            if ((o = on[j]).type === typename.type && o.name === typename.name) {
              this$1.removeEventListener(o.type, o.listener, o.capture);
              this$1.addEventListener(o.type, o.listener = listener, o.capture = capture);
              o.value = value;
              return
            }
          }
        }
        this.addEventListener(typename.type, listener, capture);
        o = {
          type: typename.type,
          name: typename.name,
          value: value,
          listener: listener,
          capture: capture
        };
        if (!on) {
          this.__on = [o]
        } else {
          on.push(o)
        }
      }
    }
    var selection_on = function (typename, value, capture) {
      var this$1 = this;
      var typenames = parseTypenames(typename + ''), i, n = typenames.length, t;
      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) {
          for (var j = 0, m = on.length, o; j < m; ++j) {
            for (i = 0, o = on[j]; i < n; ++i) {
              if ((t = typenames[i]).type === o.type && t.name === o.name) {
                return o.value
              }
            }
          }
        }
        return
      }
      on = value ? onAdd : onRemove;
      if (capture == null) {
        capture = false
      }
      for (i = 0; i < n; ++i) {
        this$1.each(on(typenames[i], value, capture))
      }
      return this
    };
    function customEvent(event1, listener, that, args) {
      var event0 = event;
      event1.sourceEvent = event;
      event = event1;
      try {
        return listener.apply(that, args)
      } finally {
        event = event0
      }
    }
    var sourceEvent = function () {
      var current = event, source;
      while (source = current.sourceEvent) {
        current = source
      }
      return current
    };
    var point$5 = function (node, event) {
      var svg = node.ownerSVGElement || node;
      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = event.clientX, point.y = event.clientY;
        point = point.matrixTransform(node.getScreenCTM().inverse());
        return [
          point.x,
          point.y
        ]
      }
      var rect = node.getBoundingClientRect();
      return [
        event.clientX - rect.left - node.clientLeft,
        event.clientY - rect.top - node.clientTop
      ]
    };
    var mouse = function (node) {
      var event = sourceEvent();
      if (event.changedTouches) {
        event = event.changedTouches[0]
      }
      return point$5(node, event)
    };
    function none$2() {
    }
    var selector = function (selector) {
      return selector == null ? none$2 : function () {
        return this.querySelector(selector)
      }
    };
    var selection_select = function (select) {
      if (typeof select !== 'function') {
        select = selector(select)
      }
      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ('__data__' in node) {
              subnode.__data__ = node.__data__
            }
            subgroup[i] = subnode
          }
        }
      }
      return new Selection(subgroups, this._parents)
    };
    function empty() {
      return []
    }
    var selectorAll = function (selector) {
      return selector == null ? empty : function () {
        return this.querySelectorAll(selector)
      }
    };
    var selection_selectAll = function (select) {
      if (typeof select !== 'function') {
        select = selectorAll(select)
      }
      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node)
          }
        }
      }
      return new Selection(subgroups, parents)
    };
    var selection_filter = function (match) {
      if (typeof match !== 'function') {
        match = matcher$1(match)
      }
      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node)
          }
        }
      }
      return new Selection(subgroups, this._parents)
    };
    var sparse = function (update) {
      return new Array(update.length)
    };
    var selection_enter = function () {
      return new Selection(this._enter || this._groups.map(sparse), this._parents)
    };
    function EnterNode(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum
    }
    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function (child) {
        return this._parent.insertBefore(child, this._next)
      },
      insertBefore: function (child, next) {
        return this._parent.insertBefore(child, next)
      },
      querySelector: function (selector) {
        return this._parent.querySelector(selector)
      },
      querySelectorAll: function (selector) {
        return this._parent.querySelectorAll(selector)
      }
    };
    var constant$4 = function (x) {
      return function () {
        return x
      }
    };
    var keyPrefix = '$';
    // Protect against keys like “__proto__”.
    function bindIndex(parent, group, enter, update, exit, data) {
      var i = 0, node, groupLength = group.length, dataLength = data.length;
      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node
        } else {
          enter[i] = new EnterNode(parent, data[i])
        }
      }
      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node
        }
      }
    }
    function bindKey(parent, group, enter, update, exit, data, key) {
      var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
          if (keyValue in nodeByKeyValue) {
            exit[i] = node
          } else {
            nodeByKeyValue[keyValue] = node
          }
        }
      }
      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = keyPrefix + key.call(parent, data[i], i, data);
        if (node = nodeByKeyValue[keyValue]) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue[keyValue] = null
        } else {
          enter[i] = new EnterNode(parent, data[i])
        }
      }
      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
          exit[i] = node
        }
      }
    }
    var selection_data = function (value, key) {
      if (!value) {
        data = new Array(this.size()), j = -1;
        this.each(function (d) {
          data[++j] = d
        });
        return data
      }
      var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
      if (typeof value !== 'function') {
        value = constant$4(value)
      }
      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) {
              i1 = i0 + 1
            }
            while (!(next = updateGroup[i1]) && ++i1 < dataLength) {
            }
            previous._next = next || null
          }
        }
      }
      update = new Selection(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update
    };
    var selection_exit = function () {
      return new Selection(this._exit || this._groups.map(sparse), this._parents)
    };
    var selection_merge = function (selection) {
      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node
          }
        }
      }
      for (; j < m0; ++j) {
        merges[j] = groups0[j]
      }
      return new Selection(merges, this._parents)
    };
    var selection_order = function () {
      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && next !== node.nextSibling) {
              next.parentNode.insertBefore(node, next)
            }
            next = node
          }
        }
      }
      return this
    };
    var selection_sort = function (compare) {
      if (!compare) {
        compare = ascending$2
      }
      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b
      }
      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node
          }
        }
        sortgroup.sort(compareNode)
      }
      return new Selection(sortgroups, this._parents).order()
    };
    function ascending$2(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
    }
    var selection_call = function () {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this
    };
    var selection_nodes = function () {
      var nodes = new Array(this.size()), i = -1;
      this.each(function () {
        nodes[++i] = this
      });
      return nodes
    };
    var selection_node = function () {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) {
            return node
          }
        }
      }
      return null
    };
    var selection_size = function () {
      var size = 0;
      this.each(function () {
        ++size
      });
      return size
    };
    var selection_empty = function () {
      return !this.node()
    };
    var selection_each = function (callback) {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) {
            callback.call(node, node.__data__, i, group)
          }
        }
      }
      return this
    };
    function attrRemove(name) {
      return function () {
        this.removeAttribute(name)
      }
    }
    function attrRemoveNS(fullname) {
      return function () {
        this.removeAttributeNS(fullname.space, fullname.local)
      }
    }
    function attrConstant(name, value) {
      return function () {
        this.setAttribute(name, value)
      }
    }
    function attrConstantNS(fullname, value) {
      return function () {
        this.setAttributeNS(fullname.space, fullname.local, value)
      }
    }
    function attrFunction(name, value) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          this.removeAttribute(name)
        } else {
          this.setAttribute(name, v)
        }
      }
    }
    function attrFunctionNS(fullname, value) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          this.removeAttributeNS(fullname.space, fullname.local)
        } else {
          this.setAttributeNS(fullname.space, fullname.local, v)
        }
      }
    }
    var selection_attr = function (name, value) {
      var fullname = namespace(name);
      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname)
      }
      return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === 'function' ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value))
    };
    var window$1 = function (node) {
      return node.ownerDocument && node.ownerDocument.defaultView || node.document && node  // node is a Window
|| node.defaultView  // node is a Document
    };
    function styleRemove(name) {
      return function () {
        this.style.removeProperty(name)
      }
    }
    function styleConstant(name, value, priority) {
      return function () {
        this.style.setProperty(name, value, priority)
      }
    }
    function styleFunction(name, value, priority) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          this.style.removeProperty(name)
        } else {
          this.style.setProperty(name, v, priority)
        }
      }
    }
    var selection_style = function (name, value, priority) {
      var node;
      return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === 'function' ? styleFunction : styleConstant)(name, value, priority == null ? '' : priority)) : window$1(node = this.node()).getComputedStyle(node, null).getPropertyValue(name)
    };
    function propertyRemove(name) {
      return function () {
        delete this[name]
      }
    }
    function propertyConstant(name, value) {
      return function () {
        this[name] = value
      }
    }
    function propertyFunction(name, value) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          delete this[name]
        } else {
          this[name] = v
        }
      }
    }
    var selection_property = function (name, value) {
      return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === 'function' ? propertyFunction : propertyConstant)(name, value)) : this.node()[name]
    };
    function classArray(string) {
      return string.trim().split(/^|\s+/)
    }
    function classList(node) {
      return node.classList || new ClassList(node)
    }
    function ClassList(node) {
      this._node = node;
      this._names = classArray(node.getAttribute('class') || '')
    }
    ClassList.prototype = {
      add: function (name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute('class', this._names.join(' '))
        }
      },
      remove: function (name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute('class', this._names.join(' '))
        }
      },
      contains: function (name) {
        return this._names.indexOf(name) >= 0
      }
    };
    function classedAdd(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) {
        list.add(names[i])
      }
    }
    function classedRemove(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) {
        list.remove(names[i])
      }
    }
    function classedTrue(names) {
      return function () {
        classedAdd(this, names)
      }
    }
    function classedFalse(names) {
      return function () {
        classedRemove(this, names)
      }
    }
    function classedFunction(names, value) {
      return function () {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names)
      }
    }
    var selection_classed = function (name, value) {
      var names = classArray(name + '');
      if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while (++i < n) {
          if (!list.contains(names[i])) {
            return false
          }
        }
        return true
      }
      return this.each((typeof value === 'function' ? classedFunction : value ? classedTrue : classedFalse)(names, value))
    };
    function textRemove() {
      this.textContent = ''
    }
    function textConstant(value) {
      return function () {
        this.textContent = value
      }
    }
    function textFunction(value) {
      return function () {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? '' : v
      }
    }
    var selection_text = function (value) {
      return arguments.length ? this.each(value == null ? textRemove : (typeof value === 'function' ? textFunction : textConstant)(value)) : this.node().textContent
    };
    function htmlRemove() {
      this.innerHTML = ''
    }
    function htmlConstant(value) {
      return function () {
        this.innerHTML = value
      }
    }
    function htmlFunction(value) {
      return function () {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? '' : v
      }
    }
    var selection_html = function (value) {
      return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === 'function' ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML
    };
    function raise$1() {
      if (this.nextSibling) {
        this.parentNode.appendChild(this)
      }
    }
    var selection_raise = function () {
      return this.each(raise$1)
    };
    function lower() {
      if (this.previousSibling) {
        this.parentNode.insertBefore(this, this.parentNode.firstChild)
      }
    }
    var selection_lower = function () {
      return this.each(lower)
    };
    var selection_append = function (name) {
      var create = typeof name === 'function' ? name : creator(name);
      return this.select(function () {
        return this.appendChild(create.apply(this, arguments))
      })
    };
    function constantNull() {
      return null
    }
    var selection_insert = function (name, before) {
      var create = typeof name === 'function' ? name : creator(name), select = before == null ? constantNull : typeof before === 'function' ? before : selector(before);
      return this.select(function () {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null)
      })
    };
    function remove() {
      var parent = this.parentNode;
      if (parent) {
        parent.removeChild(this)
      }
    }
    var selection_remove = function () {
      return this.each(remove)
    };
    var selection_datum = function (value) {
      return arguments.length ? this.property('__data__', value) : this.node().__data__
    };
    function dispatchEvent(node, type, params) {
      var window = window$1(node), event = window.CustomEvent;
      if (event) {
        event = new event(type, params)
      } else {
        event = window.document.createEvent('Event');
        if (params) {
          event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail
        } else {
          event.initEvent(type, false, false)
        }
      }
      node.dispatchEvent(event)
    }
    function dispatchConstant(type, params) {
      return function () {
        return dispatchEvent(this, type, params)
      }
    }
    function dispatchFunction(type, params) {
      return function () {
        return dispatchEvent(this, type, params.apply(this, arguments))
      }
    }
    var selection_dispatch = function (type, params) {
      return this.each((typeof params === 'function' ? dispatchFunction : dispatchConstant)(type, params))
    };
    var root = [null];
    function Selection(groups, parents) {
      this._groups = groups;
      this._parents = parents
    }
    function selection() {
      return new Selection([[document.documentElement]], root)
    }
    Selection.prototype = selection.prototype = {
      constructor: Selection,
      select: selection_select,
      selectAll: selection_selectAll,
      filter: selection_filter,
      data: selection_data,
      enter: selection_enter,
      exit: selection_exit,
      merge: selection_merge,
      order: selection_order,
      sort: selection_sort,
      call: selection_call,
      nodes: selection_nodes,
      node: selection_node,
      size: selection_size,
      empty: selection_empty,
      each: selection_each,
      attr: selection_attr,
      style: selection_style,
      property: selection_property,
      classed: selection_classed,
      text: selection_text,
      html: selection_html,
      raise: selection_raise,
      lower: selection_lower,
      append: selection_append,
      insert: selection_insert,
      remove: selection_remove,
      datum: selection_datum,
      on: selection_on,
      dispatch: selection_dispatch
    };
    var select = function (selector) {
      return typeof selector === 'string' ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root)
    };
    var selectAll = function (selector) {
      return typeof selector === 'string' ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector == null ? [] : selector], root)
    };
    var touch = function (node, touches, identifier) {
      if (arguments.length < 3) {
        identifier = touches, touches = sourceEvent().changedTouches
      }
      for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
        if ((touch = touches[i]).identifier === identifier) {
          return point$5(node, touch)
        }
      }
      return null
    };
    var touches = function (node, touches) {
      if (touches == null) {
        touches = sourceEvent().touches
      }
      for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
        points[i] = point$5(node, touches[i])
      }
      return points
    };
    var index$2 = Object.freeze({
      creator: creator,
      local: local,
      matcher: matcher$1,
      mouse: mouse,
      namespace: namespace,
      namespaces: namespaces,
      select: select,
      selectAll: selectAll,
      selection: selection,
      selector: selector,
      selectorAll: selectorAll,
      touch: touch,
      touches: touches,
      window: window$1,
      get event() {
        return event
      },
      customEvent: customEvent
    });
    var noop$1 = {
      value: function () {
      }
    };
    function dispatch() {
      var arguments$1 = arguments;
      for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments$1[i] + '') || t in _) {
          throw new Error('illegal type: ' + t)
        }
        _[t] = []
      }
      return new Dispatch(_)
    }
    function Dispatch(_) {
      this._ = _
    }
    function parseTypenames$1(typenames, types) {
      return typenames.trim().split(/^|\s+/).map(function (t) {
        var name = '', i = t.indexOf('.');
        if (i >= 0) {
          name = t.slice(i + 1), t = t.slice(0, i)
        }
        if (t && !types.hasOwnProperty(t)) {
          throw new Error('unknown type: ' + t)
        }
        return {
          type: t,
          name: name
        }
      })
    }
    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function (typename, callback) {
        var _ = this._, T = parseTypenames$1(typename + '', _), t, i = -1, n = T.length;
        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
          while (++i < n) {
            if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) {
              return t
            }
          }
          return
        }
        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== 'function') {
          throw new Error('invalid callback: ' + callback)
        }
        while (++i < n) {
          if (t = (typename = T[i]).type) {
            _[t] = set$3(_[t], typename.name, callback)
          } else if (callback == null) {
            for (t in _) {
              _[t] = set$3(_[t], typename.name, null)
            }
          }
        }
        return this
      },
      copy: function () {
        var copy = {}, _ = this._;
        for (var t in _) {
          copy[t] = _[t].slice()
        }
        return new Dispatch(copy)
      },
      call: function (type, that) {
        var arguments$1 = arguments;
        if ((n = arguments.length - 2) > 0) {
          for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
            args[i] = arguments$1[i + 2]
          }
        }
        if (!this._.hasOwnProperty(type)) {
          throw new Error('unknown type: ' + type)
        }
        for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
          t[i].value.apply(that, args)
        }
      },
      apply: function (type, that, args) {
        if (!this._.hasOwnProperty(type)) {
          throw new Error('unknown type: ' + type)
        }
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
          t[i].value.apply(that, args)
        }
      }
    };
    function get$1(type, name) {
      for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
          return c.value
        }
      }
    }
    function set$3(type, name, callback) {
      for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
          type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
          break
        }
      }
      if (callback != null) {
        type.push({
          name: name,
          value: callback
        })
      }
      return type
    }
    var frame = 0;
    var timeout = 0;
    var interval = 0;
    var pokeDelay = 1000;
    var taskHead;
    var taskTail;
    var clockLast = 0;
    var clockNow = 0;
    var clockSkew = 0;
    var clock = typeof performance === 'object' && performance.now ? performance : Date;
    var setFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : function (f) {
      setTimeout(f, 17)
    };
    function now() {
      return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew)
    }
    function clearNow() {
      clockNow = 0
    }
    function Timer() {
      this._call = this._time = this._next = null
    }
    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function (callback, delay, time) {
        if (typeof callback !== 'function') {
          throw new TypeError('callback is not a function')
        }
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) {
            taskTail._next = this
          } else {
            taskHead = this
          }
          taskTail = this
        }
        this._call = callback;
        this._time = time;
        sleep()
      },
      stop: function () {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep()
        }
      }
    };
    function timer(callback, delay, time) {
      var t = new Timer;
      t.restart(callback, delay, time);
      return t
    }
    function timerFlush() {
      now();
      // Get the current time, if not already set.
      ++frame;
      // Pretend we’ve set an alarm, if we haven’t already.
      var t = taskHead, e;
      while (t) {
        if ((e = clockNow - t._time) >= 0) {
          t._call.call(null, e)
        }
        t = t._next
      }
      --frame
    }
    function wake() {
      clockNow = (clockLast = clock.now()) + clockSkew;
      frame = timeout = 0;
      try {
        timerFlush()
      } finally {
        frame = 0;
        nap();
        clockNow = 0
      }
    }
    function poke() {
      var now = clock.now(), delay = now - clockLast;
      if (delay > pokeDelay) {
        clockSkew -= delay, clockLast = now
      }
    }
    function nap() {
      var t0, t1 = taskHead, t2, time = Infinity;
      while (t1) {
        if (t1._call) {
          if (time > t1._time) {
            time = t1._time
          }
          t0 = t1, t1 = t1._next
        } else {
          t2 = t1._next, t1._next = null;
          t1 = t0 ? t0._next = t2 : taskHead = t2
        }
      }
      taskTail = t0;
      sleep(time)
    }
    function sleep(time) {
      if (frame) {
        return
      }
      // Soonest alarm already set, or will be.
      if (timeout) {
        timeout = clearTimeout(timeout)
      }
      var delay = time - clockNow;
      if (delay > 24) {
        if (time < Infinity) {
          timeout = setTimeout(wake, delay)
        }
        if (interval) {
          interval = clearInterval(interval)
        }
      } else {
        if (!interval) {
          clockLast = clockNow, interval = setInterval(poke, pokeDelay)
        }
        frame = 1, setFrame(wake)
      }
    }
    var timeout$1 = function (callback, delay, time) {
      var t = new Timer;
      delay = delay == null ? 0 : +delay;
      t.restart(function (elapsed) {
        t.stop();
        callback(elapsed + delay)
      }, delay, time);
      return t
    };
    var emptyOn = dispatch('start', 'end', 'interrupt');
    var emptyTween = [];
    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var RUNNING = 4;
    var ENDING = 5;
    var ENDED = 6;
    var schedule = function (node, name, id, index, group, timing) {
      var schedules = node.__transition;
      if (!schedules) {
        node.__transition = {}
      } else if (id in schedules) {
        return
      }
      create(node, id, {
        name: name,
        index: index,
        // For context during callback.
        group: group,
        // For context during callback.
        on: emptyOn,
        tween: emptyTween,
        time: timing.time,
        delay: timing.delay,
        duration: timing.duration,
        ease: timing.ease,
        timer: null,
        state: CREATED
      })
    };
    function init(node, id) {
      var schedule = node.__transition;
      if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) {
        throw new Error('too late')
      }
      return schedule
    }
    function set$2(node, id) {
      var schedule = node.__transition;
      if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) {
        throw new Error('too late')
      }
      return schedule
    }
    function get(node, id) {
      var schedule = node.__transition;
      if (!schedule || !(schedule = schedule[id])) {
        throw new Error('too late')
      }
      return schedule
    }
    function create(node, id, self) {
      var schedules = node.__transition, tween;
      // Initialize the self timer when the transition is created.
      // Note the actual delay is not known until the first callback!
      schedules[id] = self;
      self.timer = timer(schedule, 0, self.time);
      function schedule(elapsed) {
        self.state = SCHEDULED;
        self.timer.restart(start, self.delay, self.time);
        // If the elapsed delay is less than our first sleep, start immediately.
        if (self.delay <= elapsed) {
          start(elapsed - self.delay)
        }
      }
      function start(elapsed) {
        var i, j, n, o;
        // If the state is not SCHEDULED, then we previously errored on start.
        if (self.state !== SCHEDULED) {
          return stop()
        }
        for (i in schedules) {
          o = schedules[i];
          if (o.name !== self.name) {
            continue
          }
          // While this element already has a starting transition during this frame,
          // defer starting an interrupting transition until that transition has a
          // chance to tick (and possibly end); see d3/d3-transition#54!
          if (o.state === STARTED) {
            return timeout$1(start)
          }
          // Interrupt the active transition, if any.
          // Dispatch the interrupt event.
          if (o.state === RUNNING) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call('interrupt', node, node.__data__, o.index, o.group);
            delete schedules[i]
          }  // Cancel any pre-empted transitions. No interrupt event is dispatched
             // because the cancelled transitions never started. Note that this also
             // removes this transition from the pending list!
          else if (+i < id) {
            o.state = ENDED;
            o.timer.stop();
            delete schedules[i]
          }
        }
        // Defer the first tick to end of the current frame; see d3/d3#1576.
        // Note the transition may be canceled after start and before the first tick!
        // Note this must be scheduled before the start event; see d3/d3-transition#16!
        // Assuming this is successful, subsequent callbacks go straight to tick.
        timeout$1(function () {
          if (self.state === STARTED) {
            self.state = RUNNING;
            self.timer.restart(tick, self.delay, self.time);
            tick(elapsed)
          }
        });
        // Dispatch the start event.
        // Note this must be done before the tween are initialized.
        self.state = STARTING;
        self.on.call('start', node, node.__data__, self.index, self.group);
        if (self.state !== STARTING) {
          return
        }
        // interrupted
        self.state = STARTED;
        // Initialize the tween, deleting null tween.
        tween = new Array(n = self.tween.length);
        for (i = 0, j = -1; i < n; ++i) {
          if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
            tween[++j] = o
          }
        }
        tween.length = j + 1
      }
      function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
        while (++i < n) {
          tween[i].call(null, t)
        }
        // Dispatch the end event.
        if (self.state === ENDING) {
          self.on.call('end', node, node.__data__, self.index, self.group);
          stop()
        }
      }
      function stop() {
        self.state = ENDED;
        self.timer.stop();
        delete schedules[id];
        for (var i in schedules) {
          return
        }
        // eslint-disable-line no-unused-vars
        delete node.__transition
      }
    }
    var interrupt = function (node, name) {
      var schedules = node.__transition, schedule, active, empty = true, i;
      if (!schedules) {
        return
      }
      name = name == null ? null : name + '';
      for (i in schedules) {
        if ((schedule = schedules[i]).name !== name) {
          empty = false;
          continue
        }
        active = schedule.state > STARTING && schedule.state < ENDING;
        schedule.state = ENDED;
        schedule.timer.stop();
        if (active) {
          schedule.on.call('interrupt', node, node.__data__, schedule.index, schedule.group)
        }
        delete schedules[i]
      }
      if (empty) {
        delete node.__transition
      }
    };
    var selection_interrupt = function (name) {
      return this.each(function () {
        interrupt(this, name)
      })
    };
    function tweenRemove(id, name) {
      var tween0, tween1;
      return function () {
        var schedule = set$2(this, id), tween = schedule.tween;
        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = tween0 = tween;
          for (var i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1 = tween1.slice();
              tween1.splice(i, 1);
              break
            }
          }
        }
        schedule.tween = tween1
      }
    }
    function tweenFunction(id, name, value) {
      var tween0, tween1;
      if (typeof value !== 'function') {
        throw new Error
      }
      return function () {
        var schedule = set$2(this, id), tween = schedule.tween;
        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = (tween0 = tween).slice();
          for (var t = {
                name: name,
                value: value
              }, i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1[i] = t;
              break
            }
          }
          if (i === n) {
            tween1.push(t)
          }
        }
        schedule.tween = tween1
      }
    }
    var transition_tween = function (name, value) {
      var id = this._id;
      name += '';
      if (arguments.length < 2) {
        var tween = get(this.node(), id).tween;
        for (var i = 0, n = tween.length, t; i < n; ++i) {
          if ((t = tween[i]).name === name) {
            return t.value
          }
        }
        return null
      }
      return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value))
    };
    function tweenValue(transition, name, value) {
      var id = transition._id;
      transition.each(function () {
        var schedule = set$2(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments)
      });
      return function (node) {
        return get(node, id).value[name]
      }
    }
    var interpolate$$1 = function (a, b) {
      var c;
      return (typeof b === 'number' ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b)
    };
    function attrRemove$1(name) {
      return function () {
        this.removeAttribute(name)
      }
    }
    function attrRemoveNS$1(fullname) {
      return function () {
        this.removeAttributeNS(fullname.space, fullname.local)
      }
    }
    function attrConstant$1(name, interpolate$$1, value1) {
      var value00, interpolate0;
      return function () {
        var value0 = this.getAttribute(name);
        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1)
      }
    }
    function attrConstantNS$1(fullname, interpolate$$1, value1) {
      var value00, interpolate0;
      return function () {
        var value0 = this.getAttributeNS(fullname.space, fullname.local);
        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1)
      }
    }
    function attrFunction$1(name, interpolate$$1, value) {
      var value00, value10, interpolate0;
      return function () {
        var value0, value1 = value(this);
        if (value1 == null) {
          return void this.removeAttribute(name)
        }
        value0 = this.getAttribute(name);
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1)
      }
    }
    function attrFunctionNS$1(fullname, interpolate$$1, value) {
      var value00, value10, interpolate0;
      return function () {
        var value0, value1 = value(this);
        if (value1 == null) {
          return void this.removeAttributeNS(fullname.space, fullname.local)
        }
        value0 = this.getAttributeNS(fullname.space, fullname.local);
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1)
      }
    }
    var transition_attr = function (name, value) {
      var fullname = namespace(name), i = fullname === 'transform' ? interpolateTransformSvg : interpolate$$1;
      return this.attrTween(name, typeof value === 'function' ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, 'attr.' + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value))
    };
    function attrTweenNS(fullname, value) {
      function tween() {
        var node = this, i = value.apply(node, arguments);
        return i && function (t) {
          node.setAttributeNS(fullname.space, fullname.local, i(t))
        }
      }
      tween._value = value;
      return tween
    }
    function attrTween(name, value) {
      function tween() {
        var node = this, i = value.apply(node, arguments);
        return i && function (t) {
          node.setAttribute(name, i(t))
        }
      }
      tween._value = value;
      return tween
    }
    var transition_attrTween = function (name, value) {
      var key = 'attr.' + name;
      if (arguments.length < 2) {
        return (key = this.tween(key)) && key._value
      }
      if (value == null) {
        return this.tween(key, null)
      }
      if (typeof value !== 'function') {
        throw new Error
      }
      var fullname = namespace(name);
      return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value))
    };
    function delayFunction(id, value) {
      return function () {
        init(this, id).delay = +value.apply(this, arguments)
      }
    }
    function delayConstant(id, value) {
      return value = +value, function () {
        init(this, id).delay = value
      }
    }
    var transition_delay = function (value) {
      var id = this._id;
      return arguments.length ? this.each((typeof value === 'function' ? delayFunction : delayConstant)(id, value)) : get(this.node(), id).delay
    };
    function durationFunction(id, value) {
      return function () {
        set$2(this, id).duration = +value.apply(this, arguments)
      }
    }
    function durationConstant(id, value) {
      return value = +value, function () {
        set$2(this, id).duration = value
      }
    }
    var transition_duration = function (value) {
      var id = this._id;
      return arguments.length ? this.each((typeof value === 'function' ? durationFunction : durationConstant)(id, value)) : get(this.node(), id).duration
    };
    function easeConstant(id, value) {
      if (typeof value !== 'function') {
        throw new Error
      }
      return function () {
        set$2(this, id).ease = value
      }
    }
    var transition_ease = function (value) {
      var id = this._id;
      return arguments.length ? this.each(easeConstant(id, value)) : get(this.node(), id).ease
    };
    var transition_filter = function (match) {
      if (typeof match !== 'function') {
        match = matcher$1(match)
      }
      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node)
          }
        }
      }
      return new Transition(subgroups, this._parents, this._name, this._id)
    };
    var transition_merge = function (transition) {
      if (transition._id !== this._id) {
        throw new Error
      }
      for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node
          }
        }
      }
      for (; j < m0; ++j) {
        merges[j] = groups0[j]
      }
      return new Transition(merges, this._parents, this._name, this._id)
    };
    function start(name) {
      return (name + '').trim().split(/^|\s+/).every(function (t) {
        var i = t.indexOf('.');
        if (i >= 0) {
          t = t.slice(0, i)
        }
        return !t || t === 'start'
      })
    }
    function onFunction(id, name, listener) {
      var on0, on1, sit = start(name) ? init : set$2;
      return function () {
        var schedule = sit(this, id), on = schedule.on;
        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) {
          (on1 = (on0 = on).copy()).on(name, listener)
        }
        schedule.on = on1
      }
    }
    var transition_on = function (name, listener) {
      var id = this._id;
      return arguments.length < 2 ? get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener))
    };
    function removeFunction(id) {
      return function () {
        var this$1 = this;
        var parent = this.parentNode;
        for (var i in this$1.__transition) {
          if (+i !== id) {
            return
          }
        }
        if (parent) {
          parent.removeChild(this)
        }
      }
    }
    var transition_remove = function () {
      return this.on('end.remove', removeFunction(this._id))
    };
    var transition_select = function (select$$1) {
      var name = this._name, id = this._id;
      if (typeof select$$1 !== 'function') {
        select$$1 = selector(select$$1)
      }
      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
            if ('__data__' in node) {
              subnode.__data__ = node.__data__
            }
            subgroup[i] = subnode;
            schedule(subgroup[i], name, id, i, subgroup, get(node, id))
          }
        }
      }
      return new Transition(subgroups, this._parents, name, id)
    };
    var transition_selectAll = function (select$$1) {
      var name = this._name, id = this._id;
      if (typeof select$$1 !== 'function') {
        select$$1 = selectorAll(select$$1)
      }
      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
              if (child = children[k]) {
                schedule(child, name, id, k, children, inherit)
              }
            }
            subgroups.push(children);
            parents.push(node)
          }
        }
      }
      return new Transition(subgroups, parents, name, id)
    };
    var Selection$1 = selection.prototype.constructor;
    var transition_selection = function () {
      return new Selection$1(this._groups, this._parents)
    };
    function styleRemove$1(name, interpolate$$2) {
      var value00, value10, interpolate0;
      return function () {
        var style = window$1(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$2(value00 = value0, value10 = value1)
      }
    }
    function styleRemoveEnd(name) {
      return function () {
        this.style.removeProperty(name)
      }
    }
    function styleConstant$1(name, interpolate$$2, value1) {
      var value00, interpolate0;
      return function () {
        var value0 = window$1(this).getComputedStyle(this, null).getPropertyValue(name);
        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$2(value00 = value0, value1)
      }
    }
    function styleFunction$1(name, interpolate$$2, value) {
      var value00, value10, interpolate0;
      return function () {
        var style = window$1(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = value(this);
        if (value1 == null) {
          value1 = (this.style.removeProperty(name), style.getPropertyValue(name))
        }
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$2(value00 = value0, value10 = value1)
      }
    }
    var transition_style = function (name, value, priority) {
      var i = (name += '') === 'transform' ? interpolateTransformCss : interpolate$$1;
      return value == null ? this.styleTween(name, styleRemove$1(name, i)).on('end.style.' + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === 'function' ? styleFunction$1(name, i, tweenValue(this, 'style.' + name, value)) : styleConstant$1(name, i, value), priority)
    };
    function styleTween(name, value, priority) {
      function tween() {
        var node = this, i = value.apply(node, arguments);
        return i && function (t) {
          node.style.setProperty(name, i(t), priority)
        }
      }
      tween._value = value;
      return tween
    }
    var transition_styleTween = function (name, value, priority) {
      var key = 'style.' + (name += '');
      if (arguments.length < 2) {
        return (key = this.tween(key)) && key._value
      }
      if (value == null) {
        return this.tween(key, null)
      }
      if (typeof value !== 'function') {
        throw new Error
      }
      return this.tween(key, styleTween(name, value, priority == null ? '' : priority))
    };
    function textConstant$1(value) {
      return function () {
        this.textContent = value
      }
    }
    function textFunction$1(value) {
      return function () {
        var value1 = value(this);
        this.textContent = value1 == null ? '' : value1
      }
    }
    var transition_text = function (value) {
      return this.tween('text', typeof value === 'function' ? textFunction$1(tweenValue(this, 'text', value)) : textConstant$1(value == null ? '' : value + ''))
    };
    var transition_transition = function () {
      var name = this._name, id0 = this._id, id1 = newId();
      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            var inherit = get(node, id0);
            schedule(node, name, id1, i, group, {
              time: inherit.time + inherit.delay + inherit.duration,
              delay: 0,
              duration: inherit.duration,
              ease: inherit.ease
            })
          }
        }
      }
      return new Transition(groups, this._parents, name, id1)
    };
    var id = 0;
    function Transition(groups, parents, name, id) {
      this._groups = groups;
      this._parents = parents;
      this._name = name;
      this._id = id
    }
    function transition(name) {
      return selection().transition(name)
    }
    function newId() {
      return ++id
    }
    var selection_prototype = selection.prototype;
    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: transition_select,
      selectAll: transition_selectAll,
      filter: transition_filter,
      merge: transition_merge,
      selection: transition_selection,
      transition: transition_transition,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: transition_on,
      attr: transition_attr,
      attrTween: transition_attrTween,
      style: transition_style,
      styleTween: transition_styleTween,
      text: transition_text,
      remove: transition_remove,
      tween: transition_tween,
      delay: transition_delay,
      duration: transition_duration,
      ease: transition_ease
    };
    function cubicInOut(t) {
      return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2
    }
    var exponent$1 = 3;
    var polyIn = function custom(e) {
      e = +e;
      function polyIn(t) {
        return Math.pow(t, e)
      }
      polyIn.exponent = custom;
      return polyIn
    }(exponent$1);
    var polyOut = function custom(e) {
      e = +e;
      function polyOut(t) {
        return 1 - Math.pow(1 - t, e)
      }
      polyOut.exponent = custom;
      return polyOut
    }(exponent$1);
    var polyInOut = function custom(e) {
      e = +e;
      function polyInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2
      }
      polyInOut.exponent = custom;
      return polyInOut
    }(exponent$1);
    var overshoot = 1.70158;
    var backIn = function custom(s) {
      s = +s;
      function backIn(t) {
        return t * t * ((s + 1) * t - s)
      }
      backIn.overshoot = custom;
      return backIn
    }(overshoot);
    var backOut = function custom(s) {
      s = +s;
      function backOut(t) {
        return --t * t * ((s + 1) * t + s) + 1
      }
      backOut.overshoot = custom;
      return backOut
    }(overshoot);
    var backInOut = function custom(s) {
      s = +s;
      function backInOut(t) {
        return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2
      }
      backInOut.overshoot = custom;
      return backInOut
    }(overshoot);
    var tau$2 = 2 * Math.PI;
    var amplitude = 1;
    var period = 0.3;
    var elasticIn = function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$2);
      function elasticIn(t) {
        return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p)
      }
      elasticIn.amplitude = function (a) {
        return custom(a, p * tau$2)
      };
      elasticIn.period = function (p) {
        return custom(a, p)
      };
      return elasticIn
    }(amplitude, period);
    var elasticOut = function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$2);
      function elasticOut(t) {
        return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p)
      }
      elasticOut.amplitude = function (a) {
        return custom(a, p * tau$2)
      };
      elasticOut.period = function (p) {
        return custom(a, p)
      };
      return elasticOut
    }(amplitude, period);
    var elasticInOut = function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$2);
      function elasticInOut(t) {
        return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2
      }
      elasticInOut.amplitude = function (a) {
        return custom(a, p * tau$2)
      };
      elasticInOut.period = function (p) {
        return custom(a, p)
      };
      return elasticInOut
    }(amplitude, period);
    var defaultTiming = {
      time: null,
      // Set on use.
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };
    function inherit(node, id) {
      var timing;
      while (!(timing = node.__transition) || !(timing = timing[id])) {
        if (!(node = node.parentNode)) {
          return defaultTiming.time = now(), defaultTiming
        }
      }
      return timing
    }
    var selection_transition = function (name) {
      var id, timing;
      if (name instanceof Transition) {
        id = name._id, name = name._name
      } else {
        id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + ''
      }
      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            schedule(node, name, id, i, group, timing || inherit(node, id))
          }
        }
      }
      return new Transition(groups, this._parents, name, id)
    };
    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;
    var xhtml$1 = 'http://www.w3.org/1999/xhtml';
    var namespaces$1 = {
      svg: 'http://www.w3.org/2000/svg',
      xhtml: xhtml$1,
      xlink: 'http://www.w3.org/1999/xlink',
      xml: 'http://www.w3.org/XML/1998/namespace',
      xmlns: 'http://www.w3.org/2000/xmlns/'
    };
    var namespace$1 = function (name) {
      var prefix = name += '', i = prefix.indexOf(':');
      if (i >= 0 && (prefix = name.slice(0, i)) !== 'xmlns') {
        name = name.slice(i + 1)
      }
      return namespaces$1.hasOwnProperty(prefix) ? {
        space: namespaces$1[prefix],
        local: name
      } : name
    };
    function creatorInherit$1(name) {
      return function () {
        var document = this.ownerDocument, uri = this.namespaceURI;
        return uri === xhtml$1 && document.documentElement.namespaceURI === xhtml$1 ? document.createElement(name) : document.createElementNS(uri, name)
      }
    }
    function creatorFixed$1(fullname) {
      return function () {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local)
      }
    }
    var creator$1 = function (name) {
      var fullname = namespace$1(name);
      return (fullname.local ? creatorFixed$1 : creatorInherit$1)(fullname)
    };
    var matcher$2 = function (selector) {
      return function () {
        return this.matches(selector)
      }
    };
    if (typeof document !== 'undefined') {
      var element$2 = document.documentElement;
      if (!element$2.matches) {
        var vendorMatches$1 = element$2.webkitMatchesSelector || element$2.msMatchesSelector || element$2.mozMatchesSelector || element$2.oMatchesSelector;
        matcher$2 = function (selector) {
          return function () {
            return vendorMatches$1.call(this, selector)
          }
        }
      }
    }
    var matcher$3 = matcher$2;
    var filterEvents$1 = {};
    var event$1 = null;
    if (typeof document !== 'undefined') {
      var element$3 = document.documentElement;
      if (!('onmouseenter' in element$3)) {
        filterEvents$1 = {
          mouseenter: 'mouseover',
          mouseleave: 'mouseout'
        }
      }
    }
    function filterContextListener$1(listener, index, group) {
      listener = contextListener$1(listener, index, group);
      return function (event) {
        var related = event.relatedTarget;
        if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
          listener.call(this, event)
        }
      }
    }
    function contextListener$1(listener, index, group) {
      return function (event1) {
        var event0 = event$1;
        // Events can be reentrant (e.g., focus).
        event$1 = event1;
        try {
          listener.call(this, this.__data__, index, group)
        } finally {
          event$1 = event0
        }
      }
    }
    function parseTypenames$2(typenames) {
      return typenames.trim().split(/^|\s+/).map(function (t) {
        var name = '', i = t.indexOf('.');
        if (i >= 0) {
          name = t.slice(i + 1), t = t.slice(0, i)
        }
        return {
          type: t,
          name: name
        }
      })
    }
    function onRemove$1(typename) {
      return function () {
        var this$1 = this;
        var on = this.__on;
        if (!on) {
          return
        }
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this$1.removeEventListener(o.type, o.listener, o.capture)
          } else {
            on[++i] = o
          }
        }
        if (++i) {
          on.length = i
        } else {
          delete this.__on
        }
      }
    }
    function onAdd$1(typename, value, capture) {
      var wrap = filterEvents$1.hasOwnProperty(typename.type) ? filterContextListener$1 : contextListener$1;
      return function (d, i, group) {
        var this$1 = this;
        var on = this.__on, o, listener = wrap(value, i, group);
        if (on) {
          for (var j = 0, m = on.length; j < m; ++j) {
            if ((o = on[j]).type === typename.type && o.name === typename.name) {
              this$1.removeEventListener(o.type, o.listener, o.capture);
              this$1.addEventListener(o.type, o.listener = listener, o.capture = capture);
              o.value = value;
              return
            }
          }
        }
        this.addEventListener(typename.type, listener, capture);
        o = {
          type: typename.type,
          name: typename.name,
          value: value,
          listener: listener,
          capture: capture
        };
        if (!on) {
          this.__on = [o]
        } else {
          on.push(o)
        }
      }
    }
    var selection_on$1 = function (typename, value, capture) {
      var this$1 = this;
      var typenames = parseTypenames$2(typename + ''), i, n = typenames.length, t;
      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) {
          for (var j = 0, m = on.length, o; j < m; ++j) {
            for (i = 0, o = on[j]; i < n; ++i) {
              if ((t = typenames[i]).type === o.type && t.name === o.name) {
                return o.value
              }
            }
          }
        }
        return
      }
      on = value ? onAdd$1 : onRemove$1;
      if (capture == null) {
        capture = false
      }
      for (i = 0; i < n; ++i) {
        this$1.each(on(typenames[i], value, capture))
      }
      return this
    };
    function none$3() {
    }
    var selector$1 = function (selector) {
      return selector == null ? none$3 : function () {
        return this.querySelector(selector)
      }
    };
    var selection_select$1 = function (select) {
      if (typeof select !== 'function') {
        select = selector$1(select)
      }
      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ('__data__' in node) {
              subnode.__data__ = node.__data__
            }
            subgroup[i] = subnode
          }
        }
      }
      return new Selection$2(subgroups, this._parents)
    };
    function empty$1() {
      return []
    }
    var selectorAll$1 = function (selector) {
      return selector == null ? empty$1 : function () {
        return this.querySelectorAll(selector)
      }
    };
    var selection_selectAll$1 = function (select) {
      if (typeof select !== 'function') {
        select = selectorAll$1(select)
      }
      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node)
          }
        }
      }
      return new Selection$2(subgroups, parents)
    };
    var selection_filter$1 = function (match) {
      if (typeof match !== 'function') {
        match = matcher$3(match)
      }
      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node)
          }
        }
      }
      return new Selection$2(subgroups, this._parents)
    };
    var sparse$1 = function (update) {
      return new Array(update.length)
    };
    var selection_enter$1 = function () {
      return new Selection$2(this._enter || this._groups.map(sparse$1), this._parents)
    };
    function EnterNode$1(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum
    }
    EnterNode$1.prototype = {
      constructor: EnterNode$1,
      appendChild: function (child) {
        return this._parent.insertBefore(child, this._next)
      },
      insertBefore: function (child, next) {
        return this._parent.insertBefore(child, next)
      },
      querySelector: function (selector) {
        return this._parent.querySelector(selector)
      },
      querySelectorAll: function (selector) {
        return this._parent.querySelectorAll(selector)
      }
    };
    var constant$5 = function (x) {
      return function () {
        return x
      }
    };
    var keyPrefix$1 = '$';
    // Protect against keys like “__proto__”.
    function bindIndex$1(parent, group, enter, update, exit, data) {
      var i = 0, node, groupLength = group.length, dataLength = data.length;
      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node
        } else {
          enter[i] = new EnterNode$1(parent, data[i])
        }
      }
      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node
        }
      }
    }
    function bindKey$1(parent, group, enter, update, exit, data, key) {
      var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = keyPrefix$1 + key.call(node, node.__data__, i, group);
          if (keyValue in nodeByKeyValue) {
            exit[i] = node
          } else {
            nodeByKeyValue[keyValue] = node
          }
        }
      }
      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = keyPrefix$1 + key.call(parent, data[i], i, data);
        if (node = nodeByKeyValue[keyValue]) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue[keyValue] = null
        } else {
          enter[i] = new EnterNode$1(parent, data[i])
        }
      }
      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
          exit[i] = node
        }
      }
    }
    var selection_data$1 = function (value, key) {
      if (!value) {
        data = new Array(this.size()), j = -1;
        this.each(function (d) {
          data[++j] = d
        });
        return data
      }
      var bind = key ? bindKey$1 : bindIndex$1, parents = this._parents, groups = this._groups;
      if (typeof value !== 'function') {
        value = constant$5(value)
      }
      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) {
              i1 = i0 + 1
            }
            while (!(next = updateGroup[i1]) && ++i1 < dataLength) {
            }
            previous._next = next || null
          }
        }
      }
      update = new Selection$2(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update
    };
    var selection_exit$1 = function () {
      return new Selection$2(this._exit || this._groups.map(sparse$1), this._parents)
    };
    var selection_merge$1 = function (selection) {
      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node
          }
        }
      }
      for (; j < m0; ++j) {
        merges[j] = groups0[j]
      }
      return new Selection$2(merges, this._parents)
    };
    var selection_order$1 = function () {
      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && next !== node.nextSibling) {
              next.parentNode.insertBefore(node, next)
            }
            next = node
          }
        }
      }
      return this
    };
    var selection_sort$1 = function (compare) {
      if (!compare) {
        compare = ascending$3
      }
      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b
      }
      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node
          }
        }
        sortgroup.sort(compareNode)
      }
      return new Selection$2(sortgroups, this._parents).order()
    };
    function ascending$3(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
    }
    var selection_call$1 = function () {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this
    };
    var selection_nodes$1 = function () {
      var nodes = new Array(this.size()), i = -1;
      this.each(function () {
        nodes[++i] = this
      });
      return nodes
    };
    var selection_node$1 = function () {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) {
            return node
          }
        }
      }
      return null
    };
    var selection_size$1 = function () {
      var size = 0;
      this.each(function () {
        ++size
      });
      return size
    };
    var selection_empty$1 = function () {
      return !this.node()
    };
    var selection_each$1 = function (callback) {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) {
            callback.call(node, node.__data__, i, group)
          }
        }
      }
      return this
    };
    function attrRemove$2(name) {
      return function () {
        this.removeAttribute(name)
      }
    }
    function attrRemoveNS$2(fullname) {
      return function () {
        this.removeAttributeNS(fullname.space, fullname.local)
      }
    }
    function attrConstant$2(name, value) {
      return function () {
        this.setAttribute(name, value)
      }
    }
    function attrConstantNS$2(fullname, value) {
      return function () {
        this.setAttributeNS(fullname.space, fullname.local, value)
      }
    }
    function attrFunction$2(name, value) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          this.removeAttribute(name)
        } else {
          this.setAttribute(name, v)
        }
      }
    }
    function attrFunctionNS$2(fullname, value) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          this.removeAttributeNS(fullname.space, fullname.local)
        } else {
          this.setAttributeNS(fullname.space, fullname.local, v)
        }
      }
    }
    var selection_attr$1 = function (name, value) {
      var fullname = namespace$1(name);
      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname)
      }
      return this.each((value == null ? fullname.local ? attrRemoveNS$2 : attrRemove$2 : typeof value === 'function' ? fullname.local ? attrFunctionNS$2 : attrFunction$2 : fullname.local ? attrConstantNS$2 : attrConstant$2)(fullname, value))
    };
    var defaultView = function (node) {
      return node.ownerDocument && node.ownerDocument.defaultView || node.document && node  // node is a Window
|| node.defaultView  // node is a Document
    };
    function styleRemove$2(name) {
      return function () {
        this.style.removeProperty(name)
      }
    }
    function styleConstant$2(name, value, priority) {
      return function () {
        this.style.setProperty(name, value, priority)
      }
    }
    function styleFunction$2(name, value, priority) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          this.style.removeProperty(name)
        } else {
          this.style.setProperty(name, v, priority)
        }
      }
    }
    var selection_style$1 = function (name, value, priority) {
      var node;
      return arguments.length > 1 ? this.each((value == null ? styleRemove$2 : typeof value === 'function' ? styleFunction$2 : styleConstant$2)(name, value, priority == null ? '' : priority)) : defaultView(node = this.node()).getComputedStyle(node, null).getPropertyValue(name)
    };
    function propertyRemove$1(name) {
      return function () {
        delete this[name]
      }
    }
    function propertyConstant$1(name, value) {
      return function () {
        this[name] = value
      }
    }
    function propertyFunction$1(name, value) {
      return function () {
        var v = value.apply(this, arguments);
        if (v == null) {
          delete this[name]
        } else {
          this[name] = v
        }
      }
    }
    var selection_property$1 = function (name, value) {
      return arguments.length > 1 ? this.each((value == null ? propertyRemove$1 : typeof value === 'function' ? propertyFunction$1 : propertyConstant$1)(name, value)) : this.node()[name]
    };
    function classArray$1(string) {
      return string.trim().split(/^|\s+/)
    }
    function classList$1(node) {
      return node.classList || new ClassList$1(node)
    }
    function ClassList$1(node) {
      this._node = node;
      this._names = classArray$1(node.getAttribute('class') || '')
    }
    ClassList$1.prototype = {
      add: function (name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute('class', this._names.join(' '))
        }
      },
      remove: function (name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute('class', this._names.join(' '))
        }
      },
      contains: function (name) {
        return this._names.indexOf(name) >= 0
      }
    };
    function classedAdd$1(node, names) {
      var list = classList$1(node), i = -1, n = names.length;
      while (++i < n) {
        list.add(names[i])
      }
    }
    function classedRemove$1(node, names) {
      var list = classList$1(node), i = -1, n = names.length;
      while (++i < n) {
        list.remove(names[i])
      }
    }
    function classedTrue$1(names) {
      return function () {
        classedAdd$1(this, names)
      }
    }
    function classedFalse$1(names) {
      return function () {
        classedRemove$1(this, names)
      }
    }
    function classedFunction$1(names, value) {
      return function () {
        (value.apply(this, arguments) ? classedAdd$1 : classedRemove$1)(this, names)
      }
    }
    var selection_classed$1 = function (name, value) {
      var names = classArray$1(name + '');
      if (arguments.length < 2) {
        var list = classList$1(this.node()), i = -1, n = names.length;
        while (++i < n) {
          if (!list.contains(names[i])) {
            return false
          }
        }
        return true
      }
      return this.each((typeof value === 'function' ? classedFunction$1 : value ? classedTrue$1 : classedFalse$1)(names, value))
    };
    function textRemove$1() {
      this.textContent = ''
    }
    function textConstant$2(value) {
      return function () {
        this.textContent = value
      }
    }
    function textFunction$2(value) {
      return function () {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? '' : v
      }
    }
    var selection_text$1 = function (value) {
      return arguments.length ? this.each(value == null ? textRemove$1 : (typeof value === 'function' ? textFunction$2 : textConstant$2)(value)) : this.node().textContent
    };
    function htmlRemove$1() {
      this.innerHTML = ''
    }
    function htmlConstant$1(value) {
      return function () {
        this.innerHTML = value
      }
    }
    function htmlFunction$1(value) {
      return function () {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? '' : v
      }
    }
    var selection_html$1 = function (value) {
      return arguments.length ? this.each(value == null ? htmlRemove$1 : (typeof value === 'function' ? htmlFunction$1 : htmlConstant$1)(value)) : this.node().innerHTML
    };
    function raise$2() {
      if (this.nextSibling) {
        this.parentNode.appendChild(this)
      }
    }
    var selection_raise$1 = function () {
      return this.each(raise$2)
    };
    function lower$1() {
      if (this.previousSibling) {
        this.parentNode.insertBefore(this, this.parentNode.firstChild)
      }
    }
    var selection_lower$1 = function () {
      return this.each(lower$1)
    };
    var selection_append$1 = function (name) {
      var create = typeof name === 'function' ? name : creator$1(name);
      return this.select(function () {
        return this.appendChild(create.apply(this, arguments))
      })
    };
    function constantNull$1() {
      return null
    }
    var selection_insert$1 = function (name, before) {
      var create = typeof name === 'function' ? name : creator$1(name), select = before == null ? constantNull$1 : typeof before === 'function' ? before : selector$1(before);
      return this.select(function () {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null)
      })
    };
    function remove$1() {
      var parent = this.parentNode;
      if (parent) {
        parent.removeChild(this)
      }
    }
    var selection_remove$1 = function () {
      return this.each(remove$1)
    };
    var selection_datum$1 = function (value) {
      return arguments.length ? this.property('__data__', value) : this.node().__data__
    };
    function dispatchEvent$1(node, type, params) {
      var window = defaultView(node), event = window.CustomEvent;
      if (event) {
        event = new event(type, params)
      } else {
        event = window.document.createEvent('Event');
        if (params) {
          event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail
        } else {
          event.initEvent(type, false, false)
        }
      }
      node.dispatchEvent(event)
    }
    function dispatchConstant$1(type, params) {
      return function () {
        return dispatchEvent$1(this, type, params)
      }
    }
    function dispatchFunction$1(type, params) {
      return function () {
        return dispatchEvent$1(this, type, params.apply(this, arguments))
      }
    }
    var selection_dispatch$1 = function (type, params) {
      return this.each((typeof params === 'function' ? dispatchFunction$1 : dispatchConstant$1)(type, params))
    };
    var root$2 = [null];
    function Selection$2(groups, parents) {
      this._groups = groups;
      this._parents = parents
    }
    function selection$2() {
      return new Selection$2([[document.documentElement]], root$2)
    }
    Selection$2.prototype = selection$2.prototype = {
      constructor: Selection$2,
      select: selection_select$1,
      selectAll: selection_selectAll$1,
      filter: selection_filter$1,
      data: selection_data$1,
      enter: selection_enter$1,
      exit: selection_exit$1,
      merge: selection_merge$1,
      order: selection_order$1,
      sort: selection_sort$1,
      call: selection_call$1,
      nodes: selection_nodes$1,
      node: selection_node$1,
      size: selection_size$1,
      empty: selection_empty$1,
      each: selection_each$1,
      attr: selection_attr$1,
      style: selection_style$1,
      property: selection_property$1,
      classed: selection_classed$1,
      text: selection_text$1,
      html: selection_html$1,
      raise: selection_raise$1,
      lower: selection_lower$1,
      append: selection_append$1,
      insert: selection_insert$1,
      remove: selection_remove$1,
      datum: selection_datum$1,
      on: selection_on$1,
      dispatch: selection_dispatch$1
    };
    var select$1 = function (selector) {
      return typeof selector === 'string' ? new Selection$2([[document.querySelector(selector)]], [document.documentElement]) : new Selection$2([[selector]], root$2)
    };
    var d3_identity = function (d) {
      return d
    };
    var d3_reverse = function (arr) {
      var mirror = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        mirror[i] = arr[l - i - 1]
      }
      return mirror
    };
    //Text wrapping code adapted from Mike Bostock
    var d3_textWrapping = function (text, width) {
      text.each(function () {
        var text = select$1(this), words = text.text().split(/\s+/).reverse(), word, line = [], lineNumber = 0, lineHeight = 1.2,
          //ems
          y = text.attr('y'), dy = parseFloat(text.attr('dy')) || 0, tspan = text.text(null).append('tspan').attr('x', 0).attr('dy', dy + 'em');
        while (word = words.pop()) {
          line.push(word);
          tspan.text(line.join(' '));
          if (tspan.node().getComputedTextLength() > width && line.length > 1) {
            line.pop();
            tspan.text(line.join(' '));
            line = [word];
            tspan = text.append('tspan').attr('x', 0).attr('dy', lineHeight + dy + 'em').text(word)
          }
        }
      })
    };
    var d3_mergeLabels = function (gen, labels, domain, range) {
      if (gen === void 0)
        gen = [];
      if (typeof labels === 'object') {
        if (labels.length === 0) {
          return gen
        }
        var i = labels.length;
        for (; i < gen.length; i++) {
          labels.push(gen[i])
        }
        return labels
      } else if (typeof labels === 'function') {
        var customLabels = [];
        var genLength = gen.length;
        for (var i$1 = 0; i$1 < genLength; i$1++) {
          customLabels.push(labels({
            i: i$1,
            genLength: genLength,
            generatedLabels: gen,
            domain: domain,
            range: range
          }))
        }
        return customLabels
      }
      return gen
    };
    var d3_linearLegend = function (scale, cells, labelFormat) {
      var data = [];
      if (cells.length > 1) {
        data = cells
      } else {
        var domain = scale.domain(), increment = (domain[domain.length - 1] - domain[0]) / (cells - 1);
        var i = 0;
        for (; i < cells; i++) {
          data.push(domain[0] + i * increment)
        }
      }
      var labels = data.map(labelFormat);
      return {
        data: data,
        labels: labels,
        feature: function (d) {
          return scale(d)
        }
      }
    };
    var d3_quantLegend = function (scale, labelFormat, labelDelimiter) {
      var labels = scale.range().map(function (d) {
        var invert = scale.invertExtent(d);
        return labelFormat(invert[0]) + ' ' + labelDelimiter + ' ' + labelFormat(invert[1])
      });
      return {
        data: scale.range(),
        labels: labels,
        feature: d3_identity
      }
    };
    var d3_ordinalLegend = function (scale) {
      return {
        data: scale.domain(),
        labels: scale.domain(),
        feature: function (d) {
          return scale(d)
        }
      }
    };
    var d3_cellOver = function (cellDispatcher, d, obj) {
      cellDispatcher.call('cellover', obj, d)
    };
    var d3_cellOut = function (cellDispatcher, d, obj) {
      cellDispatcher.call('cellout', obj, d)
    };
    var d3_cellClick = function (cellDispatcher, d, obj) {
      cellDispatcher.call('cellclick', obj, d)
    };
    var helper = {
      d3_drawShapes: function (shape, shapes, shapeHeight, shapeWidth, shapeRadius, path) {
        if (shape === 'rect') {
          shapes.attr('height', shapeHeight).attr('width', shapeWidth)
        } else if (shape === 'circle') {
          shapes.attr('r', shapeRadius)  //.attr("cx", shapeRadius).attr("cy", shapeRadius);
        } else if (shape === 'line') {
          shapes.attr('x1', 0).attr('x2', shapeWidth).attr('y1', 0).attr('y2', 0)
        } else if (shape === 'path') {
          shapes.attr('d', path)
        }
      },
      d3_addText: function (svg, enter, labels, classPrefix, labelWidth) {
        enter.append('text').attr('class', classPrefix + 'label');
        svg.selectAll('g.' + classPrefix + 'cell text.' + classPrefix + 'label').data(labels).text(d3_identity)  // if (labelWidth){
                                                                                                                 //   svg.selectAll(`g.${classPrefix}cell text.${classPrefix}label`)
                                                                                                                 //       .call(d3_textWrapping, labelWidth)
                                                                                                                 // }
      },
      d3_calcType: function (scale, ascending, cells, labels, labelFormat, labelDelimiter) {
        var type = scale.invertExtent ? d3_quantLegend(scale, labelFormat, labelDelimiter) : scale.ticks ? d3_linearLegend(scale, cells, labelFormat) : d3_ordinalLegend(scale);
        type.labels = d3_mergeLabels(type.labels, labels, scale.domain(), scale.range());
        if (ascending) {
          type.labels = d3_reverse(type.labels);
          type.data = d3_reverse(type.data)
        }
        return type
      },
      d3_filterCells: function (type, cellFilter) {
        var filterCells = type.data.map(function (d, i) {
          return {
            data: d,
            label: type.labels[i]
          }
        }).filter(cellFilter);
        var dataValues = filterCells.map(function (d) {
          return d.data
        });
        var labelValues = filterCells.map(function (d) {
          return d.label
        });
        type.data = type.data.filter(function (d) {
          return dataValues.indexOf(d) !== -1
        });
        type.labels = type.labels.filter(function (d) {
          return labelValues.indexOf(d) !== -1
        });
        return type
      },
      d3_placement: function (orient, cell, cellTrans, text, textTrans, labelAlign) {
        cell.attr('transform', cellTrans);
        text.attr('transform', textTrans);
        if (orient === 'horizontal') {
          text.style('text-anchor', labelAlign)
        }
      },
      d3_addEvents: function (cells, dispatcher) {
        cells.on('mouseover.legend', function (d) {
          d3_cellOver(dispatcher, d, this)
        }).on('mouseout.legend', function (d) {
          d3_cellOut(dispatcher, d, this)
        }).on('click.legend', function (d) {
          d3_cellClick(dispatcher, d, this)
        })
      },
      d3_title: function (svg, title, classPrefix, titleWidth) {
        if (title !== '') {
          var titleText = svg.selectAll('text.' + classPrefix + 'legendTitle');
          titleText.data([title]).enter().append('text').attr('class', classPrefix + 'legendTitle');
          svg.selectAll('text.' + classPrefix + 'legendTitle').text(title);
          if (titleWidth) {
            svg.selectAll('text.' + classPrefix + 'legendTitle').call(d3_textWrapping, titleWidth)
          }
          var cellsSvg = svg.select('.' + classPrefix + 'legendCells');
          var yOffset = svg.select('.' + classPrefix + 'legendTitle').nodes().map(function (d) {
              return d.getBBox().height
            })[0], xOffset = -cellsSvg.nodes().map(function (d) {
              return d.getBBox().x
            })[0];
          cellsSvg.attr('transform', 'translate(' + xOffset + ',' + yOffset + ')')
        }
      }
    };
    function color$1() {
      var scale = linear$1(), shape = 'rect', shapeWidth = 15, shapeHeight = 15, shapeRadius = 10, shapePadding = 2, cells = [5], cellFilter, labels = [], classPrefix = '', useClass = false, title = '', labelFormat = format('.01f'), labelOffset = 10, labelAlign = 'middle', labelDelimiter = 'to', labelWidth, orient = 'vertical', ascending = false, path, titleWidth, legendDispatcher = dispatch('cellover', 'cellout', 'cellclick');
      function legend(svg) {
        var type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter), legendG = svg.selectAll('g').data([scale]);
        legendG.enter().append('g').attr('class', classPrefix + 'legendCells');
        if (cellFilter) {
          helper.d3_filterCells(type, cellFilter)
        }
        var cell = svg.select('.' + classPrefix + 'legendCells').selectAll('.' + classPrefix + 'cell').data(type.data);
        var cellEnter = cell.enter().append('g').attr('class', classPrefix + 'cell');
        cellEnter.append(shape).attr('class', classPrefix + 'swatch');
        var shapes = svg.selectAll('g.' + classPrefix + 'cell ' + shape);
        //add event handlers
        helper.d3_addEvents(cellEnter, legendDispatcher);
        cell.exit().transition().style('opacity', 0).remove();
        helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path);
        helper.d3_addText(svg, cellEnter, type.labels, classPrefix);
        // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.
        cell = cellEnter.merge(cell);
        // sets placement
        var text = cell.selectAll('text'), shapeSize = shapes.nodes().map(function (d) {
            return d.getBBox()
          });
        //sets scale
        //everything is fill except for line which is stroke,
        if (!useClass) {
          if (shape == 'line') {
            shapes.style('stroke', type.feature)
          } else {
            shapes.style('fill', type.feature)
          }
        } else {
          shapes.attr('class', function (d) {
            return classPrefix + 'swatch ' + type.feature(d)
          })
        }
        var cellTrans, textTrans, textAlign = labelAlign == 'start' ? 0 : labelAlign == 'middle' ? 0.5 : 1;
        //positions cells and text
        if (orient === 'vertical') {
          cellTrans = function (d, i) {
            return 'translate(0, ' + i * (shapeSize[i].height + shapePadding) + ')'
          };
          textTrans = function (d, i) {
            return 'translate( ' + (shapeSize[i].width + shapeSize[i].x + labelOffset) + ', ' + (shapeSize[i].y + shapeSize[i].height / 2 + 5) + ')'
          }
        } else if (orient === 'horizontal') {
          cellTrans = function (d, i) {
            return 'translate(' + i * (shapeSize[i].width + shapePadding) + ',0)'
          };
          textTrans = function (d, i) {
            return 'translate(' + (shapeSize[i].width * textAlign + shapeSize[i].x) + ',\n          ' + (shapeSize[i].height + shapeSize[i].y + labelOffset + 8) + ')'
          }
        }
        helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);
        helper.d3_title(svg, title, classPrefix, titleWidth);
        cell.transition().style('opacity', 1)
      }
      legend.scale = function (_) {
        if (!arguments.length) {
          return scale
        }
        scale = _;
        return legend
      };
      legend.cells = function (_) {
        if (!arguments.length) {
          return cells
        }
        if (_.length > 1 || _ >= 2) {
          cells = _
        }
        return legend
      };
      legend.cellFilter = function (_) {
        if (!arguments.length) {
          return cellFilter
        }
        cellFilter = _;
        return legend
      };
      legend.shape = function (_, d) {
        if (!arguments.length) {
          return shape
        }
        if (_ == 'rect' || _ == 'circle' || _ == 'line' || _ == 'path' && typeof d === 'string') {
          shape = _;
          path = d
        }
        return legend
      };
      legend.shapeWidth = function (_) {
        if (!arguments.length) {
          return shapeWidth
        }
        shapeWidth = +_;
        return legend
      };
      legend.shapeHeight = function (_) {
        if (!arguments.length) {
          return shapeHeight
        }
        shapeHeight = +_;
        return legend
      };
      legend.shapeRadius = function (_) {
        if (!arguments.length) {
          return shapeRadius
        }
        shapeRadius = +_;
        return legend
      };
      legend.shapePadding = function (_) {
        if (!arguments.length) {
          return shapePadding
        }
        shapePadding = +_;
        return legend
      };
      legend.labels = function (_) {
        if (!arguments.length) {
          return labels
        }
        labels = _;
        return legend
      };
      legend.labelAlign = function (_) {
        if (!arguments.length) {
          return labelAlign
        }
        if (_ == 'start' || _ == 'end' || _ == 'middle') {
          labelAlign = _
        }
        return legend
      };
      legend.labelFormat = function (_) {
        if (!arguments.length) {
          return labelFormat
        }
        labelFormat = typeof _ === 'string' ? format(_) : _;
        return legend
      };
      legend.labelOffset = function (_) {
        if (!arguments.length) {
          return labelOffset
        }
        labelOffset = +_;
        return legend
      };
      legend.labelDelimiter = function (_) {
        if (!arguments.length) {
          return labelDelimiter
        }
        labelDelimiter = _;
        return legend
      };
      legend.labelWidth = function (_) {
        if (!arguments.length) {
          return labelWidth
        }
        labelWidth = _;
        return legend
      };
      legend.useClass = function (_) {
        if (!arguments.length) {
          return useClass
        }
        if (_ === true || _ === false) {
          useClass = _
        }
        return legend
      };
      legend.orient = function (_) {
        if (!arguments.length) {
          return orient
        }
        _ = _.toLowerCase();
        if (_ == 'horizontal' || _ == 'vertical') {
          orient = _
        }
        return legend
      };
      legend.ascending = function (_) {
        if (!arguments.length) {
          return ascending
        }
        ascending = !!_;
        return legend
      };
      legend.classPrefix = function (_) {
        if (!arguments.length) {
          return classPrefix
        }
        classPrefix = _;
        return legend
      };
      legend.title = function (_) {
        if (!arguments.length) {
          return title
        }
        title = _;
        return legend
      };
      legend.titleWidth = function (_) {
        if (!arguments.length) {
          return titleWidth
        }
        titleWidth = _;
        return legend
      };
      legend.on = function () {
        var value = legendDispatcher.on.apply(legendDispatcher, arguments);
        return value === legendDispatcher ? legend : value
      };
      return legend
    }
    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
    function createCommonjsModule(fn, module) {
      return module = { exports: {} }, fn(module, module.exports), module.exports
    }
    var require$$0 = index$1 && undefined || index$1;
    var require$$1 = index$2 && undefined || index$2;
    var index$3 = createCommonjsModule(function (module) {
      /**
 * d3.tip
 * Copyright (c) 2013 Justin Palmer
 *
 * Tooltips for d3.js SVG visualizations
 */
      // eslint-disable-next-line no-extra-semi
      (function (root, factory) {
        if (typeof undefined === 'function' && undefined.amd) {
          // AMD. Register as an anonymous module with d3 as a dependency.
          undefined([
            'd3-collection',
            'd3-selection'
          ], factory)
        } else if ('object' === 'object' && module.exports) {
          /* eslint-disable global-require */
          // CommonJS
          var d3Collection = require$$0, d3Selection = require$$1;
          module.exports = factory(d3Collection, d3Selection)  /* eslint-enable global-require */
        } else {
          // Browser global.
          var d3 = root.d3;
          // eslint-disable-next-line no-param-reassign
          root.d3.tip = factory(d3, d3)
        }
      }(commonjsGlobal, function (d3Collection, d3Selection) {
        // Public - contructs a new tooltip
        //
        // Returns a tip
        return function () {
          var direction = d3TipDirection, offset = d3TipOffset, html = d3TipHTML, rootElement = document.body, node = initNode(), svg = null, point = null, target = null;
          function tip(vis) {
            svg = getSVGNode(vis);
            if (!svg) {
              return
            }
            point = svg.createSVGPoint();
            rootElement.appendChild(node)
          }
          // Public - show the tooltip on the screen
          //
          // Returns a tip
          tip.show = function () {
            var args = Array.prototype.slice.call(arguments);
            if (args[args.length - 1] instanceof SVGElement) {
              target = args.pop()
            }
            var content = html.apply(this, args), poffset = offset.apply(this, args), dir = direction.apply(this, args), nodel = getNodeEl(), i = directions.length, coords, scrollTop = document.documentElement.scrollTop || rootElement.scrollTop, scrollLeft = document.documentElement.scrollLeft || rootElement.scrollLeft;
            nodel.html(content).style('opacity', 1).style('pointer-events', 'all');
            while (i--) {
              nodel.classed(directions[i], false)
            }
            coords = directionCallbacks.get(dir).apply(this);
            nodel.classed(dir, true).style('top', coords.top + poffset[0] + scrollTop + 'px').style('left', coords.left + poffset[1] + scrollLeft + 'px');
            return tip
          };
          // Public - hide the tooltip
          //
          // Returns a tip
          tip.hide = function () {
            var nodel = getNodeEl();
            nodel.style('opacity', 0).style('pointer-events', 'none');
            return tip
          };
          // Public: Proxy attr calls to the d3 tip container.
          // Sets or gets attribute value.
          //
          // n - name of the attribute
          // v - value of the attribute
          //
          // Returns tip or attribute value
          // eslint-disable-next-line no-unused-vars
          tip.attr = function (n, v) {
            if (arguments.length < 2 && typeof n === 'string') {
              return getNodeEl().attr(n)
            }
            var args = Array.prototype.slice.call(arguments);
            d3Selection.selection.prototype.attr.apply(getNodeEl(), args);
            return tip
          };
          // Public: Proxy style calls to the d3 tip container.
          // Sets or gets a style value.
          //
          // n - name of the property
          // v - value of the property
          //
          // Returns tip or style property value
          // eslint-disable-next-line no-unused-vars
          tip.style = function (n, v) {
            if (arguments.length < 2 && typeof n === 'string') {
              return getNodeEl().style(n)
            }
            var args = Array.prototype.slice.call(arguments);
            d3Selection.selection.prototype.style.apply(getNodeEl(), args);
            return tip
          };
          // Public: Set or get the direction of the tooltip
          //
          // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
          //     sw(southwest), ne(northeast) or se(southeast)
          //
          // Returns tip or direction
          tip.direction = function (v) {
            if (!arguments.length) {
              return direction
            }
            direction = v == null ? v : functor(v);
            return tip
          };
          // Public: Sets or gets the offset of the tip
          //
          // v - Array of [x, y] offset
          //
          // Returns offset or
          tip.offset = function (v) {
            if (!arguments.length) {
              return offset
            }
            offset = v == null ? v : functor(v);
            return tip
          };
          // Public: sets or gets the html value of the tooltip
          //
          // v - String value of the tip
          //
          // Returns html value or tip
          tip.html = function (v) {
            if (!arguments.length) {
              return html
            }
            html = v == null ? v : functor(v);
            return tip
          };
          // Public: sets or gets the root element anchor of the tooltip
          //
          // v - root element of the tooltip
          //
          // Returns root node of tip
          tip.rootElement = function (v) {
            if (!arguments.length) {
              return rootElement
            }
            rootElement = v == null ? v : functor(v);
            return tip
          };
          // Public: destroys the tooltip and removes it from the DOM
          //
          // Returns a tip
          tip.destroy = function () {
            if (node) {
              getNodeEl().remove();
              node = null
            }
            return tip
          };
          function d3TipDirection() {
            return 'n'
          }
          function d3TipOffset() {
            return [
              0,
              0
            ]
          }
          function d3TipHTML() {
            return ' '
          }
          var directionCallbacks = d3Collection.map({
              n: directionNorth,
              s: directionSouth,
              e: directionEast,
              w: directionWest,
              nw: directionNorthWest,
              ne: directionNorthEast,
              sw: directionSouthWest,
              se: directionSouthEast
            }), directions = directionCallbacks.keys();
          function directionNorth() {
            var bbox = getScreenBBox();
            return {
              top: bbox.n.y - node.offsetHeight,
              left: bbox.n.x - node.offsetWidth / 2
            }
          }
          function directionSouth() {
            var bbox = getScreenBBox();
            return {
              top: bbox.s.y,
              left: bbox.s.x - node.offsetWidth / 2
            }
          }
          function directionEast() {
            var bbox = getScreenBBox();
            return {
              top: bbox.e.y - node.offsetHeight / 2,
              left: bbox.e.x
            }
          }
          function directionWest() {
            var bbox = getScreenBBox();
            return {
              top: bbox.w.y - node.offsetHeight / 2,
              left: bbox.w.x - node.offsetWidth
            }
          }
          function directionNorthWest() {
            var bbox = getScreenBBox();
            return {
              top: bbox.nw.y - node.offsetHeight,
              left: bbox.nw.x - node.offsetWidth
            }
          }
          function directionNorthEast() {
            var bbox = getScreenBBox();
            return {
              top: bbox.ne.y - node.offsetHeight,
              left: bbox.ne.x
            }
          }
          function directionSouthWest() {
            var bbox = getScreenBBox();
            return {
              top: bbox.sw.y,
              left: bbox.sw.x - node.offsetWidth
            }
          }
          function directionSouthEast() {
            var bbox = getScreenBBox();
            return {
              top: bbox.se.y,
              left: bbox.se.x
            }
          }
          function initNode() {
            var div = d3Selection.select(document.createElement('div'));
            div.style('position', 'absolute').style('top', 0).style('opacity', 0).style('pointer-events', 'none').style('box-sizing', 'border-box');
            return div.node()
          }
          function getSVGNode(element) {
            var svgNode = element.node();
            if (!svgNode) {
              return null
            }
            if (svgNode.tagName.toLowerCase() === 'svg') {
              return svgNode
            }
            return svgNode.ownerSVGElement
          }
          function getNodeEl() {
            if (node == null) {
              node = initNode();
              // re-add node to DOM
              rootElement.appendChild(node)
            }
            return d3Selection.select(node)
          }
          // Private - gets the screen coordinates of a shape
          //
          // Given a shape on the screen, will return an SVGPoint for the directions
          // n(north), s(south), e(east), w(west), ne(northeast), se(southeast),
          // nw(northwest), sw(southwest).
          //
          //    +-+-+
          //    |   |
          //    +   +
          //    |   |
          //    +-+-+
          //
          // Returns an Object {n, s, e, w, nw, sw, ne, se}
          function getScreenBBox() {
            var targetel = target || d3Selection.event.target;
            while (targetel.getScreenCTM == null && targetel.parentNode == null) {
              targetel = targetel.parentNode
            }
            var bbox = {}, matrix = targetel.getScreenCTM(), tbbox = targetel.getBBox(), width = tbbox.width, height = tbbox.height, x = tbbox.x, y = tbbox.y;
            point.x = x;
            point.y = y;
            bbox.nw = point.matrixTransform(matrix);
            point.x += width;
            bbox.ne = point.matrixTransform(matrix);
            point.y += height;
            bbox.se = point.matrixTransform(matrix);
            point.x -= width;
            bbox.sw = point.matrixTransform(matrix);
            point.y -= height / 2;
            bbox.w = point.matrixTransform(matrix);
            point.x += width;
            bbox.e = point.matrixTransform(matrix);
            point.x -= width / 2;
            point.y -= height / 2;
            bbox.n = point.matrixTransform(matrix);
            point.y += height;
            bbox.s = point.matrixTransform(matrix);
            return bbox
          }
          // Private - replace D3JS 3.X d3.functor() function
          function functor(v) {
            return typeof v === 'function' ? v : function () {
              return v
            }
          }
          return tip
        }  // eslint-disable-next-line semi
      }))
    });
    var index = {
      axisBottom: axisBottom,
      axisLeft: axisLeft,
      extent: extent,
      interpolate: interpolateValue,
      legendColor: color$1,
      line: line,
      scaleLinear: linear$1,
      scaleOrdinal: ordinal,
      scaleTime: scaleTime,
      select: select,
      symbol: symbol,
      symbolCircle: circle,
      timeDay: day,
      timeParse: timeParse,
      tip: index$3,
      transition: transition
    };
    module.exports = index
  });
  // source: node_modules/randomcolor/randomColor.js
  rqzt.define('randomcolor/randomColor', function (module, exports, __dirname, __filename, process) {
    // randomColor by David Merfield under the CC0 license
    // https://github.com/davidmerfield/randomColor/
    ;
    (function (root, factory) {
      // Support AMD
      if (typeof define === 'function' && define.amd) {
        define([], factory)  // Support CommonJS
      } else if (typeof exports === 'object') {
        var randomColor = factory();
        // Support NodeJS & Component, which allow module.exports to be a function
        if (typeof module === 'object' && module && module.exports) {
          exports = module.exports = randomColor
        }
        // Support CommonJS 1.1.1 spec
        exports.randomColor = randomColor  // Support vanilla script loading
      } else {
        root.randomColor = factory()
      }
    }(this, function () {
      // Seed to get repeatable colors
      var seed = null;
      // Shared color dictionary
      var colorDictionary = {};
      // Populate the color dictionary
      loadColorBounds();
      var randomColor = function (options) {
        options = options || {};
        // Check if there is a seed and ensure it's an
        // integer. Otherwise, reset the seed value.
        if (options.seed && options.seed === parseInt(options.seed, 10)) {
          seed = options.seed  // A string was passed as a seed
        } else if (typeof options.seed === 'string') {
          seed = stringToInteger(options.seed)  // Something was passed as a seed but it wasn't an integer or string
        } else if (options.seed !== undefined && options.seed !== null) {
          throw new TypeError('The seed value must be an integer or string')  // No seed, reset the value outside.
        } else {
          seed = null
        }
        var H, S, B;
        // Check if we need to generate multiple colors
        if (options.count !== null && options.count !== undefined) {
          var totalColors = options.count, colors = [];
          options.count = null;
          while (totalColors > colors.length) {
            // Since we're generating multiple colors,
            // incremement the seed. Otherwise we'd just
            // generate the same color each time...
            if (seed && options.seed)
              options.seed += 1;
            colors.push(randomColor(options))
          }
          options.count = totalColors;
          return colors
        }
        // First we pick a hue (H)
        H = pickHue(options);
        // Then use H to determine saturation (S)
        S = pickSaturation(H, options);
        // Then use S and H to determine brightness (B).
        B = pickBrightness(H, S, options);
        // Then we return the HSB color in the desired format
        return setFormat([
          H,
          S,
          B
        ], options)
      };
      function pickHue(options) {
        var hueRange = getHueRange(options.hue), hue = randomWithin(hueRange);
        // Instead of storing red as two seperate ranges,
        // we group them, using negative numbers
        if (hue < 0) {
          hue = 360 + hue
        }
        return hue
      }
      function pickSaturation(hue, options) {
        if (options.luminosity === 'random') {
          return randomWithin([
            0,
            100
          ])
        }
        if (options.hue === 'monochrome') {
          return 0
        }
        var saturationRange = getSaturationRange(hue);
        var sMin = saturationRange[0], sMax = saturationRange[1];
        switch (options.luminosity) {
        case 'bright':
          sMin = 55;
          break;
        case 'dark':
          sMin = sMax - 10;
          break;
        case 'light':
          sMax = 55;
          break
        }
        return randomWithin([
          sMin,
          sMax
        ])
      }
      function pickBrightness(H, S, options) {
        var bMin = getMinimumBrightness(H, S), bMax = 100;
        switch (options.luminosity) {
        case 'dark':
          bMax = bMin + 20;
          break;
        case 'light':
          bMin = (bMax + bMin) / 2;
          break;
        case 'random':
          bMin = 0;
          bMax = 100;
          break
        }
        return randomWithin([
          bMin,
          bMax
        ])
      }
      function setFormat(hsv, options) {
        switch (options.format) {
        case 'hsvArray':
          return hsv;
        case 'hslArray':
          return HSVtoHSL(hsv);
        case 'hsl':
          var hsl = HSVtoHSL(hsv);
          return 'hsl(' + hsl[0] + ', ' + hsl[1] + '%, ' + hsl[2] + '%)';
        case 'hsla':
          var hslColor = HSVtoHSL(hsv);
          return 'hsla(' + hslColor[0] + ', ' + hslColor[1] + '%, ' + hslColor[2] + '%, ' + Math.random() + ')';
        case 'rgbArray':
          return HSVtoRGB(hsv);
        case 'rgb':
          var rgb = HSVtoRGB(hsv);
          return 'rgb(' + rgb.join(', ') + ')';
        case 'rgba':
          var rgbColor = HSVtoRGB(hsv);
          return 'rgba(' + rgbColor.join(', ') + ', ' + Math.random() + ')';
        default:
          return HSVtoHex(hsv)
        }
      }
      function getMinimumBrightness(H, S) {
        var lowerBounds = getColorInfo(H).lowerBounds;
        for (var i = 0; i < lowerBounds.length - 1; i++) {
          var s1 = lowerBounds[i][0], v1 = lowerBounds[i][1];
          var s2 = lowerBounds[i + 1][0], v2 = lowerBounds[i + 1][1];
          if (S >= s1 && S <= s2) {
            var m = (v2 - v1) / (s2 - s1), b = v1 - m * s1;
            return m * S + b
          }
        }
        return 0
      }
      function getHueRange(colorInput) {
        if (typeof parseInt(colorInput) === 'number') {
          var number = parseInt(colorInput);
          if (number < 360 && number > 0) {
            return [
              number,
              number
            ]
          }
        }
        if (typeof colorInput === 'string') {
          if (colorDictionary[colorInput]) {
            var color = colorDictionary[colorInput];
            if (color.hueRange) {
              return color.hueRange
            }
          }
        }
        return [
          0,
          360
        ]
      }
      function getSaturationRange(hue) {
        return getColorInfo(hue).saturationRange
      }
      function getColorInfo(hue) {
        // Maps red colors to make picking hue easier
        if (hue >= 334 && hue <= 360) {
          hue -= 360
        }
        for (var colorName in colorDictionary) {
          var color = colorDictionary[colorName];
          if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) {
            return colorDictionary[colorName]
          }
        }
        return 'Color not found'
      }
      function randomWithin(range) {
        if (seed === null) {
          return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]))
        } else {
          //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/
          var max = range[1] || 1;
          var min = range[0] || 0;
          seed = (seed * 9301 + 49297) % 233280;
          var rnd = seed / 233280;
          return Math.floor(min + rnd * (max - min))
        }
      }
      function HSVtoHex(hsv) {
        var rgb = HSVtoRGB(hsv);
        function componentToHex(c) {
          var hex = c.toString(16);
          return hex.length == 1 ? '0' + hex : hex
        }
        var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);
        return hex
      }
      function defineColor(name, hueRange, lowerBounds) {
        var sMin = lowerBounds[0][0], sMax = lowerBounds[lowerBounds.length - 1][0], bMin = lowerBounds[lowerBounds.length - 1][1], bMax = lowerBounds[0][1];
        colorDictionary[name] = {
          hueRange: hueRange,
          lowerBounds: lowerBounds,
          saturationRange: [
            sMin,
            sMax
          ],
          brightnessRange: [
            bMin,
            bMax
          ]
        }
      }
      function loadColorBounds() {
        defineColor('monochrome', null, [
          [
            0,
            0
          ],
          [
            100,
            0
          ]
        ]);
        defineColor('red', [
          -26,
          18
        ], [
          [
            20,
            100
          ],
          [
            30,
            92
          ],
          [
            40,
            89
          ],
          [
            50,
            85
          ],
          [
            60,
            78
          ],
          [
            70,
            70
          ],
          [
            80,
            60
          ],
          [
            90,
            55
          ],
          [
            100,
            50
          ]
        ]);
        defineColor('orange', [
          19,
          46
        ], [
          [
            20,
            100
          ],
          [
            30,
            93
          ],
          [
            40,
            88
          ],
          [
            50,
            86
          ],
          [
            60,
            85
          ],
          [
            70,
            70
          ],
          [
            100,
            70
          ]
        ]);
        defineColor('yellow', [
          47,
          62
        ], [
          [
            25,
            100
          ],
          [
            40,
            94
          ],
          [
            50,
            89
          ],
          [
            60,
            86
          ],
          [
            70,
            84
          ],
          [
            80,
            82
          ],
          [
            90,
            80
          ],
          [
            100,
            75
          ]
        ]);
        defineColor('green', [
          63,
          178
        ], [
          [
            30,
            100
          ],
          [
            40,
            90
          ],
          [
            50,
            85
          ],
          [
            60,
            81
          ],
          [
            70,
            74
          ],
          [
            80,
            64
          ],
          [
            90,
            50
          ],
          [
            100,
            40
          ]
        ]);
        defineColor('blue', [
          179,
          257
        ], [
          [
            20,
            100
          ],
          [
            30,
            86
          ],
          [
            40,
            80
          ],
          [
            50,
            74
          ],
          [
            60,
            60
          ],
          [
            70,
            52
          ],
          [
            80,
            44
          ],
          [
            90,
            39
          ],
          [
            100,
            35
          ]
        ]);
        defineColor('purple', [
          258,
          282
        ], [
          [
            20,
            100
          ],
          [
            30,
            87
          ],
          [
            40,
            79
          ],
          [
            50,
            70
          ],
          [
            60,
            65
          ],
          [
            70,
            59
          ],
          [
            80,
            52
          ],
          [
            90,
            45
          ],
          [
            100,
            42
          ]
        ]);
        defineColor('pink', [
          283,
          334
        ], [
          [
            20,
            100
          ],
          [
            30,
            90
          ],
          [
            40,
            86
          ],
          [
            60,
            84
          ],
          [
            80,
            80
          ],
          [
            90,
            75
          ],
          [
            100,
            73
          ]
        ])
      }
      function HSVtoRGB(hsv) {
        // this doesn't work for the values of 0 and 360
        // here's the hacky fix
        var h = hsv[0];
        if (h === 0) {
          h = 1
        }
        if (h === 360) {
          h = 359
        }
        // Rebase the h,s,v values
        h = h / 360;
        var s = hsv[1] / 100, v = hsv[2] / 100;
        var h_i = Math.floor(h * 6), f = h * 6 - h_i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), r = 256, g = 256, b = 256;
        switch (h_i) {
        case 0:
          r = v;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = v;
          b = p;
          break;
        case 2:
          r = p;
          g = v;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = v;
          break;
        case 4:
          r = t;
          g = p;
          b = v;
          break;
        case 5:
          r = v;
          g = p;
          b = q;
          break
        }
        var result = [
          Math.floor(r * 255),
          Math.floor(g * 255),
          Math.floor(b * 255)
        ];
        return result
      }
      function HSVtoHSL(hsv) {
        var h = hsv[0], s = hsv[1] / 100, v = hsv[2] / 100, k = (2 - s) * v;
        return [
          h,
          Math.round(s * v / (k < 1 ? k : 2 - k) * 10000) / 100,
          k / 2 * 100
        ]
      }
      function stringToInteger(string) {
        var total = 0;
        for (var i = 0; i !== string.length; i++) {
          if (total >= Number.MAX_SAFE_INTEGER)
            break;
          total += string.charCodeAt(i)
        }
        return total
      }
      return randomColor
    }))
  });
  // source: src/templates/graphics/chart.pug
  rqzt.define('./templates/graphics/chart', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<svg></svg>'
  });
  // source: src/views/graphics/counter.coffee
  rqzt.define('./views/graphics/counter', function (module, exports, __dirname, __filename, process) {
    var Counter, Dynamic, Tween, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Dynamic = rqzt('./views/dynamic');
    Tween = rqzt('tween.js/src/Tween');
    module.exports = Counter = function (superClass) {
      extend(Counter, superClass);
      function Counter() {
        return Counter.__super__.constructor.apply(this, arguments)
      }
      Counter.prototype.tag = 'daisho-graphics-counter';
      Counter.prototype.html = rqzt('./templates/graphics/counter');
      Counter.prototype.value0 = 0;
      Counter.prototype.value1 = 0;
      Counter.prototype.tween0 = null;
      Counter.prototype.tween1 = null;
      Counter.prototype.timer = 1000;
      Counter.prototype.init = function () {
        return Counter.__super__.init.apply(this, arguments)
      };
      Counter.prototype._refresh = function () {
        var data, self, value0, value1;
        data = this.data;
        self = this;
        if (!this.tween0 && data.get('0')) {
          value0 = data.get(0 + '.ys.0');
          if (value0 && value0 !== this.value0) {
            this.tween0 = new Tween.Tween({ v: this.value0 }).to({ v: value0 }, this.timer).onUpdate(function () {
              self.value0 = this.v;
              return requestAnimationFrame(function () {
                return self.update()
              })
            }).onComplete(function (_this) {
              return function () {
                _this.tween0 = null;
                _this.value0 = value0;
                return requestAnimationFrame(function () {
                  return _this.update()
                })
              }
            }(this)).start()
          }
        }
        if (!this.tween1 && data.get('1')) {
          value1 = data.get(1 + '.ys.0');
          if (value1 && value1 !== this.value1) {
            return this.tween1 = new Tween.Tween({ v: this.value1 }).to({ v: value1 }, this.timer).onUpdate(function () {
              self.value1 = this.v;
              return requestAnimationFrame(function () {
                return self.update()
              })
            }).onComplete(function (_this) {
              return function () {
                _this.tween1 = null;
                _this.value1 = value1;
                return requestAnimationFrame(function () {
                  return _this.update()
                })
              }
            }(this)).start()
          }
        }
      };
      Counter.prototype.getNumber = function (index) {
        if (index === 0) {
          if (!this.data.get(0 + '.fmt.y')) {
            return this.value0
          }
          return this.data.get(0 + '.fmt.y')(this.value0)
        } else {
          if (!this.data.get(1 + '.fmt.y')) {
            return this.value1
          }
          return this.data.get(1 + '.fmt.y')(this.value1)
        }
      };
      return Counter
    }(Dynamic)
  });
  // source: src/templates/graphics/counter.pug
  rqzt.define('./templates/graphics/counter', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<div class="display">\n  <div class="numbers">\n    <div class="number">{ getNumber(0) }</div>\n    <div class="divider" if="{ data.get(\'1\') }">/</div>\n    <div class="number" if="{ data.get(\'1\') }">{ getNumber(1) }</div>\n  </div>\n  <div class="names">\n    <div class="name">{ data.get(\'0.fmt.x\')(data.get(\'0.xs.0\')) || \'&nbsp;\' }</div>\n    <div class="name" if="{ data.get(\'1\') }">{ data.get(\'1.fmt.x\')(data.get(\'1.xs.0\')) || \'&nbsp;\' }</div>\n  </div>\n</div>\n<div class="label" if="{ !data.get(\'1\') }">{ data.get(\'0.series\') || \'&nbsp;\' }</div>\n<div class="label" if="{ data.get(\'1\') }">{ data.get(\'0.series\') || \'&nbsp;\' }</div>\n<div class="divider" if="{ data.get(\'1\') }">vs</div>\n<div class="label" if="{ data.get(\'1\') }">{ data.get(\'1.series\') || \'&nbsp;\' }</div>'
  });
  // source: src/views/list.coffee
  rqzt.define('./views/list', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, List, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = List = function (superClass) {
      extend(List, superClass);
      function List() {
        return List.__super__.constructor.apply(this, arguments)
      }
      List.prototype.tag = 'list';
      List.prototype.html = rqzt('./templates/list');
      List.prototype.init = function () {
        return List.__super__.init.apply(this, arguments)
      };
      return List
    }(CrowdControl.Views.View)
  });
  // source: src/templates/list.pug
  rqzt.define('./templates/list', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<list each="{ item, k in data.get(listField) }" data="{ this.parent.data.ref(listField + \'.\' + k) }">\n  <yield></yield>\n</list>'
  });
  // source: src/views/list-item.coffee
  rqzt.define('./views/list-item', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, List, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = List = function (superClass) {
      extend(List, superClass);
      function List() {
        return List.__super__.constructor.apply(this, arguments)
      }
      List.prototype.tag = 'list-item';
      List.prototype.html = rqzt('./templates/list-item');
      List.prototype.init = function () {
        return List.__super__.init.apply(this, arguments)
      };
      return List
    }(CrowdControl.Views.Form)
  });
  // source: src/templates/list-item.pug
  rqzt.define('./templates/list-item', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield></yield>'
  });
  // source: src/views/command-bar.coffee
  rqzt.define('./views/command-bar', function (module, exports, __dirname, __filename, process) {
    var CommandBar, Events, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    Events = rqzt('./events');
    module.exports = CommandBar = function (superClass) {
      extend(CommandBar, superClass);
      function CommandBar() {
        return CommandBar.__super__.constructor.apply(this, arguments)
      }
      CommandBar.prototype.tag = 'daisho-command-bar';
      CommandBar.prototype.html = rqzt('./templates/command-bar');
      CommandBar.prototype.lookup = 'search';
      CommandBar.prototype.init = function () {
        CommandBar.__super__.init.apply(this, arguments);
        this.on('mount', function (_this) {
          return function () {
            return $(_this.root).find('input').on('keydown', function (e) {
              return _this.keydown.apply(_this, arguments)
            })
          }
        }(this));
        return this.on('update', function () {
        })
      };
      CommandBar.prototype.keydown = function (event) {
        var cmd, found;
        if (event.which === 9) {
          cmd = this.getValue(event);
          if (cmd && cmd[0] === '/') {
            found = this.found();
            if (found[0] != null) {
              if (cmd.indexOf(found[0].command) !== 1) {
                $(this.root).find('input').val('/' + found[0].command);
                this.change(event)
              }
              return false
            }
          }
        } else if (event.which === 13) {
          this.execute();
          return false
        }
        this.update();
        return true
      };
      CommandBar.prototype.pick = function (command) {
        return function (_this) {
          return function () {
            return $(_this.root).find('input').val('/' + command)
          }
        }(this)
      };
      CommandBar.prototype.found = function () {
        var args, cmd;
        cmd = this.getValue({ target: $(this.root).find('input') });
        if (cmd && cmd[0] === '/') {
          args = cmd.split(' ').map(function (str) {
            return str.trim()
          });
          return this.services.command.find(args[0].substr(1))
        } else {
          return []
        }
      };
      CommandBar.prototype.execute = function () {
        var $el, args, cmd, e;
        $el = $(this.root).find('input');
        cmd = this.getValue({ target: $el });
        if (cmd && cmd[0] === '/') {
          args = cmd.split(' ').map(function (str) {
            return str.trim()
          });
          $el.val('');
          this.change({ target: $el });
          try {
            this.services.command.execute(args.shift().substr(1), args);
            this.mediator.trigger(Events.ForceRefresh)
          } catch (error) {
            e = error;
            void 0
          }
        }
        return true
      };
      return CommandBar
    }(Text)
  });
  // source: src/templates/command-bar.pug
  rqzt.define('./templates/command-bar', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="{ type }" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref.get(input.name) }" placeholder="{ placeholder }" autocomplete="{ autoComplete }"/>\n<div class="commands-found">\n  <div class="command-found" each="{ found() }" onclick="{ parent.pick(command) }">\n    <div class="command-text">/{ command }</div>\n    <div class="command-hint" if="{ hint }">{ hint }</div>\n  </div>\n</div>\n<yield></yield>'
  });
  // source: src/views/login.coffee
  rqzt.define('./views/login', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, Login, isEmail, isPassword, isRequired, m, ref, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./views/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, isPassword = ref.isPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = Login = function (superClass) {
      extend(Login, superClass);
      function Login() {
        return Login.__super__.constructor.apply(this, arguments)
      }
      Login.prototype.tag = 'daisho-login';
      Login.prototype.html = rqzt('./templates/login');
      Login.prototype.configs = {
        'account.email': [
          isRequired,
          isEmail
        ],
        'account.password': [isPassword]
      };
      Login.prototype.error = null;
      Login.prototype.disabled = false;
      Login.prototype.init = function () {
        if (!this.data.get('account')) {
          this.data.set('account', {
            email: '',
            password: ''
          })
        }
        return Login.__super__.init.apply(this, arguments)
      };
      Login.prototype._submit = function (event) {
        var opts;
        opts = {
          email: this.data.get('account.email'),
          password: this.data.get('account.password')
        };
        this.error = null;
        m.trigger(Events.Login);
        this.disabled = true;
        this.update();
        return this.client.dashv2.login(opts).then(function (_this) {
          return function (res) {
            _this.disabled = false;
            _this.data.set('account.password', '');
            _this.data.set('account', res.user);
            _this.data.set('orgs', res.organizations);
            _this.data.set('activeOrg', 0);
            m.trigger(Events.LoginSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.disabled = false;
            _this.error = err.message;
            m.trigger(Events.LoginFailed, err);
            return _this.update()
          }
        }(this))
      };
      return Login
    }(CrowdControl.Views.Form)
  });
  // source: src/views/middleware/index.coffee
  rqzt.define('./views/middleware', function (module, exports, __dirname, __filename, process) {
    var emailRe, middleware;
    emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    middleware = {
      isRequired: function (value) {
        if (value && value !== '') {
          return value
        }
        throw new Error('Required')
      },
      isEmail: function (value) {
        if (!value) {
          return value
        }
        if (emailRe.test(value)) {
          return value.toLowerCase()
        }
        throw new Error('Enter a valid email')
      },
      isPassword: function (value) {
        if (!value) {
          throw new Error('Required')
        }
        if (value.length >= 6) {
          return value
        }
        throw new Error('Password must be atleast 6 characters long')
      }
    };
    module.exports = middleware
  });
  // source: src/templates/login.pug
  rqzt.define('./templates/login', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield>\n  <text-control class="input" lookup="account.email" placeholder="Email"></text-control>\n  <password-control class="input" lookup="account.password" placeholder="Password"></password-control>\n  <div class="error message" if="{ error }">{ error }</div>\n  <div class="{ disabled: disabled, button: true, submit: true }" onclick="{ submit }">Login</div>\n</yield>'
  });
  // source: src/views/main.coffee
  rqzt.define('./views/main', function (module, exports, __dirname, __filename, process) {
    var $, CrowdControl, Events, Main, m, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    $ = rqzt('jquery/dist/jquery');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = Main = function (superClass) {
      extend(Main, superClass);
      function Main() {
        return Main.__super__.constructor.apply(this, arguments)
      }
      Main.prototype.tag = 'daisho-main';
      Main.prototype.html = rqzt('./templates/main');
      Main.prototype.configs = {
        'activeOrg': [],
        'search': []
      };
      Main.prototype.error = null;
      Main.prototype.orgs = null;
      Main.prototype.init = function () {
        var i, org, ref;
        this.data = this.parentData;
        Main.__super__.init.apply(this, arguments);
        this.orgs = {};
        ref = this.data.get('orgs');
        for (i in ref) {
          org = ref[i];
          this.orgs[i] = org.fullName
        }
        this.client.setKey(this.data.get('orgs')[this.data.get('activeOrg')]['live-secret-key']);
        this.on('updated', function (_this) {
          return function () {
            var $el, $page, current;
            current = _this.services.page.current;
            if (current != null) {
              $el = $(current);
              $page = $(_this.root).find('#page');
              $page.children().detach();
              $page.append($el);
              return typeof current.update === 'function' ? current.update() : void 0
            }
          }
        }(this));
        return m.on(Events.Change, function (_this) {
          return function (name, val) {
            if (name === 'activeOrg') {
              _this.client.setKey(_this.data.get('orgs')[val]['live-secret-key']);
              return window.location.reload()
            }
          }
        }(this))
      };
      Main.prototype.logout = function () {
        m.trigger(Events.Logout, res);
        return window.location.reload()
      };
      Main.prototype._submit = function (event) {
      };
      return Main
    }(CrowdControl.Views.Form)
  });
  // source: src/templates/main.pug
  rqzt.define('./templates/main', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield>\n  <header>\n    <div id="org-switcher">\n      <select-control class="input" select-options="{ orgs }" lookup="activeOrg"></select-control>\n    </div>\n  </header>\n  <daisho-menu id="menu"></daisho-menu>\n  <div id="page"></div>\n</yield>'
  });
  // source: src/views/menu.coffee
  rqzt.define('./views/menu', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Menu, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = Menu = function (superClass) {
      extend(Menu, superClass);
      function Menu() {
        return Menu.__super__.constructor.apply(this, arguments)
      }
      Menu.prototype.tag = 'daisho-menu';
      Menu.prototype.html = rqzt('./templates/menu');
      Menu.prototype.error = null;
      Menu.prototype.init = function () {
        return Menu.__super__.init.apply(this, arguments)
      };
      Menu.prototype.items = function () {
        var items, k, ref, v;
        items = [];
        ref = this.services.menu.menu;
        for (k in ref) {
          v = ref[k];
          items.push({
            name: k,
            onclick: v
          })
        }
        return items
      };
      return Menu
    }(CrowdControl.Views.View)
  });
  // source: src/templates/menu.pug
  rqzt.define('./templates/menu', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<ul>\n  <li each="{ items() }" onclick="{ onclick }">{ name }</li>\n</ul>'
  });
  // source: src/services/index.coffee
  rqzt.define('./services', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Menu: rqzt('./services/menu'),
      Page: rqzt('./services/page'),
      Command: rqzt('./services/command')
    }
  });
  // source: src/services/menu.coffee
  rqzt.define('./services/menu', function (module, exports, __dirname, __filename, process) {
    var MenuService;
    module.exports = MenuService = function () {
      MenuService.prototype.menu = null;
      MenuService.prototype.initFn = null;
      MenuService.prototype.daisho = null;
      MenuService.prototype.debug = false;
      function MenuService(daisho, debug) {
        this.daisho = daisho;
        this.debug = debug;
        this.menu = {}
      }
      MenuService.prototype.register = function (name, fn) {
        if (this.menu[name]) {
          void 0
        }
        this.menu[name] = fn;
        if (this.initFn == null) {
          return this.initFn = fn
        }
      };
      MenuService.prototype.run = function (name) {
        var fn;
        fn = this.menu[name];
        if (!fn && this.debug) {
          void 0
        }
        return fn()
      };
      MenuService.prototype.start = function () {
        if (!this.initFn && this.debug) {
          void 0;
          return
        }
        return this.initFn()
      };
      return MenuService
    }()
  });
  // source: src/services/page.coffee
  rqzt.define('./services/page', function (module, exports, __dirname, __filename, process) {
    var PageService;
    module.exports = PageService = function () {
      PageService.prototype.cache = null;
      PageService.prototype.daisho = null;
      PageService.prototype.debug = false;
      PageService.prototype.current = null;
      function PageService(daisho, debug) {
        this.daisho = daisho;
        this.debug = debug;
        this.cache = {}
      }
      PageService.prototype.mount = function () {
      };
      PageService.prototype.update = function () {
      };
      PageService.prototype.register = function (id, enterFn, startFn, stopFn) {
        if (this.cache[id]) {
          void 0
        }
        return this.cache[id] = {
          id: id,
          enter: enterFn,
          start: startFn,
          stop: stopFn,
          root: null
        }
      };
      PageService.prototype.show = function (id) {
        var page;
        page = this.cache[id];
        if (page == null) {
          void 0
        }
        if (this.current != null) {
          page.root = this.current.stop(this)
        }
        if (!page.root) {
          page.root = page.enter(this);
          page.root = page.start(this);
          if (this.debug) {
            void 0
          }
        } else {
          page.root = page.start(this);
          if (this.debug) {
            void 0
          }
        }
        this.current = page.root;
        return this.current
      };
      return PageService
    }()
  });
  // source: src/services/command.coffee
  rqzt.define('./services/command', function (module, exports, __dirname, __filename, process) {
    var CommandService;
    module.exports = CommandService = function () {
      CommandService.prototype.commands = null;
      CommandService.prototype.daisho = null;
      function CommandService(daisho, debug) {
        this.daisho = daisho;
        this.debug = debug;
        this.commands = {}
      }
      CommandService.prototype.register = function (command, hint, fn) {
        if (this.commands[command]) {
          void 0
        }
        return this.commands[command] = {
          command: command,
          hint: hint,
          fn: fn
        }
      };
      CommandService.prototype.find = function (command) {
        var cmd, found, opts, ref;
        found = [];
        ref = this.commands;
        for (cmd in ref) {
          opts = ref[cmd];
          if (opts.command.indexOf(command) === 0) {
            found.push(opts)
          }
        }
        found.sort(function (a, b) {
          var nameA, nameB;
          nameA = a.command.toLowerCase();
          nameB = b.command.toLowerCase();
          if (nameA < nameB) {
            return -1
          }
          if (nameA > nameB) {
            return 1
          }
          return 0
        });
        return found
      };
      CommandService.prototype.execute = function (command, args) {
        command = this.commands[command];
        if (!command) {
          void 0
        }
        return command.fn.apply(this, args)
      };
      return CommandService
    }()
  });
  // source: src/index.coffee
  rqzt.define('./index', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Daisho, HanzoJS, Services, Tween, Views, animate, blueprints, reservedTags;
    if (typeof window !== 'undefined' && window !== null) {
      window.$ = rqzt('jquery/dist/jquery')
    }
    rqzt('selectize/dist/js/selectize');
    HanzoJS = rqzt('hanzo.js/lib/browser');
    blueprints = rqzt('./blueprints');
    if (typeof window !== 'undefined' && window !== null) {
      window.riot = rqzt('riot/riot')
    }
    riot.observable = rqzt('riot-observable/dist/observable');
    window.requestAnimationFrame = rqzt('raf');
    CrowdControl = rqzt('crowdcontrol/lib');
    Tween = rqzt('tween.js/src/Tween');
    animate = function (time) {
      requestAnimationFrame(animate);
      return Tween.update(time)
    };
    requestAnimationFrame(animate);
    reservedTags = {};
    CrowdControl.Views.Form.register = CrowdControl.Views.View.register = function () {
      var r;
      if (reservedTags[this.tag]) {
        throw new Error(this.tag + ' is reserved:', reservedTags[this.tag])
      }
      r = new this;
      this.tag = r.tag;
      reservedTags[this.tag] = this;
      return r
    };
    Views = rqzt('./views');
    Views.register();
    Services = rqzt('./services');
    module.exports = Daisho = function () {
      Daisho.CrowdControl = CrowdControl;
      Daisho.Views = Views;
      Daisho.Graphics = Views.Graphics;
      Daisho.Services = Services;
      Daisho.Events = rqzt('./events');
      Daisho.mediator = rqzt('./mediator');
      Daisho.Riot = riot;
      Daisho.util = rqzt('./util');
      Daisho.prototype.client = null;
      Daisho.prototype.data = null;
      Daisho.prototype.settings = null;
      Daisho.prototype.modules = null;
      Daisho.prototype.debug = false;
      Daisho.prototype.services = null;
      Daisho.prototype.util = Daisho.util;
      function Daisho(url, modules, data, settings, debug) {
        var k, v;
        this.data = data;
        this.settings = settings;
        if (debug == null) {
          debug = false
        }
        this.client = new HanzoJS.Api({
          debug: debug,
          endpoint: url
        });
        this.debug = debug;
        this.services = {
          menu: new Services.Menu(this, debug),
          page: new Services.Page(this, debug),
          command: new Services.Command(this, debug)
        };
        this.services.page.mount = function (_this) {
          return function () {
            return _this.mount.apply(_this, arguments)
          }
        }(this);
        this.services.page.update = function (_this) {
          return function () {
            return _this.update.apply(_this, arguments)
          }
        }(this);
        for (k in blueprints) {
          v = blueprints[k];
          this.client.addBlueprints(k, v)
        }
        this.modules = modules
      }
      Daisho.prototype.start = function () {
        var k, module, modules;
        modules = this.modules;
        for (k in modules) {
          module = modules[k];
          if (typeof module === 'string') {
          } else {
            new module(this, this.services.page, this.services.menu, this.services.command)
          }
        }
        return this.services.menu.start()
      };
      Daisho.prototype.mount = function (tag, opts) {
        var isHTML, tagName;
        if (opts == null) {
          opts = {}
        }
        isHTML = tag instanceof HTMLElement;
        if (isHTML) {
          tagName = tag.tagName.toLowerCase()
        } else {
          tagName = tag
        }
        if (!opts.client) {
          opts.client = this.client
        }
        if (!opts.data) {
          if (!this.data.get(tagName)) {
            this.data.set(tagName, {})
          }
          opts.data = this.data.ref(tagName)
        }
        if (!opts.parentData) {
          opts.parentData = this.data
        }
        if (!opts.services) {
          opts.settings = this.settings
        }
        if (!opts.services) {
          opts.services = this.services
        }
        if (!opts.mediator) {
          opts.mediator = Daisho.mediator
        }
        if (!opts.daisho) {
          opts.daisho = this
        }
        if (typeof tag === 'string') {
          return riot.mount(tag, opts)
        } else if (isHTML) {
          return riot.mount(tag, tagName, opts)
        }
      };
      Daisho.prototype.update = function () {
        return requestAnimationFrame(function () {
          return riot.update.apply(riot, arguments)
        })
      };
      return Daisho
    }()
  });
  rqzt('./index')
}.call(this, this))//# sourceMappingURL=data:application/json;charset=utf-8;base64,