(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require a module
  function rqzt(file, callback) {
    if ({}.hasOwnProperty.call(rqzt.cache, file))
      return rqzt.cache[file];
    // Handle async require
    if (typeof callback == 'function') {
      rqzt.load(file, callback);
      return
    }
    var resolved = rqzt.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      rqzt: rqzt,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    rqzt.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return rqzt.cache[file] = module$.exports
  }
  rqzt.modules = {};
  rqzt.cache = {};
  rqzt.resolve = function (file) {
    return {}.hasOwnProperty.call(rqzt.modules, file) ? rqzt.modules[file] : void 0
  };
  // Define normal static module
  rqzt.define = function (file, fn) {
    rqzt.modules[file] = fn
  };
  // source: src/index.coffee
  rqzt.define('./index', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Views, reservedTags;
    window.$ = rqzt('jquery/dist/jquery');
    rqzt('selectize/dist/js/selectize');
    window.requestAnimationFrame = rqzt('raf');
    CrowdControl = rqzt('crowdcontrol/lib');
    reservedTags = {};
    CrowdControl.Views.View.register = function () {
      var r;
      if (reservedTags[this.tag]) {
        throw new Error(this.tag + ' is reserved:', reservedTags[this.tag])
      }
      r = new this;
      reservedTags[this.tag] = this;
      return r
    };
    Views = rqzt('./views');
    Views.register()
  });
  // source: node_modules/jquery/dist/jquery.js
  rqzt.define('jquery/dist/jquery', function (module, exports, __dirname, __filename, process) {
    /*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
    (function (global, factory) {
      'use strict';
      if (typeof module === 'object' && typeof module.exports === 'object') {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ? factory(global, true) : function (w) {
          if (!w.document) {
            throw new Error('jQuery requires a window with a document')
          }
          return factory(w)
        }
      } else {
        factory(global)
      }  // Pass this if window is not defined yet
    }(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
      // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
      // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
      // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
      // enough that all such attempts are guarded in a try block.
      'use strict';
      var arr = [];
      var document = window.document;
      var getProto = Object.getPrototypeOf;
      var slice = arr.slice;
      var concat = arr.concat;
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      function DOMEval(code, doc) {
        doc = doc || document;
        var script = doc.createElement('script');
        script.text = code;
        doc.head.appendChild(script).parentNode.removeChild(script)
      }
      /* global Symbol */
      // Defining this global in .eslintrc.json would create a danger of using the global
      // unguarded in another place, it seems safer to define global only for this module
      var version = '3.1.1',
        // Define a local copy of jQuery
        jQuery = function (selector, context) {
          // The jQuery object is actually just the init constructor 'enhanced'
          // Need init if jQuery is called (just allow error to be thrown if not included)
          return new jQuery.fn.init(selector, context)
        },
        // Support: Android <=4.0 only
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g,
        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function (all, letter) {
          return letter.toUpperCase()
        };
      jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function () {
          return slice.call(this)
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function (num) {
          // Return all the elements in a clean array
          if (num == null) {
            return slice.call(this)
          }
          // Return just the one element from the set
          return num < 0 ? this[num + this.length] : this[num]
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function (elems) {
          // Build a new jQuery matched element set
          var ret = jQuery.merge(this.constructor(), elems);
          // Add the old object onto the stack (as a reference)
          ret.prevObject = this;
          // Return the newly-formed element set
          return ret
        },
        // Execute a callback for every element in the matched set.
        each: function (callback) {
          return jQuery.each(this, callback)
        },
        map: function (callback) {
          return this.pushStack(jQuery.map(this, function (elem, i) {
            return callback.call(elem, i, elem)
          }))
        },
        slice: function () {
          return this.pushStack(slice.apply(this, arguments))
        },
        first: function () {
          return this.eq(0)
        },
        last: function () {
          return this.eq(-1)
        },
        eq: function (i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
        },
        end: function () {
          return this.prevObject || this.constructor()
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === 'boolean') {
          deep = target;
          // Skip the boolean and the target
          target = arguments[i] || {};
          i++
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
          target = {}
        }
        // Extend jQuery itself if only one argument is passed
        if (i === length) {
          target = this;
          i--
        }
        for (; i < length; i++) {
          // Only deal with non-null/undefined values
          if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
              src = target[name];
              copy = options[name];
              // Prevent never-ending loop
              if (target === copy) {
                continue
              }
              // Recurse if we're merging plain objects or arrays
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && jQuery.isArray(src) ? src : []
                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {}
                }
                // Never move original objects, clone them
                target[name] = jQuery.extend(deep, clone, copy)  // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy
              }
            }
          }
        }
        // Return the modified object
        return target
      };
      jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function (msg) {
          throw new Error(msg)
        },
        noop: function () {
        },
        isFunction: function (obj) {
          return jQuery.type(obj) === 'function'
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
          return obj != null && obj === obj.window
        },
        isNumeric: function (obj) {
          // As of jQuery 3.0, isNumeric is limited to
          // strings and numbers (primitives or objects)
          // that can be coerced to finite numbers (gh-2662)
          var type = jQuery.type(obj);
          return (type === 'number' || type === 'string') && // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj))
        },
        isPlainObject: function (obj) {
          var proto, Ctor;
          // Detect obvious negatives
          // Use toString instead of jQuery.type to catch host objects
          if (!obj || toString.call(obj) !== '[object Object]') {
            return false
          }
          proto = getProto(obj);
          // Objects with no prototype (e.g., `Object.create( null )`) are plain
          if (!proto) {
            return true
          }
          // Objects with prototype are plain iff they were constructed by a global Object function
          Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString
        },
        isEmptyObject: function (obj) {
          /* eslint-disable no-unused-vars */
          // See https://github.com/eslint/eslint/issues/6125
          var name;
          for (name in obj) {
            return false
          }
          return true
        },
        type: function (obj) {
          if (obj == null) {
            return obj + ''
          }
          // Support: Android <=2.3 only (functionish RegExp)
          return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj
        },
        // Evaluates a script in a global context
        globalEval: function (code) {
          DOMEval(code)
        },
        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE <=9 - 11, Edge 12 - 13
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function (string) {
          return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase)
        },
        nodeName: function (elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
        },
        each: function (obj, callback) {
          var length, i = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          }
          return obj
        },
        // Support: Android <=4.0 only
        trim: function (text) {
          return text == null ? '' : (text + '').replace(rtrim, '')
        },
        // results is for internal usage only
        makeArray: function (arr, results) {
          var ret = results || [];
          if (arr != null) {
            if (isArrayLike(Object(arr))) {
              jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr)
            } else {
              push.call(ret, arr)
            }
          }
          return ret
        },
        inArray: function (elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i)
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function (first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j]
          }
          first.length = i;
          return first
        },
        grep: function (elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          // Go through the array, only saving the items
          // that pass the validator function
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i])
            }
          }
          return matches
        },
        // arg is for internal usage only
        map: function (elems, callback, arg) {
          var length, value, i = 0, ret = [];
          // Go through the array, translating each of the items to their new values
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value)
              }
            }  // Go through every key on the object,
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value)
              }
            }
          }
          // Flatten any nested arrays
          return concat.apply([], ret)
        },
        // A global GUID counter for objects
        guid: 1,
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function (fn, context) {
          var tmp, args, proxy;
          if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp
          }
          // Quick check to determine if target is callable, in the spec
          // this throws a TypeError, but we will just return undefined.
          if (!jQuery.isFunction(fn)) {
            return undefined
          }
          // Simulated bind
          args = slice.call(arguments, 2);
          proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)))
          };
          // Set the guid of unique handler to the same of original handler, so it can be removed
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy
        },
        now: Date.now,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
      });
      if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator]
      }
      // Populate the class2type map
      jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase()
      });
      function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && 'length' in obj && obj.length, type = jQuery.type(obj);
        if (type === 'function' || jQuery.isWindow(obj)) {
          return false
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj
      }
      var Sizzle = /*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
      function (window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate,
          // Local document vars
          setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
          // Instance-specific data
          expando = 'sizzle' + 1 * new Date, preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
            if (a === b) {
              hasDuplicate = true
            }
            return 0
          },
          // Instance methods
          hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
          // Use a stripped-down indexOf as it's faster than native
          // https://jsperf.com/thor-indexof-vs-for/5
          indexOf = function (list, elem) {
            var i = 0, len = list.length;
            for (; i < len; i++) {
              if (list[i] === elem) {
                return i
              }
            }
            return -1
          }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
          // Regular expressions
          // http://www.w3.org/TR/css3-selectors/#whitespace
          whitespace = '[\\x20\\t\\r\\n\\f]',
          // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
          identifier = '(?:\\\\.|[\\w-]|[^ -\\xa0])+',
          // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
          attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + // Operator (capture 2)
          '*([*^$|!~]?=)' + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
          '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
          // 1. quoted (capture 3; capture 4 or capture 5)
          '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + // 2. simple (capture 6)
          '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + // 3. anything else (capture 2)
          '.*' + ')\\)|)',
          // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
          rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
            'ID': new RegExp('^#(' + identifier + ')'),
            'CLASS': new RegExp('^\\.(' + identifier + ')'),
            'TAG': new RegExp('^(' + identifier + '|[*])'),
            'ATTR': new RegExp('^' + attributes),
            'PSEUDO': new RegExp('^' + pseudos),
            'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
            'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
          }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/,
          // Easily-parseable/retrievable ID or TAG or CLASS selectors
          rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/,
          // CSS escapes
          // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
          runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
            var high = '0x' + escaped - 65536;
            // NaN means non-codepoint
            // Support: Firefox<24
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
            String.fromCharCode(high + 65536) : // Supplemental Plane codepoint (surrogate pair)
            String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
          },
          // CSS string/identifier serialization
          // https://drafts.csswg.org/cssom/#common-serializing-idioms
          rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function (ch, asCodePoint) {
            if (asCodePoint) {
              // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
              if (ch === ' ') {
                return '�'
              }
              // Control characters and (dependent upon position) numbers get escaped as code points
              return ch.slice(0, -1) + '\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' '
            }
            // Other potentially-special ASCII characters get backslash-escaped
            return '\\' + ch
          },
          // Used for iframes
          // See setDocument()
          // Removing the function wrapper causes a "Permission Denied"
          // error in IE
          unloadHandler = function () {
            setDocument()
          }, disabledAncestor = addCombinator(function (elem) {
            return elem.disabled === true && ('form' in elem || 'label' in elem)
          }, {
            dir: 'parentNode',
            next: 'legend'
          });
        // Optimize for push.apply( _, NodeList )
        try {
          push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
          // Support: Android<4.0
          // Detect silently failing push.apply
          arr[preferredDoc.childNodes.length].nodeType
        } catch (e) {
          push = {
            apply: arr.length ? // Leverage slice if possible
            function (target, els) {
              push_native.apply(target, slice.call(els))
            } : // Support: IE<9
            // Otherwise append directly
            function (target, els) {
              var j = target.length, i = 0;
              // Can't trust NodeList.length
              while (target[j++] = els[i++]) {
              }
              target.length = j - 1
            }
          }
        }
        function Sizzle(selector, context, results, seed) {
          var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument,
            // nodeType defaults to 9, since context defaults to document
            nodeType = context ? context.nodeType : 9;
          results = results || [];
          // Return early from calls with invalid selector or context
          if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results
          }
          // Try to shortcut find operations (as opposed to filters) in HTML documents
          if (!seed) {
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
              setDocument(context)
            }
            context = context || document;
            if (documentIsHTML) {
              // If the selector is sufficiently simple, try using a "get*By*" DOM method
              // (excepting DocumentFragment context, where the methods don't exist)
              if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                // ID selector
                if (m = match[1]) {
                  // Document context
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      // Support: IE, Opera, Webkit
                      // TODO: identify versions
                      // getElementById can match elements by name instead of ID
                      if (elem.id === m) {
                        results.push(elem);
                        return results
                      }
                    } else {
                      return results
                    }  // Element context
                  } else {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results
                    }
                  }  // Type selector
                } else if (match[2]) {
                  push.apply(results, context.getElementsByTagName(selector));
                  return results  // Class selector
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                  push.apply(results, context.getElementsByClassName(m));
                  return results
                }
              }
              // Take advantage of querySelectorAll
              if (support.qsa && !compilerCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                if (nodeType !== 1) {
                  newContext = context;
                  newSelector = selector  // qSA looks outside Element context, which is not what we want
                                          // Thanks to Andrew Dupont for this workaround technique
                                          // Support: IE <=8
                                          // Exclude object elements
                } else if (context.nodeName.toLowerCase() !== 'object') {
                  // Capture the context ID, setting it first if necessary
                  if (nid = context.getAttribute('id')) {
                    nid = nid.replace(rcssescape, fcssescape)
                  } else {
                    context.setAttribute('id', nid = expando)
                  }
                  // Prefix every selector in the list
                  groups = tokenize(selector);
                  i = groups.length;
                  while (i--) {
                    groups[i] = '#' + nid + ' ' + toSelector(groups[i])
                  }
                  newSelector = groups.join(',');
                  // Expand context for sibling selectors
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context
                }
                if (newSelector) {
                  try {
                    push.apply(results, newContext.querySelectorAll(newSelector));
                    return results
                  } catch (qsaError) {
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute('id')
                    }
                  }
                }
              }
            }
          }
          // All others
          return select(selector.replace(rtrim, '$1'), context, results, seed)
        }
        /**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
        function createCache() {
          var keys = [];
          function cache(key, value) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if (keys.push(key + ' ') > Expr.cacheLength) {
              // Only keep the most recent entries
              delete cache[keys.shift()]
            }
            return cache[key + ' '] = value
          }
          return cache
        }
        /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
        function markFunction(fn) {
          fn[expando] = true;
          return fn
        }
        /**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
        function assert(fn) {
          var el = document.createElement('fieldset');
          try {
            return !!fn(el)
          } catch (e) {
            return false
          } finally {
            // Remove from its parent by default
            if (el.parentNode) {
              el.parentNode.removeChild(el)
            }
            // release memory in IE
            el = null
          }
        }
        /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
        function addHandle(attrs, handler) {
          var arr = attrs.split('|'), i = arr.length;
          while (i--) {
            Expr.attrHandle[arr[i]] = handler
          }
        }
        /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
        function siblingCheck(a, b) {
          var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
          // Use IE sourceIndex if available on both nodes
          if (diff) {
            return diff
          }
          // Check if b follows a
          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1
              }
            }
          }
          return a ? 1 : -1
        }
        /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
        function createInputPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === 'input' && elem.type === type
          }
        }
        /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
        function createButtonPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === 'input' || name === 'button') && elem.type === type
          }
        }
        /**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
        function createDisabledPseudo(disabled) {
          // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
          return function (elem) {
            // Only certain elements can match :enabled or :disabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
            if ('form' in elem) {
              // Check for inherited disabledness on relevant non-disabled elements:
              // * listed form-associated elements in a disabled fieldset
              //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
              // * option elements in a disabled optgroup
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
              // All such elements have a "form" property.
              if (elem.parentNode && elem.disabled === false) {
                // Option elements defer to a parent optgroup if present
                if ('label' in elem) {
                  if ('label' in elem.parentNode) {
                    return elem.parentNode.disabled === disabled
                  } else {
                    return elem.disabled === disabled
                  }
                }
                // Support: IE 6 - 11
                // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                /* jshint -W018 */
                elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled
              }
              return elem.disabled === disabled  // Try to winnow out elements that can't be disabled before trusting the disabled property.
                                                 // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                                                 // even exist on them, let alone have a boolean value.
            } else if ('label' in elem) {
              return elem.disabled === disabled
            }
            // Remaining elements are neither :enabled nor :disabled
            return false
          }
        }
        /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
        function createPositionalPseudo(fn) {
          return markFunction(function (argument) {
            argument = +argument;
            return markFunction(function (seed, matches) {
              var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
              // Match elements found at the specified indexes
              while (i--) {
                if (seed[j = matchIndexes[i]]) {
                  seed[j] = !(matches[j] = seed[j])
                }
              }
            })
          })
        }
        /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== 'undefined' && context
        }
        // Expose support vars for convenience
        support = Sizzle.support = {};
        /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
        isXML = Sizzle.isXML = function (elem) {
          // documentElement is verified for cases where it doesn't yet exist
          // (such as loading iframes in IE - #4833)
          var documentElement = elem && (elem.ownerDocument || elem).documentElement;
          return documentElement ? documentElement.nodeName !== 'HTML' : false
        };
        /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
        setDocument = Sizzle.setDocument = function (node) {
          var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          // Return early if doc is invalid or already selected
          if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
            return document
          }
          // Update global variables
          document = doc;
          docElem = document.documentElement;
          documentIsHTML = !isXML(document);
          // Support: IE 9-11, Edge
          // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
          if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
            // Support: IE 11, Edge
            if (subWindow.addEventListener) {
              subWindow.addEventListener('unload', unloadHandler, false)  // Support: IE 9 - 10 only
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent('onunload', unloadHandler)
            }
          }
          /* Attributes
	---------------------------------------------------------------------- */
          // Support: IE<8
          // Verify that getAttribute really returns attributes and not properties
          // (excepting IE8 booleans)
          support.attributes = assert(function (el) {
            el.className = 'i';
            return !el.getAttribute('className')
          });
          /* getElement(s)By*
	---------------------------------------------------------------------- */
          // Check if getElementsByTagName("*") returns only elements
          support.getElementsByTagName = assert(function (el) {
            el.appendChild(document.createComment(''));
            return !el.getElementsByTagName('*').length
          });
          // Support: IE<9
          support.getElementsByClassName = rnative.test(document.getElementsByClassName);
          // Support: IE<10
          // Check if getElementById returns elements by name
          // The broken getElementById methods don't pick up programmatically-set names,
          // so use a roundabout getElementsByName test
          support.getById = assert(function (el) {
            docElem.appendChild(el).id = expando;
            return !document.getElementsByName || !document.getElementsByName(expando).length
          });
          // ID filter and find
          if (support.getById) {
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                return elem.getAttribute('id') === attrId
              }
            };
            Expr.find['ID'] = function (id, context) {
              if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : []
              }
            }
          } else {
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                return node && node.value === attrId
              }
            };
            // Support: IE 6 - 7 only
            // getElementById is not reliable as a find shortcut
            Expr.find['ID'] = function (id, context) {
              if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                var node, i, elems, elem = context.getElementById(id);
                if (elem) {
                  // Verify the id attribute
                  node = elem.getAttributeNode('id');
                  if (node && node.value === id) {
                    return [elem]
                  }
                  // Fall back on getElementsByName
                  elems = context.getElementsByName(id);
                  i = 0;
                  while (elem = elems[i++]) {
                    node = elem.getAttributeNode('id');
                    if (node && node.value === id) {
                      return [elem]
                    }
                  }
                }
                return []
              }
            }
          }
          // Tag
          Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
            if (typeof context.getElementsByTagName !== 'undefined') {
              return context.getElementsByTagName(tag)  // DocumentFragment nodes don't have gEBTN
            } else if (support.qsa) {
              return context.querySelectorAll(tag)
            }
          } : function (tag, context) {
            var elem, tmp = [], i = 0,
              // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
              results = context.getElementsByTagName(tag);
            // Filter out possible comments
            if (tag === '*') {
              while (elem = results[i++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem)
                }
              }
              return tmp
            }
            return results
          };
          // Class
          Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
            if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
              return context.getElementsByClassName(className)
            }
          };
          /* QSA/matchesSelector
	---------------------------------------------------------------------- */
          // QSA and matchesSelector support
          // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
          rbuggyMatches = [];
          // qSa(:focus) reports false when true (Chrome 21)
          // We allow this because of a bug in IE8/9 that throws an error
          // whenever `document.activeElement` is accessed on an iframe
          // So, we allow :focus to pass through QSA all the time to avoid the IE error
          // See https://bugs.jquery.com/ticket/13378
          rbuggyQSA = [];
          if (support.qsa = rnative.test(document.querySelectorAll)) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function (el) {
              // Select is set to empty string on purpose
              // This is to test IE's treatment of not explicitly
              // setting a boolean content attribute,
              // since its presence should be enough
              // https://bugs.jquery.com/ticket/12359
              docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
              // Support: IE8, Opera 11-12.16
              // Nothing should be selected when empty strings follow ^= or $= or *=
              // The test attribute must be unknown in Opera but "safe" for WinRT
              // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")')
              }
              // Support: IE8
              // Boolean attributes and "value" are not treated correctly
              if (!el.querySelectorAll('[selected]').length) {
                rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')')
              }
              // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
              if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                rbuggyQSA.push('~=')
              }
              // Webkit/Opera - :checked should return selected option elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              // IE8 throws error here and will not see later tests
              if (!el.querySelectorAll(':checked').length) {
                rbuggyQSA.push(':checked')
              }
              // Support: Safari 8+, iOS 8+
              // https://bugs.webkit.org/show_bug.cgi?id=136851
              // In-page `selector#id sibling-combinator selector` fails
              if (!el.querySelectorAll('a#' + expando + '+*').length) {
                rbuggyQSA.push('.#.+[+~]')
              }
            });
            assert(function (el) {
              el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";
              // Support: Windows 8 Native Apps
              // The type and name attributes are restricted during .innerHTML assignment
              var input = document.createElement('input');
              input.setAttribute('type', 'hidden');
              el.appendChild(input).setAttribute('name', 'D');
              // Support: IE8
              // Enforce case-sensitivity of name attribute
              if (el.querySelectorAll('[name=d]').length) {
                rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=')
              }
              // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
              // IE8 throws error here and will not see later tests
              if (el.querySelectorAll(':enabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              // Support: IE9-11+
              // IE's :disabled selector does not pick up the children of disabled fieldsets
              docElem.appendChild(el).disabled = true;
              if (el.querySelectorAll(':disabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              // Opera 10-11 does not throw on post-comma invalid pseudos
              el.querySelectorAll('*,:x');
              rbuggyQSA.push(',.*:')
            })
          }
          if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function (el) {
              // Check to see if it's possible to do matchesSelector
              // on a disconnected node (IE 9)
              support.disconnectedMatch = matches.call(el, '*');
              // This should fail with an exception
              // Gecko does not error, returns false instead
              matches.call(el, "[s!='']:x");
              rbuggyMatches.push('!=', pseudos)
            })
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
          /* Contains
	---------------------------------------------------------------------- */
          hasCompare = rnative.test(docElem.compareDocumentPosition);
          // Element contains another
          // Purposefully self-exclusive
          // As in, an element does not contain itself
          contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
          } : function (a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true
                }
              }
            }
            return false
          };
          /* Sorting
	---------------------------------------------------------------------- */
          // Document order sorting
          sortOrder = hasCompare ? function (a, b) {
            // Flag for duplicate removal
            if (a === b) {
              hasDuplicate = true;
              return 0
            }
            // Sort on method existence if only one input has compareDocumentPosition
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare
            }
            // Calculate position if both inputs belong to the same document
            compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
            1;
            // Disconnected nodes
            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
              // Choose the first element that is related to our preferred document
              if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                return -1
              }
              if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                return 1
              }
              // Maintain original order
              return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
            }
            return compare & 4 ? -1 : 1
          } : function (a, b) {
            // Exit early if the nodes are identical
            if (a === b) {
              hasDuplicate = true;
              return 0
            }
            var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
            // Parentless nodes are either documents or disconnected
            if (!aup || !bup) {
              return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0  // If the nodes are siblings, we can do a quick check
            } else if (aup === bup) {
              return siblingCheck(a, b)
            }
            // Otherwise we need full lists of their ancestors for comparison
            cur = a;
            while (cur = cur.parentNode) {
              ap.unshift(cur)
            }
            cur = b;
            while (cur = cur.parentNode) {
              bp.unshift(cur)
            }
            // Walk down the tree looking for a discrepancy
            while (ap[i] === bp[i]) {
              i++
            }
            return i ? // Do a sibling check if the nodes have a common ancestor
            siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
            ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
          };
          return document
        };
        Sizzle.matches = function (expr, elements) {
          return Sizzle(expr, null, null, elements)
        };
        Sizzle.matchesSelector = function (elem, expr) {
          // Set document vars if needed
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          // Make sure that attribute selectors are quoted
          expr = expr.replace(rattributeQuotes, "='$1']");
          if (support.matchesSelector && documentIsHTML && !compilerCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              // IE 9's matchesSelector returns false on disconnected nodes
              if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) {
                return ret
              }
            } catch (e) {
            }
          }
          return Sizzle(expr, document, null, [elem]).length > 0
        };
        Sizzle.contains = function (context, elem) {
          // Set document vars if needed
          if ((context.ownerDocument || context) !== document) {
            setDocument(context)
          }
          return contains(context, elem)
        };
        Sizzle.attr = function (elem, name) {
          // Set document vars if needed
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          var fn = Expr.attrHandle[name.toLowerCase()],
            // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
          return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
        };
        Sizzle.escape = function (sel) {
          return (sel + '').replace(rcssescape, fcssescape)
        };
        Sizzle.error = function (msg) {
          throw new Error('Syntax error, unrecognized expression: ' + msg)
        };
        /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
        Sizzle.uniqueSort = function (results) {
          var elem, duplicates = [], j = 0, i = 0;
          // Unless we *know* we can detect duplicates, assume their presence
          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice(0);
          results.sort(sortOrder);
          if (hasDuplicate) {
            while (elem = results[i++]) {
              if (elem === results[i]) {
                j = duplicates.push(i)
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1)
            }
          }
          // Clear input after sorting to release objects
          // See https://github.com/jquery/sizzle/pull/225
          sortInput = null;
          return results
        };
        /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
        getText = Sizzle.getText = function (elem) {
          var node, ret = '', i = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            // If no nodeType, this is expected to be an array
            while (node = elem[i++]) {
              // Do not traverse comment nodes
              ret += getText(node)
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (jQuery #11153)
            if (typeof elem.textContent === 'string') {
              return elem.textContent
            } else {
              // Traverse its children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem)
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue
          }
          // Do not include comment or processing instruction nodes
          return ret
        };
        Expr = Sizzle.selectors = {
          // Can be adjusted by the user
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            '>': {
              dir: 'parentNode',
              first: true
            },
            ' ': { dir: 'parentNode' },
            '+': {
              dir: 'previousSibling',
              first: true
            },
            '~': { dir: 'previousSibling' }
          },
          preFilter: {
            'ATTR': function (match) {
              match[1] = match[1].replace(runescape, funescape);
              // Move the given value to match[3] whether quoted or unquoted
              match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
              if (match[2] === '~=') {
                match[3] = ' ' + match[3] + ' '
              }
              return match.slice(0, 4)
            },
            'CHILD': function (match) {
              /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === 'nth') {
                // nth-* requires argument
                if (!match[3]) {
                  Sizzle.error(match[0])
                }
                // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                match[5] = +(match[7] + match[8] || match[3] === 'odd')  // other types prohibit arguments
              } else if (match[3]) {
                Sizzle.error(match[0])
              }
              return match
            },
            'PSEUDO': function (match) {
              var excess, unquoted = !match[6] && match[2];
              if (matchExpr['CHILD'].test(match[0])) {
                return null
              }
              // Accept quoted arguments as-is
              if (match[3]) {
                match[2] = match[4] || match[5] || ''  // Strip excess characters from unquoted arguments
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                // excess is a negative index
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess)
              }
              // Return only captures needed by the pseudo filter method (type and argument)
              return match.slice(0, 3)
            }
          },
          filter: {
            'TAG': function (nodeNameSelector) {
              var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === '*' ? function () {
                return true
              } : function (elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
              }
            },
            'CLASS': function (className) {
              var pattern = classCache[className + ' '];
              return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '')
              })
            },
            'ATTR': function (name, operator, check) {
              return function (elem) {
                var result = Sizzle.attr(elem, name);
                if (result == null) {
                  return operator === '!='
                }
                if (!operator) {
                  return true
                }
                result += '';
                return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false
              }
            },
            'CHILD': function (type, what, argument, first, last) {
              var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
              return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
              function (elem) {
                return !!elem.parentNode
              } : function (elem, context, xml) {
                var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                if (parent) {
                  // :(first|last|only)-(child|of-type)
                  if (simple) {
                    while (dir) {
                      node = elem;
                      while (node = node[dir]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false
                        }
                      }
                      // Reverse direction for :only-* (if we haven't yet done so)
                      start = dir = type === 'only' && !start && 'nextSibling'
                    }
                    return true
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  // non-xml :nth-child(...) stores cache data on `parent`
                  if (forward && useCache) {
                    // Seek `elem` from a previously-cached index
                    // ...in a gzip-friendly way
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {});
                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                      // When found, cache indexes on `parent` and break
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        uniqueCache[type] = [
                          dirruns,
                          nodeIndex,
                          diff
                        ];
                        break
                      }
                    }
                  } else {
                    // Use previously-cached element index if available
                    if (useCache) {
                      // ...in a gzip-friendly way
                      node = elem;
                      outerCache = node[expando] || (node[expando] = {});
                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex
                    }
                    // xml :nth-child(...)
                    // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                    if (diff === false) {
                      // Use the same loop as above to seek `elem` from the start
                      while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          // Cache the index of each encountered element
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)
                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            uniqueCache[type] = [
                              dirruns,
                              diff
                            ]
                          }
                          if (node === elem) {
                            break
                          }
                        }
                      }
                    }
                  }
                  // Incorporate the offset, then check against cycle size
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0
                }
              }
            },
            'PSEUDO': function (pseudo, argument) {
              // pseudo-class names are case-insensitive
              // http://www.w3.org/TR/selectors/#pseudo-classes
              // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
              // Remember that setFilters inherits from pseudos
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
              // The user may use createPseudo to indicate that
              // arguments are needed to create the filter function
              // just as Sizzle does
              if (fn[expando]) {
                return fn(argument)
              }
              // But maintain support for old signatures
              if (fn.length > 1) {
                args = [
                  pseudo,
                  pseudo,
                  '',
                  argument
                ];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                  var idx, matched = fn(seed, argument), i = matched.length;
                  while (i--) {
                    idx = indexOf(seed, matched[i]);
                    seed[idx] = !(matches[idx] = matched[i])
                  }
                }) : function (elem) {
                  return fn(elem, 0, args)
                }
              }
              return fn
            }
          },
          pseudos: {
            // Potentially complex pseudos
            'not': markFunction(function (selector) {
              // Trim the selector passed to compile
              // to avoid treating leading and trailing
              // spaces as combinators
              var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
              return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                // Match elements unmatched by `matcher`
                while (i--) {
                  if (elem = unmatched[i]) {
                    seed[i] = !(matches[i] = elem)
                  }
                }
              }) : function (elem, context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                // Don't keep the element (issue #299)
                input[0] = null;
                return !results.pop()
              }
            }),
            'has': markFunction(function (selector) {
              return function (elem) {
                return Sizzle(selector, elem).length > 0
              }
            }),
            'contains': markFunction(function (text) {
              text = text.replace(runescape, funescape);
              return function (elem) {
                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
              }
            }),
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            'lang': markFunction(function (lang) {
              // lang value must be a valid identifier
              if (!ridentifier.test(lang || '')) {
                Sizzle.error('unsupported lang: ' + lang)
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function (elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + '-') === 0
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false
              }
            }),
            // Miscellaneous
            'target': function (elem) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice(1) === elem.id
            },
            'root': function (elem) {
              return elem === docElem
            },
            'focus': function (elem) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
            },
            // Boolean properties
            'enabled': createDisabledPseudo(false),
            'disabled': createDisabledPseudo(true),
            'checked': function (elem) {
              // In CSS3, :checked should return both checked and selected elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              var nodeName = elem.nodeName.toLowerCase();
              return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected
            },
            'selected': function (elem) {
              // Accessing this property makes selected-by-default
              // options in Safari work properly
              if (elem.parentNode) {
                elem.parentNode.selectedIndex
              }
              return elem.selected === true
            },
            // Contents
            'empty': function (elem) {
              // http://www.w3.org/TR/selectors/#empty-pseudo
              // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
              //   but not by others (comment: 8; processing instruction: 7; etc.)
              // nodeType < 6 works because attributes (2) do not appear as children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false
                }
              }
              return true
            },
            'parent': function (elem) {
              return !Expr.pseudos['empty'](elem)
            },
            // Element/input types
            'header': function (elem) {
              return rheader.test(elem.nodeName)
            },
            'input': function (elem) {
              return rinputs.test(elem.nodeName)
            },
            'button': function (elem) {
              var name = elem.nodeName.toLowerCase();
              return name === 'input' && elem.type === 'button' || name === 'button'
            },
            'text': function (elem) {
              var attr;
              return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text')
            },
            // Position-in-collection
            'first': createPositionalPseudo(function () {
              return [0]
            }),
            'last': createPositionalPseudo(function (matchIndexes, length) {
              return [length - 1]
            }),
            'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument]
            }),
            'even': createPositionalPseudo(function (matchIndexes, length) {
              var i = 0;
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'odd': createPositionalPseudo(function (matchIndexes, length) {
              var i = 1;
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; --i >= 0;) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; ++i < length;) {
                matchIndexes.push(i)
              }
              return matchIndexes
            })
          }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        // Add button/input type pseudos
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
          }) {
          Expr.pseudos[i] = createInputPseudo(i)
        }
        for (i in {
            submit: true,
            reset: true
          }) {
          Expr.pseudos[i] = createButtonPseudo(i)
        }
        // Easy API for creating new setFilters
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters;
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0)
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            // Comma and first run
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice(match[0].length) || soFar
              }
              groups.push(tokens = [])
            }
            matched = false;
            // Combinators
            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace(rtrim, ' ')
              });
              soFar = soFar.slice(matched.length)
            }
            // Filters
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice(matched.length)
              }
            }
            if (!matched) {
              break
            }
          }
          // Return the length of the invalid excess
          // if we're just parsing
          // Otherwise, throw an error or return tokens
          return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
          tokenCache(selector, groups).slice(0)
        };
        function toSelector(tokens) {
          var i = 0, len = tokens.length, selector = '';
          for (; i < len; i++) {
            selector += tokens[i].value
          }
          return selector
        }
        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === 'parentNode', doneName = done++;
          return combinator.first ? // Check against closest ancestor/preceding element
          function (elem, context, xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml)
              }
            }
            return false
          } : // Check against all ancestor/preceding elements
          function (elem, context, xml) {
            var oldCache, uniqueCache, outerCache, newCache = [
                dirruns,
                doneName
              ];
            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
            if (xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true
                  }
                }
              }
            } else {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)
                  uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                  if (skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir] || elem
                  } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    // Assign to newCache so results back-propagate to previous elements
                    return newCache[2] = oldCache[2]
                  } else {
                    // Reuse newcache so results back-propagate to previous elements
                    uniqueCache[key] = newCache;
                    // A match means we're done; a fail means we have to keep checking
                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true
                    }
                  }
                }
              }
            }
            return false
          }
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function (elem, context, xml) {
            var i = matchers.length;
            while (i--) {
              if (!matchers[i](elem, context, xml)) {
                return false
              }
            }
            return true
          } : matchers[0]
        }
        function multipleContexts(selector, contexts, results) {
          var i = 0, len = contexts.length;
          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results)
          }
          return results
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
          for (; i < len; i++) {
            if (elem = unmatched[i]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i)
                }
              }
            }
          }
          return newUnmatched
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter)
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector)
          }
          return markFunction(function (seed, results, context, xml) {
            var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
              // Get initial elements from seed or context
              elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
              // Prefilter to get matcher input, preserving a map for seed-results synchronization
              matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
              postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
              [] : // ...otherwise use results directly
              results : matcherIn;
            // Find primary matches
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml)
            }
            // Apply postFilter
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              // Un-match failing elements by moving them back to matcherIn
              i = temp.length;
              while (i--) {
                if (elem = temp[i]) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  // Get the final matcherOut by condensing this intermediate into postFinder contexts
                  temp = [];
                  i = matcherOut.length;
                  while (i--) {
                    if (elem = matcherOut[i]) {
                      // Restore matcherIn since elem is not yet a final match
                      temp.push(matcherIn[i] = elem)
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml)
                }
                // Move matched elements from seed to results to keep them synchronized
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                    seed[temp] = !(results[temp] = elem)
                  }
                }
              }  // Add elements to results, through postFinder if defined
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml)
              } else {
                push.apply(results, matcherOut)
              }
            }
          })
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function (elem) {
              return elem === checkContext
            }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
              return indexOf(checkContext, elem) > -1
            }, implicitRelative, true), matchers = [function (elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                // Avoid hanging onto element (issue #299)
                checkContext = null;
                return ret
              }];
          for (; i < len; i++) {
            if (matcher = Expr.relative[tokens[i].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)]
            } else {
              matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
              // Return special upon seeing a positional matcher
              if (matcher[expando]) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break
                  }
                }
                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
              }
              matchers.push(matcher)
            }
          }
          return elementMatcher(matchers)
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext,
                // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find['TAG']('*', outermost),
                // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context === document || context || outermost
              }
              // Add elements passing elementMatchers directly to results
              // Support: IE<9, Safari
              // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
              for (; i !== len && (elem = elems[i]) != null; i++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context && elem.ownerDocument !== document) {
                    setDocument(elem);
                    xml = !documentIsHTML
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context || document, xml)) {
                      results.push(elem);
                      break
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique
                  }
                }
                // Track unmatched elements for set filters
                if (bySet) {
                  // They will have gone through all possible matchers
                  if (elem = !matcher && elem) {
                    matchedCount--
                  }
                  // Lengthen the array for every element, matched or not
                  if (seed) {
                    unmatched.push(elem)
                  }
                }
              }
              // `i` is now the count of elements visited above, and adding it to `matchedCount`
              // makes the latter nonnegative.
              matchedCount += i;
              // Apply set filters to unmatched elements
              // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
              // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
              // no element matchers and no seed.
              // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
              // case, which will result in a "00" `matchedCount` that differs from `i` but is also
              // numerically zero.
              if (bySet && i !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml)
                }
                if (seed) {
                  // Reintegrate element matches to eliminate the need for sorting
                  if (matchedCount > 0) {
                    while (i--) {
                      if (!(unmatched[i] || setMatched[i])) {
                        setMatched[i] = pop.call(results)
                      }
                    }
                  }
                  // Discard index placeholder values to get only actual matches
                  setMatched = condense(setMatched)
                }
                // Add matches to results
                push.apply(results, setMatched);
                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  Sizzle.uniqueSort(results)
                }
              }
              // Override manipulation of globals by nested matchers
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup
              }
              return unmatched
            };
          return bySet ? markFunction(superMatcher) : superMatcher
        }
        compile = Sizzle.compile = function (selector, match) {
          var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
          if (!cached) {
            // Generate a function of recursive functions that can be used to check each element
            if (!match) {
              match = tokenize(selector)
            }
            i = match.length;
            while (i--) {
              cached = matcherFromTokens(match[i]);
              if (cached[expando]) {
                setMatchers.push(cached)
              } else {
                elementMatchers.push(cached)
              }
            }
            // Cache the compiled function
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            // Save selector and tokenization
            cached.selector = selector
          }
          return cached
        };
        /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
        select = Sizzle.select = function (selector, context, results, seed) {
          var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          // Try to minimize operations if there is only one selector in the list and no seed
          // (the latter of which guarantees us context)
          if (match.length === 1) {
            // Reduce context if the leading compound selector is an ID
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
              if (!context) {
                return results  // Precompiled matchers will still verify ancestry, so step up a level
              } else if (compiled) {
                context = context.parentNode
              }
              selector = selector.slice(tokens.shift().value.length)
            }
            // Fetch a seed set for right-to-left matching
            i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
            while (i--) {
              token = tokens[i];
              // Abort if we hit a combinator
              if (Expr.relative[type = token.type]) {
                break
              }
              if (find = Expr.find[type]) {
                // Search, expanding context for leading sibling combinators
                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  // If seed is empty or no tokens remain, we can return early
                  tokens.splice(i, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push.apply(results, seed);
                    return results
                  }
                  break
                }
              }
            }
          }
          // Compile and execute a filtering function if one is not provided
          // Provide `match` to avoid retokenization if we modified the selector above
          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results
        };
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function (el) {
          // Should return 1, but returns 4 (following)
          return el.compareDocumentPosition(document.createElement('fieldset')) & 1
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function (el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute('href') === '#'
          })) {
          addHandle('type|href|height|width', function (elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2)
            }
          })
        }
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function (el) {
            el.innerHTML = '<input/>';
            el.firstChild.setAttribute('value', '');
            return el.firstChild.getAttribute('value') === ''
          })) {
          addHandle('value', function (elem, name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === 'input') {
              return elem.defaultValue
            }
          })
        }
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function (el) {
            return el.getAttribute('disabled') == null
          })) {
          addHandle(booleans, function (elem, name, isXML) {
            var val;
            if (!isXML) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
            }
          })
        }
        return Sizzle
      }(window);
      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      // Deprecated
      jQuery.expr[':'] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      jQuery.escapeSelector = Sizzle.escape;
      var dir = function (elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break
            }
            matched.push(elem)
          }
        }
        return matched
      };
      var siblings = function (n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n)
          }
        }
        return matched
      };
      var rneedsContext = jQuery.expr.match.needsContext;
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      var risSimple = /^.[^:#\[\.,]*$/;
      // Implement the identical functionality for filter and not
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not
          })
        }
        // Single element
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not
          })
        }
        // Arraylike of elements (jQuery, arguments, Array)
        if (typeof qualifier !== 'string') {
          return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) > -1 !== not
          })
        }
        // Simple selector that can be filtered directly, removing non-Elements
        if (risSimple.test(qualifier)) {
          return jQuery.filter(qualifier, elements, not)
        }
        // Complex selector, compare the two sets, removing non-Elements
        qualifier = jQuery.filter(qualifier, elements);
        return jQuery.grep(elements, function (elem) {
          return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1
        })
      }
      jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ':not(' + expr + ')'
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : []
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
          return elem.nodeType === 1
        }))
      };
      jQuery.fn.extend({
        find: function (selector) {
          var i, ret, len = this.length, self = this;
          if (typeof selector !== 'string') {
            return this.pushStack(jQuery(selector).filter(function () {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true
                }
              }
            }))
          }
          ret = this.pushStack([]);
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret)
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret
        },
        filter: function (selector) {
          return this.pushStack(winnow(this, selector || [], false))
        },
        not: function (selector) {
          return this.pushStack(winnow(this, selector || [], true))
        },
        is: function (selector) {
          return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
          // so $("p:first").is("p:last") won't return true for a doc with two "p".
          typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
        }
      });
      // Initialize a jQuery object
      // A central reference to the root jQuery(document)
      var rootjQuery,
        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        // Shortcut simple #id case for speed
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function (selector, context, root) {
          var match, elem;
          // HANDLE: $(""), $(null), $(undefined), $(false)
          if (!selector) {
            return this
          }
          // Method init() accepts an alternate rootjQuery
          // so migrate can support jQuery.sub (gh-2101)
          root = root || rootjQuery;
          // Handle HTML strings
          if (typeof selector === 'string') {
            if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
              // Assume that strings that start and end with <> are HTML and skip the regex check
              match = [
                null,
                selector,
                null
              ]
            } else {
              match = rquickExpr.exec(selector)
            }
            // Match html or make sure no context is specified for #id
            if (match && (match[1] || !context)) {
              // HANDLE: $(html) -> $(array)
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                // Option to run scripts is true for back-compat
                // Intentionally let the error be thrown if parseHTML is not present
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                // HANDLE: $(html, props)
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {
                    // Properties of context are called as methods if possible
                    if (jQuery.isFunction(this[match])) {
                      this[match](context[match])  // ...and otherwise set as attributes
                    } else {
                      this.attr(match, context[match])
                    }
                  }
                }
                return this  // HANDLE: $(#id)
              } else {
                elem = document.getElementById(match[2]);
                if (elem) {
                  // Inject the element directly into the jQuery object
                  this[0] = elem;
                  this.length = 1
                }
                return this
              }  // HANDLE: $(expr, $(...))
            } else if (!context || context.jquery) {
              return (context || root).find(selector)  // HANDLE: $(expr, context)
                                                       // (which is just equivalent to: $(context).find(expr)
            } else {
              return this.constructor(context).find(selector)
            }  // HANDLE: $(DOMElement)
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this  // HANDLE: $(function)
                         // Shortcut for document ready
          } else if (jQuery.isFunction(selector)) {
            return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
            selector(jQuery)
          }
          return jQuery.makeArray(selector, this)
        };
      // Give the init function the jQuery prototype for later instantiation
      init.prototype = jQuery.fn;
      // Initialize central reference
      rootjQuery = jQuery(document);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/,
        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
      jQuery.fn.extend({
        has: function (target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function () {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true
              }
            }
          })
        },
        closest: function (selectors, context) {
          var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== 'string' && jQuery(selectors);
          // Positional selectors never match, since there's no _selection_ context
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                // Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched)
        },
        // Determine the position of an element within the set
        index: function (elem) {
          // No argument, return index in parent
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
          }
          // Index in selector
          if (typeof elem === 'string') {
            return indexOf.call(jQuery(elem), this[0])
          }
          // Locate the position of the desired element
          return indexOf.call(this, // If it receives a jQuery object, the first element is used
          elem.jquery ? elem[0] : elem)
        },
        add: function (selector, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))))
        },
        addBack: function (selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
        }
      });
      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur
      }
      jQuery.each({
        parent: function (elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null
        },
        parents: function (elem) {
          return dir(elem, 'parentNode')
        },
        parentsUntil: function (elem, i, until) {
          return dir(elem, 'parentNode', until)
        },
        next: function (elem) {
          return sibling(elem, 'nextSibling')
        },
        prev: function (elem) {
          return sibling(elem, 'previousSibling')
        },
        nextAll: function (elem) {
          return dir(elem, 'nextSibling')
        },
        prevAll: function (elem) {
          return dir(elem, 'previousSibling')
        },
        nextUntil: function (elem, i, until) {
          return dir(elem, 'nextSibling', until)
        },
        prevUntil: function (elem, i, until) {
          return dir(elem, 'previousSibling', until)
        },
        siblings: function (elem) {
          return siblings((elem.parentNode || {}).firstChild, elem)
        },
        children: function (elem) {
          return siblings(elem.firstChild)
        },
        contents: function (elem) {
          return elem.contentDocument || jQuery.merge([], elem.childNodes)
        }
      }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== 'Until') {
            selector = until
          }
          if (selector && typeof selector === 'string') {
            matched = jQuery.filter(selector, matched)
          }
          if (this.length > 1) {
            // Remove duplicates
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched)
            }
            // Reverse order for parents* and prev-derivatives
            if (rparentsprev.test(name)) {
              matched.reverse()
            }
          }
          return this.pushStack(matched)
        }
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      // Convert String-formatted options into Object-formatted ones
      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
          object[flag] = true
        });
        return object
      }
      /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
      jQuery.Callbacks = function (options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
        var
          // Flag to know if list is currently firing
          firing,
          // Last fire value for non-forgettable lists
          memory,
          // Flag to know if list was already fired
          fired,
          // Flag to prevent firing
          locked,
          // Actual callback list
          list = [],
          // Queue of execution data for repeatable lists
          queue = [],
          // Index of currently firing callback (modified by add/remove as needed)
          firingIndex = -1,
          // Fire callbacks
          fire = function () {
            // Enforce single-firing
            locked = options.once;
            // Execute callbacks for all pending executions,
            // respecting firingIndex overrides and runtime changes
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                // Run callback and check for early termination
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  // Jump to end and forget the data so .add doesn't re-fire
                  firingIndex = list.length;
                  memory = false
                }
              }
            }
            // Forget the data if we're done with it
            if (!options.memory) {
              memory = false
            }
            firing = false;
            // Clean up if we're done firing for good
            if (locked) {
              // Keep an empty list if we have data for future add calls
              if (memory) {
                list = []  // Otherwise, this object is spent
              } else {
                list = ''
              }
            }
          },
          // Actual Callbacks object
          self = {
            // Add a callback or a collection of callbacks to the list
            add: function () {
              if (list) {
                // If we have memory from a past run, we should fire after adding
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory)
                }
                (function add(args) {
                  jQuery.each(args, function (_, arg) {
                    if (jQuery.isFunction(arg)) {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg)
                      }
                    } else if (arg && arg.length && jQuery.type(arg) !== 'string') {
                      // Inspect recursively
                      add(arg)
                    }
                  })
                }(arguments));
                if (memory && !firing) {
                  fire()
                }
              }
              return this
            },
            // Remove a callback from the list
            remove: function () {
              jQuery.each(arguments, function (_, arg) {
                var index;
                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  // Handle firing indexes
                  if (index <= firingIndex) {
                    firingIndex--
                  }
                }
              });
              return this
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function (fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0
            },
            // Remove all callbacks from the list
            empty: function () {
              if (list) {
                list = []
              }
              return this
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function () {
              locked = queue = [];
              list = memory = '';
              return this
            },
            disabled: function () {
              return !list
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function () {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = ''
              }
              return this
            },
            locked: function () {
              return !!locked
            },
            // Call all callbacks with the given context and arguments
            fireWith: function (context, args) {
              if (!locked) {
                args = args || [];
                args = [
                  context,
                  args.slice ? args.slice() : args
                ];
                queue.push(args);
                if (!firing) {
                  fire()
                }
              }
              return this
            },
            // Call all the callbacks with the given arguments
            fire: function () {
              self.fireWith(this, arguments);
              return this
            },
            // To know if the callbacks have already been called at least once
            fired: function () {
              return !!fired
            }
          };
        return self
      };
      function Identity(v) {
        return v
      }
      function Thrower(ex) {
        throw ex
      }
      function adoptValue(value, resolve, reject) {
        var method;
        try {
          // Check for promise aspect first to privilege synchronous behavior
          if (value && jQuery.isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject)  // Other thenables
          } else if (value && jQuery.isFunction(method = value.then)) {
            method.call(value, resolve, reject)  // Other non-thenables
          } else {
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            resolve.call(undefined, value)
          }  // For Promises/A+, convert exceptions into rejections
             // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
             // Deferred#then to conditionally suppress rejection.
        } catch (value) {
          // Support: Android 4.0 only
          // Strict mode functions invoked without .call/.apply get global-object context
          reject.call(undefined, value)
        }
      }
      jQuery.extend({
        Deferred: function (func) {
          var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              [
                'notify',
                'progress',
                jQuery.Callbacks('memory'),
                jQuery.Callbacks('memory'),
                2
              ],
              [
                'resolve',
                'done',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                0,
                'resolved'
              ],
              [
                'reject',
                'fail',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                1,
                'rejected'
              ]
            ], state = 'pending', promise = {
              state: function () {
                return state
              },
              always: function () {
                deferred.done(arguments).fail(arguments);
                return this
              },
              'catch': function (fn) {
                return promise.then(null, fn)
              },
              // Keep pipe for back-compat
              pipe: function () {
                var fns = arguments;
                return jQuery.Deferred(function (newDefer) {
                  jQuery.each(tuples, function (i, tuple) {
                    // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                    var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    // deferred.progress(function() { bind to newDefer or newDefer.notify })
                    // deferred.done(function() { bind to newDefer or newDefer.resolve })
                    // deferred.fail(function() { bind to newDefer or newDefer.reject })
                    deferred[tuple[1]](function () {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && jQuery.isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject)
                      } else {
                        newDefer[tuple[0] + 'With'](this, fn ? [returned] : arguments)
                      }
                    })
                  });
                  fns = null
                }).promise()
              },
              then: function (onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred, handler, special) {
                  return function () {
                    var that = this, args = arguments, mightThrow = function () {
                        var returned, then;
                        // Support: Promises/A+ section 2.3.3.3.3
                        // https://promisesaplus.com/#point-59
                        // Ignore double-resolution attempts
                        if (depth < maxDepth) {
                          return
                        }
                        returned = handler.apply(that, args);
                        // Support: Promises/A+ section 2.3.1
                        // https://promisesaplus.com/#point-48
                        if (returned === deferred.promise()) {
                          throw new TypeError('Thenable self-resolution')
                        }
                        // Support: Promises/A+ sections 2.3.3.1, 3.5
                        // https://promisesaplus.com/#point-54
                        // https://promisesaplus.com/#point-75
                        // Retrieve `then` only once
                        then = returned && (typeof returned === 'object' || typeof returned === 'function') && returned.then;
                        // Handle a returned thenable
                        if (jQuery.isFunction(then)) {
                          // Special processors (notify) just wait for resolution
                          if (special) {
                            then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special))  // Normal processors (resolve) also hook into progress
                          } else {
                            // ...and disregard older resolution values
                            maxDepth++;
                            then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith))
                          }  // Handle all other returned values
                        } else {
                          // Only substitute handlers pass on context
                          // and multiple values (non-spec behavior)
                          if (handler !== Identity) {
                            that = undefined;
                            args = [returned]
                          }
                          // Process the value(s)
                          // Default process is resolve
                          (special || deferred.resolveWith)(that, args)
                        }
                      },
                      // Only normal processors (resolve) catch and reject exceptions
                      process = special ? mightThrow : function () {
                        try {
                          mightThrow()
                        } catch (e) {
                          if (jQuery.Deferred.exceptionHook) {
                            jQuery.Deferred.exceptionHook(e, process.stackTrace)
                          }
                          // Support: Promises/A+ section 2.3.3.3.4.1
                          // https://promisesaplus.com/#point-61
                          // Ignore post-resolution exceptions
                          if (depth + 1 >= maxDepth) {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Thrower) {
                              that = undefined;
                              args = [e]
                            }
                            deferred.rejectWith(that, args)
                          }
                        }
                      };
                    // Support: Promises/A+ section 2.3.3.3.1
                    // https://promisesaplus.com/#point-57
                    // Re-resolve promises immediately to dodge false rejection from
                    // subsequent errors
                    if (depth) {
                      process()
                    } else {
                      // Call an optional hook to record the stack, in case of exception
                      // since it's otherwise lost when execution goes async
                      if (jQuery.Deferred.getStackHook) {
                        process.stackTrace = jQuery.Deferred.getStackHook()
                      }
                      window.setTimeout(process)
                    }
                  }
                }
                return jQuery.Deferred(function (newDefer) {
                  // progress_handlers.add( ... )
                  tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                  // fulfilled_handlers.add( ... )
                  tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));
                  // rejected_handlers.add( ... )
                  tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower))
                }).promise()
              },
              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function (obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise
              }
            }, deferred = {};
          // Add list-specific methods
          jQuery.each(tuples, function (i, tuple) {
            var list = tuple[2], stateString = tuple[5];
            // promise.progress = list.add
            // promise.done = list.add
            // promise.fail = list.add
            promise[tuple[1]] = list.add;
            // Handle state
            if (stateString) {
              list.add(function () {
                // state = "resolved" (i.e., fulfilled)
                // state = "rejected"
                state = stateString
              }, // rejected_callbacks.disable
              // fulfilled_callbacks.disable
              tuples[3 - i][2].disable, // progress_callbacks.lock
              tuples[0][2].lock)
            }
            // progress_handlers.fire
            // fulfilled_handlers.fire
            // rejected_handlers.fire
            list.add(tuple[3].fire);
            // deferred.notify = function() { deferred.notifyWith(...) }
            // deferred.resolve = function() { deferred.resolveWith(...) }
            // deferred.reject = function() { deferred.rejectWith(...) }
            deferred[tuple[0]] = function () {
              deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments);
              return this
            };
            // deferred.notifyWith = list.fireWith
            // deferred.resolveWith = list.fireWith
            // deferred.rejectWith = list.fireWith
            deferred[tuple[0] + 'With'] = list.fireWith
          });
          // Make the deferred a promise
          promise.promise(deferred);
          // Call given func if any
          if (func) {
            func.call(deferred, deferred)
          }
          // All done!
          return deferred
        },
        // Deferred helper
        when: function (singleValue) {
          var
            // count of uncompleted subordinates
            remaining = arguments.length,
            // count of unprocessed arguments
            i = remaining,
            // subordinate fulfillment data
            resolveContexts = Array(i), resolveValues = slice.call(arguments),
            // the master Deferred
            master = jQuery.Deferred(),
            // subordinate callback factory
            updateFunc = function (i) {
              return function (value) {
                resolveContexts[i] = this;
                resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  master.resolveWith(resolveContexts, resolveValues)
                }
              }
            };
          // Single- and empty arguments are adopted like Promise.resolve
          if (remaining <= 1) {
            adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject);
            // Use .then() to unwrap secondary thenables (cf. gh-3000)
            if (master.state() === 'pending' || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {
              return master.then()
            }
          }
          // Multiple arguments are aggregated like Promise.all array elements
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), master.reject)
          }
          return master.promise()
        }
      });
      // These usually indicate a programmer mistake during development,
      // warn about them ASAP rather than swallowing them by default.
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery.Deferred.exceptionHook = function (error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
          void 0
        }
      };
      jQuery.readyException = function (error) {
        window.setTimeout(function () {
          throw error
        })
      };
      // The deferred used on DOM ready
      var readyList = jQuery.Deferred();
      jQuery.fn.ready = function (fn) {
        readyList.then(fn)  // Wrap jQuery.readyException in a function so that the lookup
                            // happens at the time of error handling instead of callback
                            // registration.
.catch(function (error) {
          jQuery.readyException(error)
        });
        return this
      };
      jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Hold (or release) the ready event
        holdReady: function (hold) {
          if (hold) {
            jQuery.readyWait++
          } else {
            jQuery.ready(true)
          }
        },
        // Handle when the DOM is ready
        ready: function (wait) {
          // Abort if there are pending holds or we're already ready
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return
          }
          // Remember that the DOM is ready
          jQuery.isReady = true;
          // If a normal DOM Ready event fired, decrement, and wait if need be
          if (wait !== true && --jQuery.readyWait > 0) {
            return
          }
          // If there are functions bound, to execute
          readyList.resolveWith(document, [jQuery])
        }
      });
      jQuery.ready.then = readyList.then;
      // The ready event handler and self cleanup method
      function completed() {
        document.removeEventListener('DOMContentLoaded', completed);
        window.removeEventListener('load', completed);
        jQuery.ready()
      }
      // Catch cases where $(document).ready() is called
      // after the browser event has already occurred.
      // Support: IE <=9 - 10 only
      // Older IE sometimes signals "interactive" too soon
      if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready)
      } else {
        // Use the handy event callback
        document.addEventListener('DOMContentLoaded', completed);
        // A fallback to window.onload, that will always work
        window.addEventListener('load', completed)
      }
      // Multifunctional method to get and set values of a collection
      // The value/s can optionally be executed if it's a function
      var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        // Sets many values
        if (jQuery.type(key) === 'object') {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw)
          }  // Sets one value
        } else if (value !== undefined) {
          chainable = true;
          if (!jQuery.isFunction(value)) {
            raw = true
          }
          if (bulk) {
            // Bulk operations run against the entire set
            if (raw) {
              fn.call(elems, value);
              fn = null  // ...except when executing function values
            } else {
              bulk = fn;
              fn = function (elem, key, value) {
                return bulk.call(jQuery(elem), value)
              }
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
            }
          }
        }
        if (chainable) {
          return elems
        }
        // Gets
        if (bulk) {
          return fn.call(elems)
        }
        return len ? fn(elems[0], key) : emptyGet
      };
      var acceptData = function (owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
      };
      function Data() {
        this.expando = jQuery.expando + Data.uid++
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function (owner) {
          // Check if the owner object already has a cache
          var value = owner[this.expando];
          // If not, create one
          if (!value) {
            value = {};
            // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return an empty object.
            if (acceptData(owner)) {
              // If it is a node unlikely to be stringify-ed or looped over
              // use plain assignment
              if (owner.nodeType) {
                owner[this.expando] = value  // Otherwise secure it in a non-enumerable property
                                             // configurable must be true to allow the property to be
                                             // deleted when data is removed
              } else {
                Object.defineProperty(owner, this.expando, {
                  value: value,
                  configurable: true
                })
              }
            }
          }
          return value
        },
        set: function (owner, data, value) {
          var prop, cache = this.cache(owner);
          // Handle: [ owner, key, value ] args
          // Always use camelCase key (gh-2257)
          if (typeof data === 'string') {
            cache[jQuery.camelCase(data)] = value  // Handle: [ owner, { properties } ] args
          } else {
            // Copy the properties one-by-one to the cache object
            for (prop in data) {
              cache[jQuery.camelCase(prop)] = data[prop]
            }
          }
          return cache
        },
        get: function (owner, key) {
          return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][jQuery.camelCase(key)]
        },
        access: function (owner, key, value) {
          // In cases where either:
          //
          //   1. No key was specified
          //   2. A string key was specified, but no value provided
          //
          // Take the "read" path and allow the get method to determine
          // which value to return, respectively either:
          //
          //   1. The entire cache object
          //   2. The data stored at the key
          //
          if (key === undefined || key && typeof key === 'string' && value === undefined) {
            return this.get(owner, key)
          }
          // When the key is not a string, or both a key and value
          // are specified, set or extend (existing objects) with either:
          //
          //   1. An object of properties
          //   2. A key and value
          //
          this.set(owner, key, value);
          // Since the "set" path can have two possible entry points
          // return the expected data based on which path was taken[*]
          return value !== undefined ? value : key
        },
        remove: function (owner, key) {
          var i, cache = owner[this.expando];
          if (cache === undefined) {
            return
          }
          if (key !== undefined) {
            // Support array or space separated string of keys
            if (jQuery.isArray(key)) {
              // If key is an array of keys...
              // We always set camelCase keys, so remove that.
              key = key.map(jQuery.camelCase)
            } else {
              key = jQuery.camelCase(key);
              // If a key with the spaces exists, use it.
              // Otherwise, create an array by matching non-whitespace
              key = key in cache ? [key] : key.match(rnothtmlwhite) || []
            }
            i = key.length;
            while (i--) {
              delete cache[key[i]]
            }
          }
          // Remove the expando if there's no more data
          if (key === undefined || jQuery.isEmptyObject(cache)) {
            // Support: Chrome <=35 - 45
            // Webkit & Blink performance suffers when deleting properties
            // from DOM nodes, so set to undefined instead
            // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
            if (owner.nodeType) {
              owner[this.expando] = undefined
            } else {
              delete owner[this.expando]
            }
          }
        },
        hasData: function (owner) {
          var cache = owner[this.expando];
          return cache !== undefined && !jQuery.isEmptyObject(cache)
        }
      };
      var dataPriv = new Data;
      var dataUser = new Data;
      //	Implementation Summary
      //
      //	1. Enforce API surface and semantic compatibility with 1.9.x branch
      //	2. Improve the module's maintainability by reducing the storage
      //		paths to a single mechanism.
      //	3. Use the same single mechanism to support "private" and "user" data.
      //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
      //	5. Avoid exposing implementation details on user objects (eg. expando properties)
      //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data) {
        if (data === 'true') {
          return true
        }
        if (data === 'false') {
          return false
        }
        if (data === 'null') {
          return null
        }
        // Only convert to a number if it doesn't change the string
        if (data === +data + '') {
          return +data
        }
        if (rbrace.test(data)) {
          return JSON.parse(data)
        }
        return data
      }
      function dataAttr(elem, key, data) {
        var name;
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
          name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === 'string') {
            try {
              data = getData(data)
            } catch (e) {
            }
            // Make sure we set the data so it isn't changed later
            dataUser.set(elem, key, data)
          } else {
            data = undefined
          }
        }
        return data
      }
      jQuery.extend({
        hasData: function (elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem)
        },
        data: function (elem, name, data) {
          return dataUser.access(elem, name, data)
        },
        removeData: function (elem, name) {
          dataUser.remove(elem, name)
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function (elem, name, data) {
          return dataPriv.access(elem, name, data)
        },
        _removeData: function (elem, name) {
          dataPriv.remove(elem, name)
        }
      });
      jQuery.fn.extend({
        data: function (key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          // Gets all values
          if (key === undefined) {
            if (this.length) {
              data = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                i = attrs.length;
                while (i--) {
                  // Support: IE 11 only
                  // The attrs elements can be null (#14894)
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf('data-') === 0) {
                      name = jQuery.camelCase(name.slice(5));
                      dataAttr(elem, name, data[name])
                    }
                  }
                }
                dataPriv.set(elem, 'hasDataAttrs', true)
              }
            }
            return data
          }
          // Sets multiple values
          if (typeof key === 'object') {
            return this.each(function () {
              dataUser.set(this, key)
            })
          }
          return access(this, function (value) {
            var data;
            // The calling jQuery object (element matches) is not empty
            // (and therefore has an element appears at this[ 0 ]) and the
            // `value` parameter was not undefined. An empty jQuery object
            // will result in `undefined` for elem = this[ 0 ] which will
            // throw an exception if an attempt to read a data cache is made.
            if (elem && value === undefined) {
              // Attempt to get data from the cache
              // The key will always be camelCased in Data
              data = dataUser.get(elem, key);
              if (data !== undefined) {
                return data
              }
              // Attempt to "discover" the data in
              // HTML5 custom data-* attrs
              data = dataAttr(elem, key);
              if (data !== undefined) {
                return data
              }
              // We tried really hard, but the data doesn't exist.
              return
            }
            // Set the data...
            this.each(function () {
              // We always store the camelCased key
              dataUser.set(this, key, value)
            })
          }, null, value, arguments.length > 1, null, true)
        },
        removeData: function (key) {
          return this.each(function () {
            dataUser.remove(this, key)
          })
        }
      });
      jQuery.extend({
        queue: function (elem, type, data) {
          var queue;
          if (elem) {
            type = (type || 'fx') + 'queue';
            queue = dataPriv.get(elem, type);
            // Speed up dequeue by getting out quickly if this is just a lookup
            if (data) {
              if (!queue || jQuery.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data))
              } else {
                queue.push(data)
              }
            }
            return queue || []
          }
        },
        dequeue: function (elem, type) {
          type = type || 'fx';
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
              jQuery.dequeue(elem, type)
            };
          // If the fx queue is dequeued, always remove the progress sentinel
          if (fn === 'inprogress') {
            fn = queue.shift();
            startLength--
          }
          if (fn) {
            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if (type === 'fx') {
              queue.unshift('inprogress')
            }
            // Clear up the last queue stop function
            delete hooks.stop;
            fn.call(elem, next, hooks)
          }
          if (!startLength && hooks) {
            hooks.empty.fire()
          }
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function (elem, type) {
          var key = type + 'queueHooks';
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks('once memory').add(function () {
              dataPriv.remove(elem, [
                type + 'queue',
                key
              ])
            })
          })
        }
      });
      jQuery.fn.extend({
        queue: function (type, data) {
          var setter = 2;
          if (typeof type !== 'string') {
            data = type;
            type = 'fx';
            setter--
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type)
          }
          return data === undefined ? this : this.each(function () {
            var queue = jQuery.queue(this, type, data);
            // Ensure a hooks for this queue
            jQuery._queueHooks(this, type);
            if (type === 'fx' && queue[0] !== 'inprogress') {
              jQuery.dequeue(this, type)
            }
          })
        },
        dequeue: function (type) {
          return this.each(function () {
            jQuery.dequeue(this, type)
          })
        },
        clearQueue: function (type) {
          return this.queue(type || 'fx', [])
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function (type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
              if (!--count) {
                defer.resolveWith(elements, [elements])
              }
            };
          if (typeof type !== 'string') {
            obj = type;
            type = undefined
          }
          type = type || 'fx';
          while (i--) {
            tmp = dataPriv.get(elements[i], type + 'queueHooks');
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve)
            }
          }
          resolve();
          return defer.promise(obj)
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
      var cssExpand = [
        'Top',
        'Right',
        'Bottom',
        'Left'
      ];
      var isHiddenWithinTree = function (elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        // Inline style trumps all
        return elem.style.display === 'none' || elem.style.display === '' && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, 'display') === 'none'
      };
      var swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        // Remember the old values, and insert the new ones
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name]
        }
        ret = callback.apply(elem, args || []);
        // Revert the old values
        for (name in options) {
          elem.style[name] = old[name]
        }
        return ret
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale = 1, maxIterations = 20, currentValue = tween ? function () {
            return tween.cur()
          } : function () {
            return jQuery.css(elem, prop, '')
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
          // Starting value computation is required for potential unit mismatches
          initialInUnit = (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          // Trust units reported by jQuery.css
          unit = unit || initialInUnit[3];
          // Make sure we update the tween properties later on
          valueParts = valueParts || [];
          // Iteratively approximate from a nonzero starting point
          initialInUnit = +initial || 1;
          do {
            // If previous iteration zeroed out, double until we get *something*.
            // Use string for doubling so we don't accidentally see scale as unchanged below
            scale = scale || '.5';
            // Adjust and apply
            initialInUnit = initialInUnit / scale;
            jQuery.style(elem, prop, initialInUnit + unit)  // Update scale, tolerating zero or NaN from tween.cur()
                                                            // Break the loop if scale is unchanged or perfect, or if we've just had enough.
          } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations)
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          // Apply relative offset (+=/-=) if specified
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted
          }
        }
        return adjusted
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
          return display
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, 'display');
        temp.parentNode.removeChild(temp);
        if (display === 'none') {
          display = 'block'
        }
        defaultDisplayMap[nodeName] = display;
        return display
      }
      function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        // Determine new display value for elements that need to change
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue
          }
          display = elem.style.display;
          if (show) {
            // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
            // check is required in this first loop unless we have a nonempty display value (either
            // inline or about-to-be-restored)
            if (display === 'none') {
              values[index] = dataPriv.get(elem, 'display') || null;
              if (!values[index]) {
                elem.style.display = ''
              }
            }
            if (elem.style.display === '' && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem)
            }
          } else {
            if (display !== 'none') {
              values[index] = 'none';
              // Remember what we're overwriting
              dataPriv.set(elem, 'display', display)
            }
          }
        }
        // Set the display of the elements in a second loop to avoid constant reflow
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index]
          }
        }
        return elements
      }
      jQuery.fn.extend({
        show: function () {
          return showHide(this, true)
        },
        hide: function () {
          return showHide(this)
        },
        toggle: function (state) {
          if (typeof state === 'boolean') {
            return state ? this.show() : this.hide()
          }
          return this.each(function () {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show()
            } else {
              jQuery(this).hide()
            }
          })
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
      var rscriptType = /^$|\/(?:java|ecma)script/i;
      // We have to close these tags to support XHTML (#13200)
      var wrapMap = {
        // Support: IE <=9 only
        option: [
          1,
          "<select multiple='multiple'>",
          '</select>'
        ],
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [
          1,
          '<table>',
          '</table>'
        ],
        col: [
          2,
          '<table><colgroup>',
          '</colgroup></table>'
        ],
        tr: [
          2,
          '<table><tbody>',
          '</tbody></table>'
        ],
        td: [
          3,
          '<table><tbody><tr>',
          '</tr></tbody></table>'
        ],
        _default: [
          0,
          '',
          ''
        ]
      };
      // Support: IE <=9 only
      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;
        if (typeof context.getElementsByTagName !== 'undefined') {
          ret = context.getElementsByTagName(tag || '*')
        } else if (typeof context.querySelectorAll !== 'undefined') {
          ret = context.querySelectorAll(tag || '*')
        } else {
          ret = []
        }
        if (tag === undefined || tag && jQuery.nodeName(context, tag)) {
          return jQuery.merge([context], ret)
        }
        return ret
      }
      // Mark scripts as having already been evaluated
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'))
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
          elem = elems[i];
          if (elem || elem === 0) {
            // Add nodes directly
            if (jQuery.type(elem) === 'object') {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem)  // Convert non-html into a text node
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem))  // Convert html into DOM nodes
            } else {
              tmp = tmp || fragment.appendChild(context.createElement('div'));
              // Deserialize a standard representation
              tag = (rtagName.exec(elem) || [
                '',
                ''
              ])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
              // Descend through wrappers to the right content
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild
              }
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, tmp.childNodes);
              // Remember the top-level container
              tmp = fragment.firstChild;
              // Ensure the created nodes are orphaned (#12392)
              tmp.textContent = ''
            }
          }
        }
        // Remove wrapper from fragment
        fragment.textContent = '';
        i = 0;
        while (elem = nodes[i++]) {
          // Skip elements already in the context collection (trac-4087)
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem)
            }
            continue
          }
          contains = jQuery.contains(elem.ownerDocument, elem);
          // Append to fragment
          tmp = getAll(fragment.appendChild(elem), 'script');
          // Preserve script evaluation history
          if (contains) {
            setGlobalEval(tmp)
          }
          // Capture executables
          if (scripts) {
            j = 0;
            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || '')) {
                scripts.push(elem)
              }
            }
          }
        }
        return fragment
      }
      (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
      }());
      var documentElement = document.documentElement;
      var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue() {
        return true
      }
      function returnFalse() {
        return false
      }
      // Support: IE <=9 only
      // See #13393 for more info
      function safeActiveElement() {
        try {
          return document.activeElement
        } catch (err) {
        }
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        // Types can be a map of types/handlers
        if (typeof types === 'object') {
          // ( types-Object, selector, data )
          if (typeof selector !== 'string') {
            // ( types-Object, data )
            data = data || selector;
            selector = undefined
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one)
          }
          return elem
        }
        if (data == null && fn == null) {
          // ( types, fn )
          fn = selector;
          data = selector = undefined
        } else if (fn == null) {
          if (typeof selector === 'string') {
            // ( types, selector, fn )
            fn = data;
            data = undefined
          } else {
            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined
          }
        }
        if (fn === false) {
          fn = returnFalse
        } else if (!fn) {
          return elem
        }
        if (one === 1) {
          origFn = fn;
          fn = function (event) {
            // Can use an empty set, since event contains the info
            jQuery().off(event);
            return origFn.apply(this, arguments)
          };
          // Use same guid so caller can remove using origFn
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
        }
        return elem.each(function () {
          jQuery.event.add(this, types, fn, data, selector)
        })
      }
      /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
      jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          // Don't attach events to noData or text/comment nodes (but allow plain objects)
          if (!elemData) {
            return
          }
          // Caller can pass in an object of custom data in lieu of the handler
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector
          }
          // Ensure that invalid selectors throw exceptions at attach time
          // Evaluate against documentElement in case elem is a non-element node (e.g., document)
          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector)
          }
          // Make sure that the handler has a unique ID, used to find/remove it later
          if (!handler.guid) {
            handler.guid = jQuery.guid++
          }
          // Init the element's event structure and main handler, if this is the first
          if (!(events = elemData.events)) {
            events = elemData.events = {}
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function (e) {
              // Discard the second event of a jQuery.event.trigger() and
              // when an event is called after a page has unloaded
              return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined
            }
          }
          // Handle multiple events separated by a space
          types = (types || '').match(rnothtmlwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            // There *must* be a type, no attaching namespace-only handlers
            if (!type) {
              continue
            }
            // If event changes its type, use the special event handlers for the changed type
            special = jQuery.event.special[type] || {};
            // If selector defined, determine special event api type, otherwise given type
            type = (selector ? special.delegateType : special.bindType) || type;
            // Update special based on newly reset type
            special = jQuery.event.special[type] || {};
            // handleObj is passed to all event handlers
            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join('.')
            }, handleObjIn);
            // Init the event handler queue if we're the first
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              // Only use addEventListener if the special events handler returns false
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle)
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid
              }
            }
            // Add to the element's handler list, delegates in front
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj)
            } else {
              handlers.push(handleObj)
            }
            // Keep track of which events have ever been used, for event optimization
            jQuery.event.global[type] = true
          }
        },
        // Detach an event or set of events from an element
        remove: function (elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return
          }
          // Once for each type.namespace in types; type may be omitted
          types = (types || '').match(rnothtmlwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            // Unbind all events (on this namespace, if provided) for the element
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true)
              }
              continue
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
            // Remove matching events
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj)
                }
              }
            }
            // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle)
              }
              delete events[type]
            }
          }
          // Remove data and the expando if it's no longer used
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, 'handle events')
          }
        },
        dispatch: function (nativeEvent) {
          // Make a writable jQuery.Event from the native event object
          var event = jQuery.event.fix(nativeEvent);
          var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
          // Use the fix-ed jQuery.Event rather than the (read-only) native event
          args[0] = event;
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i]
          }
          event.delegateTarget = this;
          // Call the preDispatch hook for the mapped type, and let it bail if desired
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return
          }
          // Determine handlers
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          // Run delegates first; they may want to stop propagation beneath us
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              // Triggered event must either 1) have no namespace, or 2) have namespace(s)
              // a subset or equal to those in the bound event (both can have no namespace).
              if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation()
                  }
                }
              }
            }
          }
          // Call the postDispatch hook for the mapped type
          if (special.postDispatch) {
            special.postDispatch.call(this, event)
          }
          return event.result
        },
        handlers: function (event, handlers) {
          var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          // Find delegate handlers
          if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === 'click' && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              // Don't check non-elements (#13208)
              // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
              if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  // Don't conflict with Object.prototype properties (#13203)
                  sel = handleObj.selector + ' ';
                  if (matchedSelectors[sel] === undefined) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj)
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matchedHandlers
                  })
                }
              }
            }
          }
          // Add the remaining (directly-bound) handlers
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({
              elem: cur,
              handlers: handlers.slice(delegateCount)
            })
          }
          return handlerQueue
        },
        addProp: function (name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: jQuery.isFunction(hook) ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent)
              }
            } : function () {
              if (this.originalEvent) {
                return this.originalEvent[name]
              }
            },
            set: function (value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: value
              })
            }
          })
        },
        fix: function (originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent)
        },
        special: {
          load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
          },
          focus: {
            // Fire native event if possible so blur/focus sequence is correct
            trigger: function () {
              if (this !== safeActiveElement() && this.focus) {
                this.focus();
                return false
              }
            },
            delegateType: 'focusin'
          },
          blur: {
            trigger: function () {
              if (this === safeActiveElement() && this.blur) {
                this.blur();
                return false
              }
            },
            delegateType: 'focusout'
          },
          click: {
            // For checkbox, fire native event so checked state will be right
            trigger: function () {
              if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                this.click();
                return false
              }
            },
            // For cross-browser consistency, don't fire native .click() on links
            _default: function (event) {
              return jQuery.nodeName(event.target, 'a')
            }
          },
          beforeunload: {
            postDispatch: function (event) {
              // Support: Firefox 20+
              // Firefox doesn't alert if the returnValue field is not set.
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result
              }
            }
          }
        }
      };
      jQuery.removeEvent = function (elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle)
        }
      };
      jQuery.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props)
        }
        // Event object
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
          src.returnValue === false ? returnTrue : returnFalse;
          // Create target properties
          // Support: Safari <=6 - 7 only
          // Target should not be a text node (#504, #13143)
          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget  // Event type
        } else {
          this.type = src
        }
        // Put explicitly provided properties onto the event object
        if (props) {
          jQuery.extend(this, props)
        }
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
        // Mark it as fixed
        this[jQuery.expando] = true
      };
      // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
      // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function () {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault()
          }
        },
        stopPropagation: function () {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation()
          }
        },
        stopImmediatePropagation: function () {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation()
          }
          this.stopPropagation()
        }
      };
      // Includes all common event props including KeyEvent and MouseEvent specific props
      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        'char': true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function (event) {
          var button = event.button;
          // Add which for key events
          if (event.which == null && rkeyEvent.test(event.type)) {
            return event.charCode != null ? event.charCode : event.keyCode
          }
          // Add which for click: 1 === left; 2 === middle; 3 === right
          if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
            if (button & 1) {
              return 1
            }
            if (button & 2) {
              return 3
            }
            if (button & 4) {
              return 2
            }
            return 0
          }
          return event.which
        }
      }, jQuery.event.addProp);
      // Create mouseenter/leave events using mouseover/out and event-time checks
      // so that event delegation works in jQuery.
      // Do the same for pointerenter/pointerleave and pointerover/pointerout
      //
      // Support: Safari 7 only
      // Safari sends mouseenter too often; see:
      // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
      // for the description of the bug (it existed in older Chrome versions as well).
      jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
      }, function (orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function (event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            // For mouseenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix
            }
            return ret
          }
        }
      });
      jQuery.fn.extend({
        on: function (types, selector, data, fn) {
          return on(this, types, selector, data, fn)
        },
        one: function (types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1)
        },
        off: function (types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this
          }
          if (typeof types === 'object') {
            // ( types-object [, selector] )
            for (type in types) {
              this.off(type, selector, types[type])
            }
            return this
          }
          if (selector === false || typeof selector === 'function') {
            // ( types [, fn] )
            fn = selector;
            selector = undefined
          }
          if (fn === false) {
            fn = returnFalse
          }
          return this.each(function () {
            jQuery.event.remove(this, types, fn, selector)
          })
        }
      });
      var
        /* eslint-disable max-len */
        // See https://github.com/eslint/eslint/issues/3229
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        /* eslint-enable */
        // Support: IE <=10 - 11, Edge 12 - 13
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
      function manipulationTarget(elem, content) {
        if (jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')) {
          return elem.getElementsByTagName('tbody')[0] || elem
        }
        return elem
      }
      // Replace/restore the type attribute of script elements for safe DOM manipulation
      function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem
      }
      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
          elem.type = match[1]
        } else {
          elem.removeAttribute('type')
        }
        return elem
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return
        }
        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.access(src);
          pdataCur = dataPriv.set(dest, pdataOld);
          events = pdataOld.events;
          if (events) {
            delete pdataCur.handle;
            pdataCur.events = {};
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i])
              }
            }
          }
        }
        // 2. Copy user data
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur)
        }
      }
      // Fix IE bugs, see support tests
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
          dest.checked = src.checked  // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === 'input' || nodeName === 'textarea') {
          dest.defaultValue = src.defaultValue
        }
      }
      function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
        // We can't cloneNode fragments that contain checked, in WebKit
        if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
          return collection.each(function (index) {
            var self = collection.eq(index);
            if (isFunction) {
              args[0] = value.call(this, index, self.html())
            }
            domManip(self, args, callback, ignored)
          })
        }
        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first
          }
          // Require either new content or an interest in ignored elements to invoke the callback
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
            hasScripts = scripts.length;
            // Use the original fragment for the last item
            // instead of the first because it can end up
            // being emptied incorrectly in certain situations (#8070).
            for (; i < l; i++) {
              node = fragment;
              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true);
                // Keep references to cloned scripts for later restoration
                if (hasScripts) {
                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(scripts, getAll(node, 'script'))
                }
              }
              callback.call(collection[i], node, i)
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              // Reenable scripts
              jQuery.map(scripts, restoreScript);
              // Evaluate executable scripts on first document insertion
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                  if (node.src) {
                    // Optional AJAX dependency, but won't run scripts if not present
                    if (jQuery._evalUrl) {
                      jQuery._evalUrl(node.src)
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ''), doc)
                  }
                }
              }
            }
          }
        }
        return collection
      }
      function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node))
          }
          if (node.parentNode) {
            if (keepData && jQuery.contains(node.ownerDocument, node)) {
              setGlobalEval(getAll(node, 'script'))
            }
            node.parentNode.removeChild(node)
          }
        }
        return elem
      }
      jQuery.extend({
        htmlPrefilter: function (html) {
          return html.replace(rxhtmlTag, '<$1></$2>')
        },
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
          // Fix IE cloning issues
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i])
            }
          }
          // Copy the events from the original to the clone
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i])
              }
            } else {
              cloneCopyEvent(elem, clone)
            }
          }
          // Preserve script evaluation history
          destElements = getAll(clone, 'script');
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, 'script'))
          }
          // Return the cloned set
          return clone
        },
        cleanData: function (elems) {
          var data, elem, type, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== undefined; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type)  // This is a shortcut to avoid jQuery.event.remove's overhead
                    } else {
                      jQuery.removeEvent(elem, type, data.handle)
                    }
                  }
                }
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataPriv.expando] = undefined
              }
              if (elem[dataUser.expando]) {
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function (selector) {
          return remove(this, selector, true)
        },
        remove: function (selector) {
          return remove(this, selector)
        },
        text: function (value) {
          return access(this, function (value) {
            return value === undefined ? jQuery.text(this) : this.empty().each(function () {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value
              }
            })
          }, null, value, arguments.length)
        },
        append: function () {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem)
            }
          })
        },
        prepend: function () {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild)
            }
          })
        },
        before: function () {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this)
            }
          })
        },
        after: function () {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling)
            }
          })
        },
        empty: function () {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              // Prevent memory leaks
              jQuery.cleanData(getAll(elem, false));
              // Remove any remaining nodes
              elem.textContent = ''
            }
          }
          return this
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function () {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
          })
        },
        html: function (value) {
          return access(this, function (value) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML
            }
            // See if we can take a shortcut and just use innerHTML
            if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                '',
                ''
              ])[1].toLowerCase()]) {
              value = jQuery.htmlPrefilter(value);
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  // Remove element nodes and prevent memory leaks
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value
                  }
                }
                elem = 0  // If using innerHTML throws an exception, use the fallback method
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value)
            }
          }, null, value, arguments.length)
        },
        replaceWith: function () {
          var ignored = [];
          // Make the changes, replacing each non-ignored context element with the new content
          return domManip(this, arguments, function (elem) {
            var parent = this.parentNode;
            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this)
              }
            }  // Force callback invocation
          }, ignored)
        }
      });
      jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
      }, function (name, original) {
        jQuery.fn[name] = function (selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            // Support: Android <=4.0 only, PhantomJS 1 only
            // .get() because push.apply(_, arraylike) throws on ancient WebKit
            push.apply(ret, elems.get())
          }
          return this.pushStack(ret)
        }
      });
      var rmargin = /^margin/;
      var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
      var getStyles = function (elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window
        }
        return view.getComputedStyle(elem)
      };
      (function () {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
          // This is a singleton, we need to execute it only once
          if (!div) {
            return
          }
          div.style.cssText = 'box-sizing:border-box;' + 'position:relative;display:block;' + 'margin:auto;border:1px;padding:1px;' + 'top:1%;width:50%';
          div.innerHTML = '';
          documentElement.appendChild(container);
          var divStyle = window.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== '1%';
          // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
          reliableMarginLeftVal = divStyle.marginLeft === '2px';
          boxSizingReliableVal = divStyle.width === '4px';
          // Support: Android 4.0 - 4.3 only
          // Some styles come back with percentage values, even though they shouldn't
          div.style.marginRight = '50%';
          pixelMarginRightVal = divStyle.marginRight === '4px';
          documentElement.removeChild(container);
          // Nullify the div so it wouldn't be stored in the memory and
          // it will also be a sign that checks already performed
          div = null
        }
        var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
        // Finish early in limited (non-browser) environments
        if (!div.style) {
          return
        }
        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        container.style.cssText = 'border:0;width:8px;height:0;top:0;left:-9999px;' + 'padding:0;margin-top:1px;position:absolute';
        container.appendChild(div);
        jQuery.extend(support, {
          pixelPosition: function () {
            computeStyleTests();
            return pixelPositionVal
          },
          boxSizingReliable: function () {
            computeStyleTests();
            return boxSizingReliableVal
          },
          pixelMarginRight: function () {
            computeStyleTests();
            return pixelMarginRightVal
          },
          reliableMarginLeft: function () {
            computeStyleTests();
            return reliableMarginLeftVal
          }
        })
      }());
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        // Support: IE <=9 only
        // getPropertyValue is only needed for .css('filter') (#12537)
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
          if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name)
          }
          // A tribute to the "awesome hack by Dean Edwards"
          // Android Browser returns percentage for some values,
          // but width seems to be reliably pixels.
          // This is against the CSSOM draft spec:
          // https://drafts.csswg.org/cssom/#resolved-values
          if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {
            // Remember the original values
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            // Put in the new values to get a computed value out
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            // Revert the changed values
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth
          }
        }
        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + '' : ret
      }
      function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
          get: function () {
            if (conditionFn()) {
              // Hook not needed (or it's not possible to use it due
              // to missing dependency), remove it.
              delete this.get;
              return
            }
            // Hook needed; redefine it so that the support test is not executed again.
            return (this.get = hookFn).apply(this, arguments)
          }
        }
      }
      var
        // Swappable if display is none or starts with table
        // except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        }, cssNormalTransform = {
          letterSpacing: '0',
          fontWeight: '400'
        }, cssPrefixes = [
          'Webkit',
          'Moz',
          'ms'
        ], emptyStyle = document.createElement('div').style;
      // Return a css property mapped to a potentially vendor prefixed property
      function vendorPropName(name) {
        // Shortcut for names that are not vendor prefixed
        if (name in emptyStyle) {
          return name
        }
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name
          }
        }
      }
      function setPositiveNumber(elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value
      }
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i, val = 0;
        // If we already have the right measurement, avoid augmentation
        if (extra === (isBorderBox ? 'border' : 'content')) {
          i = 4  // Otherwise initialize for horizontal or vertical properties
        } else {
          i = name === 'width' ? 1 : 0
        }
        for (; i < 4; i += 2) {
          // Both box models exclude margin, so add it if we want it
          if (extra === 'margin') {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles)
          }
          if (isBorderBox) {
            // border-box includes padding, so remove it if we want content
            if (extra === 'content') {
              val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles)
            }
            // At this point, extra isn't border nor margin, so remove border
            if (extra !== 'margin') {
              val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
            }
          } else {
            // At this point, extra isn't content, so add padding
            val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
            // At this point, extra isn't content nor padding, so add border
            if (extra !== 'padding') {
              val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)
            }
          }
        }
        return val
      }
      function getWidthOrHeight(elem, name, extra) {
        // Start with offset property, which is equivalent to the border-box value
        var val, valueIsBorderBox = true, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        // Support: IE <=11 only
        // Running getBoundingClientRect on a disconnected node
        // in IE throws an error.
        if (elem.getClientRects().length) {
          val = elem.getBoundingClientRect()[name]
        }
        // Some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
          // Fall back to computed then uncomputed css if necessary
          val = curCSS(elem, name, styles);
          if (val < 0 || val == null) {
            val = elem.style[name]
          }
          // Computed unit is not pixels. Stop here and return.
          if (rnumnonpx.test(val)) {
            return val
          }
          // Check for style in case a browser which returns unreliable values
          // for getComputedStyle silently falls back to the reliable elem.style
          valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
          // Normalize "", auto, and prepare for extra
          val = parseFloat(val) || 0
        }
        // Use the active box-sizing model to add/subtract irrelevant styles
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px'
      }
      jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
          opacity: {
            get: function (elem, computed) {
              if (computed) {
                // We should always get a number back from opacity
                var ret = curCSS(elem, 'opacity');
                return ret === '' ? '1' : ret
              }
            }
          }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
          'animationIterationCount': true,
          'columnCount': true,
          'fillOpacity': true,
          'flexGrow': true,
          'flexShrink': true,
          'fontWeight': true,
          'lineHeight': true,
          'opacity': true,
          'order': true,
          'orphans': true,
          'widows': true,
          'zIndex': true,
          'zoom': true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: { 'float': 'cssFloat' },
        // Get and set the style property on a DOM Node
        style: function (elem, name, value, extra) {
          // Don't set styles on text and comment nodes
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return
          }
          // Make sure that we're working with the right name
          var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
          // Gets hook for the prefixed version, then unprefixed version
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          // Check if we're setting a value
          if (value !== undefined) {
            type = typeof value;
            // Convert "+=" or "-=" to relative numbers (#7345)
            if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              // Fixes bug #9237
              type = 'number'
            }
            // Make sure that null and NaN values aren't set (#7116)
            if (value == null || value !== value) {
              return
            }
            // If a number was passed in, add the unit (except for certain CSS properties)
            if (type === 'number') {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px')
            }
            // background-* props affect original clone's values
            if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
              style[name] = 'inherit'
            }
            // If a hook was provided, use that value, otherwise just set the specified value
            if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              style[name] = value
            }
          } else {
            // If a hook was provided get the non-computed value from there
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret
            }
            // Otherwise just get the value from the style object
            return style[name]
          }
        },
        css: function (elem, name, extra, styles) {
          var val, num, hooks, origName = jQuery.camelCase(name);
          // Make sure that we're working with the right name
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);
          // Try prefixed name followed by the unprefixed name
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          // If a hook was provided get the computed value from there
          if (hooks && 'get' in hooks) {
            val = hooks.get(elem, true, extra)
          }
          // Otherwise, if a way to get the computed value exists, use that
          if (val === undefined) {
            val = curCSS(elem, name, styles)
          }
          // Convert "normal" to computed value
          if (val === 'normal' && name in cssNormalTransform) {
            val = cssNormalTransform[name]
          }
          // Make numeric if forced or a qualifier was provided and val looks numeric
          if (extra === '' || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val
          }
          return val
        }
      });
      jQuery.each([
        'height',
        'width'
      ], function (i, name) {
        jQuery.cssHooks[name] = {
          get: function (elem, computed, extra) {
            if (computed) {
              // Certain elements can have dimension info if we invisibly show them
              // but it must have a current display style that would benefit
              return rdisplayswap.test(jQuery.css(elem, 'display')) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, name, extra)
              }) : getWidthOrHeight(elem, name, extra)
            }
          },
          set: function (elem, value, extra) {
            var matches, styles = extra && getStyles(elem), subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles);
            // Convert to pixels if value adjustment is needed
            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
              elem.style[name] = value;
              value = jQuery.css(elem, name)
            }
            return setPositiveNumber(elem, value, subtract)
          }
        }
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
            return elem.getBoundingClientRect().left
          })) + 'px'
        }
      });
      // These hooks are used by animate to expand properties
      jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
      }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function (value) {
            var i = 0, expanded = {},
              // Assumes a single number if not a string
              parts = typeof value === 'string' ? value.split(' ') : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
            }
            return expanded
          }
        };
        if (!rmargin.test(prefix)) {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
        }
      });
      jQuery.fn.extend({
        css: function (name, value) {
          return access(this, function (elem, name, value) {
            var styles, len, map = {}, i = 0;
            if (jQuery.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;
              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles)
              }
              return map
            }
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
          }, name, value, arguments.length > 1)
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing)
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px')
        },
        cur: function () {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
        },
        run: function (percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
          } else {
            this.pos = eased = percent
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this)
          }
          if (hooks && hooks.set) {
            hooks.set(this)
          } else {
            Tween.propHooks._default.set(this)
          }
          return this
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function (tween) {
            var result;
            // Use a property on the element directly when it is not a DOM element,
            // or when there is no matching style property that exists.
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop]
            }
            // Passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails.
            // Simple values such as "10px" are parsed to Float;
            // complex values such as "rotate(1rad)" are returned as-is.
            result = jQuery.css(tween.elem, tween.prop, '');
            // Empty strings, null, undefined and "auto" are converted to 0.
            return !result || result === 'auto' ? 0 : result
          },
          set: function (tween) {
            // Use step hook for back compat.
            // Use cssHook if its there.
            // Use .style if available and use plain properties where available.
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween)
            } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
            } else {
              tween.elem[tween.prop] = tween.now
            }
          }
        }
      };
      // Support: IE <=9 only
      // Panic based approach to setting things on disconnected nodes
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now
          }
        }
      };
      jQuery.easing = {
        linear: function (p) {
          return p
        },
        swing: function (p) {
          return 0.5 - Math.cos(p * Math.PI) / 2
        },
        _default: 'swing'
      };
      jQuery.fx = Tween.prototype.init;
      // Back compat <1.8 extension point
      jQuery.fx.step = {};
      var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function raf() {
        if (timerId) {
          window.requestAnimationFrame(raf);
          jQuery.fx.tick()
        }
      }
      // Animations created synchronously will run synchronously
      function createFxNow() {
        window.setTimeout(function () {
          fxNow = undefined
        });
        return fxNow = jQuery.now()
      }
      // Generate parameters to create a standard animation
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs['margin' + which] = attrs['padding' + which] = type
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type
        }
        return attrs
      }
      function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            // We're done with this property
            return tween
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = 'width' in props || 'height' in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, 'fxshow');
        // Queue-skipping animations hijack the fx hooks
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, 'fx');
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function () {
              if (!hooks.unqueued) {
                oldfire()
              }
            }
          }
          hooks.unqueued++;
          anim.always(function () {
            // Ensure the complete handler is called before this completes
            anim.always(function () {
              hooks.unqueued--;
              if (!jQuery.queue(elem, 'fx').length) {
                hooks.empty.fire()
              }
            })
          })
        }
        // Detect show/hide animations
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === 'toggle';
            if (value === (hidden ? 'hide' : 'show')) {
              // Pretend to be hidden if this is a "show" and
              // there is still data from a stopped show/hide
              if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                hidden = true  // Ignore all other no-op show/hide data
              } else {
                continue
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
          }
        }
        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
          return
        }
        // Restrict "overflow" and "display" styles during box animations
        if (isBox && elem.nodeType === 1) {
          // Support: IE <=9 - 11, Edge 12 - 13
          // Record all 3 overflow attributes because IE does not infer the shorthand
          // from identically-valued overflowX and overflowY
          opts.overflow = [
            style.overflow,
            style.overflowX,
            style.overflowY
          ];
          // Identify a display type, preferring old show/hide data over the CSS cascade
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, 'display')
          }
          display = jQuery.css(elem, 'display');
          if (display === 'none') {
            if (restoreDisplay) {
              display = restoreDisplay
            } else {
              // Get nonempty value(s) by temporarily forcing visibility
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, 'display');
              showHide([elem])
            }
          }
          // Animate inline elements as inline-block
          if (display === 'inline' || display === 'inline-block' && restoreDisplay != null) {
            if (jQuery.css(elem, 'float') === 'none') {
              // Restore the original display value at the end of pure show/hide animations
              if (!propTween) {
                anim.done(function () {
                  style.display = restoreDisplay
                });
                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === 'none' ? '' : display
                }
              }
              style.display = 'inline-block'
            }
          }
        }
        if (opts.overflow) {
          style.overflow = 'hidden';
          anim.always(function () {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2]
          })
        }
        // Implement show/hide animations
        propTween = false;
        for (prop in orig) {
          // General show/hide setup for this element animation
          if (!propTween) {
            if (dataShow) {
              if ('hidden' in dataShow) {
                hidden = dataShow.hidden
              }
            } else {
              dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay })
            }
            // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
            if (toggle) {
              dataShow.hidden = !hidden
            }
            // Show elements before animating them
            if (hidden) {
              showHide([elem], true)
            }
            /* eslint-disable no-loop-func */
            anim.done(function () {
              /* eslint-enable no-loop-func */
              // The final step of a "hide" animation is actually hiding the element
              if (!hidden) {
                showHide([elem])
              }
              dataPriv.remove(elem, 'fxshow');
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop])
              }
            })
          }
          // Per-property setup
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
          name = jQuery.camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (jQuery.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0]
          }
          if (index !== name) {
            props[name] = value;
            delete props[index]
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && 'expand' in hooks) {
            value = hooks.expand(value);
            delete props[name];
            // Not quite $.extend, this won't overwrite existing keys.
            // Reusing 'index' because we have the correct "name"
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing
              }
            }
          } else {
            specialEasing[name] = easing
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
            // Don't match elem in the :animated selector
            delete tick.elem
          }), tick = function () {
            if (stopped) {
              return false
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
              // Support: Android 2.3 only
              // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
              temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (; index < length; index++) {
              animation.tweens[index].run(percent)
            }
            deferred.notifyWith(elem, [
              animation,
              percent,
              remaining
            ]);
            if (percent < 1 && length) {
              return remaining
            } else {
              deferred.resolveWith(elem, [animation]);
              return false
            }
          }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
              specialEasing: {},
              easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function (prop, end) {
              var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween
            },
            stop: function (gotoEnd) {
              var index = 0,
                // If we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this
              }
              stopped = true;
              for (; index < length; index++) {
                animation.tweens[index].run(1)
              }
              // Resolve when we played the last frame; otherwise, reject
              if (gotoEnd) {
                deferred.notifyWith(elem, [
                  animation,
                  1,
                  0
                ]);
                deferred.resolveWith(elem, [
                  animation,
                  gotoEnd
                ])
              } else {
                deferred.rejectWith(elem, [
                  animation,
                  gotoEnd
                ])
              }
              return this
            }
          }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (jQuery.isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result)
            }
            return result
          }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation)
        }
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        // attach callbacks from options
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          '*': [function (prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween
            }]
        },
        tweener: function (props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props;
            props = ['*']
          } else {
            props = props.match(rnothtmlwhite)
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback)
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function (callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback)
          } else {
            Animation.prefilters.push(callback)
          }
        }
      });
      jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        // Go to the end state if fx are off or if document is hidden
        if (jQuery.fx.off || document.hidden) {
          opt.duration = 0
        } else {
          if (typeof opt.duration !== 'number') {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration]
            } else {
              opt.duration = jQuery.fx.speeds._default
            }
          }
        }
        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
          opt.queue = 'fx'
        }
        // Queueing
        opt.old = opt.complete;
        opt.complete = function () {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this)
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue)
          }
        };
        return opt
      };
      jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
          // Show any hidden elements after setting opacity to 0
          return this.filter(isHiddenWithinTree).css('opacity', 0).show()  // Animate to the value specified
.end().animate({ opacity: to }, speed, easing, callback)
        },
        animate: function (prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
              // Operate on a copy of prop so per-property easing won't be lost
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              // Empty animations, or finishing resolves immediately
              if (empty || dataPriv.get(this, 'finish')) {
                anim.stop(true)
              }
            };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
        },
        stop: function (type, clearQueue, gotoEnd) {
          var stopQueue = function (hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd)
          };
          if (typeof type !== 'string') {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined
          }
          if (clearQueue && type !== false) {
            this.queue(type || 'fx', [])
          }
          return this.each(function () {
            var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index])
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index])
                }
              }
            }
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1)
              }
            }
            // Start the next in the queue if the last step wasn't forced.
            // Timers currently will call their complete callbacks, which
            // will dequeue but only if they were gotoEnd.
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type)
            }
          })
        },
        finish: function (type) {
          if (type !== false) {
            type = type || 'fx'
          }
          return this.each(function () {
            var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
            // Enable finishing flag on private data
            data.finish = true;
            // Empty the queue first
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true)
            }
            // Look for any active animations, and finish them
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1)
              }
            }
            // Look for any animations in the old queue and finish them
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this)
              }
            }
            // Turn off finishing flag
            delete data.finish
          })
        }
      });
      jQuery.each([
        'toggle',
        'show',
        'hide'
      ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
          return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
        }
      });
      // Generate shortcuts for custom animations
      jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
      }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
          return this.animate(props, speed, easing, callback)
        }
      });
      jQuery.timers = [];
      jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          // Checks the timer has not already been removed
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1)
          }
        }
        if (!timers.length) {
          jQuery.fx.stop()
        }
        fxNow = undefined
      };
      jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        if (timer()) {
          jQuery.fx.start()
        } else {
          jQuery.timers.pop()
        }
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function () {
        if (!timerId) {
          timerId = window.requestAnimationFrame ? window.requestAnimationFrame(raf) : window.setInterval(jQuery.fx.tick, jQuery.fx.interval)
        }
      };
      jQuery.fx.stop = function () {
        if (window.cancelAnimationFrame) {
          window.cancelAnimationFrame(timerId)
        } else {
          window.clearInterval(timerId)
        }
        timerId = null
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
      };
      // Based off of the plugin by Clint Helfers, with permission.
      // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
      jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
          var timeout = window.setTimeout(next, time);
          hooks.stop = function () {
            window.clearTimeout(timeout)
          }
        })
      };
      (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== '';
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't'
      }());
      var boolHook, attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function (name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1)
        },
        removeAttr: function (name) {
          return this.each(function () {
            jQuery.removeAttr(this, name)
          })
        }
      });
      jQuery.extend({
        attr: function (elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          // Don't get/set attributes on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          // Fallback to prop when attributes are not supported
          if (typeof elem.getAttribute === 'undefined') {
            return jQuery.prop(elem, name, value)
          }
          // Attribute hooks are determined by the lowercase version
          // Grab necessary hook if one is defined
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined)
          }
          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return
            }
            if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret
            }
            elem.setAttribute(name, value + '');
            return value
          }
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret
          }
          ret = jQuery.find.attr(elem, name);
          // Non-existent attributes return null, we normalize to undefined
          return ret == null ? undefined : ret
        },
        attrHooks: {
          type: {
            set: function (elem, value) {
              if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                var val = elem.value;
                elem.setAttribute('type', value);
                if (val) {
                  elem.value = val
                }
                return value
              }
            }
          }
        },
        removeAttr: function (elem, value) {
          var name, i = 0,
            // Attribute names can contain non-HTML whitespace characters
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
            attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name)
            }
          }
        }
      });
      // Hooks for boolean attributes
      boolHook = {
        set: function (elem, value, name) {
          if (value === false) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name)
          } else {
            elem.setAttribute(name, name)
          }
          return name
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
          var ret, handle, lowercaseName = name.toLowerCase();
          if (!isXML) {
            // Avoid an infinite loop by temporarily removing this function from the getter
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle
          }
          return ret
        }
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function (name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1)
        },
        removeProp: function (name) {
          return this.each(function () {
            delete this[jQuery.propFix[name] || name]
          })
        }
      });
      jQuery.extend({
        prop: function (elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          // Don't get/set properties on text, comment and attribute nodes
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            // Fix name and attach hooks
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name]
          }
          if (value !== undefined) {
            if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret
            }
            return elem[name] = value
          }
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret
          }
          return elem[name]
        },
        propHooks: {
          tabIndex: {
            get: function (elem) {
              // Support: IE <=9 - 11 only
              // elem.tabIndex doesn't always return the
              // correct value when it hasn't been explicitly set
              // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
              // Use proper attribute retrieval(#12072)
              var tabindex = jQuery.find.attr(elem, 'tabindex');
              if (tabindex) {
                return parseInt(tabindex, 10)
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0
              }
              return -1
            }
          }
        },
        propFix: {
          'for': 'htmlFor',
          'class': 'className'
        }
      });
      // Support: IE <=11 only
      // Accessing the selectedIndex property
      // forces the browser to respect setting selected
      // on the option
      // The getter ensures a default option is selected
      // when in an optgroup
      // eslint rule "no-unused-expressions" is disabled for this code
      // since it considers such accessions noop
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function (elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex
            }
            return null
          },
          set: function (elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex
              }
            }
          }
        }
      }
      jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
      ], function () {
        jQuery.propFix[this.toLowerCase()] = this
      });
      // Strip and collapse whitespace according to HTML spec
      // https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(' ')
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute('class') || ''
      }
      jQuery.fn.extend({
        addClass: function (value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)))
            })
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || [];
            while (elem = this[i++]) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  if (cur.indexOf(' ' + clazz + ' ') < 0) {
                    cur += clazz + ' '
                  }
                }
                // Only assign if different to avoid unneeded rendering.
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        removeClass: function (value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)))
            })
          }
          if (!arguments.length) {
            return this.attr('class', '')
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || [];
            while (elem = this[i++]) {
              curValue = getClass(elem);
              // This expression is here for better compressibility (see addClass)
              cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  // Remove *all* instances
                  while (cur.indexOf(' ' + clazz + ' ') > -1) {
                    cur = cur.replace(' ' + clazz + ' ', ' ')
                  }
                }
                // Only assign if different to avoid unneeded rendering.
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        toggleClass: function (value, stateVal) {
          var type = typeof value;
          if (typeof stateVal === 'boolean' && type === 'string') {
            return stateVal ? this.addClass(value) : this.removeClass(value)
          }
          if (jQuery.isFunction(value)) {
            return this.each(function (i) {
              jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal)
            })
          }
          return this.each(function () {
            var className, i, self, classNames;
            if (type === 'string') {
              // Toggle individual class names
              i = 0;
              self = jQuery(this);
              classNames = value.match(rnothtmlwhite) || [];
              while (className = classNames[i++]) {
                // Check each className given, space separated list
                if (self.hasClass(className)) {
                  self.removeClass(className)
                } else {
                  self.addClass(className)
                }
              }  // Toggle whole class name
            } else if (value === undefined || type === 'boolean') {
              className = getClass(this);
              if (className) {
                // Store className if set
                dataPriv.set(this, '__className__', className)
              }
              // If the element has a class name or if we're passed `false`,
              // then remove the whole classname (if there was one, the above saved it).
              // Otherwise bring back whatever was previously saved (if anything),
              // falling back to the empty string if nothing was stored.
              if (this.setAttribute) {
                this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '')
              }
            }
          })
        },
        hasClass: function (selector) {
          var className, elem, i = 0;
          className = ' ' + selector + ' ';
          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1) {
              return true
            }
          }
          return false
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function (value) {
          var hooks, ret, isFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                return ret
              }
              ret = elem.value;
              // Handle most common string cases
              if (typeof ret === 'string') {
                return ret.replace(rreturn, '')
              }
              // Handle cases where value is null/undef or number
              return ret == null ? '' : ret
            }
            return
          }
          isFunction = jQuery.isFunction(value);
          return this.each(function (i) {
            var val;
            if (this.nodeType !== 1) {
              return
            }
            if (isFunction) {
              val = value.call(this, i, jQuery(this).val())
            } else {
              val = value
            }
            // Treat null/undefined as ""; convert numbers to string
            if (val == null) {
              val = ''
            } else if (typeof val === 'number') {
              val += ''
            } else if (jQuery.isArray(val)) {
              val = jQuery.map(val, function (value) {
                return value == null ? '' : value + ''
              })
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            // If set returns undefined, fall back to normal setting
            if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
              this.value = val
            }
          })
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function (elem) {
              var val = jQuery.find.attr(elem, 'value');
              return val != null ? val : // Support: IE <=10 - 11 only
              // option.text throws exceptions (#14686, #14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem))
            }
          },
          select: {
            get: function (elem) {
              var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one', values = one ? null : [], max = one ? index + 1 : options.length;
              if (index < 0) {
                i = max
              } else {
                i = one ? index : 0
              }
              // Loop through all the selected options
              for (; i < max; i++) {
                option = options[i];
                // Support: IE <=9 only
                // IE8-9 doesn't update selected after form reset (#2551)
                if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                  // Get the specific value for the option
                  value = jQuery(option).val();
                  // We don't need an array for one selects
                  if (one) {
                    return value
                  }
                  // Multi-Selects return an array
                  values.push(value)
                }
              }
              return values
            },
            set: function (elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                /* eslint-disable no-cond-assign */
                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true
                }  /* eslint-enable no-cond-assign */
              }
              // Force browsers to behave consistently when non-matching value is set
              if (!optionSet) {
                elem.selectedIndex = -1
              }
              return values
            }
          }
        }
      });
      // Radios and checkboxes getter/setter
      jQuery.each([
        'radio',
        'checkbox'
      ], function () {
        jQuery.valHooks[this] = {
          set: function (elem, value) {
            if (jQuery.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute('value') === null ? 'on' : elem.value
          }
        }
      });
      // Return jQuery for attributes-only inclusion
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
      jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
          cur = tmp = elem = elem || document;
          // Don't do events on text and comment nodes
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return
          }
          // focus/blur morphs to focusin/out; ensure we're not firing them right now
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return
          }
          if (type.indexOf('.') > -1) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split('.');
            type = namespaces.shift();
            namespaces.sort()
          }
          ontype = type.indexOf(':') < 0 && 'on' + type;
          // Caller can pass in a jQuery.Event object, Object, or just an event type string
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
          // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join('.');
          event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
          // Clean up the event in case it is being reused
          event.result = undefined;
          if (!event.target) {
            event.target = elem
          }
          // Clone any incoming data and prepend the event, creating the handler arg list
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          // Allow special events to draw outside the lines
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return
          }
          // Determine event propagation path in advance, per W3C events spec (#9951)
          // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur
            }
            // Only add window if we got to document (e.g., not plain obj or detached DOM)
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window)
            }
          }
          // Fire handlers on the event path
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            event.type = i > 1 ? bubbleType : special.bindType || type;
            // jQuery handler
            handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
            if (handle) {
              handle.apply(cur, data)
            }
            // Native handler
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault()
              }
            }
          }
          event.type = type;
          // If nobody prevented the default action, do it now
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              // Call a native DOM method on the target with the same name as the event.
              // Don't do default actions on window, that's where global variables be (#6170)
              if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                // Don't re-trigger an onFOO event when we call its FOO() method
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null
                }
                // Prevent re-triggering of the same event, since we already bubbled it above
                jQuery.event.triggered = type;
                elem[type]();
                jQuery.event.triggered = undefined;
                if (tmp) {
                  elem[ontype] = tmp
                }
              }
            }
          }
          return event.result
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function (type, elem, event) {
          var e = jQuery.extend(new jQuery.Event, event, {
            type: type,
            isSimulated: true
          });
          jQuery.event.trigger(e, null, elem)
        }
      });
      jQuery.fn.extend({
        trigger: function (type, data) {
          return this.each(function () {
            jQuery.event.trigger(type, data, this)
          })
        },
        triggerHandler: function (type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true)
          }
        }
      });
      jQuery.each(('blur focus focusin focusout resize scroll click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup contextmenu').split(' '), function (i, name) {
        // Handle event binding
        jQuery.fn[name] = function (data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
        }
      });
      jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        }
      });
      support.focusin = 'onfocusin' in window;
      // Support: Firefox <=44
      // Firefox doesn't have focus(in | out) events
      // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
      //
      // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
      // focus(in | out) events fire after focus & blur events,
      // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
      // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
      if (!support.focusin) {
        jQuery.each({
          focus: 'focusin',
          blur: 'focusout'
        }, function (orig, fix) {
          // Attach a single capturing handler on the document while someone wants focusin/focusout
          var handler = function (event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event))
          };
          jQuery.event.special[fix] = {
            setup: function () {
              var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true)
              }
              dataPriv.access(doc, fix, (attaches || 0) + 1)
            },
            teardown: function () {
              var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix)
              } else {
                dataPriv.access(doc, fix, attaches)
              }
            }
          }
        })
      }
      var location = window.location;
      var nonce = jQuery.now();
      var rquery = /\?/;
      // Cross-browser xml parsing
      jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== 'string') {
          return null
        }
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
          xml = new window.DOMParser().parseFromString(data, 'text/xml')
        } catch (e) {
          xml = undefined
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
          jQuery.error('Invalid XML: ' + data)
        }
        return xml
      };
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
          // Serialize array item.
          jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) {
              // Treat each array item as a scalar.
              add(prefix, v)
            } else {
              // Item is non-scalar (array or object), encode its numeric index.
              buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add)
            }
          })
        } else if (!traditional && jQuery.type(obj) === 'object') {
          // Serialize object item.
          for (name in obj) {
            buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
          }
        } else {
          // Serialize scalar item.
          add(prefix, obj)
        }
      }
      // Serialize an array of form elements or a set of
      // key/values into a query string
      jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, valueOrFunction) {
            // If value is a function, invoke it and use its return value
            var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value == null ? '' : value)
          };
        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          // Serialize the form elements
          jQuery.each(a, function () {
            add(this.name, this.value)
          })
        } else {
          // If traditional, encode the "old" way (the way 1.3.2 or older
          // did it), otherwise encode params recursively.
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add)
          }
        }
        // Return the resulting serialization
        return s.join('&')
      };
      jQuery.fn.extend({
        serialize: function () {
          return jQuery.param(this.serializeArray())
        },
        serializeArray: function () {
          return this.map(function () {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop(this, 'elements');
            return elements ? jQuery.makeArray(elements) : this
          }).filter(function () {
            var type = this.type;
            // Use .is( ":disabled" ) so that fieldset[disabled] works
            return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type))
          }).map(function (i, elem) {
            var val = jQuery(this).val();
            if (val == null) {
              return null
            }
            if (jQuery.isArray(val)) {
              return jQuery.map(val, function (val) {
                return {
                  name: elem.name,
                  value: val.replace(rCRLF, '\r\n')
                }
              })
            }
            return {
              name: elem.name,
              value: val.replace(rCRLF, '\r\n')
            }
          }).get()
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//,
        /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
        prefilters = {},
        /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
        transports = {},
        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = '*/'.concat('*'),
        // Anchor tag for parsing the document origin
        originAnchor = document.createElement('a');
      originAnchor.href = location.href;
      // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
      function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {
          if (typeof dataTypeExpression !== 'string') {
            func = dataTypeExpression;
            dataTypeExpression = '*'
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (jQuery.isFunction(func)) {
            // For each dataType in the dataTypeExpression
            while (dataType = dataTypes[i++]) {
              // Prepend if requested
              if (dataType[0] === '+') {
                dataType = dataType.slice(1) || '*';
                (structure[dataType] = structure[dataType] || []).unshift(func)  // Otherwise append
              } else {
                (structure[dataType] = structure[dataType] || []).push(func)
              }
            }
          }
        }
      }
      // Base inspection function for prefilters and transports
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport)
            }
          });
          return selected
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*')
      }
      // A special extend for ajax options
      // that takes "flat" options (not to be deep extended)
      // Fixes #9887
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep)
        }
        return target
      }
      /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === '*') {
          dataTypes.shift();
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader('Content-Type')
          }
        }
        // Check if we're dealing with a known content-type
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break
            }
          }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0]
        } else {
          // Try convertible dataTypes
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
              finalDataType = type;
              break
            }
            if (!firstDataType) {
              firstDataType = type
            }
          }
          // Or just use first one
          finalDataType = finalDataType || firstDataType
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType)
          }
          return responses[finalDataType]
        }
      }
      /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {},
          // Work with a copy of dataTypes in case we need to modify it for conversion
          dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv]
          }
        }
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response
          }
          // Apply the dataFilter if provided
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType)
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            // There's only work to do if current dataType is non-auto
            if (current === '*') {
              current = prev  // Convert response if prev dataType is non-auto and differs from current
            } else if (prev !== '*' && prev !== current) {
              // Seek a direct converter
              conv = converters[prev + ' ' + current] || converters['* ' + current];
              // If none found, seek a pair
              if (!conv) {
                for (conv2 in converters) {
                  // If conv2 outputs current
                  tmp = conv2.split(' ');
                  if (tmp[1] === current) {
                    // If prev can be converted to accepted input
                    conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                    if (conv) {
                      // Condense equivalence converters
                      if (conv === true) {
                        conv = converters[conv2]  // Otherwise, insert the intermediate dataType
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1])
                      }
                      break
                    }
                  }
                }
              }
              // Apply converter (if not an equivalence)
              if (conv !== true) {
                // Unless errors are allowed to bubble, catch and return them
                if (conv && s.throws) {
                  response = conv(response)
                } else {
                  try {
                    response = conv(response)
                  } catch (e) {
                    return {
                      state: 'parsererror',
                      error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                    }
                  }
                }
              }
            }
          }
        }
        return {
          state: 'success',
          data: response
        }
      }
      jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: 'GET',
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/
          accepts: {
            '*': allTypes,
            text: 'text/plain',
            html: 'text/html',
            xml: 'application/xml, text/xml',
            json: 'application/json, text/javascript'
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: 'responseXML',
            text: 'responseText',
            json: 'responseJSON'
          },
          // Data converters
          // Keys separate source (or catchall "*") and destination types with a single space
          converters: {
            // Convert anything to text
            '* text': String,
            // Text to html (true = no transformation)
            'text html': true,
            // Evaluate text as a json expression
            'text json': JSON.parse,
            // Parse text as xml
            'text xml': jQuery.parseXML
          },
          // For options that shouldn't be deep extended:
          // you can add your own custom options here if
          // and when you create one that shouldn't be
          // deep extended (see ajaxExtend)
          flatOptions: {
            url: true,
            context: true
          }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function (target, settings) {
          return settings ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target)
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function (url, options) {
          // If url is an object, simulate pre-1.5 signature
          if (typeof url === 'object') {
            options = url;
            url = undefined
          }
          // Force options to be an object
          options = options || {};
          var transport,
            // URL without anti-cache param
            cacheURL,
            // Response headers
            responseHeadersString, responseHeaders,
            // timeout handle
            timeoutTimer,
            // Url cleanup var
            urlAnchor,
            // Request state (becomes false upon send and true upon completion)
            completed,
            // To know if global events are to be dispatched
            fireGlobals,
            // Loop variable
            i,
            // uncached part of the url
            uncached,
            // Create the final options object
            s = jQuery.ajaxSetup({}, options),
            // Callbacks context
            callbackContext = s.context || s,
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
            // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
            // Status-dependent callbacks
            statusCode = s.statusCode || {},
            // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {},
            // Default abort message
            strAbort = 'canceled',
            // Fake xhr
            jqXHR = {
              readyState: 0,
              // Builds headers hashtable if needed
              getResponseHeader: function (key) {
                var match;
                if (completed) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase()] = match[2]
                    }
                  }
                  match = responseHeaders[key.toLowerCase()]
                }
                return match == null ? null : match
              },
              // Raw string
              getAllResponseHeaders: function () {
                return completed ? responseHeadersString : null
              },
              // Caches the header
              setRequestHeader: function (name, value) {
                if (completed == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value
                }
                return this
              },
              // Overrides response content-type header
              overrideMimeType: function (type) {
                if (completed == null) {
                  s.mimeType = type
                }
                return this
              },
              // Status-dependent callbacks
              statusCode: function (map) {
                var code;
                if (map) {
                  if (completed) {
                    // Execute the appropriate callbacks
                    jqXHR.always(map[jqXHR.status])
                  } else {
                    // Lazy-add the new callbacks in a way that preserves old ones
                    for (code in map) {
                      statusCode[code] = [
                        statusCode[code],
                        map[code]
                      ]
                    }
                  }
                }
                return this
              },
              // Cancel the request
              abort: function (statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText)
                }
                done(0, finalText);
                return this
              }
            };
          // Attach deferreds
          deferred.promise(jqXHR);
          // Add protocol if not provided (prefilters might expect it)
          // Handle falsy url in the settings object (#10093: consistency with old signature)
          // We also use the url parameter if available
          s.url = ((url || s.url || location.href) + '').replace(rprotocol, location.protocol + '//');
          // Alias method option to type as per ticket #12004
          s.type = options.method || options.type || s.method || s.type;
          // Extract dataTypes list
          s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [''];
          // A cross-domain request is in order when the origin doesn't match the current origin.
          if (s.crossDomain == null) {
            urlAnchor = document.createElement('a');
            // Support: IE <=8 - 11, Edge 12 - 13
            // IE throws exception on accessing the href property if url is malformed,
            // e.g. http://example.com:80x/
            try {
              urlAnchor.href = s.url;
              // Support: IE <=8 - 11 only
              // Anchor's host property isn't correctly set when s.url is relative
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host
            } catch (e) {
              // If there is an error parsing the URL, assume it is crossDomain,
              // it can be rejected by the transport if it is invalid
              s.crossDomain = true
            }
          }
          // Convert data if not already a string
          if (s.data && s.processData && typeof s.data !== 'string') {
            s.data = jQuery.param(s.data, s.traditional)
          }
          // Apply prefilters
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          // If request was aborted inside a prefilter, stop there
          if (completed) {
            return jqXHR
          }
          // We can fire global events as of now if asked to
          // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
          fireGlobals = jQuery.event && s.global;
          // Watch for a new set of requests
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger('ajaxStart')
          }
          // Uppercase the type
          s.type = s.type.toUpperCase();
          // Determine if request has content
          s.hasContent = !rnoContent.test(s.type);
          // Save the URL in case we're toying with the If-Modified-Since
          // and/or If-None-Match header later on
          // Remove hash to simplify url manipulation
          cacheURL = s.url.replace(rhash, '');
          // More options handling for requests with no content
          if (!s.hasContent) {
            // Remember the hash so we can put it back
            uncached = s.url.slice(cacheURL.length);
            // If data is available, append data to url
            if (s.data) {
              cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;
              // #9682: remove data so that it's not used in an eventual retry
              delete s.data
            }
            // Add or update anti-cache param if needed
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, '$1');
              uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++ + uncached
            }
            // Put hash and anti-cache on the URL that will be requested (gh-1732)
            s.url = cacheURL + uncached  // Change '%20' to '+' if this is encoded form body content (gh-2658)
          } else if (s.data && s.processData && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0) {
            s.data = s.data.replace(r20, '+')
          }
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL])
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL])
            }
          }
          // Set the correct header, if data is being sent
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader('Content-Type', s.contentType)
          }
          // Set the Accepts header for the server, depending on the dataType
          jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
          // Check for headers option
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i])
          }
          // Allow custom headers/mimetypes and early abort
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
            // Abort if not done already and return
            return jqXHR.abort()
          }
          // Aborting is no longer a cancellation
          strAbort = 'abort';
          // Install callbacks on deferreds
          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error);
          // Get transport
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          // If no transport, we auto-abort
          if (!transport) {
            done(-1, 'No Transport')
          } else {
            jqXHR.readyState = 1;
            // Send global event
            if (fireGlobals) {
              globalEventContext.trigger('ajaxSend', [
                jqXHR,
                s
              ])
            }
            // If request was aborted inside ajaxSend, stop there
            if (completed) {
              return jqXHR
            }
            // Timeout
            if (s.async && s.timeout > 0) {
              timeoutTimer = window.setTimeout(function () {
                jqXHR.abort('timeout')
              }, s.timeout)
            }
            try {
              completed = false;
              transport.send(requestHeaders, done)
            } catch (e) {
              // Rethrow post-completion exceptions
              if (completed) {
                throw e
              }
              // Propagate others as results
              done(-1, e)
            }
          }
          // Callback for when everything is done
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            // Ignore repeat invocations
            if (completed) {
              return
            }
            completed = true;
            // Clear timeout if it exists
            if (timeoutTimer) {
              window.clearTimeout(timeoutTimer)
            }
            // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)
            transport = undefined;
            // Cache response headers
            responseHeadersString = headers || '';
            // Set readyState
            jqXHR.readyState = status > 0 ? 4 : 0;
            // Determine if successful
            isSuccess = status >= 200 && status < 300 || status === 304;
            // Get response data
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses)
            }
            // Convert no matter what (that way responseXXX fields are always set)
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            // If successful, handle type chaining
            if (isSuccess) {
              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader('Last-Modified');
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified
                }
                modified = jqXHR.getResponseHeader('etag');
                if (modified) {
                  jQuery.etag[cacheURL] = modified
                }
              }
              // if no content
              if (status === 204 || s.type === 'HEAD') {
                statusText = 'nocontent'  // if not modified
              } else if (status === 304) {
                statusText = 'notmodified'  // If we have data, let's convert it
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error
              }
            } else {
              // Extract error from statusText and normalize for non-aborts
              error = statusText;
              if (status || !statusText) {
                statusText = 'error';
                if (status < 0) {
                  status = 0
                }
              }
            }
            // Set data for the fake xhr object
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + '';
            // Success/Error
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [
                success,
                statusText,
                jqXHR
              ])
            } else {
              deferred.rejectWith(callbackContext, [
                jqXHR,
                statusText,
                error
              ])
            }
            // Status-dependent callbacks
            jqXHR.statusCode(statusCode);
            statusCode = undefined;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                jqXHR,
                s,
                isSuccess ? success : error
              ])
            }
            // Complete
            completeDeferred.fireWith(callbackContext, [
              jqXHR,
              statusText
            ]);
            if (fireGlobals) {
              globalEventContext.trigger('ajaxComplete', [
                jqXHR,
                s
              ]);
              // Handle the global AJAX counter
              if (!--jQuery.active) {
                jQuery.event.trigger('ajaxStop')
              }
            }
          }
          return jqXHR
        },
        getJSON: function (url, data, callback) {
          return jQuery.get(url, data, callback, 'json')
        },
        getScript: function (url, callback) {
          return jQuery.get(url, undefined, callback, 'script')
        }
      });
      jQuery.each([
        'get',
        'post'
      ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
          // Shift arguments if data argument was omitted
          if (jQuery.isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined
          }
          // The url can be an options object (which then must have .url)
          return jQuery.ajax(jQuery.extend({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          }, jQuery.isPlainObject(url) && url))
        }
      });
      jQuery._evalUrl = function (url) {
        return jQuery.ajax({
          url: url,
          // Make this explicit, since user can override this through ajaxSetup (#11264)
          type: 'GET',
          dataType: 'script',
          cache: true,
          async: false,
          global: false,
          'throws': true
        })
      };
      jQuery.fn.extend({
        wrapAll: function (html) {
          var wrap;
          if (this[0]) {
            if (jQuery.isFunction(html)) {
              html = html.call(this[0])
            }
            // The elements to wrap the target around
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0])
            }
            wrap.map(function () {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild
              }
              return elem
            }).append(this)
          }
          return this
        },
        wrapInner: function (html) {
          if (jQuery.isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapInner(html.call(this, i))
            })
          }
          return this.each(function () {
            var self = jQuery(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html)
            } else {
              self.append(html)
            }
          })
        },
        wrap: function (html) {
          var isFunction = jQuery.isFunction(html);
          return this.each(function (i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
          })
        },
        unwrap: function (selector) {
          this.parent(selector).not('body').each(function () {
            jQuery(this).replaceWith(this.childNodes)
          });
          return this
        }
      });
      jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem)
      };
      jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length)
      };
      jQuery.ajaxSettings.xhr = function () {
        try {
          return new window.XMLHttpRequest
        } catch (e) {
        }
      };
      var xhrSuccessStatus = {
          // File protocol always yields status code 0, assume 200
          0: 200,
          // Support: IE <=9 only
          // #1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;
        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function (headers, complete) {
              var i, xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              // Apply custom fields if provided
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i]
                }
              }
              // Override mime type if needed
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType)
              }
              // X-Requested-With header
              // For cross-domain requests, seeing as conditions for a preflight are
              // akin to a jigsaw puzzle, we simply never set it to be sure.
              // (it can always be set on a per-request basis or even using ajaxSetup)
              // For same-domain requests, won't change header if already provided.
              if (!options.crossDomain && !headers['X-Requested-With']) {
                headers['X-Requested-With'] = 'XMLHttpRequest'
              }
              // Set headers
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i])
              }
              // Callback
              callback = function (type) {
                return function () {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
                    if (type === 'abort') {
                      xhr.abort()
                    } else if (type === 'error') {
                      // Support: IE <=9 only
                      // On a manual native abort, IE9 throws
                      // errors on any property access that is not readyState
                      if (typeof xhr.status !== 'number') {
                        complete(0, 'error')
                      } else {
                        complete(// File: protocol always yields status 0; see #8605, #14207
                        xhr.status, xhr.statusText)
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                      // IE9 has no XHR2 but throws on binary (trac-11426)
                      // For XHR2 non-text, let the caller handle it (gh-2498)
                      (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders())
                    }
                  }
                }
              };
              // Listen to events
              xhr.onload = callback();
              errorCallback = xhr.onerror = callback('error');
              // Support: IE 9 only
              // Use onreadystatechange to replace onabort
              // to handle uncaught aborts
              if (xhr.onabort !== undefined) {
                xhr.onabort = errorCallback
              } else {
                xhr.onreadystatechange = function () {
                  // Check readyState before timeout as it changes
                  if (xhr.readyState === 4) {
                    // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window.setTimeout(function () {
                      if (callback) {
                        errorCallback()
                      }
                    })
                  }
                }
              }
              // Create the abort callback
              callback = callback('abort');
              try {
                // Do send the request (this may raise an exception)
                xhr.send(options.hasContent && options.data || null)
              } catch (e) {
                // #14683: Only rethrow if this hasn't been notified as an error yet
                if (callback) {
                  throw e
                }
              }
            },
            abort: function () {
              if (callback) {
                callback()
              }
            }
          }
        }
      });
      // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
      jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
          s.contents.script = false
        }
      });
      // Install script dataType
      jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
          'text script': function (text) {
            jQuery.globalEval(text);
            return text
          }
        }
      });
      // Handle cache's special case and crossDomain
      jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
          s.cache = false
        }
        if (s.crossDomain) {
          s.type = 'GET'
        }
      });
      // Bind script tag hack transport
      jQuery.ajaxTransport('script', function (s) {
        // This transport only deals with cross domain requests
        if (s.crossDomain) {
          var script, callback;
          return {
            send: function (_, complete) {
              script = jQuery('<script>').prop({
                charset: s.scriptCharset,
                src: s.url
              }).on('load error', callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === 'error' ? 404 : 200, evt.type)
                }
              });
              // Use native DOM manipulation to avoid our domManip AJAX trickery
              document.head.appendChild(script[0])
            },
            abort: function () {
              if (callback) {
                callback()
              }
            }
          }
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      // Default jsonp settings
      jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
          var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
          this[callback] = true;
          return callback
        }
      });
      // Detect, normalize options and install callbacks for jsonp requests
      jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
          // Get callback name, remembering preexisting value associated with it
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          // Insert callback into url or form data
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName)
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName
          }
          // Use data converter to retrieve json after script execution
          s.converters['script json'] = function () {
            if (!responseContainer) {
              jQuery.error(callbackName + ' was not called')
            }
            return responseContainer[0]
          };
          // Force json dataType
          s.dataTypes[0] = 'json';
          // Install callback
          overwritten = window[callbackName];
          window[callbackName] = function () {
            responseContainer = arguments
          };
          // Clean-up function (fires after converters)
          jqXHR.always(function () {
            // If previous value didn't exist - remove it
            if (overwritten === undefined) {
              jQuery(window).removeProp(callbackName)  // Otherwise restore preexisting value
            } else {
              window[callbackName] = overwritten
            }
            // Save back as free
            if (s[callbackName]) {
              // Make sure that re-using the options doesn't screw things around
              s.jsonpCallback = originalSettings.jsonpCallback;
              // Save the callback name for future use
              oldCallbacks.push(callbackName)
            }
            // Call if it was a function and we have a response
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0])
            }
            responseContainer = overwritten = undefined
          });
          // Delegate to script
          return 'script'
        }
      });
      // Support: Safari 8 only
      // In Safari 8 documents created via document.implementation.createHTMLDocument
      // collapse sibling forms: the second one becomes a child of the first one.
      // Because of that, this security measure has to be disabled in Safari 8.
      // https://bugs.webkit.org/show_bug.cgi?id=137337
      support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument('').body;
        body.innerHTML = '<form></form><form></form>';
        return body.childNodes.length === 2
      }();
      // Argument "data" should be string of html
      // context (optional): If specified, the fragment will be created in this context,
      // defaults to document
      // keepScripts (optional): If true, will include scripts passed in the html string
      jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== 'string') {
          return []
        }
        if (typeof context === 'boolean') {
          keepScripts = context;
          context = false
        }
        var base, parsed, scripts;
        if (!context) {
          // Stop scripts or inline event handlers from being executed immediately
          // by using document.implementation
          if (support.createHTMLDocument) {
            context = document.implementation.createHTMLDocument('');
            // Set the base href for the created document
            // so any parsed elements with URLs
            // are based on the document's URL (gh-2965)
            base = context.createElement('base');
            base.href = document.location.href;
            context.head.appendChild(base)
          } else {
            context = document
          }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        // Single tag
        if (parsed) {
          return [context.createElement(parsed[1])]
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove()
        }
        return jQuery.merge([], parsed.childNodes)
      };
      /**
 * Load a url into a page
 */
      jQuery.fn.load = function (url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off)
        }
        // If it's a function
        if (jQuery.isFunction(params)) {
          // We assume that it's the callback
          callback = params;
          params = undefined  // Otherwise, build a param string
        } else if (params && typeof params === 'object') {
          type = 'POST'
        }
        // If we have elements to modify, make the request
        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || 'GET',
            dataType: 'html',
            data: params
          }).done(function (responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText)  // If the request succeeds, this function gets "data", "status", "jqXHR"
                           // but they are ignored because response was set above.
                           // If it fails, this function gets "jqXHR", "status", "error"
          }).always(callback && function (jqXHR, status) {
            self.each(function () {
              callback.apply(this, response || [
                jqXHR.responseText,
                status,
                jqXHR
              ])
            })
          })
        }
        return this
      };
      // Attach a bunch of functions for handling common AJAX events
      jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
      ], function (i, type) {
        jQuery.fn[type] = function (fn) {
          return this.on(type, fn)
        }
      });
      jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
          return elem === fn.elem
        }).length
      };
      /**
 * Gets a window from an element
 */
      function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
      }
      jQuery.offset = {
        setOffset: function (elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
          // Set position first, in-case top/left are set even on static elem
          if (position === 'static') {
            elem.style.position = 'relative'
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, 'top');
          curCSSLeft = jQuery.css(elem, 'left');
          calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
          // Need to be able to calculate position if either
          // top or left is auto and position is either absolute or fixed
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0
          }
          if (jQuery.isFunction(options)) {
            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({}, curOffset))
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft
          }
          if ('using' in options) {
            options.using.call(elem, props)
          } else {
            curElem.css(props)
          }
        }
      };
      jQuery.fn.extend({
        offset: function (options) {
          // Preserve chaining for setter
          if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i)
            })
          }
          var docElem, win, rect, doc, elem = this[0];
          if (!elem) {
            return
          }
          // Support: IE <=11 only
          // Running getBoundingClientRect on a
          // disconnected node in IE throws an error
          if (!elem.getClientRects().length) {
            return {
              top: 0,
              left: 0
            }
          }
          rect = elem.getBoundingClientRect();
          // Make sure element is not hidden (display: none)
          if (rect.width || rect.height) {
            doc = elem.ownerDocument;
            win = getWindow(doc);
            docElem = doc.documentElement;
            return {
              top: rect.top + win.pageYOffset - docElem.clientTop,
              left: rect.left + win.pageXOffset - docElem.clientLeft
            }
          }
          // Return zeros for disconnected and hidden elements (gh-2310)
          return rect
        },
        position: function () {
          if (!this[0]) {
            return
          }
          var offsetParent, offset, elem = this[0], parentOffset = {
              top: 0,
              left: 0
            };
          // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
          // because it is its only offset parent
          if (jQuery.css(elem, 'position') === 'fixed') {
            // Assume getBoundingClientRect is there when computed position is fixed
            offset = elem.getBoundingClientRect()
          } else {
            // Get *real* offsetParent
            offsetParent = this.offsetParent();
            // Get correct offsets
            offset = this.offset();
            if (!jQuery.nodeName(offsetParent[0], 'html')) {
              parentOffset = offsetParent.offset()
            }
            // Add offsetParent borders
            parentOffset = {
              top: parentOffset.top + jQuery.css(offsetParent[0], 'borderTopWidth', true),
              left: parentOffset.left + jQuery.css(offsetParent[0], 'borderLeftWidth', true)
            }
          }
          // Subtract parent offsets and element margins
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
            left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
          }
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function () {
          return this.map(function () {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
              offsetParent = offsetParent.offsetParent
            }
            return offsetParent || documentElement
          })
        }
      });
      // Create scrollLeft and scrollTop methods
      jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
      }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
          return access(this, function (elem, method, val) {
            var win = getWindow(elem);
            if (val === undefined) {
              return win ? win[prop] : elem[method]
            }
            if (win) {
              win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset)
            } else {
              elem[method] = val
            }
          }, method, val, arguments.length)
        }
      });
      // Support: Safari <=7 - 9.1, Chrome <=37 - 49
      // Add the top/left cssHooks using jQuery.fn.position
      // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
      // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
      // getComputedStyle returns percent when specified for top/left/bottom/right;
      // rather than make the css module depend on the offset module, just check for it here
      jQuery.each([
        'top',
        'left'
      ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            // If curCSS returns percentage, fallback to offset
            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed
          }
        })
      });
      // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
      jQuery.each({
        Height: 'height',
        Width: 'width'
      }, function (name, type) {
        jQuery.each({
          padding: 'inner' + name,
          content: type,
          '': 'outer' + name
        }, function (defaultExtra, funcName) {
          // Margin is only for outerHeight, outerWidth
          jQuery.fn[funcName] = function (margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
            return access(this, function (elem, type, value) {
              var doc;
              if (jQuery.isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf('outer') === 0 ? elem['inner' + name] : elem.document.documentElement['client' + name]
              }
              // Get document width or height
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest
                return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name])
              }
              return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
              jQuery.css(elem, type, extra) : // Set width or height on the element
              jQuery.style(elem, type, value, extra)
            }, type, chainable ? margin : undefined, chainable)
          }
        })
      });
      jQuery.fn.extend({
        bind: function (types, data, fn) {
          return this.on(types, null, data, fn)
        },
        unbind: function (types, fn) {
          return this.off(types, null, fn)
        },
        delegate: function (selector, types, data, fn) {
          return this.on(types, selector, data, fn)
        },
        undelegate: function (selector, types, fn) {
          // ( namespace ) or ( selector, types [, fn] )
          return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn)
        }
      });
      jQuery.parseJSON = JSON.parse;
      // Register as a named AMD module, since jQuery can be concatenated with other
      // files that may use define, but not via a proper concatenation script that
      // understands anonymous AMD modules. A named AMD is safest and most robust
      // way to register. Lowercase jquery is used because AMD module names are
      // derived from file names, and jQuery is normally delivered in a lowercase
      // file name. Do this after creating the global so that if an AMD module wants
      // to call noConflict to hide this version of jQuery, it will work.
      // Note that for maximum portability, libraries that are not jQuery should
      // declare themselves as anonymous modules, and avoid setting a global if an
      // AMD loader is present. jQuery is a special case. For more information, see
      // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
      if (typeof define === 'function' && define.amd) {
        define('jquery', [], function () {
          return jQuery
        })
      }
      var
        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,
        // Map over the $ in case of overwrite
        _$ = window.$;
      jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
          window.$ = _$
        }
        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery
        }
        return jQuery
      };
      // Expose jQuery and $ identifiers, even in AMD
      // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
      // and CommonJS for browser emulators (#13566)
      if (!noGlobal) {
        window.jQuery = window.$ = jQuery
      }
      return jQuery
    }))
  });
  // source: node_modules/selectize/dist/js/selectize.js
  rqzt.define('selectize/dist/js/selectize', function (module, exports, __dirname, __filename, process) {
    /**
 * selectize.js (v0.12.4)
 * Copyright (c) 2013–2015 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    /*jshint curly:false */
    /*jshint browser:true */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define([
          'jquery',
          'sifter',
          'microplugin'
        ], factory)
      } else if (typeof exports === 'object') {
        module.exports = factory(rqzt('jquery/dist/jquery'), rqzt('sifter/sifter'), rqzt('microplugin/src/microplugin'))
      } else {
        root.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin)
      }
    }(this, function ($, Sifter, MicroPlugin) {
      'use strict';
      var highlight = function ($element, pattern) {
        if (typeof pattern === 'string' && !pattern.length)
          return;
        var regex = typeof pattern === 'string' ? new RegExp(pattern, 'i') : pattern;
        var highlight = function (node) {
          var skip = 0;
          if (node.nodeType === 3) {
            var pos = node.data.search(regex);
            if (pos >= 0 && node.data.length > 0) {
              var match = node.data.match(regex);
              var spannode = document.createElement('span');
              spannode.className = 'highlight';
              var middlebit = node.splitText(pos);
              var endbit = middlebit.splitText(match[0].length);
              var middleclone = middlebit.cloneNode(true);
              spannode.appendChild(middleclone);
              middlebit.parentNode.replaceChild(spannode, middlebit);
              skip = 1
            }
          } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {
            for (var i = 0; i < node.childNodes.length; ++i) {
              i += highlight(node.childNodes[i])
            }
          }
          return skip
        };
        return $element.each(function () {
          highlight(this)
        })
      };
      /**
	 * removeHighlight fn copied from highlight v5 and
	 * edited to remove with() and pass js strict mode
	 */
      $.fn.removeHighlight = function () {
        return this.find('span.highlight').each(function () {
          this.parentNode.firstChild.nodeName;
          var parent = this.parentNode;
          parent.replaceChild(this.firstChild, this);
          parent.normalize()
        }).end()
      };
      var MicroEvent = function () {
      };
      MicroEvent.prototype = {
        on: function (event, fct) {
          this._events = this._events || {};
          this._events[event] = this._events[event] || [];
          this._events[event].push(fct)
        },
        off: function (event, fct) {
          var n = arguments.length;
          if (n === 0)
            return delete this._events;
          if (n === 1)
            return delete this._events[event];
          this._events = this._events || {};
          if (event in this._events === false)
            return;
          this._events[event].splice(this._events[event].indexOf(fct), 1)
        },
        trigger: function (event) {
          this._events = this._events || {};
          if (event in this._events === false)
            return;
          for (var i = 0; i < this._events[event].length; i++) {
            this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))
          }
        }
      };
      /**
	 * Mixin will delegate all MicroEvent.js function in the destination object.
	 *
	 * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent
	 *
	 * @param {object} the object which will support MicroEvent
	 */
      MicroEvent.mixin = function (destObject) {
        var props = [
          'on',
          'off',
          'trigger'
        ];
        for (var i = 0; i < props.length; i++) {
          destObject.prototype[props[i]] = MicroEvent.prototype[props[i]]
        }
      };
      var IS_MAC = /Mac/.test(navigator.userAgent);
      var KEY_A = 65;
      var KEY_COMMA = 188;
      var KEY_RETURN = 13;
      var KEY_ESC = 27;
      var KEY_LEFT = 37;
      var KEY_UP = 38;
      var KEY_P = 80;
      var KEY_RIGHT = 39;
      var KEY_DOWN = 40;
      var KEY_N = 78;
      var KEY_BACKSPACE = 8;
      var KEY_DELETE = 46;
      var KEY_SHIFT = 16;
      var KEY_CMD = IS_MAC ? 91 : 17;
      var KEY_CTRL = IS_MAC ? 18 : 17;
      var KEY_TAB = 9;
      var TAG_SELECT = 1;
      var TAG_INPUT = 2;
      // for now, android support in general is too spotty to support validity
      var SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('input').validity;
      var isset = function (object) {
        return typeof object !== 'undefined'
      };
      /**
	 * Converts a scalar to its best string representation
	 * for hash keys and HTML attribute values.
	 *
	 * Transformations:
	 *   'str'     -> 'str'
	 *   null      -> ''
	 *   undefined -> ''
	 *   true      -> '1'
	 *   false     -> '0'
	 *   0         -> '0'
	 *   1         -> '1'
	 *
	 * @param {string} value
	 * @returns {string|null}
	 */
      var hash_key = function (value) {
        if (typeof value === 'undefined' || value === null)
          return null;
        if (typeof value === 'boolean')
          return value ? '1' : '0';
        return value + ''
      };
      /**
	 * Escapes a string for use within HTML.
	 *
	 * @param {string} str
	 * @returns {string}
	 */
      var escape_html = function (str) {
        return (str + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;')
      };
      /**
	 * Escapes "$" characters in replacement strings.
	 *
	 * @param {string} str
	 * @returns {string}
	 */
      var escape_replace = function (str) {
        return (str + '').replace(/\$/g, '$$$$')
      };
      var hook = {};
      /**
	 * Wraps `method` on `self` so that `fn`
	 * is invoked before the original method.
	 *
	 * @param {object} self
	 * @param {string} method
	 * @param {function} fn
	 */
      hook.before = function (self, method, fn) {
        var original = self[method];
        self[method] = function () {
          fn.apply(self, arguments);
          return original.apply(self, arguments)
        }
      };
      /**
	 * Wraps `method` on `self` so that `fn`
	 * is invoked after the original method.
	 *
	 * @param {object} self
	 * @param {string} method
	 * @param {function} fn
	 */
      hook.after = function (self, method, fn) {
        var original = self[method];
        self[method] = function () {
          var result = original.apply(self, arguments);
          fn.apply(self, arguments);
          return result
        }
      };
      /**
	 * Wraps `fn` so that it can only be invoked once.
	 *
	 * @param {function} fn
	 * @returns {function}
	 */
      var once = function (fn) {
        var called = false;
        return function () {
          if (called)
            return;
          called = true;
          fn.apply(this, arguments)
        }
      };
      /**
	 * Wraps `fn` so that it can only be called once
	 * every `delay` milliseconds (invoked on the falling edge).
	 *
	 * @param {function} fn
	 * @param {int} delay
	 * @returns {function}
	 */
      var debounce = function (fn, delay) {
        var timeout;
        return function () {
          var self = this;
          var args = arguments;
          window.clearTimeout(timeout);
          timeout = window.setTimeout(function () {
            fn.apply(self, args)
          }, delay)
        }
      };
      /**
	 * Debounce all fired events types listed in `types`
	 * while executing the provided `fn`.
	 *
	 * @param {object} self
	 * @param {array} types
	 * @param {function} fn
	 */
      var debounce_events = function (self, types, fn) {
        var type;
        var trigger = self.trigger;
        var event_args = {};
        // override trigger method
        self.trigger = function () {
          var type = arguments[0];
          if (types.indexOf(type) !== -1) {
            event_args[type] = arguments
          } else {
            return trigger.apply(self, arguments)
          }
        };
        // invoke provided function
        fn.apply(self, []);
        self.trigger = trigger;
        // trigger queued events
        for (type in event_args) {
          if (event_args.hasOwnProperty(type)) {
            trigger.apply(self, event_args[type])
          }
        }
      };
      /**
	 * A workaround for http://bugs.jquery.com/ticket/6696
	 *
	 * @param {object} $parent - Parent element to listen on.
	 * @param {string} event - Event name.
	 * @param {string} selector - Descendant selector to filter by.
	 * @param {function} fn - Event handler.
	 */
      var watchChildEvent = function ($parent, event, selector, fn) {
        $parent.on(event, selector, function (e) {
          var child = e.target;
          while (child && child.parentNode !== $parent[0]) {
            child = child.parentNode
          }
          e.currentTarget = child;
          return fn.apply(this, [e])
        })
      };
      /**
	 * Determines the current selection within a text input control.
	 * Returns an object containing:
	 *   - start
	 *   - length
	 *
	 * @param {object} input
	 * @returns {object}
	 */
      var getSelection = function (input) {
        var result = {};
        if ('selectionStart' in input) {
          result.start = input.selectionStart;
          result.length = input.selectionEnd - result.start
        } else if (document.selection) {
          input.focus();
          var sel = document.selection.createRange();
          var selLen = document.selection.createRange().text.length;
          sel.moveStart('character', -input.value.length);
          result.start = sel.text.length - selLen;
          result.length = selLen
        }
        return result
      };
      /**
	 * Copies CSS properties from one element to another.
	 *
	 * @param {object} $from
	 * @param {object} $to
	 * @param {array} properties
	 */
      var transferStyles = function ($from, $to, properties) {
        var i, n, styles = {};
        if (properties) {
          for (i = 0, n = properties.length; i < n; i++) {
            styles[properties[i]] = $from.css(properties[i])
          }
        } else {
          styles = $from.css()
        }
        $to.css(styles)
      };
      /**
	 * Measures the width of a string within a
	 * parent element (in pixels).
	 *
	 * @param {string} str
	 * @param {object} $parent
	 * @returns {int}
	 */
      var measureString = function (str, $parent) {
        if (!str) {
          return 0
        }
        var $test = $('<test>').css({
          position: 'absolute',
          top: -99999,
          left: -99999,
          width: 'auto',
          padding: 0,
          whiteSpace: 'pre'
        }).text(str).appendTo('body');
        transferStyles($parent, $test, [
          'letterSpacing',
          'fontSize',
          'fontFamily',
          'fontWeight',
          'textTransform'
        ]);
        var width = $test.width();
        $test.remove();
        return width
      };
      /**
	 * Sets up an input to grow horizontally as the user
	 * types. If the value is changed manually, you can
	 * trigger the "update" handler to resize:
	 *
	 * $input.trigger('update');
	 *
	 * @param {object} $input
	 */
      var autoGrow = function ($input) {
        var currentWidth = null;
        var update = function (e, options) {
          var value, keyCode, printable, placeholder, width;
          var shift, character, selection;
          e = e || window.event || {};
          options = options || {};
          if (e.metaKey || e.altKey)
            return;
          if (!options.force && $input.data('grow') === false)
            return;
          value = $input.val();
          if (e.type && e.type.toLowerCase() === 'keydown') {
            keyCode = e.keyCode;
            printable = keyCode >= 97 && keyCode <= 122 || keyCode >= 65 && keyCode <= 90 || keyCode >= 48 && keyCode <= 57 || // 0-9
            keyCode === 32  // space
;
            if (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {
              selection = getSelection($input[0]);
              if (selection.length) {
                value = value.substring(0, selection.start) + value.substring(selection.start + selection.length)
              } else if (keyCode === KEY_BACKSPACE && selection.start) {
                value = value.substring(0, selection.start - 1) + value.substring(selection.start + 1)
              } else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {
                value = value.substring(0, selection.start) + value.substring(selection.start + 1)
              }
            } else if (printable) {
              shift = e.shiftKey;
              character = String.fromCharCode(e.keyCode);
              if (shift)
                character = character.toUpperCase();
              else
                character = character.toLowerCase();
              value += character
            }
          }
          placeholder = $input.attr('placeholder');
          if (!value && placeholder) {
            value = placeholder
          }
          width = measureString(value, $input) + 4;
          if (width !== currentWidth) {
            currentWidth = width;
            $input.width(width);
            $input.triggerHandler('resize')
          }
        };
        $input.on('keydown keyup update blur', update);
        update()
      };
      var domToString = function (d) {
        var tmp = document.createElement('div');
        tmp.appendChild(d.cloneNode(true));
        return tmp.innerHTML
      };
      var logError = function (message, options) {
        if (!options)
          options = {};
        var component = 'Selectize';
        void 0;
        if (options.explanation) {
          // console.group is undefined in <IE11
          if (console.group)
            void 0;
          void 0;
          if (console.group)
            void 0
        }
      };
      var Selectize = function ($input, settings) {
        var key, i, n, dir, input, self = this;
        input = $input[0];
        input.selectize = self;
        // detect rtl environment
        var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);
        dir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;
        dir = dir || $input.parents('[dir]:first').attr('dir') || '';
        // setup default state
        $.extend(self, {
          order: 0,
          settings: settings,
          $input: $input,
          tabIndex: $input.attr('tabindex') || '',
          tagType: input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,
          rtl: /rtl/i.test(dir),
          eventNS: '.selectize' + ++Selectize.count,
          highlightedValue: null,
          isOpen: false,
          isDisabled: false,
          isRequired: $input.is('[required]'),
          isInvalid: false,
          isLocked: false,
          isFocused: false,
          isInputHidden: false,
          isSetup: false,
          isShiftDown: false,
          isCmdDown: false,
          isCtrlDown: false,
          ignoreFocus: false,
          ignoreBlur: false,
          ignoreHover: false,
          hasOptions: false,
          currentResults: null,
          lastValue: '',
          caretPos: 0,
          loading: 0,
          loadedSearches: {},
          $activeOption: null,
          $activeItems: [],
          optgroups: {},
          options: {},
          userOptions: {},
          items: [],
          renderCache: {},
          onSearchChange: settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)
        });
        // search system
        self.sifter = new Sifter(this.options, { diacritics: settings.diacritics });
        // build options table
        if (self.settings.options) {
          for (i = 0, n = self.settings.options.length; i < n; i++) {
            self.registerOption(self.settings.options[i])
          }
          delete self.settings.options
        }
        // build optgroup table
        if (self.settings.optgroups) {
          for (i = 0, n = self.settings.optgroups.length; i < n; i++) {
            self.registerOptionGroup(self.settings.optgroups[i])
          }
          delete self.settings.optgroups
        }
        // option-dependent defaults
        self.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');
        if (typeof self.settings.hideSelected !== 'boolean') {
          self.settings.hideSelected = self.settings.mode === 'multi'
        }
        self.initializePlugins(self.settings.plugins);
        self.setupCallbacks();
        self.setupTemplates();
        self.setup()
      };
      // mixins
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      MicroEvent.mixin(Selectize);
      if (typeof MicroPlugin !== 'undefined') {
        MicroPlugin.mixin(Selectize)
      } else {
        logError('Dependency MicroPlugin is missing', { explanation: 'Make sure you either: (1) are using the "standalone" ' + 'version of Selectize, or (2) require MicroPlugin before you ' + 'load Selectize.' })
      }
      // methods
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      $.extend(Selectize.prototype, {
        /**
		 * Creates all elements and sets up event bindings.
		 */
        setup: function () {
          var self = this;
          var settings = self.settings;
          var eventNS = self.eventNS;
          var $window = $(window);
          var $document = $(document);
          var $input = self.$input;
          var $wrapper;
          var $control;
          var $control_input;
          var $dropdown;
          var $dropdown_content;
          var $dropdown_parent;
          var inputMode;
          var timeout_blur;
          var timeout_focus;
          var classes;
          var classes_plugins;
          var inputId;
          inputMode = self.settings.mode;
          classes = $input.attr('class') || '';
          $wrapper = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);
          $control = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);
          $control_input = $('<input type="text" autocomplete="off" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);
          $dropdown_parent = $(settings.dropdownParent || $wrapper);
          $dropdown = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);
          $dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);
          if (inputId = $input.attr('id')) {
            $control_input.attr('id', inputId + '-selectized');
            $("label[for='" + inputId + "']").attr('for', inputId + '-selectized')
          }
          if (self.settings.copyClassesToDropdown) {
            $dropdown.addClass(classes)
          }
          $wrapper.css({ width: $input[0].style.width });
          if (self.plugins.names.length) {
            classes_plugins = 'plugin-' + self.plugins.names.join(' plugin-');
            $wrapper.addClass(classes_plugins);
            $dropdown.addClass(classes_plugins)
          }
          if ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {
            $input.attr('multiple', 'multiple')
          }
          if (self.settings.placeholder) {
            $control_input.attr('placeholder', settings.placeholder)
          }
          // if splitOn was not passed in, construct it from the delimiter to allow pasting universally
          if (!self.settings.splitOn && self.settings.delimiter) {
            var delimiterEscaped = self.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            self.settings.splitOn = new RegExp('\\s*' + delimiterEscaped + '+\\s*')
          }
          if ($input.attr('autocorrect')) {
            $control_input.attr('autocorrect', $input.attr('autocorrect'))
          }
          if ($input.attr('autocapitalize')) {
            $control_input.attr('autocapitalize', $input.attr('autocapitalize'))
          }
          self.$wrapper = $wrapper;
          self.$control = $control;
          self.$control_input = $control_input;
          self.$dropdown = $dropdown;
          self.$dropdown_content = $dropdown_content;
          $dropdown.on('mouseenter', '[data-selectable]', function () {
            return self.onOptionHover.apply(self, arguments)
          });
          $dropdown.on('mousedown click', '[data-selectable]', function () {
            return self.onOptionSelect.apply(self, arguments)
          });
          watchChildEvent($control, 'mousedown', '*:not(input)', function () {
            return self.onItemSelect.apply(self, arguments)
          });
          autoGrow($control_input);
          $control.on({
            mousedown: function () {
              return self.onMouseDown.apply(self, arguments)
            },
            click: function () {
              return self.onClick.apply(self, arguments)
            }
          });
          $control_input.on({
            mousedown: function (e) {
              e.stopPropagation()
            },
            keydown: function () {
              return self.onKeyDown.apply(self, arguments)
            },
            keyup: function () {
              return self.onKeyUp.apply(self, arguments)
            },
            keypress: function () {
              return self.onKeyPress.apply(self, arguments)
            },
            resize: function () {
              self.positionDropdown.apply(self, [])
            },
            blur: function () {
              return self.onBlur.apply(self, arguments)
            },
            focus: function () {
              self.ignoreBlur = false;
              return self.onFocus.apply(self, arguments)
            },
            paste: function () {
              return self.onPaste.apply(self, arguments)
            }
          });
          $document.on('keydown' + eventNS, function (e) {
            self.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];
            self.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];
            self.isShiftDown = e.shiftKey
          });
          $document.on('keyup' + eventNS, function (e) {
            if (e.keyCode === KEY_CTRL)
              self.isCtrlDown = false;
            if (e.keyCode === KEY_SHIFT)
              self.isShiftDown = false;
            if (e.keyCode === KEY_CMD)
              self.isCmdDown = false
          });
          $document.on('mousedown' + eventNS, function (e) {
            if (self.isFocused) {
              // prevent events on the dropdown scrollbar from causing the control to blur
              if (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {
                return false
              }
              // blur on click outside
              if (!self.$control.has(e.target).length && e.target !== self.$control[0]) {
                self.blur(e.target)
              }
            }
          });
          $window.on([
            'scroll' + eventNS,
            'resize' + eventNS
          ].join(' '), function () {
            if (self.isOpen) {
              self.positionDropdown.apply(self, arguments)
            }
          });
          $window.on('mousemove' + eventNS, function () {
            self.ignoreHover = false
          });
          // store original children and tab index so that they can be
          // restored when the destroy() method is called.
          this.revertSettings = {
            $children: $input.children().detach(),
            tabindex: $input.attr('tabindex')
          };
          $input.attr('tabindex', -1).hide().after(self.$wrapper);
          if ($.isArray(settings.items)) {
            self.setValue(settings.items);
            delete settings.items
          }
          // feature detect for the validation API
          if (SUPPORTS_VALIDITY_API) {
            $input.on('invalid' + eventNS, function (e) {
              e.preventDefault();
              self.isInvalid = true;
              self.refreshState()
            })
          }
          self.updateOriginalInput();
          self.refreshItems();
          self.refreshState();
          self.updatePlaceholder();
          self.isSetup = true;
          if ($input.is(':disabled')) {
            self.disable()
          }
          self.on('change', this.onChange);
          $input.data('selectize', self);
          $input.addClass('selectized');
          self.trigger('initialize');
          // preload options
          if (settings.preload === true) {
            self.onSearchChange('')
          }
        },
        /**
		 * Sets up default rendering functions.
		 */
        setupTemplates: function () {
          var self = this;
          var field_label = self.settings.labelField;
          var field_optgroup = self.settings.optgroupLabelField;
          var templates = {
            'optgroup': function (data) {
              return '<div class="optgroup">' + data.html + '</div>'
            },
            'optgroup_header': function (data, escape) {
              return '<div class="optgroup-header">' + escape(data[field_optgroup]) + '</div>'
            },
            'option': function (data, escape) {
              return '<div class="option">' + escape(data[field_label]) + '</div>'
            },
            'item': function (data, escape) {
              return '<div class="item">' + escape(data[field_label]) + '</div>'
            },
            'option_create': function (data, escape) {
              return '<div class="create">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>'
            }
          };
          self.settings.render = $.extend({}, templates, self.settings.render)
        },
        /**
		 * Maps fired events to callbacks provided
		 * in the settings used when creating the control.
		 */
        setupCallbacks: function () {
          var key, fn, callbacks = {
              'initialize': 'onInitialize',
              'change': 'onChange',
              'item_add': 'onItemAdd',
              'item_remove': 'onItemRemove',
              'clear': 'onClear',
              'option_add': 'onOptionAdd',
              'option_remove': 'onOptionRemove',
              'option_clear': 'onOptionClear',
              'optgroup_add': 'onOptionGroupAdd',
              'optgroup_remove': 'onOptionGroupRemove',
              'optgroup_clear': 'onOptionGroupClear',
              'dropdown_open': 'onDropdownOpen',
              'dropdown_close': 'onDropdownClose',
              'type': 'onType',
              'load': 'onLoad',
              'focus': 'onFocus',
              'blur': 'onBlur'
            };
          for (key in callbacks) {
            if (callbacks.hasOwnProperty(key)) {
              fn = this.settings[callbacks[key]];
              if (fn)
                this.on(key, fn)
            }
          }
        },
        /**
		 * Triggered when the main control element
		 * has a click event.
		 *
		 * @param {object} e
		 * @return {boolean}
		 */
        onClick: function (e) {
          var self = this;
          // necessary for mobile webkit devices (manual focus triggering
          // is ignored unless invoked within a click event)
          if (!self.isFocused) {
            self.focus();
            e.preventDefault()
          }
        },
        /**
		 * Triggered when the main control element
		 * has a mouse down event.
		 *
		 * @param {object} e
		 * @return {boolean}
		 */
        onMouseDown: function (e) {
          var self = this;
          var defaultPrevented = e.isDefaultPrevented();
          var $target = $(e.target);
          if (self.isFocused) {
            // retain focus by preventing native handling. if the
            // event target is the input it should not be modified.
            // otherwise, text selection within the input won't work.
            if (e.target !== self.$control_input[0]) {
              if (self.settings.mode === 'single') {
                // toggle dropdown
                self.isOpen ? self.close() : self.open()
              } else if (!defaultPrevented) {
                self.setActiveItem(null)
              }
              return false
            }
          } else {
            // give control focus
            if (!defaultPrevented) {
              window.setTimeout(function () {
                self.focus()
              }, 0)
            }
          }
        },
        /**
		 * Triggered when the value of the control has been changed.
		 * This should propagate the event to the original DOM
		 * input / select element.
		 */
        onChange: function () {
          this.$input.trigger('change')
        },
        /**
		 * Triggered on <input> paste.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onPaste: function (e) {
          var self = this;
          if (self.isFull() || self.isInputHidden || self.isLocked) {
            e.preventDefault();
            return
          }
          // If a regex or string is included, this will split the pasted
          // input and create Items for each separate value
          if (self.settings.splitOn) {
            // Wait for pasted text to be recognized in value
            setTimeout(function () {
              var pastedText = self.$control_input.val();
              if (!pastedText.match(self.settings.splitOn)) {
                return
              }
              var splitInput = $.trim(pastedText).split(self.settings.splitOn);
              for (var i = 0, n = splitInput.length; i < n; i++) {
                self.createItem(splitInput[i])
              }
            }, 0)
          }
        },
        /**
		 * Triggered on <input> keypress.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyPress: function (e) {
          if (this.isLocked)
            return e && e.preventDefault();
          var character = String.fromCharCode(e.keyCode || e.which);
          if (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {
            this.createItem();
            e.preventDefault();
            return false
          }
        },
        /**
		 * Triggered on <input> keydown.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyDown: function (e) {
          var isInput = e.target === this.$control_input[0];
          var self = this;
          if (self.isLocked) {
            if (e.keyCode !== KEY_TAB) {
              e.preventDefault()
            }
            return
          }
          switch (e.keyCode) {
          case KEY_A:
            if (self.isCmdDown) {
              self.selectAll();
              return
            }
            break;
          case KEY_ESC:
            if (self.isOpen) {
              e.preventDefault();
              e.stopPropagation();
              self.close()
            }
            return;
          case KEY_N:
            if (!e.ctrlKey || e.altKey)
              break;
          case KEY_DOWN:
            if (!self.isOpen && self.hasOptions) {
              self.open()
            } else if (self.$activeOption) {
              self.ignoreHover = true;
              var $next = self.getAdjacentOption(self.$activeOption, 1);
              if ($next.length)
                self.setActiveOption($next, true, true)
            }
            e.preventDefault();
            return;
          case KEY_P:
            if (!e.ctrlKey || e.altKey)
              break;
          case KEY_UP:
            if (self.$activeOption) {
              self.ignoreHover = true;
              var $prev = self.getAdjacentOption(self.$activeOption, -1);
              if ($prev.length)
                self.setActiveOption($prev, true, true)
            }
            e.preventDefault();
            return;
          case KEY_RETURN:
            if (self.isOpen && self.$activeOption) {
              self.onOptionSelect({ currentTarget: self.$activeOption });
              e.preventDefault()
            }
            return;
          case KEY_LEFT:
            self.advanceSelection(-1, e);
            return;
          case KEY_RIGHT:
            self.advanceSelection(1, e);
            return;
          case KEY_TAB:
            if (self.settings.selectOnTab && self.isOpen && self.$activeOption) {
              self.onOptionSelect({ currentTarget: self.$activeOption });
              // Default behaviour is to jump to the next field, we only want this
              // if the current field doesn't accept any more entries
              if (!self.isFull()) {
                e.preventDefault()
              }
            }
            if (self.settings.create && self.createItem()) {
              e.preventDefault()
            }
            return;
          case KEY_BACKSPACE:
          case KEY_DELETE:
            self.deleteSelection(e);
            return
          }
          if ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {
            e.preventDefault();
            return
          }
        },
        /**
		 * Triggered on <input> keyup.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onKeyUp: function (e) {
          var self = this;
          if (self.isLocked)
            return e && e.preventDefault();
          var value = self.$control_input.val() || '';
          if (self.lastValue !== value) {
            self.lastValue = value;
            self.onSearchChange(value);
            self.refreshOptions();
            self.trigger('type', value)
          }
        },
        /**
		 * Invokes the user-provide option provider / loader.
		 *
		 * Note: this function is debounced in the Selectize
		 * constructor (by `settings.loadThrottle` milliseconds)
		 *
		 * @param {string} value
		 */
        onSearchChange: function (value) {
          var self = this;
          var fn = self.settings.load;
          if (!fn)
            return;
          if (self.loadedSearches.hasOwnProperty(value))
            return;
          self.loadedSearches[value] = true;
          self.load(function (callback) {
            fn.apply(self, [
              value,
              callback
            ])
          })
        },
        /**
		 * Triggered on <input> focus.
		 *
		 * @param {object} e (optional)
		 * @returns {boolean}
		 */
        onFocus: function (e) {
          var self = this;
          var wasFocused = self.isFocused;
          if (self.isDisabled) {
            self.blur();
            e && e.preventDefault();
            return false
          }
          if (self.ignoreFocus)
            return;
          self.isFocused = true;
          if (self.settings.preload === 'focus')
            self.onSearchChange('');
          if (!wasFocused)
            self.trigger('focus');
          if (!self.$activeItems.length) {
            self.showInput();
            self.setActiveItem(null);
            self.refreshOptions(!!self.settings.openOnFocus)
          }
          self.refreshState()
        },
        /**
		 * Triggered on <input> blur.
		 *
		 * @param {object} e
		 * @param {Element} dest
		 */
        onBlur: function (e, dest) {
          var self = this;
          if (!self.isFocused)
            return;
          self.isFocused = false;
          if (self.ignoreFocus) {
            return
          } else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {
            // necessary to prevent IE closing the dropdown when the scrollbar is clicked
            self.ignoreBlur = true;
            self.onFocus(e);
            return
          }
          var deactivate = function () {
            self.close();
            self.setTextboxValue('');
            self.setActiveItem(null);
            self.setActiveOption(null);
            self.setCaret(self.items.length);
            self.refreshState();
            // IE11 bug: element still marked as active
            dest && dest.focus && dest.focus();
            self.ignoreFocus = false;
            self.trigger('blur')
          };
          self.ignoreFocus = true;
          if (self.settings.create && self.settings.createOnBlur) {
            self.createItem(null, false, deactivate)
          } else {
            deactivate()
          }
        },
        /**
		 * Triggered when the user rolls over
		 * an option in the autocomplete dropdown menu.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onOptionHover: function (e) {
          if (this.ignoreHover)
            return;
          this.setActiveOption(e.currentTarget, false)
        },
        /**
		 * Triggered when the user clicks on an option
		 * in the autocomplete dropdown menu.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onOptionSelect: function (e) {
          var value, $target, $option, self = this;
          if (e.preventDefault) {
            e.preventDefault();
            e.stopPropagation()
          }
          $target = $(e.currentTarget);
          if ($target.hasClass('create')) {
            self.createItem(null, function () {
              if (self.settings.closeAfterSelect) {
                self.close()
              }
            })
          } else {
            value = $target.attr('data-value');
            if (typeof value !== 'undefined') {
              self.lastQuery = null;
              self.setTextboxValue('');
              self.addItem(value);
              if (self.settings.closeAfterSelect) {
                self.close()
              } else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {
                self.setActiveOption(self.getOption(value))
              }
            }
          }
        },
        /**
		 * Triggered when the user clicks on an item
		 * that has been selected.
		 *
		 * @param {object} e
		 * @returns {boolean}
		 */
        onItemSelect: function (e) {
          var self = this;
          if (self.isLocked)
            return;
          if (self.settings.mode === 'multi') {
            e.preventDefault();
            self.setActiveItem(e.currentTarget, e)
          }
        },
        /**
		 * Invokes the provided method that provides
		 * results to a callback---which are then added
		 * as options to the control.
		 *
		 * @param {function} fn
		 */
        load: function (fn) {
          var self = this;
          var $wrapper = self.$wrapper.addClass(self.settings.loadingClass);
          self.loading++;
          fn.apply(self, [function (results) {
              self.loading = Math.max(self.loading - 1, 0);
              if (results && results.length) {
                self.addOption(results);
                self.refreshOptions(self.isFocused && !self.isInputHidden)
              }
              if (!self.loading) {
                $wrapper.removeClass(self.settings.loadingClass)
              }
              self.trigger('load', results)
            }])
        },
        /**
		 * Sets the input field of the control to the specified value.
		 *
		 * @param {string} value
		 */
        setTextboxValue: function (value) {
          var $input = this.$control_input;
          var changed = $input.val() !== value;
          if (changed) {
            $input.val(value).triggerHandler('update');
            this.lastValue = value
          }
        },
        /**
		 * Returns the value of the control. If multiple items
		 * can be selected (e.g. <select multiple>), this returns
		 * an array. If only one item can be selected, this
		 * returns a string.
		 *
		 * @returns {mixed}
		 */
        getValue: function () {
          if (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {
            return this.items
          } else {
            return this.items.join(this.settings.delimiter)
          }
        },
        /**
		 * Resets the selected items to the given value.
		 *
		 * @param {mixed} value
		 */
        setValue: function (value, silent) {
          var events = silent ? [] : ['change'];
          debounce_events(this, events, function () {
            this.clear(silent);
            this.addItems(value, silent)
          })
        },
        /**
		 * Sets the selected item.
		 *
		 * @param {object} $item
		 * @param {object} e (optional)
		 */
        setActiveItem: function ($item, e) {
          var self = this;
          var eventName;
          var i, idx, begin, end, item, swap;
          var $last;
          if (self.settings.mode === 'single')
            return;
          $item = $($item);
          // clear the active selection
          if (!$item.length) {
            $(self.$activeItems).removeClass('active');
            self.$activeItems = [];
            if (self.isFocused) {
              self.showInput()
            }
            return
          }
          // modify selection
          eventName = e && e.type.toLowerCase();
          if (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {
            $last = self.$control.children('.active:last');
            begin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);
            end = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);
            if (begin > end) {
              swap = begin;
              begin = end;
              end = swap
            }
            for (i = begin; i <= end; i++) {
              item = self.$control[0].childNodes[i];
              if (self.$activeItems.indexOf(item) === -1) {
                $(item).addClass('active');
                self.$activeItems.push(item)
              }
            }
            e.preventDefault()
          } else if (eventName === 'mousedown' && self.isCtrlDown || eventName === 'keydown' && this.isShiftDown) {
            if ($item.hasClass('active')) {
              idx = self.$activeItems.indexOf($item[0]);
              self.$activeItems.splice(idx, 1);
              $item.removeClass('active')
            } else {
              self.$activeItems.push($item.addClass('active')[0])
            }
          } else {
            $(self.$activeItems).removeClass('active');
            self.$activeItems = [$item.addClass('active')[0]]
          }
          // ensure control has focus
          self.hideInput();
          if (!this.isFocused) {
            self.focus()
          }
        },
        /**
		 * Sets the selected item in the dropdown menu
		 * of available options.
		 *
		 * @param {object} $object
		 * @param {boolean} scroll
		 * @param {boolean} animate
		 */
        setActiveOption: function ($option, scroll, animate) {
          var height_menu, height_item, y;
          var scroll_top, scroll_bottom;
          var self = this;
          if (self.$activeOption)
            self.$activeOption.removeClass('active');
          self.$activeOption = null;
          $option = $($option);
          if (!$option.length)
            return;
          self.$activeOption = $option.addClass('active');
          if (scroll || !isset(scroll)) {
            height_menu = self.$dropdown_content.height();
            height_item = self.$activeOption.outerHeight(true);
            scroll = self.$dropdown_content.scrollTop() || 0;
            y = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;
            scroll_top = y;
            scroll_bottom = y - height_menu + height_item;
            if (y + height_item > height_menu + scroll) {
              self.$dropdown_content.stop().animate({ scrollTop: scroll_bottom }, animate ? self.settings.scrollDuration : 0)
            } else if (y < scroll) {
              self.$dropdown_content.stop().animate({ scrollTop: scroll_top }, animate ? self.settings.scrollDuration : 0)
            }
          }
        },
        /**
		 * Selects all items (CTRL + A).
		 */
        selectAll: function () {
          var self = this;
          if (self.settings.mode === 'single')
            return;
          self.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));
          if (self.$activeItems.length) {
            self.hideInput();
            self.close()
          }
          self.focus()
        },
        /**
		 * Hides the input element out of view, while
		 * retaining its focus.
		 */
        hideInput: function () {
          var self = this;
          self.setTextboxValue('');
          self.$control_input.css({
            opacity: 0,
            position: 'absolute',
            left: self.rtl ? 10000 : -10000
          });
          self.isInputHidden = true
        },
        /**
		 * Restores input visibility.
		 */
        showInput: function () {
          this.$control_input.css({
            opacity: 1,
            position: 'relative',
            left: 0
          });
          this.isInputHidden = false
        },
        /**
		 * Gives the control focus.
		 */
        focus: function () {
          var self = this;
          if (self.isDisabled)
            return;
          self.ignoreFocus = true;
          self.$control_input[0].focus();
          window.setTimeout(function () {
            self.ignoreFocus = false;
            self.onFocus()
          }, 0)
        },
        /**
		 * Forces the control out of focus.
		 *
		 * @param {Element} dest
		 */
        blur: function (dest) {
          this.$control_input[0].blur();
          this.onBlur(null, dest)
        },
        /**
		 * Returns a function that scores an object
		 * to show how good of a match it is to the
		 * provided query.
		 *
		 * @param {string} query
		 * @param {object} options
		 * @return {function}
		 */
        getScoreFunction: function (query) {
          return this.sifter.getScoreFunction(query, this.getSearchOptions())
        },
        /**
		 * Returns search options for sifter (the system
		 * for scoring and sorting results).
		 *
		 * @see https://github.com/brianreavis/sifter.js
		 * @return {object}
		 */
        getSearchOptions: function () {
          var settings = this.settings;
          var sort = settings.sortField;
          if (typeof sort === 'string') {
            sort = [{ field: sort }]
          }
          return {
            fields: settings.searchField,
            conjunction: settings.searchConjunction,
            sort: sort
          }
        },
        /**
		 * Searches through available options and returns
		 * a sorted array of matches.
		 *
		 * Returns an object containing:
		 *
		 *   - query {string}
		 *   - tokens {array}
		 *   - total {int}
		 *   - items {array}
		 *
		 * @param {string} query
		 * @returns {object}
		 */
        search: function (query) {
          var i, value, score, result, calculateScore;
          var self = this;
          var settings = self.settings;
          var options = this.getSearchOptions();
          // validate user-provided result scoring function
          if (settings.score) {
            calculateScore = self.settings.score.apply(this, [query]);
            if (typeof calculateScore !== 'function') {
              throw new Error('Selectize "score" setting must be a function that returns a function')
            }
          }
          // perform search
          if (query !== self.lastQuery) {
            self.lastQuery = query;
            result = self.sifter.search(query, $.extend(options, { score: calculateScore }));
            self.currentResults = result
          } else {
            result = $.extend(true, {}, self.currentResults)
          }
          // filter out selected items
          if (settings.hideSelected) {
            for (i = result.items.length - 1; i >= 0; i--) {
              if (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {
                result.items.splice(i, 1)
              }
            }
          }
          return result
        },
        /**
		 * Refreshes the list of available options shown
		 * in the autocomplete dropdown menu.
		 *
		 * @param {boolean} triggerDropdown
		 */
        refreshOptions: function (triggerDropdown) {
          var i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;
          var $active, $active_before, $create;
          if (typeof triggerDropdown === 'undefined') {
            triggerDropdown = true
          }
          var self = this;
          var query = $.trim(self.$control_input.val());
          var results = self.search(query);
          var $dropdown_content = self.$dropdown_content;
          var active_before = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));
          // build markup
          n = results.items.length;
          if (typeof self.settings.maxOptions === 'number') {
            n = Math.min(n, self.settings.maxOptions)
          }
          // render and group available options individually
          groups = {};
          groups_order = [];
          for (i = 0; i < n; i++) {
            option = self.options[results.items[i].id];
            option_html = self.render('option', option);
            optgroup = option[self.settings.optgroupField] || '';
            optgroups = $.isArray(optgroup) ? optgroup : [optgroup];
            for (j = 0, k = optgroups && optgroups.length; j < k; j++) {
              optgroup = optgroups[j];
              if (!self.optgroups.hasOwnProperty(optgroup)) {
                optgroup = ''
              }
              if (!groups.hasOwnProperty(optgroup)) {
                groups[optgroup] = document.createDocumentFragment();
                groups_order.push(optgroup)
              }
              groups[optgroup].appendChild(option_html)
            }
          }
          // sort optgroups
          if (this.settings.lockOptgroupOrder) {
            groups_order.sort(function (a, b) {
              var a_order = self.optgroups[a].$order || 0;
              var b_order = self.optgroups[b].$order || 0;
              return a_order - b_order
            })
          }
          // render optgroup headers & join groups
          html = document.createDocumentFragment();
          for (i = 0, n = groups_order.length; i < n; i++) {
            optgroup = groups_order[i];
            if (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].childNodes.length) {
              // render the optgroup header and options within it,
              // then pass it to the wrapper template
              html_children = document.createDocumentFragment();
              html_children.appendChild(self.render('optgroup_header', self.optgroups[optgroup]));
              html_children.appendChild(groups[optgroup]);
              html.appendChild(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {
                html: domToString(html_children),
                dom: html_children
              })))
            } else {
              html.appendChild(groups[optgroup])
            }
          }
          $dropdown_content.html(html);
          // highlight matching terms inline
          if (self.settings.highlight && results.query.length && results.tokens.length) {
            $dropdown_content.removeHighlight();
            for (i = 0, n = results.tokens.length; i < n; i++) {
              highlight($dropdown_content, results.tokens[i].regex)
            }
          }
          // add "selected" class to selected options
          if (!self.settings.hideSelected) {
            for (i = 0, n = self.items.length; i < n; i++) {
              self.getOption(self.items[i]).addClass('selected')
            }
          }
          // add create option
          has_create_option = self.canCreate(query);
          if (has_create_option) {
            $dropdown_content.prepend(self.render('option_create', { input: query }));
            $create = $($dropdown_content[0].childNodes[0])
          }
          // activate
          self.hasOptions = results.items.length > 0 || has_create_option;
          if (self.hasOptions) {
            if (results.items.length > 0) {
              $active_before = active_before && self.getOption(active_before);
              if ($active_before && $active_before.length) {
                $active = $active_before
              } else if (self.settings.mode === 'single' && self.items.length) {
                $active = self.getOption(self.items[0])
              }
              if (!$active || !$active.length) {
                if ($create && !self.settings.addPrecedence) {
                  $active = self.getAdjacentOption($create, 1)
                } else {
                  $active = $dropdown_content.find('[data-selectable]:first')
                }
              }
            } else {
              $active = $create
            }
            self.setActiveOption($active);
            if (triggerDropdown && !self.isOpen) {
              self.open()
            }
          } else {
            self.setActiveOption(null);
            if (triggerDropdown && self.isOpen) {
              self.close()
            }
          }
        },
        /**
		 * Adds an available option. If it already exists,
		 * nothing will happen. Note: this does not refresh
		 * the options list dropdown (use `refreshOptions`
		 * for that).
		 *
		 * Usage:
		 *
		 *   this.addOption(data)
		 *
		 * @param {object|array} data
		 */
        addOption: function (data) {
          var i, n, value, self = this;
          if ($.isArray(data)) {
            for (i = 0, n = data.length; i < n; i++) {
              self.addOption(data[i])
            }
            return
          }
          if (value = self.registerOption(data)) {
            self.userOptions[value] = true;
            self.lastQuery = null;
            self.trigger('option_add', value, data)
          }
        },
        /**
		 * Registers an option to the pool of options.
		 *
		 * @param {object} data
		 * @return {boolean|string}
		 */
        registerOption: function (data) {
          var key = hash_key(data[this.settings.valueField]);
          if (typeof key === 'undefined' || key === null || this.options.hasOwnProperty(key))
            return false;
          data.$order = data.$order || ++this.order;
          this.options[key] = data;
          return key
        },
        /**
		 * Registers an option group to the pool of option groups.
		 *
		 * @param {object} data
		 * @return {boolean|string}
		 */
        registerOptionGroup: function (data) {
          var key = hash_key(data[this.settings.optgroupValueField]);
          if (!key)
            return false;
          data.$order = data.$order || ++this.order;
          this.optgroups[key] = data;
          return key
        },
        /**
		 * Registers a new optgroup for options
		 * to be bucketed into.
		 *
		 * @param {string} id
		 * @param {object} data
		 */
        addOptionGroup: function (id, data) {
          data[this.settings.optgroupValueField] = id;
          if (id = this.registerOptionGroup(data)) {
            this.trigger('optgroup_add', id, data)
          }
        },
        /**
		 * Removes an existing option group.
		 *
		 * @param {string} id
		 */
        removeOptionGroup: function (id) {
          if (this.optgroups.hasOwnProperty(id)) {
            delete this.optgroups[id];
            this.renderCache = {};
            this.trigger('optgroup_remove', id)
          }
        },
        /**
		 * Clears all existing option groups.
		 */
        clearOptionGroups: function () {
          this.optgroups = {};
          this.renderCache = {};
          this.trigger('optgroup_clear')
        },
        /**
		 * Updates an option available for selection. If
		 * it is visible in the selected items or options
		 * dropdown, it will be re-rendered automatically.
		 *
		 * @param {string} value
		 * @param {object} data
		 */
        updateOption: function (value, data) {
          var self = this;
          var $item, $item_new;
          var value_new, index_item, cache_items, cache_options, order_old;
          value = hash_key(value);
          value_new = hash_key(data[self.settings.valueField]);
          // sanity checks
          if (value === null)
            return;
          if (!self.options.hasOwnProperty(value))
            return;
          if (typeof value_new !== 'string')
            throw new Error('Value must be set in option data');
          order_old = self.options[value].$order;
          // update references
          if (value_new !== value) {
            delete self.options[value];
            index_item = self.items.indexOf(value);
            if (index_item !== -1) {
              self.items.splice(index_item, 1, value_new)
            }
          }
          data.$order = data.$order || order_old;
          self.options[value_new] = data;
          // invalidate render cache
          cache_items = self.renderCache['item'];
          cache_options = self.renderCache['option'];
          if (cache_items) {
            delete cache_items[value];
            delete cache_items[value_new]
          }
          if (cache_options) {
            delete cache_options[value];
            delete cache_options[value_new]
          }
          // update the item if it's selected
          if (self.items.indexOf(value_new) !== -1) {
            $item = self.getItem(value);
            $item_new = $(self.render('item', data));
            if ($item.hasClass('active'))
              $item_new.addClass('active');
            $item.replaceWith($item_new)
          }
          // invalidate last query because we might have updated the sortField
          self.lastQuery = null;
          // update dropdown contents
          if (self.isOpen) {
            self.refreshOptions(false)
          }
        },
        /**
		 * Removes a single option.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        removeOption: function (value, silent) {
          var self = this;
          value = hash_key(value);
          var cache_items = self.renderCache['item'];
          var cache_options = self.renderCache['option'];
          if (cache_items)
            delete cache_items[value];
          if (cache_options)
            delete cache_options[value];
          delete self.userOptions[value];
          delete self.options[value];
          self.lastQuery = null;
          self.trigger('option_remove', value);
          self.removeItem(value, silent)
        },
        /**
		 * Clears all options.
		 */
        clearOptions: function () {
          var self = this;
          self.loadedSearches = {};
          self.userOptions = {};
          self.renderCache = {};
          self.options = self.sifter.items = {};
          self.lastQuery = null;
          self.trigger('option_clear');
          self.clear()
        },
        /**
		 * Returns the jQuery element of the option
		 * matching the given value.
		 *
		 * @param {string} value
		 * @returns {object}
		 */
        getOption: function (value) {
          return this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'))
        },
        /**
		 * Returns the jQuery element of the next or
		 * previous selectable option.
		 *
		 * @param {object} $option
		 * @param {int} direction  can be 1 for next or -1 for previous
		 * @return {object}
		 */
        getAdjacentOption: function ($option, direction) {
          var $options = this.$dropdown.find('[data-selectable]');
          var index = $options.index($option) + direction;
          return index >= 0 && index < $options.length ? $options.eq(index) : $()
        },
        /**
		 * Finds the first element with a "data-value" attribute
		 * that matches the given value.
		 *
		 * @param {mixed} value
		 * @param {object} $els
		 * @return {object}
		 */
        getElementWithValue: function (value, $els) {
          value = hash_key(value);
          if (typeof value !== 'undefined' && value !== null) {
            for (var i = 0, n = $els.length; i < n; i++) {
              if ($els[i].getAttribute('data-value') === value) {
                return $($els[i])
              }
            }
          }
          return $()
        },
        /**
		 * Returns the jQuery element of the item
		 * matching the given value.
		 *
		 * @param {string} value
		 * @returns {object}
		 */
        getItem: function (value) {
          return this.getElementWithValue(value, this.$control.children())
        },
        /**
		 * "Selects" multiple items at once. Adds them to the list
		 * at the current caret position.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        addItems: function (values, silent) {
          var items = $.isArray(values) ? values : [values];
          for (var i = 0, n = items.length; i < n; i++) {
            this.isPending = i < n - 1;
            this.addItem(items[i], silent)
          }
        },
        /**
		 * "Selects" an item. Adds it to the list
		 * at the current caret position.
		 *
		 * @param {string} value
		 * @param {boolean} silent
		 */
        addItem: function (value, silent) {
          var events = silent ? [] : ['change'];
          debounce_events(this, events, function () {
            var $item, $option, $options;
            var self = this;
            var inputMode = self.settings.mode;
            var i, active, value_next, wasFull;
            value = hash_key(value);
            if (self.items.indexOf(value) !== -1) {
              if (inputMode === 'single')
                self.close();
              return
            }
            if (!self.options.hasOwnProperty(value))
              return;
            if (inputMode === 'single')
              self.clear(silent);
            if (inputMode === 'multi' && self.isFull())
              return;
            $item = $(self.render('item', self.options[value]));
            wasFull = self.isFull();
            self.items.splice(self.caretPos, 0, value);
            self.insertAtCaret($item);
            if (!self.isPending || !wasFull && self.isFull()) {
              self.refreshState()
            }
            if (self.isSetup) {
              $options = self.$dropdown_content.find('[data-selectable]');
              // update menu / remove the option (if this is not one item being added as part of series)
              if (!self.isPending) {
                $option = self.getOption(value);
                value_next = self.getAdjacentOption($option, 1).attr('data-value');
                self.refreshOptions(self.isFocused && inputMode !== 'single');
                if (value_next) {
                  self.setActiveOption(self.getOption(value_next))
                }
              }
              // hide the menu if the maximum number of items have been selected or no options are left
              if (!$options.length || self.isFull()) {
                self.close()
              } else {
                self.positionDropdown()
              }
              self.updatePlaceholder();
              self.trigger('item_add', value, $item);
              self.updateOriginalInput({ silent: silent })
            }
          })
        },
        /**
		 * Removes the selected item matching
		 * the provided value.
		 *
		 * @param {string} value
		 */
        removeItem: function (value, silent) {
          var self = this;
          var $item, i, idx;
          $item = value instanceof $ ? value : self.getItem(value);
          value = hash_key($item.attr('data-value'));
          i = self.items.indexOf(value);
          if (i !== -1) {
            $item.remove();
            if ($item.hasClass('active')) {
              idx = self.$activeItems.indexOf($item[0]);
              self.$activeItems.splice(idx, 1)
            }
            self.items.splice(i, 1);
            self.lastQuery = null;
            if (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {
              self.removeOption(value, silent)
            }
            if (i < self.caretPos) {
              self.setCaret(self.caretPos - 1)
            }
            self.refreshState();
            self.updatePlaceholder();
            self.updateOriginalInput({ silent: silent });
            self.positionDropdown();
            self.trigger('item_remove', value, $item)
          }
        },
        /**
		 * Invokes the `create` method provided in the
		 * selectize options that should provide the data
		 * for the new item, given the user input.
		 *
		 * Once this completes, it will be added
		 * to the item list.
		 *
		 * @param {string} value
		 * @param {boolean} [triggerDropdown]
		 * @param {function} [callback]
		 * @return {boolean}
		 */
        createItem: function (input, triggerDropdown) {
          var self = this;
          var caret = self.caretPos;
          input = input || $.trim(self.$control_input.val() || '');
          var callback = arguments[arguments.length - 1];
          if (typeof callback !== 'function')
            callback = function () {
            };
          if (typeof triggerDropdown !== 'boolean') {
            triggerDropdown = true
          }
          if (!self.canCreate(input)) {
            callback();
            return false
          }
          self.lock();
          var setup = typeof self.settings.create === 'function' ? this.settings.create : function (input) {
            var data = {};
            data[self.settings.labelField] = input;
            data[self.settings.valueField] = input;
            return data
          };
          var create = once(function (data) {
            self.unlock();
            if (!data || typeof data !== 'object')
              return callback();
            var value = hash_key(data[self.settings.valueField]);
            if (typeof value !== 'string')
              return callback();
            self.setTextboxValue('');
            self.addOption(data);
            self.setCaret(caret);
            self.addItem(value);
            self.refreshOptions(triggerDropdown && self.settings.mode !== 'single');
            callback(data)
          });
          var output = setup.apply(this, [
            input,
            create
          ]);
          if (typeof output !== 'undefined') {
            create(output)
          }
          return true
        },
        /**
		 * Re-renders the selected item lists.
		 */
        refreshItems: function () {
          this.lastQuery = null;
          if (this.isSetup) {
            this.addItem(this.items)
          }
          this.refreshState();
          this.updateOriginalInput()
        },
        /**
		 * Updates all state-dependent attributes
		 * and CSS classes.
		 */
        refreshState: function () {
          this.refreshValidityState();
          this.refreshClasses()
        },
        /**
		 * Update the `required` attribute of both input and control input.
		 *
		 * The `required` property needs to be activated on the control input
		 * for the error to be displayed at the right place. `required` also
		 * needs to be temporarily deactivated on the input since the input is
		 * hidden and can't show errors.
		 */
        refreshValidityState: function () {
          if (!this.isRequired)
            return false;
          var invalid = !this.items.length;
          this.isInvalid = invalid;
          this.$control_input.prop('required', invalid);
          this.$input.prop('required', !invalid)
        },
        /**
		 * Updates all state-dependent CSS classes.
		 */
        refreshClasses: function () {
          var self = this;
          var isFull = self.isFull();
          var isLocked = self.isLocked;
          self.$wrapper.toggleClass('rtl', self.rtl);
          self.$control.toggleClass('focus', self.isFocused).toggleClass('disabled', self.isDisabled).toggleClass('required', self.isRequired).toggleClass('invalid', self.isInvalid).toggleClass('locked', isLocked).toggleClass('full', isFull).toggleClass('not-full', !isFull).toggleClass('input-active', self.isFocused && !self.isInputHidden).toggleClass('dropdown-active', self.isOpen).toggleClass('has-options', !$.isEmptyObject(self.options)).toggleClass('has-items', self.items.length > 0);
          self.$control_input.data('grow', !isFull && !isLocked)
        },
        /**
		 * Determines whether or not more items can be added
		 * to the control without exceeding the user-defined maximum.
		 *
		 * @returns {boolean}
		 */
        isFull: function () {
          return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems
        },
        /**
		 * Refreshes the original <select> or <input>
		 * element to reflect the current state.
		 */
        updateOriginalInput: function (opts) {
          var i, n, options, label, self = this;
          opts = opts || {};
          if (self.tagType === TAG_SELECT) {
            options = [];
            for (i = 0, n = self.items.length; i < n; i++) {
              label = self.options[self.items[i]][self.settings.labelField] || '';
              options.push('<option value="' + escape_html(self.items[i]) + '" selected="selected">' + escape_html(label) + '</option>')
            }
            if (!options.length && !this.$input.attr('multiple')) {
              options.push('<option value="" selected="selected"></option>')
            }
            self.$input.html(options.join(''))
          } else {
            self.$input.val(self.getValue());
            self.$input.attr('value', self.$input.val())
          }
          if (self.isSetup) {
            if (!opts.silent) {
              self.trigger('change', self.$input.val())
            }
          }
        },
        /**
		 * Shows/hide the input placeholder depending
		 * on if there items in the list already.
		 */
        updatePlaceholder: function () {
          if (!this.settings.placeholder)
            return;
          var $input = this.$control_input;
          if (this.items.length) {
            $input.removeAttr('placeholder')
          } else {
            $input.attr('placeholder', this.settings.placeholder)
          }
          $input.triggerHandler('update', { force: true })
        },
        /**
		 * Shows the autocomplete dropdown containing
		 * the available options.
		 */
        open: function () {
          var self = this;
          if (self.isLocked || self.isOpen || self.settings.mode === 'multi' && self.isFull())
            return;
          self.focus();
          self.isOpen = true;
          self.refreshState();
          self.$dropdown.css({
            visibility: 'hidden',
            display: 'block'
          });
          self.positionDropdown();
          self.$dropdown.css({ visibility: 'visible' });
          self.trigger('dropdown_open', self.$dropdown)
        },
        /**
		 * Closes the autocomplete dropdown menu.
		 */
        close: function () {
          var self = this;
          var trigger = self.isOpen;
          if (self.settings.mode === 'single' && self.items.length) {
            self.hideInput();
            self.$control_input.blur()  // close keyboard on iOS
          }
          self.isOpen = false;
          self.$dropdown.hide();
          self.setActiveOption(null);
          self.refreshState();
          if (trigger)
            self.trigger('dropdown_close', self.$dropdown)
        },
        /**
		 * Calculates and applies the appropriate
		 * position of the dropdown.
		 */
        positionDropdown: function () {
          var $control = this.$control;
          var offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();
          offset.top += $control.outerHeight(true);
          this.$dropdown.css({
            width: $control.outerWidth(),
            top: offset.top,
            left: offset.left
          })
        },
        /**
		 * Resets / clears all selected items
		 * from the control.
		 *
		 * @param {boolean} silent
		 */
        clear: function (silent) {
          var self = this;
          if (!self.items.length)
            return;
          self.$control.children(':not(input)').remove();
          self.items = [];
          self.lastQuery = null;
          self.setCaret(0);
          self.setActiveItem(null);
          self.updatePlaceholder();
          self.updateOriginalInput({ silent: silent });
          self.refreshState();
          self.showInput();
          self.trigger('clear')
        },
        /**
		 * A helper method for inserting an element
		 * at the current caret position.
		 *
		 * @param {object} $el
		 */
        insertAtCaret: function ($el) {
          var caret = Math.min(this.caretPos, this.items.length);
          if (caret === 0) {
            this.$control.prepend($el)
          } else {
            $(this.$control[0].childNodes[caret]).before($el)
          }
          this.setCaret(caret + 1)
        },
        /**
		 * Removes the current selected item(s).
		 *
		 * @param {object} e (optional)
		 * @returns {boolean}
		 */
        deleteSelection: function (e) {
          var i, n, direction, selection, values, caret, option_select, $option_select, $tail;
          var self = this;
          direction = e && e.keyCode === KEY_BACKSPACE ? -1 : 1;
          selection = getSelection(self.$control_input[0]);
          if (self.$activeOption && !self.settings.hideSelected) {
            option_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value')
          }
          // determine items that will be removed
          values = [];
          if (self.$activeItems.length) {
            $tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));
            caret = self.$control.children(':not(input)').index($tail);
            if (direction > 0) {
              caret++
            }
            for (i = 0, n = self.$activeItems.length; i < n; i++) {
              values.push($(self.$activeItems[i]).attr('data-value'))
            }
            if (e) {
              e.preventDefault();
              e.stopPropagation()
            }
          } else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {
            if (direction < 0 && selection.start === 0 && selection.length === 0) {
              values.push(self.items[self.caretPos - 1])
            } else if (direction > 0 && selection.start === self.$control_input.val().length) {
              values.push(self.items[self.caretPos])
            }
          }
          // allow the callback to abort
          if (!values.length || typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false) {
            return false
          }
          // perform removal
          if (typeof caret !== 'undefined') {
            self.setCaret(caret)
          }
          while (values.length) {
            self.removeItem(values.pop())
          }
          self.showInput();
          self.positionDropdown();
          self.refreshOptions(true);
          // select previous option
          if (option_select) {
            $option_select = self.getOption(option_select);
            if ($option_select.length) {
              self.setActiveOption($option_select)
            }
          }
          return true
        },
        /**
		 * Selects the previous / next item (depending
		 * on the `direction` argument).
		 *
		 * > 0 - right
		 * < 0 - left
		 *
		 * @param {int} direction
		 * @param {object} e (optional)
		 */
        advanceSelection: function (direction, e) {
          var tail, selection, idx, valueLength, cursorAtEdge, $tail;
          var self = this;
          if (direction === 0)
            return;
          if (self.rtl)
            direction *= -1;
          tail = direction > 0 ? 'last' : 'first';
          selection = getSelection(self.$control_input[0]);
          if (self.isFocused && !self.isInputHidden) {
            valueLength = self.$control_input.val().length;
            cursorAtEdge = direction < 0 ? selection.start === 0 && selection.length === 0 : selection.start === valueLength;
            if (cursorAtEdge && !valueLength) {
              self.advanceCaret(direction, e)
            }
          } else {
            $tail = self.$control.children('.active:' + tail);
            if ($tail.length) {
              idx = self.$control.children(':not(input)').index($tail);
              self.setActiveItem(null);
              self.setCaret(direction > 0 ? idx + 1 : idx)
            }
          }
        },
        /**
		 * Moves the caret left / right.
		 *
		 * @param {int} direction
		 * @param {object} e (optional)
		 */
        advanceCaret: function (direction, e) {
          var self = this, fn, $adj;
          if (direction === 0)
            return;
          fn = direction > 0 ? 'next' : 'prev';
          if (self.isShiftDown) {
            $adj = self.$control_input[fn]();
            if ($adj.length) {
              self.hideInput();
              self.setActiveItem($adj);
              e && e.preventDefault()
            }
          } else {
            self.setCaret(self.caretPos + direction)
          }
        },
        /**
		 * Moves the caret to the specified index.
		 *
		 * @param {int} i
		 */
        setCaret: function (i) {
          var self = this;
          if (self.settings.mode === 'single') {
            i = self.items.length
          } else {
            i = Math.max(0, Math.min(self.items.length, i))
          }
          if (!self.isPending) {
            // the input must be moved by leaving it in place and moving the
            // siblings, due to the fact that focus cannot be restored once lost
            // on mobile webkit devices
            var j, n, fn, $children, $child;
            $children = self.$control.children(':not(input)');
            for (j = 0, n = $children.length; j < n; j++) {
              $child = $($children[j]).detach();
              if (j < i) {
                self.$control_input.before($child)
              } else {
                self.$control.append($child)
              }
            }
          }
          self.caretPos = i
        },
        /**
		 * Disables user input on the control. Used while
		 * items are being asynchronously created.
		 */
        lock: function () {
          this.close();
          this.isLocked = true;
          this.refreshState()
        },
        /**
		 * Re-enables user input on the control.
		 */
        unlock: function () {
          this.isLocked = false;
          this.refreshState()
        },
        /**
		 * Disables user input on the control completely.
		 * While disabled, it cannot receive focus.
		 */
        disable: function () {
          var self = this;
          self.$input.prop('disabled', true);
          self.$control_input.prop('disabled', true).prop('tabindex', -1);
          self.isDisabled = true;
          self.lock()
        },
        /**
		 * Enables the control so that it can respond
		 * to focus and user input.
		 */
        enable: function () {
          var self = this;
          self.$input.prop('disabled', false);
          self.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);
          self.isDisabled = false;
          self.unlock()
        },
        /**
		 * Completely destroys the control and
		 * unbinds all event listeners so that it can
		 * be garbage collected.
		 */
        destroy: function () {
          var self = this;
          var eventNS = self.eventNS;
          var revertSettings = self.revertSettings;
          self.trigger('destroy');
          self.off();
          self.$wrapper.remove();
          self.$dropdown.remove();
          self.$input.html('').append(revertSettings.$children).removeAttr('tabindex').removeClass('selectized').attr({ tabindex: revertSettings.tabindex }).show();
          self.$control_input.removeData('grow');
          self.$input.removeData('selectize');
          $(window).off(eventNS);
          $(document).off(eventNS);
          $(document.body).off(eventNS);
          delete self.$input[0].selectize
        },
        /**
		 * A helper method for rendering "item" and
		 * "option" templates, given the data.
		 *
		 * @param {string} templateName
		 * @param {object} data
		 * @returns {string}
		 */
        render: function (templateName, data) {
          var value, id, label;
          var html = '';
          var cache = false;
          var self = this;
          var regex_tag = /^[\t \r\n]*<([a-z][a-z0-9\-_]*(?:\:[a-z][a-z0-9\-_]*)?)/i;
          if (templateName === 'option' || templateName === 'item') {
            value = hash_key(data[self.settings.valueField]);
            cache = !!value
          }
          // pull markup from cache if it exists
          if (cache) {
            if (!isset(self.renderCache[templateName])) {
              self.renderCache[templateName] = {}
            }
            if (self.renderCache[templateName].hasOwnProperty(value)) {
              return self.renderCache[templateName][value]
            }
          }
          // render markup
          html = $(self.settings.render[templateName].apply(this, [
            data,
            escape_html
          ]));
          // add mandatory attributes
          if (templateName === 'option' || templateName === 'option_create') {
            html.attr('data-selectable', '')
          } else if (templateName === 'optgroup') {
            id = data[self.settings.optgroupValueField] || '';
            html.attr('data-group', id)
          }
          if (templateName === 'option' || templateName === 'item') {
            html.attr('data-value', value || '')
          }
          // update cache
          if (cache) {
            self.renderCache[templateName][value] = html[0]
          }
          return html[0]
        },
        /**
		 * Clears the render cache for a template. If
		 * no template is given, clears all render
		 * caches.
		 *
		 * @param {string} templateName
		 */
        clearCache: function (templateName) {
          var self = this;
          if (typeof templateName === 'undefined') {
            self.renderCache = {}
          } else {
            delete self.renderCache[templateName]
          }
        },
        /**
		 * Determines whether or not to display the
		 * create item prompt, given a user input.
		 *
		 * @param {string} input
		 * @return {boolean}
		 */
        canCreate: function (input) {
          var self = this;
          if (!self.settings.create)
            return false;
          var filter = self.settings.createFilter;
          return input.length && (typeof filter !== 'function' || filter.apply(self, [input])) && (typeof filter !== 'string' || new RegExp(filter).test(input)) && (!(filter instanceof RegExp) || filter.test(input))
        }
      });
      Selectize.count = 0;
      Selectize.defaults = {
        options: [],
        optgroups: [],
        plugins: [],
        delimiter: ',',
        splitOn: null,
        // regexp or string for splitting up values from a paste command
        persist: true,
        diacritics: true,
        create: false,
        createOnBlur: false,
        createFilter: null,
        highlight: true,
        openOnFocus: true,
        maxOptions: 1000,
        maxItems: null,
        hideSelected: null,
        addPrecedence: false,
        selectOnTab: false,
        preload: false,
        allowEmptyOption: false,
        closeAfterSelect: false,
        scrollDuration: 60,
        loadThrottle: 300,
        loadingClass: 'loading',
        dataAttr: 'data-data',
        optgroupField: 'optgroup',
        valueField: 'value',
        labelField: 'text',
        optgroupLabelField: 'label',
        optgroupValueField: 'value',
        lockOptgroupOrder: false,
        sortField: '$order',
        searchField: ['text'],
        searchConjunction: 'and',
        mode: null,
        wrapperClass: 'selectize-control',
        inputClass: 'selectize-input',
        dropdownClass: 'selectize-dropdown',
        dropdownContentClass: 'selectize-dropdown-content',
        dropdownParent: null,
        copyClassesToDropdown: true,
        /*
		load                 : null, // function(query, callback) { ... }
		score                : null, // function(search) { ... }
		onInitialize         : null, // function() { ... }
		onChange             : null, // function(value) { ... }
		onItemAdd            : null, // function(value, $item) { ... }
		onItemRemove         : null, // function(value) { ... }
		onClear              : null, // function() { ... }
		onOptionAdd          : null, // function(value, data) { ... }
		onOptionRemove       : null, // function(value) { ... }
		onOptionClear        : null, // function() { ... }
		onOptionGroupAdd     : null, // function(id, data) { ... }
		onOptionGroupRemove  : null, // function(id) { ... }
		onOptionGroupClear   : null, // function() { ... }
		onDropdownOpen       : null, // function($dropdown) { ... }
		onDropdownClose      : null, // function($dropdown) { ... }
		onType               : null, // function(str) { ... }
		onDelete             : null, // function(values) { ... }
		*/
        render: {}
      };
      $.fn.selectize = function (settings_user) {
        var defaults = $.fn.selectize.defaults;
        var settings = $.extend({}, defaults, settings_user);
        var attr_data = settings.dataAttr;
        var field_label = settings.labelField;
        var field_value = settings.valueField;
        var field_optgroup = settings.optgroupField;
        var field_optgroup_label = settings.optgroupLabelField;
        var field_optgroup_value = settings.optgroupValueField;
        /**
		 * Initializes selectize from a <input type="text"> element.
		 *
		 * @param {object} $input
		 * @param {object} settings_element
		 */
        var init_textbox = function ($input, settings_element) {
          var i, n, values, option;
          var data_raw = $input.attr(attr_data);
          if (!data_raw) {
            var value = $.trim($input.val() || '');
            if (!settings.allowEmptyOption && !value.length)
              return;
            values = value.split(settings.delimiter);
            for (i = 0, n = values.length; i < n; i++) {
              option = {};
              option[field_label] = values[i];
              option[field_value] = values[i];
              settings_element.options.push(option)
            }
            settings_element.items = values
          } else {
            settings_element.options = JSON.parse(data_raw);
            for (i = 0, n = settings_element.options.length; i < n; i++) {
              settings_element.items.push(settings_element.options[i][field_value])
            }
          }
        };
        /**
		 * Initializes selectize from a <select> element.
		 *
		 * @param {object} $input
		 * @param {object} settings_element
		 */
        var init_select = function ($input, settings_element) {
          var i, n, tagName, $children, order = 0;
          var options = settings_element.options;
          var optionsMap = {};
          var readData = function ($el) {
            var data = attr_data && $el.attr(attr_data);
            if (typeof data === 'string' && data.length) {
              return JSON.parse(data)
            }
            return null
          };
          var addOption = function ($option, group) {
            $option = $($option);
            var value = hash_key($option.val());
            if (!value && !settings.allowEmptyOption)
              return;
            // if the option already exists, it's probably been
            // duplicated in another optgroup. in this case, push
            // the current group to the "optgroup" property on the
            // existing option so that it's rendered in both places.
            if (optionsMap.hasOwnProperty(value)) {
              if (group) {
                var arr = optionsMap[value][field_optgroup];
                if (!arr) {
                  optionsMap[value][field_optgroup] = group
                } else if (!$.isArray(arr)) {
                  optionsMap[value][field_optgroup] = [
                    arr,
                    group
                  ]
                } else {
                  arr.push(group)
                }
              }
              return
            }
            var option = readData($option) || {};
            option[field_label] = option[field_label] || $option.text();
            option[field_value] = option[field_value] || value;
            option[field_optgroup] = option[field_optgroup] || group;
            optionsMap[value] = option;
            options.push(option);
            if ($option.is(':selected')) {
              settings_element.items.push(value)
            }
          };
          var addGroup = function ($optgroup) {
            var i, n, id, optgroup, $options;
            $optgroup = $($optgroup);
            id = $optgroup.attr('label');
            if (id) {
              optgroup = readData($optgroup) || {};
              optgroup[field_optgroup_label] = id;
              optgroup[field_optgroup_value] = id;
              settings_element.optgroups.push(optgroup)
            }
            $options = $('option', $optgroup);
            for (i = 0, n = $options.length; i < n; i++) {
              addOption($options[i], id)
            }
          };
          settings_element.maxItems = $input.attr('multiple') ? null : 1;
          $children = $input.children();
          for (i = 0, n = $children.length; i < n; i++) {
            tagName = $children[i].tagName.toLowerCase();
            if (tagName === 'optgroup') {
              addGroup($children[i])
            } else if (tagName === 'option') {
              addOption($children[i])
            }
          }
        };
        return this.each(function () {
          if (this.selectize)
            return;
          var instance;
          var $input = $(this);
          var tag_name = this.tagName.toLowerCase();
          var placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');
          if (!placeholder && !settings.allowEmptyOption) {
            placeholder = $input.children('option[value=""]').text()
          }
          var settings_element = {
            'placeholder': placeholder,
            'options': [],
            'optgroups': [],
            'items': []
          };
          if (tag_name === 'select') {
            init_select($input, settings_element)
          } else {
            init_textbox($input, settings_element)
          }
          instance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user))
        })
      };
      $.fn.selectize.defaults = Selectize.defaults;
      $.fn.selectize.support = { validity: SUPPORTS_VALIDITY_API };
      Selectize.define('drag_drop', function (options) {
        if (!$.fn.sortable)
          throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');
        if (this.settings.mode !== 'multi')
          return;
        var self = this;
        self.lock = function () {
          var original = self.lock;
          return function () {
            var sortable = self.$control.data('sortable');
            if (sortable)
              sortable.disable();
            return original.apply(self, arguments)
          }
        }();
        self.unlock = function () {
          var original = self.unlock;
          return function () {
            var sortable = self.$control.data('sortable');
            if (sortable)
              sortable.enable();
            return original.apply(self, arguments)
          }
        }();
        self.setup = function () {
          var original = self.setup;
          return function () {
            original.apply(this, arguments);
            var $control = self.$control.sortable({
              items: '[data-value]',
              forcePlaceholderSize: true,
              disabled: self.isLocked,
              start: function (e, ui) {
                ui.placeholder.css('width', ui.helper.css('width'));
                $control.css({ overflow: 'visible' })
              },
              stop: function () {
                $control.css({ overflow: 'hidden' });
                var active = self.$activeItems ? self.$activeItems.slice() : null;
                var values = [];
                $control.children('[data-value]').each(function () {
                  values.push($(this).attr('data-value'))
                });
                self.setValue(values);
                self.setActiveItem(active)
              }
            })
          }
        }()
      });
      Selectize.define('dropdown_header', function (options) {
        var self = this;
        options = $.extend({
          title: 'Untitled',
          headerClass: 'selectize-dropdown-header',
          titleRowClass: 'selectize-dropdown-header-title',
          labelClass: 'selectize-dropdown-header-label',
          closeClass: 'selectize-dropdown-header-close',
          html: function (data) {
            return '<div class="' + data.headerClass + '">' + '<div class="' + data.titleRowClass + '">' + '<span class="' + data.labelClass + '">' + data.title + '</span>' + '<a href="javascript:void(0)" class="' + data.closeClass + '">&times;</a>' + '</div>' + '</div>'
          }
        }, options);
        self.setup = function () {
          var original = self.setup;
          return function () {
            original.apply(self, arguments);
            self.$dropdown_header = $(options.html(options));
            self.$dropdown.prepend(self.$dropdown_header)
          }
        }()
      });
      Selectize.define('optgroup_columns', function (options) {
        var self = this;
        options = $.extend({
          equalizeWidth: true,
          equalizeHeight: true
        }, options);
        this.getAdjacentOption = function ($option, direction) {
          var $options = $option.closest('[data-group]').find('[data-selectable]');
          var index = $options.index($option) + direction;
          return index >= 0 && index < $options.length ? $options.eq(index) : $()
        };
        this.onKeyDown = function () {
          var original = self.onKeyDown;
          return function (e) {
            var index, $option, $options, $optgroup;
            if (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {
              self.ignoreHover = true;
              $optgroup = this.$activeOption.closest('[data-group]');
              index = $optgroup.find('[data-selectable]').index(this.$activeOption);
              if (e.keyCode === KEY_LEFT) {
                $optgroup = $optgroup.prev('[data-group]')
              } else {
                $optgroup = $optgroup.next('[data-group]')
              }
              $options = $optgroup.find('[data-selectable]');
              $option = $options.eq(Math.min($options.length - 1, index));
              if ($option.length) {
                this.setActiveOption($option)
              }
              return
            }
            return original.apply(this, arguments)
          }
        }();
        var getScrollbarWidth = function () {
          var div;
          var width = getScrollbarWidth.width;
          var doc = document;
          if (typeof width === 'undefined') {
            div = doc.createElement('div');
            div.innerHTML = '<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>';
            div = div.firstChild;
            doc.body.appendChild(div);
            width = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;
            doc.body.removeChild(div)
          }
          return width
        };
        var equalizeSizes = function () {
          var i, n, height_max, width, width_last, width_parent, $optgroups;
          $optgroups = $('[data-group]', self.$dropdown_content);
          n = $optgroups.length;
          if (!n || !self.$dropdown_content.width())
            return;
          if (options.equalizeHeight) {
            height_max = 0;
            for (i = 0; i < n; i++) {
              height_max = Math.max(height_max, $optgroups.eq(i).height())
            }
            $optgroups.css({ height: height_max })
          }
          if (options.equalizeWidth) {
            width_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();
            width = Math.round(width_parent / n);
            $optgroups.css({ width: width });
            if (n > 1) {
              width_last = width_parent - width * (n - 1);
              $optgroups.eq(n - 1).css({ width: width_last })
            }
          }
        };
        if (options.equalizeHeight || options.equalizeWidth) {
          hook.after(this, 'positionDropdown', equalizeSizes);
          hook.after(this, 'refreshOptions', equalizeSizes)
        }
      });
      Selectize.define('remove_button', function (options) {
        options = $.extend({
          label: '&times;',
          title: 'Remove',
          className: 'remove',
          append: true
        }, options);
        var singleClose = function (thisRef, options) {
          options.className = 'remove-single';
          var self = thisRef;
          var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
          /**
				 * Appends an element as a child (with raw HTML).
				 *
				 * @param {string} html_container
				 * @param {string} html_element
				 * @return {string}
				 */
          var append = function (html_container, html_element) {
            return html_container + html_element
          };
          thisRef.setup = function () {
            var original = self.setup;
            return function () {
              // override the item rendering method to add the button to each
              if (options.append) {
                var id = $(self.$input.context).attr('id');
                var selectizer = $('#' + id);
                var render_item = self.settings.render.item;
                self.settings.render.item = function (data) {
                  return append(render_item.apply(thisRef, arguments), html)
                }
              }
              original.apply(thisRef, arguments);
              // add event listener
              thisRef.$control.on('click', '.' + options.className, function (e) {
                e.preventDefault();
                if (self.isLocked)
                  return;
                self.clear()
              })
            }
          }()
        };
        var multiClose = function (thisRef, options) {
          var self = thisRef;
          var html = '<a href="javascript:void(0)" class="' + options.className + '" tabindex="-1" title="' + escape_html(options.title) + '">' + options.label + '</a>';
          /**
				 * Appends an element as a child (with raw HTML).
				 *
				 * @param {string} html_container
				 * @param {string} html_element
				 * @return {string}
				 */
          var append = function (html_container, html_element) {
            var pos = html_container.search(/(<\/[^>]+>\s*)$/);
            return html_container.substring(0, pos) + html_element + html_container.substring(pos)
          };
          thisRef.setup = function () {
            var original = self.setup;
            return function () {
              // override the item rendering method to add the button to each
              if (options.append) {
                var render_item = self.settings.render.item;
                self.settings.render.item = function (data) {
                  return append(render_item.apply(thisRef, arguments), html)
                }
              }
              original.apply(thisRef, arguments);
              // add event listener
              thisRef.$control.on('click', '.' + options.className, function (e) {
                e.preventDefault();
                if (self.isLocked)
                  return;
                var $item = $(e.currentTarget).parent();
                self.setActiveItem($item);
                if (self.deleteSelection()) {
                  self.setCaret(self.items.length)
                }
              })
            }
          }()
        };
        if (this.settings.mode === 'single') {
          singleClose(this, options);
          return
        } else {
          multiClose(this, options)
        }
      });
      Selectize.define('restore_on_backspace', function (options) {
        var self = this;
        options.text = options.text || function (option) {
          return option[this.settings.labelField]
        };
        this.onKeyDown = function () {
          var original = self.onKeyDown;
          return function (e) {
            var index, option;
            if (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {
              index = this.caretPos - 1;
              if (index >= 0 && index < this.items.length) {
                option = this.options[this.items[index]];
                if (this.deleteSelection(e)) {
                  this.setTextboxValue(options.text.apply(this, [option]));
                  this.refreshOptions(true)
                }
                e.preventDefault();
                return
              }
            }
            return original.apply(this, arguments)
          }
        }()
      });
      return Selectize
    }))
  });
  // source: node_modules/selectize/node_modules/sifter/sifter.js
  rqzt.define('sifter/sifter', function (module, exports, __dirname, __filename, process) {
    /**
 * sifter.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        root.Sifter = factory()
      }
    }(this, function () {
      /**
	 * Textually searches arrays and hashes of objects
	 * by property (or multiple properties). Designed
	 * specifically for autocomplete.
	 *
	 * @constructor
	 * @param {array|object} items
	 * @param {object} items
	 */
      var Sifter = function (items, settings) {
        this.items = items;
        this.settings = settings || { diacritics: true }
      };
      /**
	 * Splits a search string into an array of individual
	 * regexps to be used to match results.
	 *
	 * @param {string} query
	 * @returns {array}
	 */
      Sifter.prototype.tokenize = function (query) {
        query = trim(String(query || '').toLowerCase());
        if (!query || !query.length)
          return [];
        var i, n, regex, letter;
        var tokens = [];
        var words = query.split(/ +/);
        for (i = 0, n = words.length; i < n; i++) {
          regex = escape_regex(words[i]);
          if (this.settings.diacritics) {
            for (letter in DIACRITICS) {
              if (DIACRITICS.hasOwnProperty(letter)) {
                regex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter])
              }
            }
          }
          tokens.push({
            string: words[i],
            regex: new RegExp(regex, 'i')
          })
        }
        return tokens
      };
      /**
	 * Iterates over arrays and hashes.
	 *
	 * ```
	 * this.iterator(this.items, function(item, id) {
	 *    // invoked for each item
	 * });
	 * ```
	 *
	 * @param {array|object} object
	 */
      Sifter.prototype.iterator = function (object, callback) {
        var iterator;
        if (is_array(object)) {
          iterator = Array.prototype.forEach || function (callback) {
            for (var i = 0, n = this.length; i < n; i++) {
              callback(this[i], i, this)
            }
          }
        } else {
          iterator = function (callback) {
            for (var key in this) {
              if (this.hasOwnProperty(key)) {
                callback(this[key], key, this)
              }
            }
          }
        }
        iterator.apply(object, [callback])
      };
      /**
	 * Returns a function to be used to score individual results.
	 *
	 * Good matches will have a higher score than poor matches.
	 * If an item is not a match, 0 will be returned by the function.
	 *
	 * @param {object|string} search
	 * @param {object} options (optional)
	 * @returns {function}
	 */
      Sifter.prototype.getScoreFunction = function (search, options) {
        var self, fields, tokens, token_count, nesting;
        self = this;
        search = self.prepareSearch(search, options);
        tokens = search.tokens;
        fields = search.options.fields;
        token_count = tokens.length;
        nesting = search.options.nesting;
        /**
		 * Calculates how close of a match the
		 * given value is against a search token.
		 *
		 * @param {mixed} value
		 * @param {object} token
		 * @return {number}
		 */
        var scoreValue = function (value, token) {
          var score, pos;
          if (!value)
            return 0;
          value = String(value || '');
          pos = value.search(token.regex);
          if (pos === -1)
            return 0;
          score = token.string.length / value.length;
          if (pos === 0)
            score += 0.5;
          return score
        };
        /**
		 * Calculates the score of an object
		 * against the search query.
		 *
		 * @param {object} token
		 * @param {object} data
		 * @return {number}
		 */
        var scoreObject = function () {
          var field_count = fields.length;
          if (!field_count) {
            return function () {
              return 0
            }
          }
          if (field_count === 1) {
            return function (token, data) {
              return scoreValue(getattr(data, fields[0], nesting), token)
            }
          }
          return function (token, data) {
            for (var i = 0, sum = 0; i < field_count; i++) {
              sum += scoreValue(getattr(data, fields[i], nesting), token)
            }
            return sum / field_count
          }
        }();
        if (!token_count) {
          return function () {
            return 0
          }
        }
        if (token_count === 1) {
          return function (data) {
            return scoreObject(tokens[0], data)
          }
        }
        if (search.options.conjunction === 'and') {
          return function (data) {
            var score;
            for (var i = 0, sum = 0; i < token_count; i++) {
              score = scoreObject(tokens[i], data);
              if (score <= 0)
                return 0;
              sum += score
            }
            return sum / token_count
          }
        } else {
          return function (data) {
            for (var i = 0, sum = 0; i < token_count; i++) {
              sum += scoreObject(tokens[i], data)
            }
            return sum / token_count
          }
        }
      };
      /**
	 * Returns a function that can be used to compare two
	 * results, for sorting purposes. If no sorting should
	 * be performed, `null` will be returned.
	 *
	 * @param {string|object} search
	 * @param {object} options
	 * @return function(a,b)
	 */
      Sifter.prototype.getSortFunction = function (search, options) {
        var i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;
        self = this;
        search = self.prepareSearch(search, options);
        sort = !search.query && options.sort_empty || options.sort;
        /**
		 * Fetches the specified sort field value
		 * from a search result item.
		 *
		 * @param  {string} name
		 * @param  {object} result
		 * @return {mixed}
		 */
        get_field = function (name, result) {
          if (name === '$score')
            return result.score;
          return getattr(self.items[result.id], name, options.nesting)
        };
        // parse options
        fields = [];
        if (sort) {
          for (i = 0, n = sort.length; i < n; i++) {
            if (search.query || sort[i].field !== '$score') {
              fields.push(sort[i])
            }
          }
        }
        // the "$score" field is implied to be the primary
        // sort field, unless it's manually specified
        if (search.query) {
          implicit_score = true;
          for (i = 0, n = fields.length; i < n; i++) {
            if (fields[i].field === '$score') {
              implicit_score = false;
              break
            }
          }
          if (implicit_score) {
            fields.unshift({
              field: '$score',
              direction: 'desc'
            })
          }
        } else {
          for (i = 0, n = fields.length; i < n; i++) {
            if (fields[i].field === '$score') {
              fields.splice(i, 1);
              break
            }
          }
        }
        multipliers = [];
        for (i = 0, n = fields.length; i < n; i++) {
          multipliers.push(fields[i].direction === 'desc' ? -1 : 1)
        }
        // build function
        fields_count = fields.length;
        if (!fields_count) {
          return null
        } else if (fields_count === 1) {
          field = fields[0].field;
          multiplier = multipliers[0];
          return function (a, b) {
            return multiplier * cmp(get_field(field, a), get_field(field, b))
          }
        } else {
          return function (a, b) {
            var i, result, a_value, b_value, field;
            for (i = 0; i < fields_count; i++) {
              field = fields[i].field;
              result = multipliers[i] * cmp(get_field(field, a), get_field(field, b));
              if (result)
                return result
            }
            return 0
          }
        }
      };
      /**
	 * Parses a search query and returns an object
	 * with tokens and fields ready to be populated
	 * with results.
	 *
	 * @param {string} query
	 * @param {object} options
	 * @returns {object}
	 */
      Sifter.prototype.prepareSearch = function (query, options) {
        if (typeof query === 'object')
          return query;
        options = extend({}, options);
        var option_fields = options.fields;
        var option_sort = options.sort;
        var option_sort_empty = options.sort_empty;
        if (option_fields && !is_array(option_fields))
          options.fields = [option_fields];
        if (option_sort && !is_array(option_sort))
          options.sort = [option_sort];
        if (option_sort_empty && !is_array(option_sort_empty))
          options.sort_empty = [option_sort_empty];
        return {
          options: options,
          query: String(query || '').toLowerCase(),
          tokens: this.tokenize(query),
          total: 0,
          items: []
        }
      };
      /**
	 * Searches through all items and returns a sorted array of matches.
	 *
	 * The `options` parameter can contain:
	 *
	 *   - fields {string|array}
	 *   - sort {array}
	 *   - score {function}
	 *   - filter {bool}
	 *   - limit {integer}
	 *
	 * Returns an object containing:
	 *
	 *   - options {object}
	 *   - query {string}
	 *   - tokens {array}
	 *   - total {int}
	 *   - items {array}
	 *
	 * @param {string} query
	 * @param {object} options
	 * @returns {object}
	 */
      Sifter.prototype.search = function (query, options) {
        var self = this, value, score, search, calculateScore;
        var fn_sort;
        var fn_score;
        search = this.prepareSearch(query, options);
        options = search.options;
        query = search.query;
        // generate result scoring function
        fn_score = options.score || self.getScoreFunction(search);
        // perform search and sort
        if (query.length) {
          self.iterator(self.items, function (item, id) {
            score = fn_score(item);
            if (options.filter === false || score > 0) {
              search.items.push({
                'score': score,
                'id': id
              })
            }
          })
        } else {
          self.iterator(self.items, function (item, id) {
            search.items.push({
              'score': 1,
              'id': id
            })
          })
        }
        fn_sort = self.getSortFunction(search, options);
        if (fn_sort)
          search.items.sort(fn_sort);
        // apply limits
        search.total = search.items.length;
        if (typeof options.limit === 'number') {
          search.items = search.items.slice(0, options.limit)
        }
        return search
      };
      // utilities
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      var cmp = function (a, b) {
        if (typeof a === 'number' && typeof b === 'number') {
          return a > b ? 1 : a < b ? -1 : 0
        }
        a = asciifold(String(a || ''));
        b = asciifold(String(b || ''));
        if (a > b)
          return 1;
        if (b > a)
          return -1;
        return 0
      };
      var extend = function (a, b) {
        var i, n, k, object;
        for (i = 1, n = arguments.length; i < n; i++) {
          object = arguments[i];
          if (!object)
            continue;
          for (k in object) {
            if (object.hasOwnProperty(k)) {
              a[k] = object[k]
            }
          }
        }
        return a
      };
      /**
	 * A property getter resolving dot-notation
	 * @param  {Object}  obj     The root object to fetch property on
	 * @param  {String}  name    The optionally dotted property name to fetch
	 * @param  {Boolean} nesting Handle nesting or not
	 * @return {Object}          The resolved property value
	 */
      var getattr = function (obj, name, nesting) {
        if (!obj || !name)
          return;
        if (!nesting)
          return obj[name];
        var names = name.split('.');
        while (names.length && (obj = obj[names.shift()]));
        return obj
      };
      var trim = function (str) {
        return (str + '').replace(/^\s+|\s+$|/g, '')
      };
      var escape_regex = function (str) {
        return (str + '').replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1')
      };
      var is_array = Array.isArray || typeof $ !== 'undefined' && $.isArray || function (object) {
        return Object.prototype.toString.call(object) === '[object Array]'
      };
      var DIACRITICS = {
        'a': '[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]',
        'b': '[b␢βΒB฿𐌁ᛒ]',
        'c': '[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]',
        'd': '[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]',
        'e': '[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]',
        'f': '[fƑƒḞḟ]',
        'g': '[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]',
        'h': '[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]',
        'i': '[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]',
        'j': '[jȷĴĵɈɉʝɟʲ]',
        'k': '[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]',
        'l': '[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]',
        'n': '[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]',
        'o': '[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]',
        'p': '[pṔṕṖṗⱣᵽƤƥᵱ]',
        'q': '[qꝖꝗʠɊɋꝘꝙq̃]',
        'r': '[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]',
        's': '[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]',
        't': '[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]',
        'u': '[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]',
        'v': '[vṼṽṾṿƲʋꝞꝟⱱʋ]',
        'w': '[wẂẃẀẁŴŵẄẅẆẇẈẉ]',
        'x': '[xẌẍẊẋχ]',
        'y': '[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]',
        'z': '[zŹźẐẑŽžŻżẒẓẔẕƵƶ]'
      };
      var asciifold = function () {
        var i, n, k, chunk;
        var foreignletters = '';
        var lookup = {};
        for (k in DIACRITICS) {
          if (DIACRITICS.hasOwnProperty(k)) {
            chunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);
            foreignletters += chunk;
            for (i = 0, n = chunk.length; i < n; i++) {
              lookup[chunk.charAt(i)] = k
            }
          }
        }
        var regexp = new RegExp('[' + foreignletters + ']', 'g');
        return function (str) {
          return str.replace(regexp, function (foreignletter) {
            return lookup[foreignletter]
          }).toLowerCase()
        }
      }();
      // export
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      return Sifter
    }))
  });
  // source: node_modules/selectize/node_modules/microplugin/src/microplugin.js
  rqzt.define('microplugin/src/microplugin', function (module, exports, __dirname, __filename, process) {
    /**
 * microplugin.js
 * Copyright (c) 2013 Brian Reavis & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at:
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 * @author Brian Reavis <brian@thirdroute.com>
 */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        root.MicroPlugin = factory()
      }
    }(this, function () {
      var MicroPlugin = {};
      MicroPlugin.mixin = function (Interface) {
        Interface.plugins = {};
        /**
		 * Initializes the listed plugins (with options).
		 * Acceptable formats:
		 *
		 * List (without options):
		 *   ['a', 'b', 'c']
		 *
		 * List (with options):
		 *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]
		 *
		 * Hash (with options):
		 *   {'a': { ... }, 'b': { ... }, 'c': { ... }}
		 *
		 * @param {mixed} plugins
		 */
        Interface.prototype.initializePlugins = function (plugins) {
          var i, n, key;
          var self = this;
          var queue = [];
          self.plugins = {
            names: [],
            settings: {},
            requested: {},
            loaded: {}
          };
          if (utils.isArray(plugins)) {
            for (i = 0, n = plugins.length; i < n; i++) {
              if (typeof plugins[i] === 'string') {
                queue.push(plugins[i])
              } else {
                self.plugins.settings[plugins[i].name] = plugins[i].options;
                queue.push(plugins[i].name)
              }
            }
          } else if (plugins) {
            for (key in plugins) {
              if (plugins.hasOwnProperty(key)) {
                self.plugins.settings[key] = plugins[key];
                queue.push(key)
              }
            }
          }
          while (queue.length) {
            self.require(queue.shift())
          }
        };
        Interface.prototype.loadPlugin = function (name) {
          var self = this;
          var plugins = self.plugins;
          var plugin = Interface.plugins[name];
          if (!Interface.plugins.hasOwnProperty(name)) {
            throw new Error('Unable to find "' + name + '" plugin')
          }
          plugins.requested[name] = true;
          plugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);
          plugins.names.push(name)
        };
        /**
		 * Initializes a plugin.
		 *
		 * @param {string} name
		 */
        Interface.prototype.require = function (name) {
          var self = this;
          var plugins = self.plugins;
          if (!self.plugins.loaded.hasOwnProperty(name)) {
            if (plugins.requested[name]) {
              throw new Error('Plugin has circular dependency ("' + name + '")')
            }
            self.loadPlugin(name)
          }
          return plugins.loaded[name]
        };
        /**
		 * Registers a plugin.
		 *
		 * @param {string} name
		 * @param {function} fn
		 */
        Interface.define = function (name, fn) {
          Interface.plugins[name] = {
            'name': name,
            'fn': fn
          }
        }
      };
      var utils = {
        isArray: Array.isArray || function (vArg) {
          return Object.prototype.toString.call(vArg) === '[object Array]'
        }
      };
      return MicroPlugin
    }))
  });
  // source: node_modules/raf/index.js
  rqzt.define('raf', function (module, exports, __dirname, __filename, process) {
    var now = rqzt('performance-now/lib/performance-now'), root = typeof window === 'undefined' ? global : window, vendors = [
        'moz',
        'webkit'
      ], suffix = 'AnimationFrame', raf = root['request' + suffix], caf = root['cancel' + suffix] || root['cancelRequest' + suffix];
    for (var i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + 'Request' + suffix];
      caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix]
    }
    // Some versions of FF have rAF but not cAF
    if (!raf || !caf) {
      var last = 0, id = 0, queue = [], frameDuration = 1000 / 60;
      raf = function (callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function () {
            var cp = queue.slice(0);
            // Clear queue here to prevent
            // callbacks from appending listeners
            // to the current frame's queue
            queue.length = 0;
            for (var i = 0; i < cp.length; i++) {
              if (!cp[i].cancelled) {
                try {
                  cp[i].callback(last)
                } catch (e) {
                  setTimeout(function () {
                    throw e
                  }, 0)
                }
              }
            }
          }, Math.round(next))
        }
        queue.push({
          handle: ++id,
          callback: callback,
          cancelled: false
        });
        return id
      };
      caf = function (handle) {
        for (var i = 0; i < queue.length; i++) {
          if (queue[i].handle === handle) {
            queue[i].cancelled = true
          }
        }
      }
    }
    module.exports = function (fn) {
      // Wrap in a new function to prevent
      // `cancel` potentially being assigned
      // to the native rAF function
      return raf.call(root, fn)
    };
    module.exports.cancel = function () {
      caf.apply(root, arguments)
    };
    module.exports.polyfill = function () {
      root.requestAnimationFrame = raf;
      root.cancelAnimationFrame = caf
    }
  });
  // source: node_modules/raf/node_modules/performance-now/lib/performance-now.js
  rqzt.define('performance-now/lib/performance-now', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.7.1
    (function () {
      var getNanoSeconds, hrtime, loadTime;
      if (typeof performance !== 'undefined' && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now()
        }
      } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - loadTime) / 1000000
        };
        hrtime = process.hrtime;
        getNanoSeconds = function () {
          var hr;
          hr = hrtime();
          return hr[0] * 1000000000 + hr[1]
        };
        loadTime = getNanoSeconds()
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime
        };
        loadTime = Date.now()
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime
        };
        loadTime = new Date().getTime()
      }
    }.call(this))
  });
  // source: node_modules/crowdcontrol/lib/index.js
  rqzt.define('crowdcontrol/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var CrowdControl, r, riot;
    r = rqzt('crowdcontrol/lib/riot');
    riot = r();
    CrowdControl = {
      Views: rqzt('crowdcontrol/lib/views'),
      tags: [],
      start: function (opts) {
        return this.tags = riot.mount('*', opts)
      },
      update: function () {
        var i, len, ref, results, tag;
        ref = this.tags;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          tag = ref[i];
          results.push(tag.update())
        }
        return results
      },
      riot: r
    };
    if (module.exports != null) {
      module.exports = CrowdControl
    }
    if (typeof window !== 'undefined' && window !== null) {
      if (window.Crowdstart != null) {
        window.Crowdstart.Crowdcontrol = CrowdControl
      } else {
        window.Crowdstart = { CrowdControl: CrowdControl }
      }
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/riot.js
  rqzt.define('crowdcontrol/lib/riot', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var r;
    r = function () {
      return this.riot
    };
    r.set = function (riot) {
      this.riot = riot
    };
    r.riot = typeof window !== 'undefined' && window !== null ? window.riot : void 0;
    module.exports = r  //# sourceMappingURL=riot.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/index.js
  rqzt.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      Form: rqzt('crowdcontrol/lib/views/form'),
      Input: rqzt('crowdcontrol/lib/views/input'),
      View: rqzt('crowdcontrol/lib/views/view')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/form.js
  rqzt.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    inputify = rqzt('crowdcontrol/lib/views/inputify');
    observable = rqzt('crowdcontrol/lib/riot')().observable;
    Promise = rqzt('broken/lib');
    settle = rqzt('promise-settle');
    Form = function (superClass) {
      extend(Form, superClass);
      function Form() {
        return Form.__super__.constructor.apply(this, arguments)
      }
      Form.prototype.configs = null;
      Form.prototype.inputs = null;
      Form.prototype.data = null;
      Form.prototype.initInputs = function () {
        var input, name, ref, results1;
        this.inputs = {};
        if (this.configs != null) {
          this.inputs = inputify(this.data, this.configs);
          ref = this.inputs;
          results1 = [];
          for (name in ref) {
            input = ref[name];
            results1.push(observable(input))
          }
          return results1
        }
      };
      Form.prototype.init = function () {
        return this.initInputs()
      };
      Form.prototype.submit = function (e) {
        var input, name, pRef, ps, ref;
        ps = [];
        ref = this.inputs;
        for (name in ref) {
          input = ref[name];
          pRef = {};
          input.trigger('validate', pRef);
          ps.push(pRef.p)
        }
        settle(ps).then(function (_this) {
          return function (results) {
            var i, len, result;
            for (i = 0, len = results.length; i < len; i++) {
              result = results[i];
              if (!result.isFulfilled()) {
                return
              }
            }
            return _this._submit.apply(_this, arguments)
          }
        }(this));
        if (e != null) {
          e.preventDefault();
          e.stopPropagation()
        }
        return false
      };
      Form.prototype._submit = function () {
      };
      return Form
    }(View);
    module.exports = Form  //# sourceMappingURL=form.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/view.js
  rqzt.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
    riot = rqzt('crowdcontrol/lib/riot')();
    objectAssign = rqzt('object-assign');
    setPrototypeOf = function () {
      var mixinProperties, setProtoOf;
      setProtoOf = function (obj, proto) {
        return obj.__proto__ = proto
      };
      mixinProperties = function (obj, proto) {
        var prop, results;
        results = [];
        for (prop in proto) {
          if (obj[prop] == null) {
            results.push(obj[prop] = proto[prop])
          } else {
            results.push(void 0)
          }
        }
        return results
      };
      if (Object.setPrototypeOf || { __proto__: [] } instanceof Array) {
        return setProtoOf
      } else {
        return mixinProperties
      }
    }();
    isFunction = rqzt('is-function');
    collapsePrototype = function (collapse, proto) {
      var parentProto;
      if (proto === View.prototype) {
        return
      }
      parentProto = Object.getPrototypeOf(proto);
      collapsePrototype(collapse, parentProto);
      return objectAssign(collapse, parentProto)
    };
    View = function () {
      View.register = function () {
        return new this
      };
      View.prototype.tag = '';
      View.prototype.html = '';
      View.prototype.css = '';
      View.prototype.attrs = '';
      View.prototype.events = null;
      function View() {
        var newProto;
        newProto = collapsePrototype({}, this);
        this.beforeInit();
        riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
          var fn, handler, k, name, parent, proto, ref, ref1, self, v;
          if (newProto != null) {
            for (k in newProto) {
              v = newProto[k];
              if (isFunction(v)) {
                (function (_this) {
                  return function (v) {
                    var oldFn;
                    if (_this[k] != null) {
                      oldFn = _this[k];
                      return _this[k] = function () {
                        oldFn.apply(_this, arguments);
                        return v.apply(_this, arguments)
                      }
                    } else {
                      return _this[k] = function () {
                        return v.apply(_this, arguments)
                      }
                    }
                  }
                }(this)(v))
              } else {
                this[k] = v
              }
            }
          }
          self = this;
          parent = (ref = self.parent) != null ? ref : opts.parent;
          proto = Object.getPrototypeOf(self);
          while (parent && parent !== proto) {
            setPrototypeOf(self, parent);
            self = parent;
            parent = self.parent;
            proto = Object.getPrototypeOf(self)
          }
          if (opts != null) {
            for (k in opts) {
              v = opts[k];
              this[k] = v
            }
          }
          if (this.events != null) {
            ref1 = this.events;
            fn = function (_this) {
              return function (name, handler) {
                if (typeof handler === 'string') {
                  return _this.on(name, function () {
                    return _this[handler].apply(_this, arguments)
                  })
                } else {
                  return _this.on(name, function () {
                    return handler.apply(_this, arguments)
                  })
                }
              }
            }(this);
            for (name in ref1) {
              handler = ref1[name];
              fn(name, handler)
            }
          }
          return this.init(opts)
        })
      }
      View.prototype.beforeInit = function () {
      };
      View.prototype.init = function () {
      };
      return View
    }();
    module.exports = View  //# sourceMappingURL=view.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/object-assign/index.js
  rqzt.define('object-assign', function (module, exports, __dirname, __filename, process) {
    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/
    'use strict';
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined')
      }
      return Object(val)
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false
        }
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc');
        // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2['_' + String.fromCharCode(i)] = i
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
          return test2[n]
        });
        if (order2.join('') !== '0123456789') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
          test3[letter] = letter
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
          return false
        }
        return true
      } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key]
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]]
            }
          }
        }
      }
      return to
    }
  });
  // source: node_modules/crowdcontrol/node_modules/is-function/index.js
  rqzt.define('is-function', function (module, exports, __dirname, __filename, process) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/crowdcontrol/lib/views/inputify.js
  rqzt.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Promise, inputify, isFunction, isRef, refer;
    Promise = rqzt('broken/lib');
    isFunction = rqzt('is-function');
    refer = rqzt('referential/lib');
    isRef = function (o) {
      return o != null && isFunction(o.ref)
    };
    inputify = function (data, configs) {
      var config, fn, inputs, name, ref;
      ref = data;
      if (!isRef(ref)) {
        ref = refer(data)
      }
      inputs = {};
      fn = function (name, config) {
        var fn1, i, input, len, middleware, middlewareFn, validate;
        middleware = [];
        if (config && config.length > 0) {
          fn1 = function (name, middlewareFn) {
            return middleware.push(function (pair) {
              ref = pair[0], name = pair[1];
              return Promise.resolve(pair).then(function (pair) {
                return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
              }).then(function (v) {
                ref.set(name, v);
                return pair
              })
            })
          };
          for (i = 0, len = config.length; i < len; i++) {
            middlewareFn = config[i];
            fn1(name, middlewareFn)
          }
        }
        middleware.push(function (pair) {
          ref = pair[0], name = pair[1];
          return Promise.resolve(ref.get(name))
        });
        validate = function (ref, name) {
          var j, len1, p;
          p = Promise.resolve([
            ref,
            name
          ]);
          for (j = 0, len1 = middleware.length; j < len1; j++) {
            middlewareFn = middleware[j];
            p = p.then(middlewareFn)
          }
          return p
        };
        input = {
          name: name,
          ref: ref,
          config: config,
          validate: validate
        };
        return inputs[name] = input
      };
      for (name in configs) {
        config = configs[name];
        fn(name, config)
      }
      return inputs
    };
    module.exports = inputify  //# sourceMappingURL=inputify.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/broken/lib/index.js
  rqzt.define('broken/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Promise, PromiseInspection;
    Promise = rqzt('zousan/zousan-min');
    Promise.suppressUncaughtRejectionError = false;
    PromiseInspection = function () {
      function PromiseInspection(arg) {
        this.state = arg.state, this.value = arg.value, this.reason = arg.reason
      }
      PromiseInspection.prototype.isFulfilled = function () {
        return this.state === 'fulfilled'
      };
      PromiseInspection.prototype.isRejected = function () {
        return this.state === 'rejected'
      };
      return PromiseInspection
    }();
    Promise.reflect = function (promise) {
      return new Promise(function (resolve, reject) {
        return promise.then(function (value) {
          return resolve(new PromiseInspection({
            state: 'fulfilled',
            value: value
          }))
        })['catch'](function (err) {
          return resolve(new PromiseInspection({
            state: 'rejected',
            reason: err
          }))
        })
      })
    };
    Promise.settle = function (promises) {
      return Promise.all(promises.map(Promise.reflect))
    };
    Promise.prototype.callback = function (cb) {
      if (typeof cb === 'function') {
        this.then(function (value) {
          return cb(null, value)
        });
        this['catch'](function (error) {
          return cb(error, null)
        })
      }
      return this
    };
    module.exports = Promise  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/broken/node_modules/zousan/zousan-min.js
  rqzt.define('zousan/zousan-min', function (module, exports, __dirname, __filename, process) {
    !function (t) {
      'use strict';
      function e(t) {
        if (t) {
          var e = this;
          t(function (t) {
            e.resolve(t)
          }, function (t) {
            e.reject(t)
          })
        }
      }
      function n(t, e) {
        if ('function' == typeof t.y)
          try {
            var n = t.y.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.resolve(e)
      }
      function o(t, e) {
        if ('function' == typeof t.n)
          try {
            var n = t.n.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.reject(e)
      }
      var r, i, c = 'fulfilled', u = 'rejected', s = 'undefined', f = function () {
          function t() {
            for (; e.length - n;)
              e[n](), e[n++] = i, n == o && (e.splice(0, o), n = 0)
          }
          var e = [], n = 0, o = 1024, r = function () {
              if (typeof MutationObserver !== s) {
                var e = document.createElement('div'), n = new MutationObserver(t);
                return n.observe(e, { attributes: !0 }), function () {
                  e.setAttribute('a', 0)
                }
              }
              return typeof setImmediate !== s ? function () {
                setImmediate(t)
              } : function () {
                setTimeout(t, 0)
              }
            }();
          return function (t) {
            e.push(t), e.length - n == 1 && r()
          }
        }();
      e.prototype = {
        resolve: function (t) {
          if (this.state === r) {
            if (t === this)
              return this.reject(new TypeError('Attempt to resolve promise with self'));
            var e = this;
            if (t && ('function' == typeof t || 'object' == typeof t))
              try {
                var o = !0, i = t.then;
                if ('function' == typeof i)
                  return void i.call(t, function (t) {
                    o && (o = !1, e.resolve(t))
                  }, function (t) {
                    o && (o = !1, e.reject(t))
                  })
              } catch (u) {
                return void (o && this.reject(u))
              }
            this.state = c, this.v = t, e.c && f(function () {
              for (var o = 0, r = e.c.length; r > o; o++)
                n(e.c[o], t)
            })
          }
        },
        reject: function (t) {
          if (this.state === r) {
            this.state = u, this.v = t;
            var n = this.c;
            n ? f(function () {
              for (var e = 0, r = n.length; r > e; e++)
                o(n[e], t)
            }) : e.suppressUncaughtRejectionError || void 0
          }
        },
        then: function (t, i) {
          var u = new e, s = {
              y: t,
              n: i,
              p: u
            };
          if (this.state === r)
            this.c ? this.c.push(s) : this.c = [s];
          else {
            var l = this.state, a = this.v;
            f(function () {
              l === c ? n(s, a) : o(s, a)
            })
          }
          return u
        },
        'catch': function (t) {
          return this.then(null, t)
        },
        'finally': function (t) {
          return this.then(t, t)
        },
        timeout: function (t, n) {
          n = n || 'Timeout';
          var o = this;
          return new e(function (e, r) {
            setTimeout(function () {
              r(Error(n))
            }, t), o.then(function (t) {
              e(t)
            }, function (t) {
              r(t)
            })
          })
        }
      }, e.resolve = function (t) {
        var n = new e;
        return n.resolve(t), n
      }, e.reject = function (t) {
        var n = new e;
        return n.reject(t), n
      }, e.all = function (t) {
        function n(n, c) {
          'function' != typeof n.then && (n = e.resolve(n)), n.then(function (e) {
            o[c] = e, r++, r == t.length && i.resolve(o)
          }, function (t) {
            i.reject(t)
          })
        }
        for (var o = [], r = 0, i = new e, c = 0; c < t.length; c++)
          n(t[c], c);
        return t.length || i.resolve(o), i
      }, typeof module != s && module.exports && (module.exports = e), t.Zousan = e, e.soon = f
    }('undefined' != typeof global ? global : this)
  });
  // source: node_modules/crowdcontrol/node_modules/referential/lib/index.js
  rqzt.define('referential/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var refer;
    refer = rqzt('referential/lib/refer');
    refer.Ref = rqzt('referential/lib/ref');
    module.exports = refer  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/referential/lib/refer.js
  rqzt.define('referential/lib/refer', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Ref, refer;
    Ref = rqzt('referential/lib/ref');
    module.exports = refer = function (state, ref) {
      var fn, i, len, method, ref1, wrapper;
      if (ref == null) {
        ref = null
      }
      if (ref == null) {
        ref = new Ref(state)
      }
      wrapper = function (key) {
        return ref.get(key)
      };
      ref1 = [
        'value',
        'get',
        'set',
        'extend',
        'index',
        'ref'
      ];
      fn = function (method) {
        return wrapper[method] = function () {
          return ref[method].apply(ref, arguments)
        }
      };
      for (i = 0, len = ref1.length; i < len; i++) {
        method = ref1[i];
        fn(method)
      }
      wrapper.refer = function (key) {
        return refer(null, ref.ref(key))
      };
      wrapper.clone = function (key) {
        return refer(null, ref.clone(key))
      };
      return wrapper
    }  //# sourceMappingURL=refer.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/referential/lib/ref.js
  rqzt.define('referential/lib/ref', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Ref, extend, isArray, isNumber, isObject, isString;
    extend = rqzt('node.extend');
    isArray = rqzt('is-array');
    isNumber = rqzt('is-number');
    isObject = rqzt('is-object');
    isString = rqzt('is-string');
    module.exports = Ref = function () {
      function Ref(_value, parent, key1) {
        this._value = _value;
        this.parent = parent;
        this.key = key1;
        this._cache = {}
      }
      Ref.prototype._mutate = function () {
        return this._cache = {}
      };
      Ref.prototype.value = function (state) {
        if (!this.parent) {
          if (state != null) {
            this._value = state
          }
          return this._value
        }
        if (state != null) {
          return this.parent.set(this.key, state)
        } else {
          return this.parent.get(this.key)
        }
      };
      Ref.prototype.ref = function (key) {
        if (!key) {
          return this
        }
        return new Ref(null, this, key)
      };
      Ref.prototype.get = function (key) {
        if (!key) {
          return this.value()
        } else {
          if (this._cache[key]) {
            return this._cache[key]
          }
          return this._cache[key] = this.index(key)
        }
      };
      Ref.prototype.set = function (key, value) {
        this._mutate();
        if (value == null) {
          this.value(extend(this.value(), key))
        } else {
          this.index(key, value)
        }
        return this
      };
      Ref.prototype.extend = function (key, value) {
        var clone;
        this._mutate();
        if (value == null) {
          this.value(extend(true, this.value(), key))
        } else {
          if (isObject(value)) {
            this.value(extend(true, this.ref(key).get(), value))
          } else {
            clone = this.clone();
            this.set(key, value);
            this.value(extend(true, clone.get(), this.value()))
          }
        }
        return this
      };
      Ref.prototype.clone = function (key) {
        return new Ref(extend(true, {}, this.get(key)))
      };
      Ref.prototype.index = function (key, value, obj, prev) {
        var next, prop, props;
        if (obj == null) {
          obj = this.value()
        }
        if (this.parent) {
          return this.parent.index(this.key + '.' + key, value)
        }
        if (isNumber(key)) {
          key = String(key)
        }
        props = key.split('.');
        if (value == null) {
          while (prop = props.shift()) {
            if (!props.length) {
              return obj != null ? obj[prop] : void 0
            }
            obj = obj != null ? obj[prop] : void 0
          }
          return
        }
        while (prop = props.shift()) {
          if (!props.length) {
            return obj[prop] = value
          } else {
            next = props[0];
            if (obj[next] == null) {
              if (isNumber(next)) {
                if (obj[prop] == null) {
                  obj[prop] = []
                }
              } else {
                if (obj[prop] == null) {
                  obj[prop] = {}
                }
              }
            }
          }
          obj = obj[prop]
        }
      };
      return Ref
    }()  //# sourceMappingURL=ref.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/node.extend/index.js
  rqzt.define('node.extend', function (module, exports, __dirname, __filename, process) {
    module.exports = rqzt('node.extend/lib/extend')
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/node.extend/lib/extend.js
  rqzt.define('node.extend/lib/extend', function (module, exports, __dirname, __filename, process) {
    /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
    var is = rqzt('is');
    function extend() {
      var target = arguments[0] || {};
      var i = 1;
      var length = arguments.length;
      var deep = false;
      var options, name, src, copy, copy_is_array, clone;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      }
      // Handle case when target is a string or something (possible in deep copy)
      if (typeof target !== 'object' && !is.fn(target)) {
        target = {}
      }
      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        options = arguments[i];
        if (options != null) {
          if (typeof options === 'string') {
            options = options.split('')
          }
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
              if (copy_is_array) {
                copy_is_array = false;
                clone = src && is.array(src) ? src : []
              } else {
                clone = src && is.hash(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    }
    ;
    /**
 * @public
 */
    extend.version = '1.1.3';
    /**
 * Exports module.
 */
    module.exports = extend
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/node.extend/node_modules/is/index.js
  rqzt.define('is', function (module, exports, __dirname, __filename, process) {
    /* globals window, HTMLElement */
    'use strict';
    /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
    var objProto = Object.prototype;
    var owns = objProto.hasOwnProperty;
    var toStr = objProto.toString;
    var symbolValueOf;
    if (typeof Symbol === 'function') {
      symbolValueOf = Symbol.prototype.valueOf
    }
    var isActualNaN = function (value) {
      return value !== value
    };
    var NON_HOST_TYPES = {
      'boolean': 1,
      number: 1,
      string: 1,
      undefined: 1
    };
    var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
    var hexRegex = /^[A-Fa-f0-9]+$/;
    /**
 * Expose `is`
 */
    var is = {};
    /**
 * Test general.
 */
    /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
    is.a = is.type = function (value, type) {
      return typeof value === type
    };
    /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
    is.defined = function (value) {
      return typeof value !== 'undefined'
    };
    /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
    is.empty = function (value) {
      var type = toStr.call(value);
      var key;
      if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
        return value.length === 0
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (owns.call(value, key)) {
            return false
          }
        }
        return true
      }
      return !value
    };
    /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
    is.equal = function equal(value, other) {
      if (value === other) {
        return true
      }
      var type = toStr.call(value);
      var key;
      if (type !== toStr.call(other)) {
        return false
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (!is.equal(value[key], other[key]) || !(key in other)) {
            return false
          }
        }
        for (key in other) {
          if (!is.equal(value[key], other[key]) || !(key in value)) {
            return false
          }
        }
        return true
      }
      if (type === '[object Array]') {
        key = value.length;
        if (key !== other.length) {
          return false
        }
        while (key--) {
          if (!is.equal(value[key], other[key])) {
            return false
          }
        }
        return true
      }
      if (type === '[object Function]') {
        return value.prototype === other.prototype
      }
      if (type === '[object Date]') {
        return value.getTime() === other.getTime()
      }
      return false
    };
    /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
    is.hosted = function (value, host) {
      var type = typeof host[value];
      return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
    };
    /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
    is.instance = is['instanceof'] = function (value, constructor) {
      return value instanceof constructor
    };
    /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
    is.nil = is['null'] = function (value) {
      return value === null
    };
    /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
    is.undef = is.undefined = function (value) {
      return typeof value === 'undefined'
    };
    /**
 * Test arguments.
 */
    /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.args = is.arguments = function (value) {
      var isStandardArguments = toStr.call(value) === '[object Arguments]';
      var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
      return isStandardArguments || isOldArguments
    };
    /**
 * Test array.
 */
    /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
    is.array = Array.isArray || function (value) {
      return toStr.call(value) === '[object Array]'
    };
    /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
    is.args.empty = function (value) {
      return is.args(value) && value.length === 0
    };
    /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
    is.array.empty = function (value) {
      return is.array(value) && value.length === 0
    };
    /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.arraylike = function (value) {
      return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
    };
    /**
 * Test boolean.
 */
    /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
    is.bool = is['boolean'] = function (value) {
      return toStr.call(value) === '[object Boolean]'
    };
    /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
    is['false'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === false
    };
    /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
    is['true'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === true
    };
    /**
 * Test date.
 */
    /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
    is.date = function (value) {
      return toStr.call(value) === '[object Date]'
    };
    /**
 * is.date.valid
 * Test if `value` is a valid date.
 *
 * @param {Mixed} value value to test
 * @returns {Boolean} true if `value` is a valid date, false otherwise
 */
    is.date.valid = function (value) {
      return is.date(value) && !isNaN(Number(value))
    };
    /**
 * Test element.
 */
    /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
    is.element = function (value) {
      return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
    };
    /**
 * Test error.
 */
    /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
    is.error = function (value) {
      return toStr.call(value) === '[object Error]'
    };
    /**
 * Test function.
 */
    /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
    is.fn = is['function'] = function (value) {
      var isAlert = typeof window !== 'undefined' && value === window.alert;
      return isAlert || toStr.call(value) === '[object Function]'
    };
    /**
 * Test number.
 */
    /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
    is.number = function (value) {
      return toStr.call(value) === '[object Number]'
    };
    /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
    is.infinite = function (value) {
      return value === Infinity || value === -Infinity
    };
    /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
    is.decimal = function (value) {
      return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
    };
    /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
    is.divisibleBy = function (value, n) {
      var isDividendInfinite = is.infinite(value);
      var isDivisorInfinite = is.infinite(n);
      var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
      return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
    };
    /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
    is.integer = is['int'] = function (value) {
      return is.number(value) && !isActualNaN(value) && value % 1 === 0
    };
    /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
    is.maximum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value < others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
    is.minimum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value > others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
    is.nan = function (value) {
      return !is.number(value) || value !== value
    };
    /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
    is.even = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
    };
    /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
    is.odd = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
    };
    /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.ge = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value >= other
    };
    /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.gt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value > other
    };
    /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
    is.le = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value <= other
    };
    /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
    is.lt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value < other
    };
    /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
    is.within = function (value, start, finish) {
      if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
        throw new TypeError('all arguments must be numbers')
      }
      var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
      return isAnyInfinite || value >= start && value <= finish
    };
    /**
 * Test object.
 */
    /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
    is.object = function (value) {
      return toStr.call(value) === '[object Object]'
    };
    /**
 * is.primitive
 * Test if `value` is a primitive.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a primitive, false otherwise
 * @api public
 */
    is.primitive = function isPrimitive(value) {
      if (!value) {
        return true
      }
      if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {
        return false
      }
      return true
    };
    /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
    is.hash = function (value) {
      return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
    };
    /**
 * Test regexp.
 */
    /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
    is.regexp = function (value) {
      return toStr.call(value) === '[object RegExp]'
    };
    /**
 * Test string.
 */
    /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
    is.string = function (value) {
      return toStr.call(value) === '[object String]'
    };
    /**
 * Test base64 string.
 */
    /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
    is.base64 = function (value) {
      return is.string(value) && (!value.length || base64Regex.test(value))
    };
    /**
 * Test base64 string.
 */
    /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
    is.hex = function (value) {
      return is.string(value) && (!value.length || hexRegex.test(value))
    };
    /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
    is.symbol = function (value) {
      return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
    };
    module.exports = is
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/is-array/index.js
  rqzt.define('is-array', function (module, exports, __dirname, __filename, process) {
    /**
 * isArray
 */
    var isArray = Array.isArray;
    /**
 * toString
 */
    var str = Object.prototype.toString;
    /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
    module.exports = isArray || function (val) {
      return !!val && '[object Array]' == str.call(val)
    }
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/is-number/index.js
  rqzt.define('is-number', function (module, exports, __dirname, __filename, process) {
    /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
    'use strict';
    var typeOf = rqzt('kind-of');
    module.exports = function isNumber(num) {
      var type = typeOf(num);
      if (type !== 'number' && type !== 'string') {
        return false
      }
      var n = +num;
      return n - n + 1 >= 0 && num !== ''
    }
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/is-number/node_modules/kind-of/index.js
  rqzt.define('kind-of', function (module, exports, __dirname, __filename, process) {
    var isBuffer = rqzt('is-buffer');
    var toString = Object.prototype.toString;
    /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
    module.exports = function kindOf(val) {
      // primitivies
      if (typeof val === 'undefined') {
        return 'undefined'
      }
      if (val === null) {
        return 'null'
      }
      if (val === true || val === false || val instanceof Boolean) {
        return 'boolean'
      }
      if (typeof val === 'string' || val instanceof String) {
        return 'string'
      }
      if (typeof val === 'number' || val instanceof Number) {
        return 'number'
      }
      // functions
      if (typeof val === 'function' || val instanceof Function) {
        return 'function'
      }
      // array
      if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
        return 'array'
      }
      // check for instances of RegExp and Date before calling `toString`
      if (val instanceof RegExp) {
        return 'regexp'
      }
      if (val instanceof Date) {
        return 'date'
      }
      // other objects
      var type = toString.call(val);
      if (type === '[object RegExp]') {
        return 'regexp'
      }
      if (type === '[object Date]') {
        return 'date'
      }
      if (type === '[object Arguments]') {
        return 'arguments'
      }
      if (type === '[object Error]') {
        return 'error'
      }
      // buffer
      if (typeof Buffer !== 'undefined' && isBuffer(val)) {
        return 'buffer'
      }
      // es6: Map, WeakMap, Set, WeakSet
      if (type === '[object Set]') {
        return 'set'
      }
      if (type === '[object WeakSet]') {
        return 'weakset'
      }
      if (type === '[object Map]') {
        return 'map'
      }
      if (type === '[object WeakMap]') {
        return 'weakmap'
      }
      if (type === '[object Symbol]') {
        return 'symbol'
      }
      // typed arrays
      if (type === '[object Int8Array]') {
        return 'int8array'
      }
      if (type === '[object Uint8Array]') {
        return 'uint8array'
      }
      if (type === '[object Uint8ClampedArray]') {
        return 'uint8clampedarray'
      }
      if (type === '[object Int16Array]') {
        return 'int16array'
      }
      if (type === '[object Uint16Array]') {
        return 'uint16array'
      }
      if (type === '[object Int32Array]') {
        return 'int32array'
      }
      if (type === '[object Uint32Array]') {
        return 'uint32array'
      }
      if (type === '[object Float32Array]') {
        return 'float32array'
      }
      if (type === '[object Float64Array]') {
        return 'float64array'
      }
      // must be a plain object
      return 'object'
    }
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/is-number/node_modules/kind-of/node_modules/is-buffer/index.js
  rqzt.define('is-buffer', function (module, exports, __dirname, __filename, process) {
    /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }
    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/is-object/index.js
  rqzt.define('is-object', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: node_modules/crowdcontrol/node_modules/referential/node_modules/is-string/index.js
  rqzt.define('is-string', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject(value) {
      try {
        strValue.call(value);
        return true
      } catch (e) {
        return false
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = '[object String]';
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
    module.exports = function isString(value) {
      if (typeof value === 'string') {
        return true
      }
      if (typeof value !== 'object') {
        return false
      }
      return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
    }
  });
  // source: node_modules/crowdcontrol/node_modules/promise-settle/index.js
  rqzt.define('promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = rqzt('promise-settle/lib/promise-settle')
  });
  // source: node_modules/crowdcontrol/node_modules/promise-settle/lib/promise-settle.js
  rqzt.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = settle;
    function settle(promises) {
      return Promise.resolve().then(function () {
        return promises
      }).then(function (promises) {
        if (!Array.isArray(promises))
          throw new TypeError('Expected an array of Promises');
        var promiseResults = promises.map(function (promise) {
          return Promise.resolve().then(function () {
            return promise
          }).then(function (result) {
            return promiseResult(result)
          }).catch(function (err) {
            return promiseResult(null, err)
          })
        });
        return Promise.all(promiseResults)
      })
    }
    function promiseResult(result, err) {
      var isFulfilled = typeof err === 'undefined';
      var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
      var isRejected = !isFulfilled;
      var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
      return {
        isFulfilled: returns.bind(isFulfilled),
        isRejected: returns.bind(isRejected),
        value: value,
        reason: reason
      }
    }
    function returns() {
      return this
    }
    function throws() {
      throw this
    }
  });
  // source: node_modules/crowdcontrol/lib/views/input.js
  rqzt.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Input, View, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    Input = function (superClass) {
      extend(Input, superClass);
      function Input() {
        return Input.__super__.constructor.apply(this, arguments)
      }
      Input.prototype.input = null;
      Input.prototype.valid = false;
      Input.prototype.errorMessage = '';
      Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
      Input.prototype.beforeInit = function () {
        return this.html += this.errorHtml
      };
      Input.prototype.init = function () {
        return this.input.on('validate', function (_this) {
          return function (pRef) {
            return _this.validate(pRef)
          }
        }(this))
      };
      Input.prototype.getValue = function (event) {
        return event.target.value
      };
      Input.prototype.change = function (event) {
        var name, ref, ref1, value;
        ref1 = this.input, ref = ref1.ref, name = ref1.name;
        value = this.getValue(event);
        if (value === ref.get(name)) {
          return
        }
        this.input.ref.set(name, value);
        this.clearError();
        return this.validate()
      };
      Input.prototype.error = function (err) {
        var ref1;
        return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
      };
      Input.prototype.changed = function () {
      };
      Input.prototype.clearError = function () {
        return this.errorMessage = ''
      };
      Input.prototype.validate = function (pRef) {
        var p;
        p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
          return function (value) {
            _this.changed(value);
            _this.valid = true;
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.error(err);
            _this.valid = false;
            _this.update();
            throw err
          }
        }(this));
        if (pRef != null) {
          pRef.p = p
        }
        return p
      };
      return Input
    }(View);
    module.exports = Input  //# sourceMappingURL=input.js.map
  });
  // source: src/views/index.coffee
  rqzt.define('./views', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Controls: rqzt('./views/controls'),
      List: rqzt('./views/list'),
      ListItem: rqzt('./views/list-item'),
      Login: rqzt('./views/login'),
      register: function () {
        Controls.register();
        List.register();
        ListItem.register();
        return Login.register()
      }
    }
  });
  // source: src/views/controls/index.coffee
  rqzt.define('./views/controls', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Checkbox: rqzt('./views/controls/checkbox'),
      Password: rqzt('./views/controls/password'),
      Select: rqzt('./views/controls/select'),
      SelectCountry: rqzt('./views/controls/select-country'),
      SelectState: rqzt('./views/controls/select-state'),
      Text: rqzt('./views/controls/text'),
      TextArea: rqzt('./views/controls/textarea'),
      register: function () {
        this.Checkbox.register();
        this.Password.register();
        this.Select.register();
        this.SelectCountry.register();
        this.SelectState.register();
        this.Text.register();
        return this.TextArea.register()
      }
    }
  });
  // source: src/views/controls/checkbox.coffee
  rqzt.define('./views/controls/checkbox', function (module, exports, __dirname, __filename, process) {
    var Checkbox, Control, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./views/controls/control');
    module.exports = Checkbox = function (superClass) {
      extend(Checkbox, superClass);
      function Checkbox() {
        return Checkbox.__super__.constructor.apply(this, arguments)
      }
      Checkbox.prototype.tag = 'checkbox-control';
      Checkbox.prototype.html = rqzt('./templates/controls/checkbox');
      Checkbox.prototype.getValue = function (event) {
        return event.target.checked
      };
      return Checkbox
    }(Control)
  });
  // source: src/views/controls/control.coffee
  rqzt.define('./views/controls/control', function (module, exports, __dirname, __filename, process) {
    var Control, CrowdControl, Events, m, riot, scrolling, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    riot = rqzt('riot/riot');
    scrolling = false;
    module.exports = Control = function (superClass) {
      extend(Control, superClass);
      function Control() {
        return Control.__super__.constructor.apply(this, arguments)
      }
      Control.prototype.init = function () {
        if (this.input == null && this.inputs != null) {
          this.input = this.inputs[this.lookup]
        }
        if (this.input != null) {
          return Control.__super__.init.apply(this, arguments)
        }
      };
      Control.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim() : void 0
      };
      Control.prototype.error = function (err) {
        if (err instanceof DOMException) {
          void 0;
          return
        }
        Control.__super__.error.apply(this, arguments);
        if (!scrolling) {
          scrolling = true;
          $('html, body').animate({ scrollTop: $(this.root).offset().top - $(window).height() / 2 }, {
            complete: function () {
              return scrolling = false
            },
            duration: 500
          })
        }
        return m.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.change = function () {
        Control.__super__.change.apply(this, arguments);
        return m.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.changed = function (value) {
        m.trigger(Events.ChangeSuccess, this.input.name, value);
        return riot.update()
      };
      Control.prototype.value = function () {
        return this.input.ref(this.input.name)
      };
      return Control
    }(CrowdControl.Views.Input)
  });
  // source: src/mediator.coffee
  rqzt.define('./mediator', function (module, exports, __dirname, __filename, process) {
    var riot;
    riot = rqzt('riot/riot');
    module.exports = riot.observable({})
  });
  // source: node_modules/riot/riot.js
  rqzt.define('riot/riot', function (module, exports, __dirname, __filename, process) {
    /* Riot v3.3.0, @license MIT */
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.riot = global.riot || {})
    }(this, function (exports) {
      'use strict';
      var __TAGS_CACHE = [];
      var __TAG_IMPL = {};
      var GLOBAL_MIXIN = '__global_mixin';
      var ATTRS_PREFIX = 'riot-';
      var REF_DIRECTIVES = [
        'ref',
        'data-ref'
      ];
      var IS_DIRECTIVE = 'data-is';
      var CONDITIONAL_DIRECTIVE = 'if';
      var LOOP_DIRECTIVE = 'each';
      var LOOP_NO_REORDER_DIRECTIVE = 'no-reorder';
      var SHOW_DIRECTIVE = 'show';
      var HIDE_DIRECTIVE = 'hide';
      var T_STRING = 'string';
      var T_OBJECT = 'object';
      var T_UNDEF = 'undefined';
      var T_FUNCTION = 'function';
      var XLINK_NS = 'http://www.w3.org/1999/xlink';
      var XLINK_REGEX = /^xlink:(\w+)/;
      var WIN = typeof window === T_UNDEF ? undefined : window;
      var RE_SPECIAL_TAGS = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/;
      var RE_SPECIAL_TAGS_NO_OPTION = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;
      var RE_RESERVED_NAMES = /^(?:_(?:item|id|parent)|update|root|(?:un)?mount|mixin|is(?:Mounted|Loop)|tags|refs|parent|opts|trigger|o(?:n|ff|ne))$/;
      var RE_SVG_TAGS = /^(altGlyph|animate(?:Color)?|circle|clipPath|defs|ellipse|fe(?:Blend|ColorMatrix|ComponentTransfer|Composite|ConvolveMatrix|DiffuseLighting|DisplacementMap|Flood|GaussianBlur|Image|Merge|Morphology|Offset|SpecularLighting|Tile|Turbulence)|filter|font|foreignObject|g(?:lyph)?(?:Ref)?|image|line(?:arGradient)?|ma(?:rker|sk)|missing-glyph|path|pattern|poly(?:gon|line)|radialGradient|rect|stop|svg|switch|symbol|text(?:Path)?|tref|tspan|use)$/;
      var RE_HTML_ATTRS = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
      var CASE_SENSITIVE_ATTRIBUTES = { 'viewbox': 'viewBox' };
      var RE_BOOL_ATTRS = /^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/;
      var IE_VERSION = (WIN && WIN.document || {}).documentMode | 0;
      /**
 * Check whether a DOM node must be considered a part of an svg document
 * @param   { String } name -
 * @returns { Boolean } -
 */
      function isSVGTag(name) {
        return RE_SVG_TAGS.test(name)
      }
      /**
 * Check Check if the passed argument is undefined
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isBoolAttr(value) {
        return RE_BOOL_ATTRS.test(value)
      }
      /**
 * Check if passed argument is a function
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isFunction(value) {
        return typeof value === T_FUNCTION
      }
      /**
 * Check if passed argument is an object, exclude null
 * NOTE: use isObject(x) && !isArray(x) to excludes arrays.
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isObject(value) {
        return value && typeof value === T_OBJECT  // typeof null is 'object'
      }
      /**
 * Check if passed argument is undefined
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isUndefined(value) {
        return typeof value === T_UNDEF
      }
      /**
 * Check if passed argument is a string
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isString(value) {
        return typeof value === T_STRING
      }
      /**
 * Check if passed argument is empty. Different from falsy, because we dont consider 0 or false to be blank
 * @param { * } value -
 * @returns { Boolean } -
 */
      function isBlank(value) {
        return isUndefined(value) || value === null || value === ''
      }
      /**
 * Check if passed argument is a kind of array
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isArray(value) {
        return Array.isArray(value) || value instanceof Array
      }
      /**
 * Check whether object's property could be overridden
 * @param   { Object }  obj - source object
 * @param   { String }  key - object property
 * @returns { Boolean } -
 */
      function isWritable(obj, key) {
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        return isUndefined(obj[key]) || descriptor && descriptor.writable
      }
      /**
 * Check if passed argument is a reserved name
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isReservedName(value) {
        return RE_RESERVED_NAMES.test(value)
      }
      var check = Object.freeze({
        isSVGTag: isSVGTag,
        isBoolAttr: isBoolAttr,
        isFunction: isFunction,
        isObject: isObject,
        isUndefined: isUndefined,
        isString: isString,
        isBlank: isBlank,
        isArray: isArray,
        isWritable: isWritable,
        isReservedName: isReservedName
      });
      /**
 * Shorter and fast way to select multiple nodes in the DOM
 * @param   { String } selector - DOM selector
 * @param   { Object } ctx - DOM node where the targets of our search will is located
 * @returns { Object } dom nodes found
 */
      function $$(selector, ctx) {
        return (ctx || document).querySelectorAll(selector)
      }
      /**
 * Shorter and fast way to select a single node in the DOM
 * @param   { String } selector - unique dom selector
 * @param   { Object } ctx - DOM node where the target of our search will is located
 * @returns { Object } dom node found
 */
      function $(selector, ctx) {
        return (ctx || document).querySelector(selector)
      }
      /**
 * Create a document fragment
 * @returns { Object } document fragment
 */
      function createFrag() {
        return document.createDocumentFragment()
      }
      /**
 * Create a document text node
 * @returns { Object } create a text node to use as placeholder
 */
      function createDOMPlaceholder() {
        return document.createTextNode('')
      }
      /**
 * Create a generic DOM node
 * @param   { String } name - name of the DOM node we want to create
 * @param   { Boolean } isSvg - should we use a SVG as parent node?
 * @returns { Object } DOM node just created
 */
      function mkEl(name, isSvg) {
        return isSvg ? document.createElementNS('http://www.w3.org/2000/svg', 'svg') : document.createElement(name)
      }
      /**
 * Get the outer html of any DOM node SVGs included
 * @param   { Object } el - DOM node to parse
 * @returns { String } el.outerHTML
 */
      function getOuterHTML(el) {
        if (el.outerHTML) {
          return el.outerHTML
        }  // some browsers do not support outerHTML on the SVGs tags
        else {
          var container = mkEl('div');
          container.appendChild(el.cloneNode(true));
          return container.innerHTML
        }
      }
      /**
 * Set the inner html of any DOM node SVGs included
 * @param { Object } container - DOM node where we'll inject new html
 * @param { String } html - html to inject
 */
      function setInnerHTML(container, html) {
        if (!isUndefined(container.innerHTML)) {
          container.innerHTML = html
        }  // some browsers do not support innerHTML on the SVGs tags
        else {
          var doc = new DOMParser().parseFromString(html, 'application/xml');
          var node = container.ownerDocument.importNode(doc.documentElement, true);
          container.appendChild(node)
        }
      }
      /**
 * Remove any DOM attribute from a node
 * @param   { Object } dom - DOM node we want to update
 * @param   { String } name - name of the property we want to remove
 */
      function remAttr(dom, name) {
        dom.removeAttribute(name)
      }
      /**
 * Get the value of any DOM attribute on a node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { String } name - name of the attribute we want to get
 * @returns { String | undefined } name of the node attribute whether it exists
 */
      function getAttr(dom, name) {
        return dom.getAttribute(name)
      }
      /**
 * Set any DOM attribute
 * @param { Object } dom - DOM node we want to update
 * @param { String } name - name of the property we want to set
 * @param { String } val - value of the property we want to set
 */
      function setAttr(dom, name, val) {
        var xlink = XLINK_REGEX.exec(name);
        if (xlink && xlink[1]) {
          dom.setAttributeNS(XLINK_NS, xlink[1], val)
        } else {
          dom.setAttribute(name, val)
        }
      }
      /**
 * Insert safely a tag to fix #1962 #1649
 * @param   { HTMLElement } root - children container
 * @param   { HTMLElement } curr - node to insert
 * @param   { HTMLElement } next - node that should preceed the current node inserted
 */
      function safeInsert(root, curr, next) {
        root.insertBefore(curr, next.parentNode && next)
      }
      /**
 * Minimize risk: only zero or one _space_ between attr & value
 * @param   { String }   html - html string we want to parse
 * @param   { Function } fn - callback function to apply on any attribute found
 */
      function walkAttrs(html, fn) {
        if (!html) {
          return
        }
        var m;
        while (m = RE_HTML_ATTRS.exec(html)) {
          fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
        }
      }
      /**
 * Walk down recursively all the children tags starting dom node
 * @param   { Object }   dom - starting node where we will start the recursion
 * @param   { Function } fn - callback to transform the child node just found
 * @param   { Object }   context - fn can optionally return an object, which is passed to children
 */
      function walkNodes(dom, fn, context) {
        if (dom) {
          var res = fn(dom, context);
          var next;
          // stop the recursion
          if (res === false) {
            return
          }
          dom = dom.firstChild;
          while (dom) {
            next = dom.nextSibling;
            walkNodes(dom, fn, res);
            dom = next
          }
        }
      }
      var dom = Object.freeze({
        $$: $$,
        $: $,
        createFrag: createFrag,
        createDOMPlaceholder: createDOMPlaceholder,
        mkEl: mkEl,
        getOuterHTML: getOuterHTML,
        setInnerHTML: setInnerHTML,
        remAttr: remAttr,
        getAttr: getAttr,
        setAttr: setAttr,
        safeInsert: safeInsert,
        walkAttrs: walkAttrs,
        walkNodes: walkNodes
      });
      var styleNode;
      var cssTextProp;
      var byName = {};
      var remainder = [];
      var needsInject = false;
      // skip the following code on the server
      if (WIN) {
        styleNode = function () {
          // create a new style element with the correct type
          var newNode = mkEl('style');
          setAttr(newNode, 'type', 'text/css');
          // replace any user node or insert the new one into the head
          var userNode = $('style[type=riot]');
          if (userNode) {
            if (userNode.id) {
              newNode.id = userNode.id
            }
            userNode.parentNode.replaceChild(newNode, userNode)
          } else {
            document.getElementsByTagName('head')[0].appendChild(newNode)
          }
          return newNode
        }();
        cssTextProp = styleNode.styleSheet
      }
      /**
 * Object that will be used to inject and manage the css of every tag instance
 */
      var styleManager = {
        styleNode: styleNode,
        /**
   * Save a tag style to be later injected into DOM
   * @param { String } css - css string
   * @param { String } name - if it's passed we will map the css to a tagname
   */
        add: function add(css, name) {
          if (name) {
            byName[name] = css
          } else {
            remainder.push(css)
          }
          needsInject = true
        },
        /**
   * Inject all previously saved tag styles into DOM
   * innerHTML seems slow: http://jsperf.com/riot-insert-style
   */
        inject: function inject() {
          if (!WIN || !needsInject) {
            return
          }
          needsInject = false;
          var style = Object.keys(byName).map(function (k) {
            return byName[k]
          }).concat(remainder).join('\n');
          if (cssTextProp) {
            cssTextProp.cssText = style
          } else {
            styleNode.innerHTML = style
          }
        }
      };
      /**
 * The riot template engine
 * @version v3.0.2
 */
      /**
 * riot.util.brackets
 *
 * - `brackets    ` - Returns a string or regex based on its parameter
 * - `brackets.set` - Change the current riot brackets
 *
 * @module
 */
      /* global riot */
      var brackets = function (UNDEF) {
        var REGLOB = 'g', R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g, R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, S_QBLOCKS = R_STRINGS.source + '|' + /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' + /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source, UNSUPPORTED = RegExp('[\\' + 'x00-\\x1F<>a-zA-Z0-9\'",;\\\\]'), NEED_ESCAPE = /(?=[[\]()*+?.^$|])/g, FINDBRACES = {
            '(': RegExp('([()])|' + S_QBLOCKS, REGLOB),
            '[': RegExp('([[\\]])|' + S_QBLOCKS, REGLOB),
            '{': RegExp('([{}])|' + S_QBLOCKS, REGLOB)
          }, DEFAULT = '{ }';
        var _pairs = [
          '{',
          '}',
          '{',
          '}',
          /{[^}]*}/,
          /\\([{}])/g,
          /\\({)|{/g,
          RegExp('\\\\(})|([[({])|(})|' + S_QBLOCKS, REGLOB),
          DEFAULT,
          /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
          /(^|[^\\]){=[\S\s]*?}/
        ];
        var cachedBrackets = UNDEF, _regex, _cache = [], _settings;
        function _loopback(re) {
          return re
        }
        function _rewrite(re, bp) {
          if (!bp) {
            bp = _cache
          }
          return new RegExp(re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : '')
        }
        function _create(pair) {
          if (pair === DEFAULT) {
            return _pairs
          }
          var arr = pair.split(' ');
          if (arr.length !== 2 || UNSUPPORTED.test(pair)) {
            throw new Error('Unsupported brackets "' + pair + '"')
          }
          arr = arr.concat(pair.replace(NEED_ESCAPE, '\\').split(' '));
          arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
          arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
          arr[6] = _rewrite(_pairs[6], arr);
          arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCKS, REGLOB);
          arr[8] = pair;
          return arr
        }
        function _brackets(reOrIdx) {
          return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
        }
        _brackets.split = function split(str, tmpl, _bp) {
          // istanbul ignore next: _bp is for the compiler
          if (!_bp) {
            _bp = _cache
          }
          var parts = [], match, isexpr, start, pos, re = _bp[6];
          isexpr = start = re.lastIndex = 0;
          while (match = re.exec(str)) {
            pos = match.index;
            if (isexpr) {
              if (match[2]) {
                re.lastIndex = skipBraces(str, match[2], re.lastIndex);
                continue
              }
              if (!match[3]) {
                continue
              }
            }
            if (!match[1]) {
              unescapeStr(str.slice(start, pos));
              start = re.lastIndex;
              re = _bp[6 + (isexpr ^= 1)];
              re.lastIndex = start
            }
          }
          if (str && start < str.length) {
            unescapeStr(str.slice(start))
          }
          return parts;
          function unescapeStr(s) {
            if (tmpl || isexpr) {
              parts.push(s && s.replace(_bp[5], '$1'))
            } else {
              parts.push(s)
            }
          }
          function skipBraces(s, ch, ix) {
            var match, recch = FINDBRACES[ch];
            recch.lastIndex = ix;
            ix = 1;
            while (match = recch.exec(s)) {
              if (match[1] && !(match[1] === ch ? ++ix : --ix)) {
                break
              }
            }
            return ix ? s.length : recch.lastIndex
          }
        };
        _brackets.hasExpr = function hasExpr(str) {
          return _cache[4].test(str)
        };
        _brackets.loopKeys = function loopKeys(expr) {
          var m = expr.match(_cache[9]);
          return m ? {
            key: m[1],
            pos: m[2],
            val: _cache[0] + m[3].trim() + _cache[1]
          } : { val: expr.trim() }
        };
        _brackets.array = function array(pair) {
          return pair ? _create(pair) : _cache
        };
        function _reset(pair) {
          if ((pair || (pair = DEFAULT)) !== _cache[8]) {
            _cache = _create(pair);
            _regex = pair === DEFAULT ? _loopback : _rewrite;
            _cache[9] = _regex(_pairs[9])
          }
          cachedBrackets = pair
        }
        function _setSettings(o) {
          var b;
          o = o || {};
          b = o.brackets;
          Object.defineProperty(o, 'brackets', {
            set: _reset,
            get: function () {
              return cachedBrackets
            },
            enumerable: true
          });
          _settings = o;
          _reset(b)
        }
        Object.defineProperty(_brackets, 'settings', {
          set: _setSettings,
          get: function () {
            return _settings
          }
        });
        /* istanbul ignore next: in the browser riot is always in the scope */
        _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
        _brackets.set = _reset;
        _brackets.R_STRINGS = R_STRINGS;
        _brackets.R_MLCOMMS = R_MLCOMMS;
        _brackets.S_QBLOCKS = S_QBLOCKS;
        return _brackets
      }();
      /**
 * @module tmpl
 *
 * tmpl          - Root function, returns the template value, render with data
 * tmpl.hasExpr  - Test the existence of a expression inside a string
 * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
 */
      var tmpl = function () {
        var _cache = {};
        function _tmpl(str, data) {
          if (!str) {
            return str
          }
          return (_cache[str] || (_cache[str] = _create(str))).call(data, _logErr)
        }
        _tmpl.hasExpr = brackets.hasExpr;
        _tmpl.loopKeys = brackets.loopKeys;
        // istanbul ignore next
        _tmpl.clearCache = function () {
          _cache = {}
        };
        _tmpl.errorHandler = null;
        function _logErr(err, ctx) {
          err.riotData = {
            tagName: ctx && ctx.__ && ctx.__.tagName,
            _riot_id: ctx && ctx._riot_id
          };
          if (_tmpl.errorHandler) {
            _tmpl.errorHandler(err)
          } else if (typeof console !== 'undefined' && typeof console.error === 'function') {
            if (err.riotData.tagName) {
              void 0
            }
            void 0
          }
        }
        function _create(str) {
          var expr = _getTmpl(str);
          if (expr.slice(0, 11) !== 'try{return ') {
            expr = 'return ' + expr
          }
          return new Function('E', expr + ';')  // eslint-disable-line no-new-func
        }
        var CH_IDEXPR = String.fromCharCode(8279), RE_CSNAME = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/, RE_QBLOCK = RegExp(brackets.S_QBLOCKS, 'g'), RE_DQUOTE = /\u2057/g, RE_QBMARK = /\u2057(\d+)~/g;
        function _getTmpl(str) {
          var qstr = [], expr, parts = brackets.split(str.replace(RE_DQUOTE, '"'), 1);
          if (parts.length > 2 || parts[0]) {
            var i, j, list = [];
            for (i = j = 0; i < parts.length; ++i) {
              expr = parts[i];
              if (expr && (expr = i & 1 ? _parseExpr(expr, 1, qstr) : '"' + expr.replace(/\\/g, '\\\\').replace(/\r\n?|\n/g, '\\n').replace(/"/g, '\\"') + '"')) {
                list[j++] = expr
              }
            }
            expr = j < 2 ? list[0] : '[' + list.join(',') + '].join("")'
          } else {
            expr = _parseExpr(parts[1], 0, qstr)
          }
          if (qstr[0]) {
            expr = expr.replace(RE_QBMARK, function (_, pos) {
              return qstr[pos].replace(/\r/g, '\\r').replace(/\n/g, '\\n')
            })
          }
          return expr
        }
        var RE_BREND = {
          '(': /[()]/g,
          '[': /[[\]]/g,
          '{': /[{}]/g
        };
        function _parseExpr(expr, asText, qstr) {
          expr = expr.replace(RE_QBLOCK, function (s, div) {
            return s.length > 2 && !div ? CH_IDEXPR + (qstr.push(s) - 1) + '~' : s
          }).replace(/\s+/g, ' ').trim().replace(/\ ?([[\({},?\.:])\ ?/g, '$1');
          if (expr) {
            var list = [], cnt = 0, match;
            while (expr && (match = expr.match(RE_CSNAME)) && !match.index) {
              var key, jsb, re = /,|([[{(])|$/g;
              expr = RegExp.rightContext;
              key = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];
              while (jsb = (match = re.exec(expr))[1]) {
                skipBraces(jsb, re)
              }
              jsb = expr.slice(0, match.index);
              expr = RegExp.rightContext;
              list[cnt++] = _wrapExpr(jsb, 1, key)
            }
            expr = !cnt ? _wrapExpr(expr, asText) : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0]
          }
          return expr;
          function skipBraces(ch, re) {
            var mm, lv = 1, ir = RE_BREND[ch];
            ir.lastIndex = re.lastIndex;
            while (mm = ir.exec(expr)) {
              if (mm[0] === ch) {
                ++lv
              } else if (!--lv) {
                break
              }
            }
            re.lastIndex = lv ? expr.length : ir.lastIndex
          }
        }
        // istanbul ignore next: not both
        var
          // eslint-disable-next-line max-len
          JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').', JS_VARNAME = /[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g, JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;
        function _wrapExpr(expr, asText, key) {
          var tb;
          expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
            if (mvar) {
              pos = tb ? 0 : pos + match.length;
              if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
                match = p + '("' + mvar + JS_CONTEXT + mvar;
                if (pos) {
                  tb = (s = s[pos]) === '.' || s === '(' || s === '['
                }
              } else if (pos) {
                tb = !JS_NOPROPS.test(s.slice(pos))
              }
            }
            return match
          });
          if (tb) {
            expr = 'try{return ' + expr + '}catch(e){E(e,this)}'
          }
          if (key) {
            expr = (tb ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')') + '?"' + key + '":""'
          } else if (asText) {
            expr = 'function(v){' + (tb ? expr.replace('return ', 'v=') : 'v=(' + expr + ')') + ';return v||v===0?v:""}.call(this)'
          }
          return expr
        }
        _tmpl.version = brackets.version = 'v3.0.2';
        return _tmpl
      }();
      var observable$1 = function (el) {
        /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
        el = el || {};
        /**
   * Private variables
   */
        var callbacks = {}, slice = Array.prototype.slice;
        /**
   * Public Api
   */
        // extend the el object adding the observable methods
        Object.defineProperties(el, {
          /**
     * Listen to the given `event` ands
     * execute the `callback` each time an event is triggered.
     * @param  { String } event - event id
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
          on: {
            value: function (event, fn) {
              if (typeof fn == 'function') {
                (callbacks[event] = callbacks[event] || []).push(fn)
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Removes the given `event` listeners
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          off: {
            value: function (event, fn) {
              if (event == '*' && !fn) {
                callbacks = {}
              } else {
                if (fn) {
                  var arr = callbacks[event];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn) {
                      arr.splice(i--, 1)
                    }
                  }
                } else {
                  delete callbacks[event]
                }
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Listen to the given `event` and
     * execute the `callback` at most once
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          one: {
            value: function (event, fn) {
              function on() {
                el.off(event, on);
                fn.apply(el, arguments)
              }
              return el.on(event, on)
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Execute all callback functions that listen to
     * the given `event`
     * @param   { String } event - event id
     * @returns { Object } el
     */
          trigger: {
            value: function (event) {
              var arguments$1 = arguments;
              // getting the arguments
              var arglen = arguments.length - 1, args = new Array(arglen), fns, fn, i;
              for (i = 0; i < arglen; i++) {
                args[i] = arguments$1[i + 1]  // skip first argument
              }
              fns = slice.call(callbacks[event] || [], 0);
              for (i = 0; fn = fns[i]; ++i) {
                fn.apply(el, args)
              }
              if (callbacks['*'] && event != '*') {
                el.trigger.apply(el, [
                  '*',
                  event
                ].concat(args))
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          }
        });
        return el
      };
      /**
 * Specialized function for looping an array-like collection with `each={}`
 * @param   { Array } list - collection of items
 * @param   {Function} fn - callback function
 * @returns { Array } the array looped
 */
      function each(list, fn) {
        var len = list ? list.length : 0;
        for (var i = 0, el; i < len; ++i) {
          el = list[i];
          // return false -> current item was removed by fn during the loop
          if (fn(el, i) === false) {
            i--
          }
        }
        return list
      }
      /**
 * Check whether an array contains an item
 * @param   { Array } array - target array
 * @param   { * } item - item to test
 * @returns { Boolean } -
 */
      function contains(array, item) {
        return array.indexOf(item) !== -1
      }
      /**
 * Convert a string containing dashes to camel case
 * @param   { String } str - input string
 * @returns { String } my-string -> myString
 */
      function toCamel(str) {
        return str.replace(/-(\w)/g, function (_, c) {
          return c.toUpperCase()
        })
      }
      /**
 * Faster String startsWith alternative
 * @param   { String } str - source string
 * @param   { String } value - test string
 * @returns { Boolean } -
 */
      function startsWith(str, value) {
        return str.slice(0, value.length) === value
      }
      /**
 * Helper function to set an immutable property
 * @param   { Object } el - object where the new property will be set
 * @param   { String } key - object key where the new property will be stored
 * @param   { * } value - value of the new property
 * @param   { Object } options - set the propery overriding the default options
 * @returns { Object } - the initial object
 */
      function defineProperty(el, key, value, options) {
        Object.defineProperty(el, key, extend({
          value: value,
          enumerable: false,
          writable: false,
          configurable: true
        }, options));
        return el
      }
      /**
 * Extend any object with other properties
 * @param   { Object } src - source object
 * @returns { Object } the resulting extended object
 *
 * var obj = { foo: 'baz' }
 * extend(obj, {bar: 'bar', foo: 'bar'})
 * console.log(obj) => {bar: 'bar', foo: 'bar'}
 *
 */
      function extend(src) {
        var obj, args = arguments;
        for (var i = 1; i < args.length; ++i) {
          if (obj = args[i]) {
            for (var key in obj) {
              // check if this property of the source object could be overridden
              if (isWritable(src, key)) {
                src[key] = obj[key]
              }
            }
          }
        }
        return src
      }
      var misc = Object.freeze({
        each: each,
        contains: contains,
        toCamel: toCamel,
        startsWith: startsWith,
        defineProperty: defineProperty,
        extend: extend
      });
      var settings$1 = extend(Object.create(brackets.settings), { skipAnonymousTags: true });
      var EVENTS_PREFIX_REGEX = /^on/;
      /**
 * Trigger DOM events
 * @param   { HTMLElement } dom - dom element target of the event
 * @param   { Function } handler - user function
 * @param   { Object } e - event object
 */
      function handleEvent(dom, handler, e) {
        var ptag = this.__.parent, item = this.__.item;
        if (!item) {
          while (ptag && !item) {
            item = ptag.__.item;
            ptag = ptag.__.parent
          }
        }
        // override the event properties
        if (isWritable(e, 'currentTarget')) {
          e.currentTarget = dom
        }
        if (isWritable(e, 'target')) {
          e.target = e.srcElement
        }
        if (isWritable(e, 'which')) {
          e.which = e.charCode || e.keyCode
        }
        e.item = item;
        handler.call(this, e);
        if (!e.preventUpdate) {
          var p = getImmediateCustomParentTag(this);
          // fixes #2083
          if (p.isMounted) {
            p.update()
          }
        }
      }
      /**
 * Attach an event to a DOM node
 * @param { String } name - event name
 * @param { Function } handler - event callback
 * @param { Object } dom - dom node
 * @param { Tag } tag - tag instance
 */
      function setEventHandler(name, handler, dom, tag) {
        var eventName, cb = handleEvent.bind(tag, dom, handler);
        if (!dom.addEventListener) {
          dom[name] = cb;
          return
        }
        // avoid to bind twice the same event
        dom[name] = null;
        // normalize event name
        eventName = name.replace(EVENTS_PREFIX_REGEX, '');
        // cache the callback directly on the DOM node
        if (!dom._riotEvents) {
          dom._riotEvents = {}
        }
        if (dom._riotEvents[name]) {
          dom.removeEventListener(eventName, dom._riotEvents[name])
        }
        dom._riotEvents[name] = cb;
        dom.addEventListener(eventName, cb, false)
      }
      /**
 * Update dynamically created data-is tags with changing expressions
 * @param { Object } expr - expression tag and expression info
 * @param { Tag } parent - parent for tag creation
 */
      function updateDataIs(expr, parent) {
        var tagName = tmpl(expr.value, parent), conf, isVirtual, head, ref;
        if (expr.tag && expr.tagName === tagName) {
          expr.tag.update();
          return
        }
        isVirtual = expr.dom.tagName === 'VIRTUAL';
        // sync _parent to accommodate changing tagnames
        if (expr.tag) {
          // need placeholder before unmount
          if (isVirtual) {
            head = expr.tag.__.head;
            ref = createDOMPlaceholder();
            head.parentNode.insertBefore(ref, head)
          }
          expr.tag.unmount(true)
        }
        expr.impl = __TAG_IMPL[tagName];
        conf = {
          root: expr.dom,
          parent: parent,
          hasImpl: true,
          tagName: tagName
        };
        expr.tag = initChildTag(expr.impl, conf, expr.dom.innerHTML, parent);
        each(expr.attrs, function (a) {
          return setAttr(expr.tag.root, a.name, a.value)
        });
        expr.tagName = tagName;
        expr.tag.mount();
        if (isVirtual) {
          makeReplaceVirtual(expr.tag, ref || expr.tag.root)
        }
        // root exist first time, after use placeholder
        // parent is the placeholder tag, not the dynamic tag so clean up
        parent.__.onUnmount = function () {
          var delName = expr.tag.opts.dataIs, tags = expr.tag.parent.tags, _tags = expr.tag.__.parent.tags;
          arrayishRemove(tags, delName, expr.tag);
          arrayishRemove(_tags, delName, expr.tag);
          expr.tag.unmount()
        }
      }
      /**
 * Update on single tag expression
 * @this Tag
 * @param { Object } expr - expression logic
 * @returns { undefined }
 */
      function updateExpression(expr) {
        if (this.root && getAttr(this.root, 'virtualized')) {
          return
        }
        var dom = expr.dom, attrName = expr.attr, isToggle = contains([
            SHOW_DIRECTIVE,
            HIDE_DIRECTIVE
          ], attrName), value = tmpl(expr.expr, this), isValueAttr = attrName === 'riot-value', isVirtual = expr.root && expr.root.tagName === 'VIRTUAL', parent = dom && (expr.parent || dom.parentNode), old;
        if (expr.bool) {
          value = value ? attrName : false
        } else if (isUndefined(value) || value === null) {
          value = ''
        }
        if (expr._riot_id) {
          // if it's a tag
          if (expr.isMounted) {
            expr.update()  // if it hasn't been mounted yet, do that now.
          } else {
            expr.mount();
            if (isVirtual) {
              makeReplaceVirtual(expr, expr.root)
            }
          }
          return
        }
        old = expr.value;
        expr.value = value;
        if (expr.update) {
          expr.update();
          return
        }
        if (expr.isRtag && value) {
          return updateDataIs(expr, this)
        }
        if (old === value) {
          return
        }
        // no change, so nothing more to do
        if (isValueAttr && dom.value === value) {
          return
        }
        // textarea and text nodes have no attribute name
        if (!attrName) {
          // about #815 w/o replace: the browser converts the value to a string,
          // the comparison by "==" does too, but not in the server
          value += '';
          // test for parent avoids error with invalid assignment to nodeValue
          if (parent) {
            // cache the parent node because somehow it will become null on IE
            // on the next iteration
            expr.parent = parent;
            if (parent.tagName === 'TEXTAREA') {
              parent.value = value;
              // #1113
              if (!IE_VERSION) {
                dom.nodeValue = value
              }  // #1625 IE throws here, nodeValue
            }  // will be available on 'updated'
            else {
              dom.nodeValue = value
            }
          }
          return
        }
        // remove original attribute
        if (!expr.isAttrRemoved || !value) {
          remAttr(dom, attrName);
          expr.isAttrRemoved = true
        }
        // event handler
        if (isFunction(value)) {
          setEventHandler(attrName, value, dom, this)  // show / hide
        } else if (isToggle) {
          if (attrName === HIDE_DIRECTIVE) {
            value = !value
          }
          dom.style.display = value ? '' : 'none'  // field value
        } else if (isValueAttr) {
          dom.value = value  // <img src="{ expr }">
        } else if (startsWith(attrName, ATTRS_PREFIX) && attrName !== IS_DIRECTIVE) {
          attrName = attrName.slice(ATTRS_PREFIX.length);
          if (CASE_SENSITIVE_ATTRIBUTES[attrName]) {
            attrName = CASE_SENSITIVE_ATTRIBUTES[attrName]
          }
          if (value != null) {
            setAttr(dom, attrName, value)
          }
        } else {
          if (expr.bool) {
            dom[attrName] = value;
            if (!value) {
              return
            }
          }
          if (value === 0 || value && typeof value !== T_OBJECT) {
            setAttr(dom, attrName, value)
          }
        }
      }
      /**
 * Update all the expressions in a Tag instance
 * @this Tag
 * @param { Array } expressions - expression that must be re evaluated
 */
      function updateAllExpressions(expressions) {
        each(expressions, updateExpression.bind(this))
      }
      var IfExpr = {
        init: function init(dom, tag, expr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE);
          this.tag = tag;
          this.expr = expr;
          this.stub = document.createTextNode('');
          this.pristine = dom;
          var p = dom.parentNode;
          p.insertBefore(this.stub, dom);
          p.removeChild(dom);
          return this
        },
        update: function update() {
          var newValue = tmpl(this.expr, this.tag);
          if (newValue && !this.current) {
            // insert
            this.current = this.pristine.cloneNode(true);
            this.stub.parentNode.insertBefore(this.current, this.stub);
            this.expressions = [];
            parseExpressions.apply(this.tag, [
              this.current,
              this.expressions,
              true
            ])
          } else if (!newValue && this.current) {
            // remove
            unmountAll(this.expressions);
            if (this.current._tag) {
              this.current._tag.unmount()
            } else if (this.current.parentNode) {
              this.current.parentNode.removeChild(this.current)
            }
            this.current = null;
            this.expressions = []
          }
          if (newValue) {
            updateAllExpressions.call(this.tag, this.expressions)
          }
        },
        unmount: function unmount() {
          unmountAll(this.expressions || []);
          delete this.pristine;
          delete this.parentNode;
          delete this.stub
        }
      };
      var RefExpr = {
        init: function init(dom, parent, attrName, attrValue) {
          this.dom = dom;
          this.attr = attrName;
          this.rawValue = attrValue;
          this.parent = parent;
          this.hasExp = tmpl.hasExpr(attrValue);
          this.firstRun = true;
          return this
        },
        update: function update() {
          var value = this.rawValue;
          if (this.hasExp) {
            value = tmpl(this.rawValue, this.parent)
          }
          // if nothing changed, we're done
          if (!this.firstRun && value === this.value) {
            return
          }
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          // if the referenced element is a custom tag, then we set the tag itself, rather than DOM
          var tagOrDom = this.tag || this.dom;
          // the name changed, so we need to remove it from the old key (if present)
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          if (isBlank(value)) {
            // if the value is blank, we remove it
            remAttr(this.dom, this.attr)
          } else {
            // add it to the refs of parent tag (this behavior was changed >=3.0)
            if (customParent) {
              arrayishAdd(customParent.refs, value, tagOrDom, // use an array if it's a looped node and the ref is not an expression
              null, this.parent.__.index)
            }
            // set the actual DOM attr
            setAttr(this.dom, this.attr, value)
          }
          this.value = value;
          this.firstRun = false
        },
        unmount: function unmount() {
          var tagOrDom = this.tag || this.dom;
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          delete this.dom;
          delete this.parent
        }
      };
      /**
 * Convert the item looped into an object used to extend the child tag properties
 * @param   { Object } expr - object containing the keys used to extend the children tags
 * @param   { * } key - value to assign to the new object returned
 * @param   { * } val - value containing the position of the item in the array
 * @param   { Object } base - prototype object for the new item
 * @returns { Object } - new object containing the values of the original item
 *
 * The variables 'key' and 'val' are arbitrary.
 * They depend on the collection type looped (Array, Object)
 * and on the expression used on the each tag
 *
 */
      function mkitem(expr, key, val, base) {
        var item = base ? Object.create(base) : {};
        item[expr.key] = key;
        if (expr.pos) {
          item[expr.pos] = val
        }
        return item
      }
      /**
 * Unmount the redundant tags
 * @param   { Array } items - array containing the current items to loop
 * @param   { Array } tags - array containing all the children tags
 */
      function unmountRedundant(items, tags) {
        var i = tags.length, j = items.length;
        while (i > j) {
          i--;
          remove.apply(tags[i], [
            tags,
            i
          ])
        }
      }
      /**
 * Remove a child tag
 * @this Tag
 * @param   { Array } tags - tags collection
 * @param   { Number } i - index of the tag to remove
 */
      function remove(tags, i) {
        tags.splice(i, 1);
        this.unmount();
        arrayishRemove(this.parent, this, this.__.tagName, true)
      }
      /**
 * Move the nested custom tags in non custom loop tags
 * @this Tag
 * @param   { Number } i - current position of the loop tag
 */
      function moveNestedTags(i) {
        var this$1 = this;
        each(Object.keys(this.tags), function (tagName) {
          var tag = this$1.tags[tagName];
          if (isArray(tag)) {
            each(tag, function (t) {
              moveChildTag.apply(t, [
                tagName,
                i
              ])
            })
          } else {
            moveChildTag.apply(tag, [
              tagName,
              i
            ])
          }
        })
      }
      /**
 * Move a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to move
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function move(root, nextTag, isVirtual) {
        if (isVirtual) {
          moveVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Insert and mount a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to insert
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function insert(root, nextTag, isVirtual) {
        if (isVirtual) {
          makeVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Append a new tag into the DOM
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function append(root, isVirtual) {
        if (isVirtual) {
          makeVirtual.call(this, root)
        } else {
          root.appendChild(this.root)
        }
      }
      /**
 * Manage tags having the 'each'
 * @param   { HTMLElement } dom - DOM node we need to loop
 * @param   { Tag } parent - parent tag instance where the dom node is contained
 * @param   { String } expr - string contained in the 'each' attribute
 * @returns { Object } expression object for this each loop
 */
      function _each(dom, parent, expr) {
        // remove the each property from the original tag
        remAttr(dom, LOOP_DIRECTIVE);
        var mustReorder = typeof getAttr(dom, LOOP_NO_REORDER_DIRECTIVE) !== T_STRING || remAttr(dom, LOOP_NO_REORDER_DIRECTIVE), tagName = getTagName(dom), impl = __TAG_IMPL[tagName], parentNode = dom.parentNode, placeholder = createDOMPlaceholder(), child = getTag(dom), ifExpr = getAttr(dom, CONDITIONAL_DIRECTIVE), tags = [], oldItems = [], hasKeys, isLoop = true, isAnonymous = !__TAG_IMPL[tagName], isVirtual = dom.tagName === 'VIRTUAL';
        // parse the each expression
        expr = tmpl.loopKeys(expr);
        expr.isLoop = true;
        if (ifExpr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE)
        }
        // insert a marked where the loop tags will be injected
        parentNode.insertBefore(placeholder, dom);
        parentNode.removeChild(dom);
        expr.update = function updateEach() {
          // get the new items collection
          var items = tmpl(expr.val, parent), frag = createFrag(), isObject$$1 = !isArray(items) && !isString(items), root = placeholder.parentNode;
          // object loop. any changes cause full redraw
          if (isObject$$1) {
            hasKeys = items || false;
            items = hasKeys ? Object.keys(items).map(function (key) {
              return mkitem(expr, items[key], key)
            }) : []
          } else {
            hasKeys = false
          }
          if (ifExpr) {
            items = items.filter(function (item, i) {
              if (expr.key && !isObject$$1) {
                return !!tmpl(ifExpr, mkitem(expr, item, i, parent))
              }
              return !!tmpl(ifExpr, extend(Object.create(parent), item))
            })
          }
          // loop all the new items
          each(items, function (item, i) {
            // reorder only if the items are objects
            var doReorder = mustReorder && typeof item === T_OBJECT && !hasKeys, oldPos = oldItems.indexOf(item), isNew = oldPos === -1, pos = !isNew && doReorder ? oldPos : i,
              // does a tag exist in this position?
              tag = tags[pos], mustAppend = i >= oldItems.length, mustCreate = doReorder && isNew || !doReorder && !tag;
            item = !hasKeys && expr.key ? mkitem(expr, item, i) : item;
            // new tag
            if (mustCreate) {
              tag = new Tag$1(impl, {
                parent: parent,
                isLoop: isLoop,
                isAnonymous: isAnonymous,
                tagName: tagName,
                root: dom.cloneNode(isAnonymous),
                item: item,
                index: i
              }, dom.innerHTML);
              // mount the tag
              tag.mount();
              if (mustAppend) {
                append.apply(tag, [
                  frag || root,
                  isVirtual
                ])
              } else {
                insert.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ])
              }
              if (!mustAppend) {
                oldItems.splice(i, 0, item)
              }
              tags.splice(i, 0, tag);
              if (child) {
                arrayishAdd(parent.tags, tagName, tag, true)
              }
            } else if (pos !== i && doReorder) {
              // move
              if (contains(items, oldItems[pos])) {
                move.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ]);
                // move the old tag instance
                tags.splice(i, 0, tags.splice(pos, 1)[0]);
                // move the old item
                oldItems.splice(i, 0, oldItems.splice(pos, 1)[0])
              } else {
                // remove
                remove.apply(tags[i], [
                  tags,
                  i
                ]);
                oldItems.splice(i, 1)
              }
              // update the position attribute if it exists
              if (expr.pos) {
                tag[expr.pos] = i
              }
              // if the loop tags are not custom
              // we need to move all their custom tags into the right position
              if (!child && tag.tags) {
                moveNestedTags.call(tag, i)
              }
            }
            // cache the original item to use it in the events bound to this node
            // and its children
            tag.__.item = item;
            tag.__.index = i;
            tag.__.parent = parent;
            if (!mustCreate) {
              tag.update(item)
            }
          });
          // remove the redundant tags
          unmountRedundant(items, tags);
          // clone the items array
          oldItems = items.slice();
          root.insertBefore(frag, placeholder)
        };
        expr.unmount = function () {
          each(tags, function (t) {
            t.unmount()
          })
        };
        return expr
      }
      /**
 * Walk the tag DOM to detect the expressions to evaluate
 * @this Tag
 * @param   { HTMLElement } root - root tag where we will start digging the expressions
 * @param   { Array } expressions - empty array where the expressions will be added
 * @param   { Boolean } mustIncludeRoot - flag to decide whether the root must be parsed as well
 * @returns { Object } an object containing the root noode and the dom tree
 */
      function parseExpressions(root, expressions, mustIncludeRoot) {
        var this$1 = this;
        var tree = { parent: { children: expressions } };
        walkNodes(root, function (dom, ctx) {
          var type = dom.nodeType, parent = ctx.parent, attr, expr, tagImpl;
          if (!mustIncludeRoot && dom === root) {
            return { parent: parent }
          }
          // text node
          if (type === 3 && dom.parentNode.tagName !== 'STYLE' && tmpl.hasExpr(dom.nodeValue)) {
            parent.children.push({
              dom: dom,
              expr: dom.nodeValue
            })
          }
          if (type !== 1) {
            return ctx
          }
          // not an element
          var isVirtual = dom.tagName === 'VIRTUAL';
          // loop. each does it's own thing (for now)
          if (attr = getAttr(dom, LOOP_DIRECTIVE)) {
            if (isVirtual) {
              setAttr(dom, 'loopVirtual', true)
            }
            // ignore here, handled in _each
            parent.children.push(_each(dom, this$1, attr));
            return false
          }
          // if-attrs become the new parent. Any following expressions (either on the current
          // element, or below it) become children of this expression.
          if (attr = getAttr(dom, CONDITIONAL_DIRECTIVE)) {
            parent.children.push(Object.create(IfExpr).init(dom, this$1, attr));
            return false
          }
          if (expr = getAttr(dom, IS_DIRECTIVE)) {
            if (tmpl.hasExpr(expr)) {
              parent.children.push({
                isRtag: true,
                expr: expr,
                dom: dom,
                attrs: [].slice.call(dom.attributes)
              });
              return false
            }
          }
          // if this is a tag, stop traversing here.
          // we ignore the root, since parseExpressions is called while we're mounting that root
          tagImpl = getTag(dom);
          if (isVirtual) {
            if (getAttr(dom, 'virtualized')) {
              dom.parentElement.removeChild(dom)
            }
            // tag created, remove from dom
            if (!tagImpl && !getAttr(dom, 'virtualized') && !getAttr(dom, 'loopVirtual'))
              // ok to create virtual tag
              {
                tagImpl = { tmpl: dom.outerHTML }
              }
          }
          if (tagImpl && (dom !== root || mustIncludeRoot)) {
            if (isVirtual && !getAttr(dom, IS_DIRECTIVE)) {
              // handled in update
              // can not remove attribute like directives
              // so flag for removal after creation to prevent maximum stack error
              setAttr(dom, 'virtualized', true);
              var tag = new Tag$1({ tmpl: dom.outerHTML }, {
                root: dom,
                parent: this$1
              }, dom.innerHTML);
              parent.children.push(tag)  // no return, anonymous tag, keep parsing
            } else {
              var conf = {
                root: dom,
                parent: this$1,
                hasImpl: true
              };
              parent.children.push(initChildTag(tagImpl, conf, dom.innerHTML, this$1));
              return false
            }
          }
          // attribute expressions
          parseAttributes.apply(this$1, [
            dom,
            dom.attributes,
            function (attr, expr) {
              if (!expr) {
                return
              }
              parent.children.push(expr)
            }
          ]);
          // whatever the parent is, all child elements get the same parent.
          // If this element had an if-attr, that's the parent for all child elements
          return { parent: parent }
        }, tree);
        return {
          tree: tree,
          root: root
        }
      }
      /**
 * Calls `fn` for every attribute on an element. If that attr has an expression,
 * it is also passed to fn.
 * @this Tag
 * @param   { HTMLElement } dom - dom node to parse
 * @param   { Array } attrs - array of attributes
 * @param   { Function } fn - callback to exec on any iteration
 */
      function parseAttributes(dom, attrs, fn) {
        var this$1 = this;
        each(attrs, function (attr) {
          var name = attr.name, bool = isBoolAttr(name), expr;
          if (contains(REF_DIRECTIVES, name)) {
            expr = Object.create(RefExpr).init(dom, this$1, name, attr.value)
          } else if (tmpl.hasExpr(attr.value)) {
            expr = {
              dom: dom,
              expr: attr.value,
              attr: attr.name,
              bool: bool
            }
          }
          fn(attr, expr)
        })
      }
      /*
  Includes hacks needed for the Internet Explorer version 9 and below
  See: http://kangax.github.io/compat-table/es5/#ie8
       http://codeplanet.io/dropping-ie8/
*/
      var reHasYield = /<yield\b/i;
      var reYieldAll = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi;
      var reYieldSrc = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi;
      var reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi;
      var rootEls = {
        tr: 'tbody',
        th: 'tr',
        td: 'tr',
        col: 'colgroup'
      };
      var tblTags = IE_VERSION && IE_VERSION < 10 ? RE_SPECIAL_TAGS : RE_SPECIAL_TAGS_NO_OPTION;
      var GENERIC = 'div';
      /*
  Creates the root element for table or select child elements:
  tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
*/
      function specialTags(el, tmpl, tagName) {
        var select = tagName[0] === 'o', parent = select ? 'select>' : 'table>';
        // trim() is important here, this ensures we don't have artifacts,
        // so we can check if we have only one element inside the parent
        el.innerHTML = '<' + parent + tmpl.trim() + '</' + parent;
        parent = el.firstChild;
        // returns the immediate parent if tr/th/td/col is the only element, if not
        // returns the whole tree, as this can include additional elements
        if (select) {
          parent.selectedIndex = -1  // for IE9, compatible w/current riot behavior
        } else {
          // avoids insertion of cointainer inside container (ex: tbody inside tbody)
          var tname = rootEls[tagName];
          if (tname && parent.childElementCount === 1) {
            parent = $(tname, parent)
          }
        }
        return parent
      }
      /*
  Replace the yield tag from any tag template with the innerHTML of the
  original tag in the page
*/
      function replaceYield(tmpl, html) {
        // do nothing if no yield
        if (!reHasYield.test(tmpl)) {
          return tmpl
        }
        // be careful with #1343 - string on the source having `$1`
        var src = {};
        html = html && html.replace(reYieldSrc, function (_, ref, text) {
          src[ref] = src[ref] || text;
          // preserve first definition
          return ''
        }).trim();
        return tmpl.replace(reYieldDest, function (_, ref, def) {
          // yield with from - to attrs
          return src[ref] || def || ''
        }).replace(reYieldAll, function (_, def) {
          // yield without any "from"
          return html || def || ''
        })
      }
      /**
 * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
 * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
 *
 * @param   { String } tmpl  - The template coming from the custom tag definition
 * @param   { String } html - HTML content that comes from the DOM element where you
 *           will mount the tag, mostly the original tag in the page
 * @param   { Boolean } checkSvg - flag needed to know if we need to force the svg rendering in case of loop nodes
 * @returns { HTMLElement } DOM element with _tmpl_ merged through `YIELD` with the _html_.
 */
      function mkdom(tmpl, html, checkSvg) {
        var match = tmpl && tmpl.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), el = mkEl(GENERIC, checkSvg && isSVGTag(tagName));
        // replace all the yield tags with the tag inner html
        tmpl = replaceYield(tmpl, html);
        /* istanbul ignore next */
        if (tblTags.test(tagName)) {
          el = specialTags(el, tmpl, tagName)
        } else {
          setInnerHTML(el, tmpl)
        }
        return el
      }
      /**
 * Another way to create a riot tag a bit more es6 friendly
 * @param { HTMLElement } el - tag DOM selector or DOM node/s
 * @param { Object } opts - tag logic
 * @returns { Tag } new riot tag instance
 */
      function Tag$2(el, opts) {
        // get the tag properties from the class constructor
        var ref = this;
        var name = ref.name;
        var tmpl = ref.tmpl;
        var css = ref.css;
        var attrs = ref.attrs;
        var onCreate = ref.onCreate;
        // register a new tag and cache the class prototype
        if (!__TAG_IMPL[name]) {
          tag$1(name, tmpl, css, attrs, onCreate);
          // cache the class constructor
          __TAG_IMPL[name].class = this.constructor
        }
        // mount the tag using the class instance
        mountTo(el, name, opts, this);
        // inject the component css
        if (css) {
          styleManager.inject()
        }
        return this
      }
      /**
 * Create a new riot tag implementation
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag$1(name, tmpl, css, attrs, fn) {
        if (isFunction(attrs)) {
          fn = attrs;
          if (/^[\w\-]+\s?=/.test(css)) {
            attrs = css;
            css = ''
          } else {
            attrs = ''
          }
        }
        if (css) {
          if (isFunction(css)) {
            fn = css
          } else {
            styleManager.add(css)
          }
        }
        name = name.toLowerCase();
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        return name
      }
      /**
 * Create a new riot tag implementation (for use by the compiler)
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag2$1(name, tmpl, css, attrs, fn) {
        if (css) {
          styleManager.add(css, name)
        }
        var exists = !!__TAG_IMPL[name];
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        if (exists && util.hotReloader) {
          util.hotReloader(name)
        }
        return name
      }
      /**
 * Mount a tag using a specific tag implementation
 * @param   { * } selector - tag DOM selector or DOM node/s
 * @param   { String } tagName - tag implementation name
 * @param   { Object } opts - tag logic
 * @returns { Array } new tags instances
 */
      function mount$1(selector, tagName, opts) {
        var tags = [];
        function pushTagsTo(root) {
          if (root.tagName) {
            var riotTag = getAttr(root, IS_DIRECTIVE);
            // have tagName? force riot-tag to be the same
            if (tagName && riotTag !== tagName) {
              riotTag = tagName;
              setAttr(root, IS_DIRECTIVE, tagName)
            }
            var tag$$1 = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);
            if (tag$$1) {
              tags.push(tag$$1)
            }
          } else if (root.length) {
            each(root, pushTagsTo)
          }  // assume nodeList
        }
        // inject styles into DOM
        styleManager.inject();
        if (isObject(tagName)) {
          opts = tagName;
          tagName = 0
        }
        var elem;
        var allTags;
        // crawl the DOM to find the tag
        if (isString(selector)) {
          selector = selector === '*' ? // select all registered tags
          // & tags found with the riot-tag attribute set
          allTags = selectTags() : // or just the ones named like the selector
          selector + selectTags(selector.split(/, */));
          // make sure to pass always a selector
          // to the querySelectorAll function
          elem = selector ? $$(selector) : []
        } else
          // probably you have passed already a tag or a NodeList
          {
            elem = selector
          }
        // select all the registered and mount them inside their root elements
        if (tagName === '*') {
          // get all custom tags
          tagName = allTags || selectTags();
          // if the root els it's just a single tag
          if (elem.tagName) {
            elem = $$(tagName, elem)
          } else {
            // select all the children for all the different root elements
            var nodeList = [];
            each(elem, function (_el) {
              return nodeList.push($$(tagName, _el))
            });
            elem = nodeList
          }
          // get rid of the tagName
          tagName = 0
        }
        pushTagsTo(elem);
        return tags
      }
      // Create a mixin that could be globally shared across all the tags
      var mixins = {};
      var globals = mixins[GLOBAL_MIXIN] = {};
      var _id = 0;
      /**
 * Create/Return a mixin by its name
 * @param   { String }  name - mixin name (global mixin if object)
 * @param   { Object }  mix - mixin logic
 * @param   { Boolean } g - is global?
 * @returns { Object }  the mixin logic
 */
      function mixin$1(name, mix, g) {
        // Unnamed global
        if (isObject(name)) {
          mixin$1('__unnamed_' + _id++, name, true);
          return
        }
        var store = g ? globals : mixins;
        // Getter
        if (!mix) {
          if (isUndefined(store[name])) {
            throw new Error('Unregistered mixin: ' + name)
          }
          return store[name]
        }
        // Setter
        store[name] = isFunction(mix) ? extend(mix.prototype, store[name] || {}) && mix : extend(store[name] || {}, mix)
      }
      /**
 * Update all the tags instances created
 * @returns { Array } all the tags instances
 */
      function update$1() {
        return each(__TAGS_CACHE, function (tag$$1) {
          return tag$$1.update()
        })
      }
      function unregister$1(name) {
        delete __TAG_IMPL[name]
      }
      var core = Object.freeze({
        Tag: Tag$2,
        tag: tag$1,
        tag2: tag2$1,
        mount: mount$1,
        mixin: mixin$1,
        update: update$1,
        unregister: unregister$1
      });
      // counter to give a unique id to all the Tag instances
      var __uid = 0;
      /**
 * We need to update opts for this tag. That requires updating the expressions
 * in any attributes on the tag, and then copying the result onto opts.
 * @this Tag
 * @param   {Boolean} isLoop - is it a loop tag?
 * @param   { Tag }  parent - parent tag node
 * @param   { Boolean }  isAnonymous - is it a tag without any impl? (a tag not registered)
 * @param   { Object }  opts - tag options
 * @param   { Array }  instAttrs - tag attributes array
 */
      function updateOpts(isLoop, parent, isAnonymous, opts, instAttrs) {
        // isAnonymous `each` tags treat `dom` and `root` differently. In this case
        // (and only this case) we don't need to do updateOpts, because the regular parse
        // will update those attrs. Plus, isAnonymous tags don't need opts anyway
        if (isLoop && isAnonymous) {
          return
        }
        var ctx = !isAnonymous && isLoop ? this : parent || this;
        each(instAttrs, function (attr) {
          if (attr.expr) {
            updateAllExpressions.call(ctx, [attr.expr])
          }
          opts[toCamel(attr.name)] = attr.expr ? attr.expr.value : attr.value
        })
      }
      /**
 * Tag class
 * @constructor
 * @param { Object } impl - it contains the tag template, and logic
 * @param { Object } conf - tag options
 * @param { String } innerHTML - html that eventually we need to inject in the tag
 */
      function Tag$1(impl, conf, innerHTML) {
        if (impl === void 0)
          impl = {};
        if (conf === void 0)
          conf = {};
        var opts = extend({}, conf.opts), parent = conf.parent, isLoop = conf.isLoop, isAnonymous = !!conf.isAnonymous, skipAnonymous = settings$1.skipAnonymousTags && isAnonymous, item = cleanUpData(conf.item), index = conf.index,
          // available only for the looped nodes
          instAttrs = [],
          // All attributes on the Tag when it's first parsed
          implAttrs = [],
          // expressions on this type of Tag
          expressions = [], root = conf.root, tagName = conf.tagName || getTagName(root), isVirtual = tagName === 'virtual', propsInSyncWithParent = [], dom;
        // make this tag observable
        if (!skipAnonymous) {
          observable$1(this)
        }
        // only call unmount if we have a valid __TAG_IMPL (has name property)
        if (impl.name && root._tag) {
          root._tag.unmount(true)
        }
        // not yet mounted
        this.isMounted = false;
        defineProperty(this, '__', {
          isAnonymous: isAnonymous,
          instAttrs: instAttrs,
          innerHTML: innerHTML,
          tagName: tagName,
          index: index,
          isLoop: isLoop,
          // these vars will be needed only for the virtual tags
          virts: [],
          tail: null,
          head: null,
          parent: null,
          item: null
        });
        // create a unique id to this tag
        // it could be handy to use it also to improve the virtual dom rendering speed
        defineProperty(this, '_riot_id', ++__uid);
        // base 1 allows test !t._riot_id
        defineProperty(this, 'root', root);
        extend(this, { opts: opts }, item);
        // protect the "tags" and "refs" property from being overridden
        defineProperty(this, 'parent', parent || null);
        defineProperty(this, 'tags', {});
        defineProperty(this, 'refs', {});
        dom = isLoop && isAnonymous ? root : mkdom(impl.tmpl, innerHTML, isLoop);
        /**
   * Update the tag expressions and options
   * @param   { * }  data - data we want to use to extend the tag properties
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'update', function tagUpdate(data) {
          var nextOpts = {};
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            nextOpts,
            instAttrs
          ]);
          if (isFunction(this.shouldUpdate) && !this.shouldUpdate(data, nextOpts)) {
            return this
          }
          var canTrigger = this.isMounted && !skipAnonymous;
          // make sure the data passed will not override
          // the component core methods
          data = cleanUpData(data);
          // inherit properties from the parent, but only for isAnonymous tags
          if (isLoop && isAnonymous) {
            inheritFrom.apply(this, [
              this.parent,
              propsInSyncWithParent
            ])
          }
          extend(this, data);
          extend(opts, nextOpts);
          if (canTrigger) {
            this.trigger('update', data)
          }
          updateAllExpressions.call(this, expressions);
          if (canTrigger) {
            this.trigger('updated')
          }
          return this
        }.bind(this));
        /**
   * Add a mixin to this tag
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mixin', function tagMixin() {
          var this$1 = this;
          each(arguments, function (mix) {
            var instance, props = [], obj;
            mix = isString(mix) ? mixin$1(mix) : mix;
            // check if the mixin is a function
            if (isFunction(mix)) {
              // create the new mixin instance
              instance = new mix
            } else {
              instance = mix
            }
            var proto = Object.getPrototypeOf(instance);
            // build multilevel prototype inheritance chain property list
            do {
              props = props.concat(Object.getOwnPropertyNames(obj || instance))
            } while (obj = Object.getPrototypeOf(obj || instance));
            // loop the keys in the function prototype or the all object keys
            each(props, function (key) {
              // bind methods to this
              // allow mixins to override other properties/parent mixins
              if (key !== 'init') {
                // check for getters/setters
                var descriptor = Object.getOwnPropertyDescriptor(instance, key) || Object.getOwnPropertyDescriptor(proto, key);
                var hasGetterSetter = descriptor && (descriptor.get || descriptor.set);
                // apply method only if it does not already exist on the instance
                if (!this$1.hasOwnProperty(key) && hasGetterSetter) {
                  Object.defineProperty(this$1, key, descriptor)
                } else {
                  this$1[key] = isFunction(instance[key]) ? instance[key].bind(this$1) : instance[key]
                }
              }
            });
            // init method will be called automatically
            if (instance.init) {
              instance.init.bind(this$1)()
            }
          });
          return this
        }.bind(this));
        /**
   * Mount the current tag instance
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mount', function tagMount() {
          var this$1 = this;
          var _parent = this.__.parent;
          root._tag = this;
          // keep a reference to the tag just created
          // Read all the attrs on this instance. This give us the info we need for updateOpts
          parseAttributes.apply(parent, [
            root,
            root.attributes,
            function (attr, expr) {
              if (!isAnonymous && RefExpr.isPrototypeOf(expr)) {
                expr.tag = this$1
              }
              attr.expr = expr;
              instAttrs.push(attr)
            }
          ]);
          // update the root adding custom attributes coming from the compiler
          implAttrs = [];
          walkAttrs(impl.attrs, function (k, v) {
            implAttrs.push({
              name: k,
              value: v
            })
          });
          parseAttributes.apply(this, [
            root,
            implAttrs,
            function (attr, expr) {
              if (expr) {
                expressions.push(expr)
              } else {
                setAttr(root, attr.name, attr.value)
              }
            }
          ]);
          // children in loop should inherit from true parent
          if (_parent && isAnonymous) {
            inheritFrom.apply(this, [
              _parent,
              propsInSyncWithParent
            ])
          }
          // initialiation
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            opts,
            instAttrs
          ]);
          // add global mixins
          var globalMixin = mixin$1(GLOBAL_MIXIN);
          if (globalMixin && !skipAnonymous) {
            for (var i in globalMixin) {
              if (globalMixin.hasOwnProperty(i)) {
                this$1.mixin(globalMixin[i])
              }
            }
          }
          if (impl.fn) {
            impl.fn.call(this, opts)
          }
          if (!skipAnonymous) {
            this.trigger('before-mount')
          }
          // parse layout after init. fn may calculate args for nested custom tags
          parseExpressions.apply(this, [
            dom,
            expressions,
            isAnonymous
          ]);
          this.update(item);
          if (!isAnonymous) {
            while (dom.firstChild) {
              root.appendChild(dom.firstChild)
            }
          }
          defineProperty(this, 'root', root);
          defineProperty(this, 'isMounted', true);
          if (skipAnonymous) {
            return
          }
          // if it's not a child tag we can trigger its mount event
          if (!this.parent) {
            this.trigger('mount')
          }  // otherwise we need to wait that the parent "mount" or "updated" event gets triggered
          else {
            var p = getImmediateCustomParentTag(this.parent);
            p.one(!p.isMounted ? 'mount' : 'updated', function () {
              this$1.trigger('mount')
            })
          }
          return this
        }.bind(this));
        /**
   * Unmount the tag instance
   * @param { Boolean } mustKeepRoot - if it's true the root node will not be removed
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'unmount', function tagUnmount(mustKeepRoot) {
          var this$1 = this;
          var el = this.root, p = el.parentNode, ptag, tagIndex = __TAGS_CACHE.indexOf(this);
          if (!skipAnonymous) {
            this.trigger('before-unmount')
          }
          // clear all attributes coming from the mounted tag
          walkAttrs(impl.attrs, function (name) {
            if (startsWith(name, ATTRS_PREFIX)) {
              name = name.slice(ATTRS_PREFIX.length)
            }
            remAttr(root, name)
          });
          // remove this tag instance from the global virtualDom variable
          if (tagIndex !== -1) {
            __TAGS_CACHE.splice(tagIndex, 1)
          }
          if (p || isVirtual) {
            if (parent) {
              ptag = getImmediateCustomParentTag(parent);
              if (isVirtual) {
                Object.keys(this.tags).forEach(function (tagName) {
                  arrayishRemove(ptag.tags, tagName, this$1.tags[tagName])
                })
              } else {
                arrayishRemove(ptag.tags, tagName, this);
                if (parent !== ptag)
                  // remove from _parent too
                  {
                    arrayishRemove(parent.tags, tagName, this)
                  }
              }
            } else {
              while (el.firstChild) {
                el.removeChild(el.firstChild)
              }
            }
            if (p) {
              if (!mustKeepRoot) {
                p.removeChild(el)
              } else {
                // the riot-tag and the data-is attributes aren't needed anymore, remove them
                remAttr(p, IS_DIRECTIVE)
              }
            }
          }
          if (this.__.virts) {
            each(this.__.virts, function (v) {
              if (v.parentNode) {
                v.parentNode.removeChild(v)
              }
            })
          }
          // allow expressions to unmount themselves
          unmountAll(expressions);
          each(instAttrs, function (a) {
            return a.expr && a.expr.unmount && a.expr.unmount()
          });
          // custom internal unmount function to avoid relying on the observable
          if (this.__.onUnmount) {
            this.__.onUnmount()
          }
          if (!skipAnonymous) {
            this.trigger('unmount');
            this.off('*')
          }
          defineProperty(this, 'isMounted', false);
          delete this.root._tag;
          return this
        }.bind(this))
      }
      /**
 * Detect the tag implementation by a DOM node
 * @param   { Object } dom - DOM node we need to parse to get its tag implementation
 * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
 */
      function getTag(dom) {
        return dom.tagName && __TAG_IMPL[getAttr(dom, IS_DIRECTIVE) || getAttr(dom, IS_DIRECTIVE) || dom.tagName.toLowerCase()]
      }
      /**
 * Inherit properties from a target tag instance
 * @this Tag
 * @param   { Tag } target - tag where we will inherit properties
 * @param   { Array } propsInSyncWithParent - array of properties to sync with the target
 */
      function inheritFrom(target, propsInSyncWithParent) {
        var this$1 = this;
        each(Object.keys(target), function (k) {
          // some properties must be always in sync with the parent tag
          var mustSync = !isReservedName(k) && contains(propsInSyncWithParent, k);
          if (isUndefined(this$1[k]) || mustSync) {
            // track the property to keep in sync
            // so we can keep it updated
            if (!mustSync) {
              propsInSyncWithParent.push(k)
            }
            this$1[k] = target[k]
          }
        })
      }
      /**
 * Move the position of a custom tag in its parent tag
 * @this Tag
 * @param   { String } tagName - key where the tag was stored
 * @param   { Number } newPos - index where the new tag will be stored
 */
      function moveChildTag(tagName, newPos) {
        var parent = this.parent, tags;
        // no parent no move
        if (!parent) {
          return
        }
        tags = parent.tags[tagName];
        if (isArray(tags)) {
          tags.splice(newPos, 0, tags.splice(tags.indexOf(this), 1)[0])
        } else {
          arrayishAdd(parent.tags, tagName, this)
        }
      }
      /**
 * Create a new child tag including it correctly into its parent
 * @param   { Object } child - child tag implementation
 * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
 * @param   { String } innerHTML - inner html of the child node
 * @param   { Object } parent - instance of the parent tag including the child custom tag
 * @returns { Object } instance of the new child tag just created
 */
      function initChildTag(child, opts, innerHTML, parent) {
        var tag = new Tag$1(child, opts, innerHTML), tagName = opts.tagName || getTagName(opts.root, true), ptag = getImmediateCustomParentTag(parent);
        // fix for the parent attribute in the looped elements
        defineProperty(tag, 'parent', ptag);
        // store the real parent tag
        // in some cases this could be different from the custom parent tag
        // for example in nested loops
        tag.__.parent = parent;
        // add this tag to the custom parent tag
        arrayishAdd(ptag.tags, tagName, tag);
        // and also to the real parent tag
        if (ptag !== parent) {
          arrayishAdd(parent.tags, tagName, tag)
        }
        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        opts.root.innerHTML = '';
        return tag
      }
      /**
 * Loop backward all the parents tree to detect the first custom parent tag
 * @param   { Object } tag - a Tag instance
 * @returns { Object } the instance of the first custom parent tag found
 */
      function getImmediateCustomParentTag(tag) {
        var ptag = tag;
        while (ptag.__.isAnonymous) {
          if (!ptag.parent) {
            break
          }
          ptag = ptag.parent
        }
        return ptag
      }
      /**
 * Trigger the unmount method on all the expressions
 * @param   { Array } expressions - DOM expressions
 */
      function unmountAll(expressions) {
        each(expressions, function (expr) {
          if (expr instanceof Tag$1) {
            expr.unmount(true)
          } else if (expr.unmount) {
            expr.unmount()
          }
        })
      }
      /**
 * Get the tag name of any DOM node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { Boolean } skipDataIs - hack to ignore the data-is attribute when attaching to parent
 * @returns { String } name to identify this dom node in riot
 */
      function getTagName(dom, skipDataIs) {
        var child = getTag(dom), namedTag = !skipDataIs && getAttr(dom, IS_DIRECTIVE);
        return namedTag && !tmpl.hasExpr(namedTag) ? namedTag : child ? child.name : dom.tagName.toLowerCase()
      }
      /**
 * With this function we avoid that the internal Tag methods get overridden
 * @param   { Object } data - options we want to use to extend the tag instance
 * @returns { Object } clean object without containing the riot internal reserved words
 */
      function cleanUpData(data) {
        if (!(data instanceof Tag$1) && !(data && isFunction(data.trigger))) {
          return data
        }
        var o = {};
        for (var key in data) {
          if (!RE_RESERVED_NAMES.test(key)) {
            o[key] = data[key]
          }
        }
        return o
      }
      /**
 * Set the property of an object for a given key. If something already
 * exists there, then it becomes an array containing both the old and new value.
 * @param { Object } obj - object on which to set the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be set
 * @param { Boolean } ensureArray - ensure that the property remains an array
 * @param { Number } index - add the new item in a certain array position
 */
      function arrayishAdd(obj, key, value, ensureArray, index) {
        var dest = obj[key];
        var isArr = isArray(dest);
        var hasIndex = !isUndefined(index);
        if (dest && dest === value) {
          return
        }
        // if the key was never set, set it once
        if (!dest && ensureArray) {
          obj[key] = [value]
        } else if (!dest) {
          obj[key] = value
        }  // if it was an array and not yet set
        else {
          if (isArr) {
            var oldIndex = dest.indexOf(value);
            // this item never changed its position
            if (oldIndex === index) {
              return
            }
            // remove the item from its old position
            if (oldIndex !== -1) {
              dest.splice(oldIndex, 1)
            }
            // move or add the item
            if (hasIndex) {
              dest.splice(index, 0, value)
            } else {
              dest.push(value)
            }
          } else {
            obj[key] = [
              dest,
              value
            ]
          }
        }
      }
      /**
 * Removes an item from an object at a given key. If the key points to an array,
 * then the item is just removed from the array.
 * @param { Object } obj - object on which to remove the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be removed
 * @param { Boolean } ensureArray - ensure that the property remains an array
*/
      function arrayishRemove(obj, key, value, ensureArray) {
        if (isArray(obj[key])) {
          var index = obj[key].indexOf(value);
          if (index !== -1) {
            obj[key].splice(index, 1)
          }
          if (!obj[key].length) {
            delete obj[key]
          } else if (obj[key].length === 1 && !ensureArray) {
            obj[key] = obj[key][0]
          }
        } else {
          delete obj[key]
        }  // otherwise just delete the key
      }
      /**
 * Check whether a DOM node is in stub mode, useful for the riot 'if' directive
 * @param   { Object }  dom - DOM node we want to parse
 * @returns { Boolean } -
 */
      function isInStub(dom) {
        while (dom) {
          if (dom.inStub) {
            return true
          }
          dom = dom.parentNode
        }
        return false
      }
      /**
 * Mount a tag creating new Tag instance
 * @param   { Object } root - dom node where the tag will be mounted
 * @param   { String } tagName - name of the riot tag we want to mount
 * @param   { Object } opts - options to pass to the Tag instance
 * @param   { Object } ctx - optional context that will be used to extend an existing class ( used in riot.Tag )
 * @returns { Tag } a new Tag instance
 */
      function mountTo(root, tagName, opts, ctx) {
        var impl = __TAG_IMPL[tagName], implClass = __TAG_IMPL[tagName].class, tag = ctx || (implClass ? Object.create(implClass.prototype) : {}),
          // cache the inner HTML to fix #855
          innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
        // clear the inner html
        root.innerHTML = '';
        var conf = {
          root: root,
          opts: opts
        };
        if (opts && opts.parent) {
          conf.parent = opts.parent
        }
        if (impl && root) {
          Tag$1.apply(tag, [
            impl,
            conf,
            innerHTML
          ])
        }
        if (tag && tag.mount) {
          tag.mount(true);
          // add this tag to the virtualDom variable
          if (!contains(__TAGS_CACHE, tag)) {
            __TAGS_CACHE.push(tag)
          }
        }
        return tag
      }
      /**
 * makes a tag virtual and replaces a reference in the dom
 * @this Tag
 * @param { tag } the tag to make virtual
 * @param { ref } the dom reference location
 */
      function makeReplaceVirtual(tag, ref) {
        var frag = createFrag();
        makeVirtual.call(tag, frag);
        ref.parentNode.replaceChild(frag, ref)
      }
      /**
 * Adds the elements for a virtual tag
 * @this Tag
 * @param { Node } src - the node that will do the inserting or appending
 * @param { Tag } target - only if inserting, insert before this tag's first child
 */
      function makeVirtual(src, target) {
        var this$1 = this;
        var head = createDOMPlaceholder(), tail = createDOMPlaceholder(), frag = createFrag(), sib, el;
        this.__.head = this.root.insertBefore(head, this.root.firstChild);
        this.__.tail = this.root.appendChild(tail);
        el = this.__.head;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          this$1.__.virts.push(el);
          // hold for unmounting
          el = sib
        }
        if (target) {
          src.insertBefore(frag, target.__.head)
        } else {
          src.appendChild(frag)
        }
      }
      /**
 * Move virtual tag and all child nodes
 * @this Tag
 * @param { Node } src  - the node that will do the inserting
 * @param { Tag } target - insert before this tag's first child
 */
      function moveVirtual(src, target) {
        var this$1 = this;
        var el = this.__.head, frag = createFrag(), sib;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          el = sib;
          if (el === this$1.__.tail) {
            frag.appendChild(el);
            src.insertBefore(frag, target.__.head);
            break
          }
        }
      }
      /**
 * Get selectors for tags
 * @param   { Array } tags - tag names to select
 * @returns { String } selector
 */
      function selectTags(tags) {
        // select all tags
        if (!tags) {
          var keys = Object.keys(__TAG_IMPL);
          return keys + selectTags(keys)
        }
        return tags.filter(function (t) {
          return !/[^-\w]/.test(t)
        }).reduce(function (list, t) {
          var name = t.trim().toLowerCase();
          return list + ',[' + IS_DIRECTIVE + '="' + name + '"]'
        }, '')
      }
      var tags = Object.freeze({
        getTag: getTag,
        inheritFrom: inheritFrom,
        moveChildTag: moveChildTag,
        initChildTag: initChildTag,
        getImmediateCustomParentTag: getImmediateCustomParentTag,
        unmountAll: unmountAll,
        getTagName: getTagName,
        cleanUpData: cleanUpData,
        arrayishAdd: arrayishAdd,
        arrayishRemove: arrayishRemove,
        isInStub: isInStub,
        mountTo: mountTo,
        makeReplaceVirtual: makeReplaceVirtual,
        makeVirtual: makeVirtual,
        moveVirtual: moveVirtual,
        selectTags: selectTags
      });
      /**
 * Riot public api
 */
      var settings = settings$1;
      var util = {
        tmpl: tmpl,
        brackets: brackets,
        styleManager: styleManager,
        vdom: __TAGS_CACHE,
        styleNode: styleManager.styleNode,
        // export the riot internal utils as well
        dom: dom,
        check: check,
        misc: misc,
        tags: tags
      };
      // export the core props/methods
      var Tag$$1 = Tag$2;
      var tag$$1 = tag$1;
      var tag2$$1 = tag2$1;
      var mount$$1 = mount$1;
      var mixin$$1 = mixin$1;
      var update$$1 = update$1;
      var unregister$$1 = unregister$1;
      var observable = observable$1;
      var riot$1 = extend({}, core, {
        observable: observable$1,
        settings: settings,
        util: util
      });
      exports.settings = settings;
      exports.util = util;
      exports.Tag = Tag$$1;
      exports.tag = tag$$1;
      exports.tag2 = tag2$$1;
      exports.mount = mount$$1;
      exports.mixin = mixin$$1;
      exports.update = update$$1;
      exports.unregister = unregister$$1;
      exports.observable = observable;
      exports['default'] = riot$1;
      Object.defineProperty(exports, '__esModule', { value: true })
    }))
  });
  // source: src/events.coffee
  rqzt.define('./events', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Change: 'daisho.change',
      ChangeSuccess: 'daisho.change.success',
      ChangeFailed: 'daisho.change.failed',
      Login: 'daisho.login',
      LoginSuccess: 'daisho.login.success',
      LoginFailed: 'daisho.login.failed'
    }
  });
  // source: src/templates/controls/checkbox.pug
  rqzt.define('./templates/controls/checkbox', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="checkbox" onchange="{ change }" onblur="{ change }" checked="{ input.ref(input.name) }"/>\n<yield></yield>'
  });
  // source: src/views/controls/password.coffee
  rqzt.define('./views/controls/password', function (module, exports, __dirname, __filename, process) {
    var Password, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    module.exports = Password = function (superClass) {
      extend(Password, superClass);
      function Password() {
        return Password.__super__.constructor.apply(this, arguments)
      }
      Password.prototype.tag = 'password-control';
      Password.prototype.type = 'password';
      return Password
    }(Text)
  });
  // source: src/views/controls/text.coffee
  rqzt.define('./views/controls/text', function (module, exports, __dirname, __filename, process) {
    var Control, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./views/controls/control');
    module.exports = Text = function (superClass) {
      extend(Text, superClass);
      function Text() {
        return Text.__super__.constructor.apply(this, arguments)
      }
      Text.prototype.tag = 'text-control';
      Text.prototype.html = rqzt('./templates/controls/text');
      Text.prototype.type = 'text';
      Text.prototype.formElement = 'input';
      Text.prototype.autoComplete = 'on';
      Text.prototype.init = function () {
        Text.__super__.init.apply(this, arguments);
        return this.on('updated', function (_this) {
          return function () {
            var el;
            return el = _this.root.getElementsByTagName(_this.formElement)[0]
          }
        }(this))
      };
      return Text
    }(Control)
  });
  // source: src/templates/controls/text.pug
  rqzt.define('./templates/controls/text', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="{ type }" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref(input.name) }" placeholder="{ placeholder }" autocomplete="{ autoComplete }"/>\n<yield></yield>'
  });
  // source: src/views/controls/select.coffee
  rqzt.define('./views/controls/select', function (module, exports, __dirname, __filename, process) {
    var Select, Text, coolDown, isABrokenBrowser, isObject, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    riot = rqzt('riot/riot');
    isObject = rqzt('is-object');
    isABrokenBrowser = window.navigator.userAgent.indexOf('MSIE') > 0 || window.navigator.userAgent.indexOf('Trident') > 0;
    coolDown = -1;
    module.exports = Select = function (superClass) {
      extend(Select, superClass);
      function Select() {
        return Select.__super__.constructor.apply(this, arguments)
      }
      Select.prototype.tag = 'select-control';
      Select.prototype.html = rqzt('./templates/controls/select');
      Select.prototype.tags = false;
      Select.prototype.min = 10;
      Select.prototype.selectOptions = {};
      Select.prototype.options = function () {
        return this.selectOptions
      };
      Select.prototype.readOnly = false;
      Select.prototype.ignore = false;
      Select.prototype.events = {
        updated: function () {
          return this.onUpdated()
        }
      };
      Select.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim().toLowerCase() : void 0
      };
      Select.prototype.change = function () {
        Select.__super__.change.apply(this, arguments);
        return riot.update()
      };
      Select.prototype.initSelect = function ($select) {
        var $input, invertedOptions, name, options, ref, select, value;
        options = [];
        invertedOptions = {};
        ref = this.options();
        for (value in ref) {
          name = ref[value];
          options.push({
            text: name,
            value: value
          });
          invertedOptions[name] = value
        }
        $select.selectize({ dropdownParent: 'body' }).on('change', function (_this) {
          return function (event) {
            if (coolDown !== -1) {
              return
            }
            coolDown = setTimeout(function () {
              return coolDown = -1
            }, 100);
            _this.change(event);
            event.preventDefault();
            event.stopPropagation();
            return false
          }
        }(this));
        select = $select[0];
        select.selectize.addOption(options);
        select.selectize.addItem([this.input.ref.get(this.input.name)] || [], true);
        select.selectize.refreshOptions(false);
        $input = $select.parent().find('.selectize-input input:first');
        $input.on('change', function (event) {
          var val;
          val = $(event.target).val();
          if (invertedOptions[val] != null) {
            return $select[0].selectize.setValue(invertedOptions[val])
          }
        });
        if (this.readOnly) {
          return $input.attr('readonly', true)
        }
      };
      Select.prototype.init = function (opts) {
        Select.__super__.init.apply(this, arguments);
        return this.style = this.style || 'width:100%'
      };
      Select.prototype.onUpdated = function () {
        var $control, $select, select, v;
        if (this.input == null) {
          return
        }
        $select = $(this.root).find('select');
        select = $select[0];
        if (select != null) {
          v = this.input.ref.get(this.input.name);
          if (!this.initialized) {
            return requestAnimationFrame(function (_this) {
              return function () {
                _this.initSelect($select);
                return _this.initialized = true
              }
            }(this))
          } else if (select.selectize != null && v !== select.selectize.getValue()) {
            select.selectize.clear(true);
            return select.selectize.addItem(v, true)
          }
        } else {
          $control = $(this.root).find('.selectize-control');
          if ($control[0] == null) {
            return requestAnimationFrame(function (_this) {
              return function () {
                return _this.update()
              }
            }(this))
          }
        }
      };
      return Select
    }(Text)
  });
  // source: src/templates/controls/select.pug
  rqzt.define('./templates/controls/select', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<select class="{invalid: errorMessage, valid: valid}" id="{ input.name }" style="{ style };" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/views/controls/select-country.coffee
  rqzt.define('./views/controls/select-country', function (module, exports, __dirname, __filename, process) {
    var Select, SelectCountry, countries, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./views/controls/select');
    countries = rqzt('./data/countries');
    module.exports = SelectCountry = function (superClass) {
      extend(SelectCountry, superClass);
      function SelectCountry() {
        return SelectCountry.__super__.constructor.apply(this, arguments)
      }
      SelectCountry.prototype.tag = 'select-country-control';
      SelectCountry.prototype.options = function () {
        return countries.data
      };
      SelectCountry.prototype.lookup = 'country';
      SelectCountry.prototype.init = function () {
        SelectCountry.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var country, k, ref, v;
            country = _this.input.ref.get(_this.lookup);
            if (country) {
              country = country.toLowerCase();
              if (country.length === 2) {
                return _this.input.ref.set(_this.lookup, country)
              } else {
                ref = countries.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === country) {
                    _this.input.ref.set(_this.lookup, k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      return SelectCountry
    }(Select)
  });
  // source: src/data/countries.coffee
  rqzt.define('./data/countries', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        af: 'Afghanistan',
        ax: 'Åland Islands',
        al: 'Albania',
        dz: 'Algeria',
        as: 'American Samoa',
        ad: 'Andorra',
        ao: 'Angola',
        ai: 'Anguilla',
        aq: 'Antarctica',
        ag: 'Antigua and Barbuda',
        ar: 'Argentina',
        am: 'Armenia',
        aw: 'Aruba',
        au: 'Australia',
        at: 'Austria',
        az: 'Azerbaijan',
        bs: 'Bahamas',
        bh: 'Bahrain',
        bd: 'Bangladesh',
        bb: 'Barbados',
        by: 'Belarus',
        be: 'Belgium',
        bz: 'Belize',
        bj: 'Benin',
        bm: 'Bermuda',
        bt: 'Bhutan',
        bo: 'Bolivia',
        bq: 'Bonaire, Sint Eustatius and Saba',
        ba: 'Bosnia and Herzegovina',
        bw: 'Botswana',
        bv: 'Bouvet Island',
        br: 'Brazil',
        io: 'British Indian Ocean Territory',
        bn: 'Brunei Darussalam',
        bg: 'Bulgaria',
        bf: 'Burkina Faso',
        bi: 'Burundi',
        kh: 'Cambodia',
        cm: 'Cameroon',
        ca: 'Canada',
        cv: 'Cabo Verde',
        ky: 'Cayman Islands',
        cf: 'Central African Republic',
        td: 'Chad',
        cl: 'Chile',
        cn: 'China',
        cx: 'Christmas Island',
        cc: 'Cocos (Keeling) Islands',
        co: 'Colombia',
        km: 'Comoros',
        cg: 'Congo',
        cd: 'Congo (Democratic Republic)',
        ck: 'Cook Islands',
        cr: 'Costa Rica',
        ci: "Côte d'Ivoire",
        hr: 'Croatia',
        cu: 'Cuba',
        cw: 'Curaçao',
        cy: 'Cyprus',
        cz: 'Czech Republic',
        dk: 'Denmark',
        dj: 'Djibouti',
        dm: 'Dominica',
        'do': 'Dominican Republic',
        ec: 'Ecuador',
        eg: 'Egypt',
        sv: 'El Salvador',
        gq: 'Equatorial Guinea',
        er: 'Eritrea',
        ee: 'Estonia',
        et: 'Ethiopia',
        fk: 'Falkland Islands',
        fo: 'Faroe Islands',
        fj: 'Fiji',
        fi: 'Finland',
        fr: 'France',
        gf: 'French Guiana',
        pf: 'French Polynesia',
        tf: 'French Southern Territories',
        ga: 'Gabon',
        gm: 'Gambia',
        ge: 'Georgia',
        de: 'Germany',
        gh: 'Ghana',
        gi: 'Gibraltar',
        gr: 'Greece',
        gl: 'Greenland',
        gd: 'Grenada',
        gp: 'Guadeloupe',
        gu: 'Guam',
        gt: 'Guatemala',
        gg: 'Guernsey',
        gn: 'Guinea',
        gw: 'Guinea-Bissau',
        gy: 'Guyana',
        ht: 'Haiti',
        hm: 'Heard Island and McDonald Islands',
        va: 'Holy See',
        hn: 'Honduras',
        hk: 'Hong Kong',
        hu: 'Hungary',
        is: 'Iceland',
        'in': 'India',
        id: 'Indonesia',
        ir: 'Iran',
        iq: 'Iraq',
        ie: 'Ireland',
        im: 'Isle of Man',
        il: 'Israel',
        it: 'Italy',
        jm: 'Jamaica',
        jp: 'Japan',
        je: 'Jersey',
        jo: 'Jordan',
        kz: 'Kazakhstan',
        ke: 'Kenya',
        ki: 'Kiribati',
        kp: "Korea (Democratic People's Republic of)",
        kr: 'Korea (Republic of)',
        kw: 'Kuwait',
        kg: 'Kyrgyzstan',
        la: "Lao People's Democratic Republic",
        lv: 'Latvia',
        lb: 'Lebanon',
        ls: 'Lesotho',
        lr: 'Liberia',
        ly: 'Libya',
        li: 'Liechtenstein',
        lt: 'Lithuania',
        lu: 'Luxembourg',
        mo: 'Macao',
        mk: 'Macedonia',
        mg: 'Madagascar',
        mw: 'Malawi',
        my: 'Malaysia',
        mv: 'Maldives',
        ml: 'Mali',
        mt: 'Malta',
        mh: 'Marshall Islands',
        mq: 'Martinique',
        mr: 'Mauritania',
        mu: 'Mauritius',
        yt: 'Mayotte',
        mx: 'Mexico',
        fm: 'Micronesia',
        md: 'Moldova',
        mc: 'Monaco',
        mn: 'Mongolia',
        me: 'Montenegro',
        ms: 'Montserrat',
        ma: 'Morocco',
        mz: 'Mozambique',
        mm: 'Myanmar',
        na: 'Namibia',
        nr: 'Nauru',
        np: 'Nepal',
        nl: 'Netherlands',
        nc: 'New Caledonia',
        nz: 'New Zealand',
        ni: 'Nicaragua',
        ne: 'Niger',
        ng: 'Nigeria',
        nu: 'Niue',
        nf: 'Norfolk Island',
        mp: 'Northern Mariana Islands',
        no: 'Norway',
        om: 'Oman',
        pk: 'Pakistan',
        pw: 'Palau',
        ps: 'Palestine',
        pa: 'Panama',
        pg: 'Papua New Guinea',
        py: 'Paraguay',
        pe: 'Peru',
        ph: 'Philippines',
        pn: 'Pitcairn',
        pl: 'Poland',
        pt: 'Portugal',
        pr: 'Puerto Rico',
        qa: 'Qatar',
        re: 'Réunion',
        ro: 'Romania',
        ru: 'Russian Federation',
        rw: 'Rwanda',
        bl: 'Saint Barthélemy',
        sh: 'Saint Helena, Ascension and Tristan da Cunha',
        kn: 'Saint Kitts and Nevis',
        lc: 'Saint Lucia',
        mf: 'Saint Martin (French)',
        pm: 'Saint Pierre and Miquelon',
        vc: 'Saint Vincent and the Grenadines',
        ws: 'Samoa',
        sm: 'San Marino',
        st: 'Sao Tome and Principe',
        sa: 'Saudi Arabia',
        sn: 'Senegal',
        rs: 'Serbia',
        sc: 'Seychelles',
        sl: 'Sierra Leone',
        sg: 'Singapore',
        sx: 'Sint Maarten (Dutch)',
        sk: 'Slovakia',
        si: 'Slovenia',
        sb: 'Solomon Islands',
        so: 'Somalia',
        za: 'South Africa',
        gs: 'South Georgia and the South Sandwich Islands',
        ss: 'South Sudan',
        es: 'Spain',
        lk: 'Sri Lanka',
        sd: 'Sudan',
        sr: 'Suriname',
        sj: 'Svalbard and Jan Mayen',
        sz: 'Swaziland',
        se: 'Sweden',
        ch: 'Switzerland',
        sy: 'Syrian Arab Republic',
        tw: 'Taiwan',
        tj: 'Tajikistan',
        tz: 'Tanzania',
        th: 'Thailand',
        tl: 'Timor-Leste',
        tg: 'Togo',
        tk: 'Tokelau',
        to: 'Tonga',
        tt: 'Trinidad and Tobago',
        tn: 'Tunisia',
        tr: 'Turkey',
        tm: 'Turkmenistan',
        tc: 'Turks and Caicos Islands',
        tv: 'Tuvalu',
        ug: 'Uganda',
        ua: 'Ukraine',
        ae: 'United Arab Emirates',
        gb: 'United Kingdom of Great Britain and Northern Ireland',
        us: 'United States of America',
        um: 'United States Minor Outlying Islands',
        uy: 'Uruguay',
        uz: 'Uzbekistan',
        vu: 'Vanuatu',
        ve: 'Venezuela',
        vn: 'Viet Nam',
        vg: 'Virgin Islands (British)',
        vi: 'Virgin Islands (U.S.)',
        wf: 'Wallis and Futuna',
        eh: 'Western Sahara',
        ye: 'Yemen',
        zm: 'Zambia',
        zw: 'Zimbabwe'
      }
    }
  });
  // source: src/views/controls/select-state.coffee
  rqzt.define('./views/controls/select-state', function (module, exports, __dirname, __filename, process) {
    var Select, SelectState, states, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./views/controls/select');
    states = rqzt('./data/states');
    module.exports = SelectState = function (superClass) {
      extend(SelectState, superClass);
      function SelectState() {
        return SelectState.__super__.constructor.apply(this, arguments)
      }
      SelectState.prototype.tag = 'select-state-control';
      SelectState.prototype.html = rqzt('./templates/controls/state-select');
      SelectState.prototype.options = function () {
        return states.data
      };
      SelectState.prototype.countryField = 'country';
      SelectState.prototype.lookup = 'state';
      SelectState.prototype.init = function () {
        SelectState.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var k, ref, state, v;
            if (_this.input == null) {
              return
            }
            state = _this.input.ref.get(_this.lookup);
            if (state) {
              state = state.toLowerCase();
              if (state.length === 2) {
                return _this.input.ref.set(_this.lookup, state)
              } else {
                ref = states.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === state) {
                    _this.input.ref.set(_this.lookup, k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      SelectState.prototype.onUpdated = function () {
        var value;
        if (this.input == null) {
          return
        }
        if (this.input.ref.get(this.countryField) === 'us') {
          $(this.root).find('.selectize-control').show()
        } else {
          $(this.root).find('.selectize-control').hide();
          value = this.input.ref.get(this.input.name);
          if (value) {
            this.input.ref.set(this.input.name, value.toUpperCase())
          }
        }
        return SelectState.__super__.onUpdated.apply(this, arguments)
      };
      return SelectState
    }(Select)
  });
  // source: src/data/states.coffee
  rqzt.define('./data/states', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        ak: 'Alaska',
        al: 'Alabama',
        ar: 'Arkansas',
        az: 'Arizona',
        ca: 'California',
        co: 'Colorado',
        ct: 'Connecticut',
        dc: 'District of Columbia',
        de: 'Delaware',
        fl: 'Florida',
        ga: 'Georgia',
        hi: 'Hawaii',
        ia: 'Iowa',
        id: 'Idaho',
        il: 'Illinois',
        'in': 'Indiana',
        ks: 'Kansas',
        ky: 'Kentucky',
        la: 'Louisiana',
        ma: 'Massachusetts',
        md: 'Maryland',
        me: 'Maine',
        mi: 'Michigan',
        mn: 'Minnesota',
        mo: 'Missouri',
        ms: 'Mississippi',
        mt: 'Montana',
        nc: 'North Carolina',
        nd: 'North Dakota',
        ne: 'Nebraska',
        nh: 'New Hampshire',
        nj: 'New Jersey',
        nm: 'New Mexico',
        nv: 'Nevada',
        ny: 'New York',
        oh: 'Ohio',
        ok: 'Oklahoma',
        or: 'Oregon',
        pa: 'Pennsylvania',
        ri: 'Rhode Island',
        sc: 'South Carolina',
        sd: 'South Dakota',
        tn: 'Tennessee',
        tx: 'Texas',
        ut: 'Utah',
        va: 'Virginia',
        vt: 'Vermont',
        wa: 'Washington',
        wi: 'Wisconsin',
        wv: 'West Virginia',
        wy: 'Wyoming',
        aa: 'U.S. Armed Forces – Americas',
        ae: 'U.S. Armed Forces – Europe',
        ap: 'U.S. Armed Forces – Pacific'
      }
    }
  });
  // source: src/templates/controls/state-select.pug
  rqzt.define('./templates/controls/state-select', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" if="{ input.ref(countryField) !== &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" type="text" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref(input.name) }" placeholder="{ placeholder }"/>\n<select class="{invalid: errorMessage, valid: valid}" if="{ input.ref(countryField) == &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" data-placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/views/controls/textarea.coffee
  rqzt.define('./views/controls/textarea', function (module, exports, __dirname, __filename, process) {
    var Text, TextArea, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./views/controls/text');
    module.exports = TextArea = function (superClass) {
      extend(TextArea, superClass);
      function TextArea() {
        return TextArea.__super__.constructor.apply(this, arguments)
      }
      TextArea.prototype.tag = 'textarea-control';
      TextArea.prototype.html = rqzt('./templates/controls/textarea');
      TextArea.prototype.formElement = 'textarea';
      return TextArea
    }(Text)
  });
  // source: src/templates/controls/textarea.pug
  rqzt.define('./templates/controls/textarea', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<textarea class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" rows="{ rows }" cols="{ cols }" type="text" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }">{ input.ref(input.name) }</textarea>\n<yield></yield>'
  });
  // source: src/views/list.coffee
  rqzt.define('./views/list', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, List, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = List = function (superClass) {
      extend(List, superClass);
      function List() {
        return List.__super__.constructor.apply(this, arguments)
      }
      List.prototype.tag = 'list';
      List.prototype.html = rqzt('./templates/list');
      List.prototype.init = function () {
        return List.__super__.init.apply(this, arguments)
      };
      return List
    }(CrowdControl.Views.View)
  });
  // source: src/templates/list.pug
  rqzt.define('./templates/list', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<list each="{ item, k in data.get(listField) }" data="{ this.parent.data.ref(listField + \'.\' + k) }">\n  <yield></yield>\n</list>'
  });
  // source: src/views/list-item.coffee
  rqzt.define('./views/list-item', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, List, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = List = function (superClass) {
      extend(List, superClass);
      function List() {
        return List.__super__.constructor.apply(this, arguments)
      }
      List.prototype.tag = 'list-item';
      List.prototype.html = rqzt('./templates/list-item');
      List.prototype.init = function () {
        return List.__super__.init.apply(this, arguments)
      };
      return List
    }(CrowdControl.Views.Form)
  });
  // source: src/templates/list-item.pug
  rqzt.define('./templates/list-item', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield></yield>'
  });
  // source: src/views/login.coffee
  rqzt.define('./views/login', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, Login, isEmail, isPassword, isRequired, m, ref, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./views/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, isPassword = ref.isPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = Login = function (superClass) {
      extend(Login, superClass);
      function Login() {
        return Login.__super__.constructor.apply(this, arguments)
      }
      Login.prototype.tag = 'login';
      Login.prototype.html = rqzt('./templates/login');
      Login.prototype.client = null;
      Login.prototype.configs = {
        'email': [
          isRequired,
          isEmail
        ],
        'password': [isPassword]
      };
      Login.prototype.error = null;
      Login.prototype.init = function () {
        return Login.__super__.init.apply(this, arguments)
      };
      Login.prototype._submit = function (event) {
        var opts;
        opts = {
          username: this.data.get('email'),
          password: this.data.get('password'),
          client_id: this.data.get('organization'),
          grant_type: 'password'
        };
        this.error = null;
        m.trigger(Events.Login);
        return this.client.oauth.auth(opts).then(function (_this) {
          return function (res) {
            m.trigger(Events.LoginSuccess, res);
            _this.data.set('password', '');
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.error = err.message;
            m.trigger(Events.LoginFailed, err);
            return _this.update()
          }
        }(this))
      };
      return Login
    }(CrowdControl.Views.Form)
  });
  // source: src/views/middleware/index.coffee
  rqzt.define('./views/middleware', function (module, exports, __dirname, __filename, process) {
    var emailRe, middleware;
    emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    middleware = {
      isRequired: function (value) {
        if (value && value !== '') {
          return value
        }
        throw new Error('Required')
      },
      isEmail: function (value) {
        if (!value) {
          return value
        }
        if (emailRe.test(value)) {
          return value.toLowerCase()
        }
        throw new Error('Enter a valid email')
      },
      isNewPassword: function (value) {
        if (!this.get('user.currentPassword')) {
          if (value) {
            throw new Error('Current password required')
          }
          return value
        }
        return middleware.isPassword(value)
      },
      isPassword: function (value) {
        if (!value) {
          throw new Error('Required')
        }
        if (value.length >= 6) {
          return value
        }
        throw new Error('Password must be atleast 6 characters long')
      },
      matchesPassword: function (value) {
        if (!this.get('user.password')) {
          return value
        }
        if (value === this.get('user.password')) {
          return value
        }
        throw new Error('Passwords must match')
      },
      splitName: function (value) {
        var firstName, lastName, parts;
        if (!value) {
          return value
        }
        parts = value.trim().split(' ');
        firstName = parts.shift();
        lastName = parts.join(' ');
        if (!lastName) {
          lastName = ' '
        }
        this.set('user.firstName', firstName);
        this.set('user.lastName', lastName);
        return value
      }
    };
    module.exports = middleware
  });
  // source: src/templates/login.pug
  rqzt.define('./templates/login', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<login>\n  <yield>\n    <text class="input" lookup="{ email }" placeholder="Email"></text>\n    <password class="input" lookup="{ password }" placeholder="Password"></password>\n    <div class="error message" if="{ error }">{ error }</div>\n  </yield>\n</login>'
  });
  // source: src/browser.coffee
  rqzt.define('./browser', function (module, exports, __dirname, __filename, process) {
    global.Referential = rqzt('./index')
  });
  rqzt('./browser')
}.call(this, this))//# sourceMappingURL=data:application/json;base64,